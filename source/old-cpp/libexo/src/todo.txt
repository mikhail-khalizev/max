Файлы должны быть понятными для восприятия. Стараться делать _fwd.hpp файлы.

Принципы.
* С появлением С++ язык С устарел => Используем С++11 для всех новых разработок.
* Для чтения/записи из файла следует использовать mmap, а не read с write. В случае SIGSEGV должно возникать исключение.

* Надо решать задачу в общем виде.
* Надо решать задачу самым оптимальным образом.



exo::using(lambda) // run on destruct

exo::integer
   фиксированной длины, с наполнением (при переполнении - прилипаем вверх или вниз)

exo::pcre
exo::bash
exo::win

exo::linux
?   get_user_name(id)
?   get_home_dir(id)

   get_real_user_id() // cached
   get_user_id() // effective. cached

   get_home_dir() // real_user (for suid bit). cached   getpwent_r

   get_pid() // cached. on fork update.
   get_ppid() // cached. on fork update
   get_pgrp() // cached.

? exo::system::environment
?   get_page_size() // sysconf(...)

exo::env
   get_conf_dir() // home + ".config/$prg_name_from_proc". cached
   get_conf_dir(prg_name) // home + ".config/$prg_name"
   // add ".cache/..."

exo::debug
   get_type_name(T) // demangle
   backtrace or stack_frames
   on_throw() // Force start on throw handler

exo::log
    state - для журнала
        virtual write
    state_string  - для журнала

exo::integrety # встраиваемые типы
    list_double<>
    list_single
    tree

exo::io
    ssl
    ring_buffer
    i_filter ?
    i_buffer ?

exo
	? make_service // demonize
	delegate // fast

exo::html
    memory_space_dyn escape_data(memory_space_dyn); // '<' -> '&lt;', etc

exo::library_control
    // dlsym etc.

exo::processor::x86
    simple_simulate - Режим для обычных программ написанных для Linux, Windows и т.п. Ограниченная симуляция процессора - убраны привелегированные инструкции, используется только виртуальная память без сегментов.
    full_simulate - Режим для dos программ и всех прочих. Полная симуляция работы процессора - сегменты, работа с виртуальной памятью и без неё, обработка прерываний.
    model
    bin_to_cxx
                plugin
                settings
                context

exo::unicode
    typedef u32 utc;

    // like memory_space
    utf8_space
    utf16le_space

    // like memory_space_dyn     may be utf8_string?
    utf8_space_dyn { memory_space_dyn }
    utf16le_space_dyn

exo::internatialization
    ru_RU.UTF8

exo::cmd
    find - эквивалент программы find.
    glob - поиск файлов по шаблону.

exo::memory
	ring_buffer ?

	void * allocate(size_t len);
	void * reallocate(void * ptr, size_t len_after_ptr, size_t len_before_ptr = 0);
	void free(void * ptr);

	// size_t get_size_of_allocated_region(void * ptr);
	// void * dublicate_allocated_region(void * ptr);
	// void * dublicate_allocated_region(void * ptr, size_t len_after_ptr, size_t len_before_ptr = 0);

	// valloc etc.
	
	copy
	move


bits_of


i_stringizable
i_comparable
i_equatable
i_hashable
