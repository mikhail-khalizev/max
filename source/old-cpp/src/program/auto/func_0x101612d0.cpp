FUNC_BEGIN(0x101612d0, 0xfabc4fe537091e33, 0x20, ({0x68, 0x64, 0, 0, 0, 0xe8, 0x78, 0x4a, 0, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x34, 0, 0, 0, 0x89, 0x45, 0xfc, 0x31, 0xc0, 0x8b, 0x55, 0xfc, 0x8a, 0x42, 0x26, 0x89, 0x45, 0xe4, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xcc, 0xe8, 0xee, 0x53, 0xf1, 0xff, 0x89, 0x45, 0xd0, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xd4, 0xe8, 0xdb, 0x53, 0xf1, 0xff, 0x89, 0x45, 0xd8, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0xe8, 0xf8, 0x4d, 0xf1, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd4, 0xe8, 0x2, 0x53, 0xf1, 0xff, 0x8d, 0x45, 0xd4, 0xe8, 0x3e, 0x52, 0xf1, 0xff, 0x66, 0x8b, 0x40, 0x1a, 0x89, 0x45, 0xf4, 0x8d, 0x45, 0xd4, 0xe8, 0x2f, 0x52, 0xf1, 0xff, 0x66, 0x8b, 0x40, 0x1c, 0x89, 0x45, 0xec, 0x8d, 0x45, 0xd4, 0xe8, 0x20, 0x52, 0xf1, 0xff, 0xf6, 0x40, 0x12, 0x10, 0x74, 0x10, 0xc7, 0x45, 0xf0, 0x13, 0, 0, 0, 0xc7, 0x45, 0xe8, 0xf, 0, 0, 0, 0xeb, 0xe, 0xc7, 0x45, 0xf0, 0x14, 0, 0, 0, 0xc7, 0x45, 0xe8, 0x10, 0, 0, 0, 0xe8, 0x7, 0x18, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x1c, 0x18, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xec, 0x50, 0xf, 0xbf, 0x45, 0xf4, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xe4, 0xf, 0xbf, 0x55, 0xf0, 0x8d, 0x45, 0xdc, 0xe8, 0x2d, 0x8f, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x75, 0x4b, 0xf1, 0xff, 0xe8, 0xc8, 0x17, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xdd, 0x17, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xec, 0x50, 0xf, 0xbf, 0x45, 0xf4, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xe4, 0xf, 0xbf, 0x55, 0xe8, 0x8d, 0x45, 0xe0, 0xe8, 0xee, 0x8e, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xcc, 0xe8, 0x22, 0x98, 0xf2, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x2c, 0x4b, 0xf1, 0xff, 0x8b, 0x55, 0xfc, 0x8d, 0x45, 0xcc, 0xe8, 0x69, 0x51, 0xf1, 0xff, 0xe8, 0x88, 0x95, 0xf2, 0xff, 0x8b, 0x45, 0xfc, 0xe8, 0xa5, 0xa2, 0xfe, 0xff, 0x8b, 0x45, 0xfc, 0xc6, 0x40, 0x3e, 0x5, 0x66, 0x83, 0x7d, 0xe8, 0xf, 0x75, 0x12, 0xbb, 0x22, 0, 0, 0, 0xba, 0x17, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x5e, 0x1b, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x1c, 0xf6, 0xfb, 0xff, 0x5, 0x8, 0, 0, 0, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xb7, 0x86, 0xfe, 0xff, 0xba, 0xbc, 0x37, 0x1c, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0x3b, 0x59, 0xf1, 0xff, 0x84, 0xc0, 0x74, 0x1b, 0xe8, 0x92, 0x17, 0xfa, 0xff, 0x31, 0xc9, 0x88, 0xc1, 0xbb, 0x8, 0, 0, 0, 0x8b, 0x55, 0xfc, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x44, 0xc1, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xa6, 0x4a, 0xf1, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x9c, 0x4a, 0xf1, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x101612d0, 0x5)   pushd(0x64);                          /* push dword 0x64 */
    II(0x101612d5, 0x5)   calld(sys_check_available_stack_size, 0x4a78); /* call 0x10165d52 */
    II(0x101612da, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x101612db, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x101612dc, 0x1)   pushd(edx);                           /* push edx */
    II(0x101612dd, 0x1)   pushd(esi);                           /* push esi */
    II(0x101612de, 0x1)   pushd(edi);                           /* push edi */
    II(0x101612df, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x101612e0, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x101612e2, 0x6)   sub(esp, 0x34);                       /* sub esp, 0x34 */
    II(0x101612e8, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x101612eb, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101612ed, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x101612f0, 0x3)   mov(al, memb_a32(ds, edx + 0x26));    /* mov al, [edx+0x26] */
    II(0x101612f3, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x101612f6, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x101612fa, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x101612fd, 0x5)   calld(my_ctor_0x101b38f8, -0xeac12);  /* call 0x100766f0 */
    II(0x10161302, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
    II(0x10161305, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x10161309, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1016130d, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10161310, 0x5)   calld(my_ctor_0x101b38f8, -0xeac25);  /* call 0x100766f0 */
    II(0x10161315, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x10161318, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1016131c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016131f, 0x5)   calld(0x1007611c, -0xeb208);          /* call 0x1007611c */
    II(0x10161324, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10161326, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10161329, 0x5)   calld(0x10076630, -0xeacfe);          /* call 0x10076630 */
    II(0x1016132e, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10161331, 0x5)   calld(0x10076574, -0xeadc2);          /* call 0x10076574 */
    II(0x10161336, 0x4)   mov(ax, memw_a32(ds, eax + 0x1a));    /* mov ax, [eax+0x1a] */
    II(0x1016133a, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x1016133d, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10161340, 0x5)   calld(0x10076574, -0xeadd1);          /* call 0x10076574 */
    II(0x10161345, 0x4)   mov(ax, memw_a32(ds, eax + 0x1c));    /* mov ax, [eax+0x1c] */
    II(0x10161349, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x1016134c, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1016134f, 0x5)   calld(0x10076574, -0xeade0);          /* call 0x10076574 */
    II(0x10161354, 0x4)   test(memb_a32(ds, eax + 0x12), 0x10); /* test byte [eax+0x12], 0x10 */
    II(0x10161358, 0x2)   jzd(0x1016136a, 0x10);                /* jz 0x1016136a */
    II(0x1016135a, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x13);  /* mov dword [ebp-0x10], 0x13 */
    II(0x10161361, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0xf);   /* mov dword [ebp-0x18], 0xf */
    II(0x10161368, 0x2)   jmpd(0x10161378, 0xe);                /* jmp 0x10161378 */
l_0x1016136a:
    II(0x1016136a, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x14);  /* mov dword [ebp-0x10], 0x14 */
    II(0x10161371, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0x10);  /* mov dword [ebp-0x18], 0x10 */
l_0x10161378:
    II(0x10161378, 0x5)   calld(0x10102b84, -0x5e7f9);          /* call 0x10102b84 */
    II(0x1016137d, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10161382, 0x1)   pushd(eax);                           /* push eax */
    II(0x10161383, 0x5)   calld(0x10102ba4, -0x5e7e4);          /* call 0x10102ba4 */
    II(0x10161388, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1016138d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1016138e, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10161390, 0x1)   pushd(eax);                           /* push eax */
    II(0x10161391, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x10161395, 0x1)   pushd(eax);                           /* push eax */
    II(0x10161396, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x1016139a, 0x1)   pushd(eax);                           /* push eax */
    II(0x1016139b, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x1016139d, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x1c)); /* movsx ebx, word [ebp-0x1c] */
    II(0x101613a1, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x101613a5, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x101613a8, 0x5)   calld(0x1015a2da, -0x70d3);           /* call 0x1015a2da */
    II(0x101613ad, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101613af, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x101613b2, 0x5)   calld(0x10075f2c, -0xeb48b);          /* call 0x10075f2c */
    II(0x101613b7, 0x5)   calld(0x10102b84, -0x5e838);          /* call 0x10102b84 */
    II(0x101613bc, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x101613c1, 0x1)   pushd(eax);                           /* push eax */
    II(0x101613c2, 0x5)   calld(0x10102ba4, -0x5e823);          /* call 0x10102ba4 */
    II(0x101613c7, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x101613cc, 0x1)   pushd(eax);                           /* push eax */
    II(0x101613cd, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101613cf, 0x1)   pushd(eax);                           /* push eax */
    II(0x101613d0, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x101613d4, 0x1)   pushd(eax);                           /* push eax */
    II(0x101613d5, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x101613d9, 0x1)   pushd(eax);                           /* push eax */
    II(0x101613da, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x101613dc, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x1c)); /* movsx ebx, word [ebp-0x1c] */
    II(0x101613e0, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x18)); /* movsx edx, word [ebp-0x18] */
    II(0x101613e4, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101613e7, 0x5)   calld(0x1015a2da, -0x7112);           /* call 0x1015a2da */
    II(0x101613ec, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x101613ee, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x101613f1, 0x5)   calld(0x1008ac18, -0xd67de);          /* call 0x1008ac18 */
    II(0x101613f6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101613f8, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101613fb, 0x5)   calld(0x10075f2c, -0xeb4d4);          /* call 0x10075f2c */
    II(0x10161400, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10161403, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x10161406, 0x5)   calld(0x10076574, -0xeae97);          /* call 0x10076574 */
    II(0x1016140b, 0x5)   calld(0x1008a998, -0xd6a78);          /* call 0x1008a998 */
    II(0x10161410, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10161413, 0x5)   calld(0x1014b6bd, -0x15d5b);          /* call 0x1014b6bd */
    II(0x10161418, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016141b, 0x4)   mov(memb_a32(ds, eax + 0x3e), 0x5);   /* mov byte [eax+0x3e], 0x5 */
    II(0x1016141f, 0x5)   cmp(memw_a32(ss, ebp - 0x18), 0xf);   /* cmp word [ebp-0x18], 0xf */
    II(0x10161424, 0x2)   jnzd(0x10161438, 0x12);               /* jnz 0x10161438 */
    II(0x10161426, 0x5)   mov(ebx, 0x22);                       /* mov ebx, 0x22 */
    II(0x1016142b, 0x5)   mov(edx, 0x17);                       /* mov edx, 0x17 */
    II(0x10161430, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10161433, 0x5)   calld(0x10162f96, 0x1b5e);            /* call 0x10162f96 */
l_0x10161438:
    II(0x10161438, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016143b, 0x5)   calld(0x10120a5c, -0x409e4);          /* call 0x10120a5c */
    II(0x10161440, 0x5)   add(eax, 0x8);                        /* add eax, 0x8 */
    II(0x10161445, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10161448, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016144b, 0x5)   calld(0x10149b07, -0x17949);          /* call 0x10149b07 */
    II(0x10161450, 0x5)   mov(edx, 0x101c37bc);                 /* mov edx, 0x101c37bc */
    II(0x10161455, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10161458, 0x5)   calld(0x10076d98, -0xea6c5);          /* call 0x10076d98 */
    II(0x1016145d, 0x2)   test(al, al);                         /* test al, al */
    II(0x1016145f, 0x2)   jzd(0x1016147c, 0x1b);                /* jz 0x1016147c */
    II(0x10161461, 0x5)   calld(0x10102bf8, -0x5e86e);          /* call 0x10102bf8 */
    II(0x10161466, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10161468, 0x2)   mov(cl, al);                          /* mov cl, al */
    II(0x1016146a, 0x5)   mov(ebx, 0x8);                        /* mov ebx, 0x8 */
    II(0x1016146f, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10161472, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x10161477, 0x5)   calld(0x1013d5c0, -0x23ebc);          /* call 0x1013d5c0 */
l_0x1016147c:
    II(0x1016147c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1016147e, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10161481, 0x5)   calld(0x10075f2c, -0xeb55a);          /* call 0x10075f2c */
    II(0x10161486, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10161488, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1016148b, 0x5)   calld(0x10075f2c, -0xeb564);          /* call 0x10075f2c */
    II(0x10161490, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10161492, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10161493, 0x1)   popd(edi);                            /* pop edi */
    II(0x10161494, 0x1)   popd(esi);                            /* pop esi */
    II(0x10161495, 0x1)   popd(edx);                            /* pop edx */
    II(0x10161496, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10161497, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10161498, 0x1)   retd();                               /* ret */
FUNC_END

