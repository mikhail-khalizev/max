FUNC_BEGIN(0x100a1341, 0x89df7bce74499f63, 0x20, ({0x68, 0x2c, 0, 0, 0, 0xe8, 0x7, 0x4a, 0xc, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xf0, 0xe8, 0x94, 0x51, 0xfd, 0xff, 0x89, 0x45, 0xf4, 0x80, 0x65, 0xf8, 0xfe, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x44, 0xe8, 0xf5, 0x99, 0x9, 0, 0x84, 0xc0, 0x74, 0x15, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x44, 0xe8, 0x75, 0x52, 0xfd, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0xe8, 0xc8, 0xfe, 0xff, 0xff, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x99, 0x4f, 0xfd, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x91, 0x50, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xbc, 0x99, 0x9, 0, 0x84, 0xc0, 0x74, 0xd, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x30, 0xc1, 0xf8, 0x10, 0x85, 0xc0, 0x7c, 0x2, 0xeb, 0x1c, 0x8d, 0x45, 0xf0, 0xe8, 0x38, 0x50, 0xfd, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0xe8, 0x83, 0xfe, 0xff, 0xff, 0x8d, 0x45, 0xf0, 0xe8, 0x16, 0x58, 0xfd, 0xff, 0xeb, 0xc7, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x7e, 0x4b, 0xfd, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100a1341, 0x5)   pushd(0x2c);                          /* push dword 0x2c */
    II(0x100a1346, 0x5)   calld(sys_check_available_stack_size, 0xc4a07); /* call 0x10165d52 */
    II(0x100a134b, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100a134c, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a134d, 0x1)   pushd(edx);                           /* push edx */
    II(0x100a134e, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a134f, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a1350, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a1351, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a1353, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x100a1359, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100a135c, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100a1360, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a1363, 0x5)   calld(0x100764fc, -0x2ae6c);          /* call 0x100764fc */
    II(0x100a1368, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a136b, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100a136f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1371, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a1374, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1377, 0x5)   calld(0x1013ad71, 0x999f5);           /* call 0x1013ad71 */
    II(0x100a137c, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a137e, 0x2)   jzd(0x100a1395, 0x15);                /* jz 0x100a1395 */
    II(0x100a1380, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a1383, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1386, 0x5)   calld(0x10076600, -0x2ad8b);          /* call 0x10076600 */
    II(0x100a138b, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a138d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a1390, 0x5)   calld(0x100a125d, -0x138);            /* call 0x100a125d */
l_0x100a1395:
    II(0x100a1395, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a139a, 0x5)   calld(0x10076338, -0x2b067);          /* call 0x10076338 */
    II(0x100a139f, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x100a13a2, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a13a4, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a13a6, 0x5)   calld(0x1007643c, -0x2af6f);          /* call 0x1007643c */
l_0x100a13ab:
    II(0x100a13ab, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a13ad, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a13b0, 0x5)   calld(0x1013ad71, 0x999bc);           /* call 0x1013ad71 */
    II(0x100a13b5, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a13b7, 0x2)   jzd(0x100a13c6, 0xd);                 /* jz 0x100a13c6 */
    II(0x100a13b9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a13bc, 0x3)   mov(eax, memd_a32(ds, eax + 0x30));   /* mov eax, [eax+0x30] */
    II(0x100a13bf, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100a13c2, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a13c4, 0x2)   jld(0x100a13c8, 0x2);                 /* jl 0x100a13c8 */
l_0x100a13c6:
    II(0x100a13c6, 0x2)   jmpd(0x100a13e4, 0x1c);               /* jmp 0x100a13e4 */
l_0x100a13c8:
    II(0x100a13c8, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a13cb, 0x5)   calld(0x10076408, -0x2afc8);          /* call 0x10076408 */
    II(0x100a13d0, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a13d2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a13d5, 0x5)   calld(0x100a125d, -0x17d);            /* call 0x100a125d */
    II(0x100a13da, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a13dd, 0x5)   calld(0x10076bf8, -0x2a7ea);          /* call 0x10076bf8 */
    II(0x100a13e2, 0x2)   jmpd(0x100a13ab, -0x39);              /* jmp 0x100a13ab */
l_0x100a13e4:
    II(0x100a13e4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a13e6, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a13e9, 0x5)   calld(0x10075f6c, -0x2b482);          /* call 0x10075f6c */
    II(0x100a13ee, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a13f0, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a13f1, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a13f2, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a13f3, 0x1)   popd(edx);                            /* pop edx */
    II(0x100a13f4, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a13f5, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100a13f6, 0x1)   retd();                               /* ret */
FUNC_END

