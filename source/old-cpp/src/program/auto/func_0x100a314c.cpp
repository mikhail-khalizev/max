FUNC_BEGIN(0x100a314c, 0xf94eae5617b5bba6, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0xfc, 0x2b, 0xc, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x66, 0xa1, 0x68, 0x39, 0x1c, 0x10, 0x89, 0x45, 0xec, 0x80, 0x4d, 0xfc, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x83, 0x33, 0xfd, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xfc, 0xfe, 0xa1, 0x64, 0x39, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x85, 0xc0, 0x75, 0x1c, 0x8b, 0x45, 0xec, 0x66, 0x2b, 0x5, 0xdc, 0x37, 0x1c, 0x10, 0x89, 0x45, 0xe8, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xc9, 0x2d, 0xfd, 0xff, 0xe9, 0xf, 0x1, 0, 0, 0xc7, 0x45, 0xf0, 0xe8, 0x3, 0, 0, 0xc7, 0x45, 0xf8, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0x45, 0xf8, 0x83, 0xf8, 0x4, 0xf, 0x8d, 0xd0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xf8, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8a, 0x80, 0x90, 0xa4, 0x1c, 0x10, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0xf, 0x84, 0xae, 0, 0, 0, 0xc7, 0x45, 0xdc, 0, 0, 0, 0, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x3f, 0x31, 0xfd, 0xff, 0x8d, 0x5d, 0xe0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x37, 0x32, 0xfd, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xe0, 0xe8, 0xe9, 0x39, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x58, 0x7b, 0x9, 0, 0x84, 0xc0, 0x74, 0x3e, 0x8d, 0x45, 0xe0, 0xe8, 0x7b, 0x31, 0xfd, 0xff, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0xf, 0xbf, 0x45, 0xf8, 0x39, 0xc2, 0x75, 0xf, 0x8d, 0x45, 0xe0, 0xe8, 0x66, 0x31, 0xfd, 0xff, 0x66, 0x83, 0x78, 0x8, 0x1e, 0x74, 0x2, 0xeb, 0xe, 0x8d, 0x45, 0xe0, 0xe8, 0x55, 0x31, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x7, 0x74, 0x2, 0xeb, 0x6, 0x8b, 0x45, 0xdc, 0xff, 0x45, 0xdc, 0xeb, 0xac, 0xf, 0xbf, 0x45, 0xdc, 0x85, 0xc0, 0x7e, 0x33, 0xf, 0xbf, 0x55, 0xf8, 0x69, 0xd2, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x45, 0xec, 0x2b, 0x82, 0x50, 0xa5, 0x1c, 0x10, 0x89, 0xc2, 0xf, 0xbf, 0x5d, 0xdc, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x66, 0x3b, 0x45, 0xf0, 0x7d, 0x6, 0x8b, 0x45, 0xf4, 0x89, 0x45, 0xf0, 0xe9, 0x1d, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xe8, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xc1, 0x2c, 0xfd, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xb5, 0x2c, 0xfd, 0xff, 0x8b, 0x45, 0xe8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100a314c, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x100a3151, 0x5)   calld(sys_check_available_stack_size, 0xc2bfc); /* call 0x10165d52 */
    II(0x100a3156, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100a3157, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a3158, 0x1)   pushd(edx);                           /* push edx */
    II(0x100a3159, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a315a, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a315b, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a315c, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a315e, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x100a3164, 0x6)   mov(ax, memw_a32(ds, 0x101c3968));    /* mov ax, [0x101c3968] */
    II(0x100a316a, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100a316d, 0x4)   or_(memb_a32(ss, ebp - 0x4), 0x1);    /* or byte [ebp-0x4], 0x1 */
    II(0x100a3171, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a3174, 0x5)   calld(0x100764fc, -0x2cc7d);          /* call 0x100764fc */
    II(0x100a3179, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100a317c, 0x4)   and_(memb_a32(ss, ebp - 0x4), -0x2 /* 0xfe */); /* and byte [ebp-0x4], 0xfe */
    II(0x100a3180, 0x5)   mov(eax, memd_a32(ds, 0x101c3964));   /* mov eax, [0x101c3964] */
    II(0x100a3185, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100a3188, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a318a, 0x2)   jnzd(0x100a31a8, 0x1c);               /* jnz 0x100a31a8 */
    II(0x100a318c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100a318f, 0x7)   sub(ax, memw_a32(ds, 0x101c37dc));    /* sub ax, [0x101c37dc] */
    II(0x100a3196, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100a3199, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a319b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a319e, 0x5)   calld(0x10075f6c, -0x2d237);          /* call 0x10075f6c */
    II(0x100a31a3, 0x5)   jmpd(0x100a32b7, 0x10f);              /* jmp 0x100a32b7 */
l_0x100a31a8:
    II(0x100a31a8, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3e8); /* mov dword [ebp-0x10], 0x3e8 */
    II(0x100a31af, 0x7)   mov(memd_a32(ss, ebp - 0x8), 0);      /* mov dword [ebp-0x8], 0x0 */
    II(0x100a31b6, 0x2)   jmpd(0x100a31be, 0x6);                /* jmp 0x100a31be */
l_0x100a31b8:
    II(0x100a31b8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100a31bb, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
l_0x100a31be:
    II(0x100a31be, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a31c2, 0x3)   cmp(eax, 0x4);                        /* cmp eax, 0x4 */
    II(0x100a31c5, 0x6)   jged(0x100a329b, 0xd0);               /* jge dword 0x100a329b */
    II(0x100a31cb, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a31cf, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100a31d5, 0x6)   mov(al, memb_a32(ds, eax + 0x101ca490)); /* mov al, [eax+0x101ca490] */
    II(0x100a31db, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a31e0, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a31e2, 0x6)   jzd(0x100a3296, 0xae);                /* jz dword 0x100a3296 */
    II(0x100a31e8, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0);     /* mov dword [ebp-0x24], 0x0 */
    II(0x100a31ef, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a31f4, 0x5)   calld(0x10076338, -0x2cec1);          /* call 0x10076338 */
    II(0x100a31f9, 0x3)   lea(ebx, ebp - 0x20);                 /* lea ebx, [ebp-0x20] */
    II(0x100a31fc, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a31fe, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a3200, 0x5)   calld(0x1007643c, -0x2cdc9);          /* call 0x1007643c */
    II(0x100a3205, 0x2)   jmpd(0x100a320f, 0x8);                /* jmp 0x100a320f */
l_0x100a3207:
    II(0x100a3207, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a320a, 0x5)   calld(0x10076bf8, -0x2c617);          /* call 0x10076bf8 */
l_0x100a320f:
    II(0x100a320f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a3211, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a3214, 0x5)   calld(0x1013ad71, 0x97b58);           /* call 0x1013ad71 */
    II(0x100a3219, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a321b, 0x2)   jzd(0x100a325b, 0x3e);                /* jz 0x100a325b */
    II(0x100a321d, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a3220, 0x5)   calld(0x100763a0, -0x2ce85);          /* call 0x100763a0 */
    II(0x100a3225, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a3227, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100a322a, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a322e, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100a3230, 0x2)   jnzd(0x100a3241, 0xf);                /* jnz 0x100a3241 */
    II(0x100a3232, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a3235, 0x5)   calld(0x100763a0, -0x2ce9a);          /* call 0x100763a0 */
    II(0x100a323a, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x1e);   /* cmp word [eax+0x8], 0x1e */
    II(0x100a323f, 0x2)   jzd(0x100a3243, 0x2);                 /* jz 0x100a3243 */
l_0x100a3241:
    II(0x100a3241, 0x2)   jmpd(0x100a3251, 0xe);                /* jmp 0x100a3251 */
l_0x100a3243:
    II(0x100a3243, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a3246, 0x5)   calld(0x100763a0, -0x2ceab);          /* call 0x100763a0 */
    II(0x100a324b, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x7);   /* cmp byte [eax+0x3d], 0x7 */
    II(0x100a324f, 0x2)   jzd(0x100a3253, 0x2);                 /* jz 0x100a3253 */
l_0x100a3251:
    II(0x100a3251, 0x2)   jmpd(0x100a3259, 0x6);                /* jmp 0x100a3259 */
l_0x100a3253:
    II(0x100a3253, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100a3256, 0x3)   inc(memd_a32(ss, ebp - 0x24));        /* inc dword [ebp-0x24] */
l_0x100a3259:
    II(0x100a3259, 0x2)   jmpd(0x100a3207, -0x54);              /* jmp 0x100a3207 */
l_0x100a325b:
    II(0x100a325b, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x24)); /* movsx eax, word [ebp-0x24] */
    II(0x100a325f, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a3261, 0x2)   jled(0x100a3296, 0x33);               /* jle 0x100a3296 */
    II(0x100a3263, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x100a3267, 0x6)   imul(edx, edx, 0x247);                /* imul edx, edx, 0x247 */
    II(0x100a326d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x100a3271, 0x6)   sub(eax, memd_a32(ds, edx + 0x101ca550)); /* sub eax, [edx+0x101ca550] */
    II(0x100a3277, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a3279, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x24)); /* movsx ebx, word [ebp-0x24] */
    II(0x100a327d, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x100a327f, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x100a3282, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x100a3284, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a3287, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a328a, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x10));    /* cmp ax, [ebp-0x10] */
    II(0x100a328e, 0x2)   jged(0x100a3296, 0x6);                /* jge 0x100a3296 */
    II(0x100a3290, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a3293, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
l_0x100a3296:
    II(0x100a3296, 0x5)   jmpd(0x100a31b8, -0xe3);              /* jmp 0x100a31b8 */
l_0x100a329b:
    II(0x100a329b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100a329e, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100a32a1, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a32a3, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a32a6, 0x5)   calld(0x10075f6c, -0x2d33f);          /* call 0x10075f6c */
    II(0x100a32ab, 0x2)   jmpd(0x100a32b7, 0xa);                /* jmp 0x100a32b7 */
//  II(0x100a32ad, 0xa)   /* Недостижимый код. */
l_0x100a32b7:
    II(0x100a32b7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100a32ba, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a32bc, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a32bd, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a32be, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a32bf, 0x1)   popd(edx);                            /* pop edx */
    II(0x100a32c0, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a32c1, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100a32c2, 0x1)   retd();                               /* ret */
FUNC_END

