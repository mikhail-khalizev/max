FUNC_BEGIN(0x100fff95, 0x3e47f216e7126240, 0x20, ({0x68, 0x80, 0, 0, 0, 0xe8, 0xb3, 0x5d, 0x6, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x58, 0, 0, 0, 0x89, 0x45, 0xf0, 0x88, 0x55, 0xfc, 0x89, 0x5d, 0xf4, 0x89, 0x4d, 0xf8, 0xf, 0xbe, 0x45, 0xfc, 0xe8, 0x7e, 0x88, 0xfe, 0xff, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xec, 0x66, 0x8b, 0x40, 0x8, 0x8b, 0x55, 0xec, 0x66, 0x2b, 0x2, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xec, 0x66, 0x8b, 0x40, 0xc, 0x8b, 0x55, 0xec, 0x66, 0x2b, 0x42, 0x4, 0x89, 0x45, 0xe4, 0x80, 0x7d, 0xfc, 0xd, 0x74, 0x26, 0x6a, 0x3c, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0xf, 0xbf, 0x45, 0xe8, 0x50, 0xf, 0xbf, 0x4d, 0xe4, 0x31, 0xdb, 0x8b, 0x45, 0xec, 0x8b, 0x50, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x16, 0xe8, 0x91, 0xa5, 0x6, 0, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0x10, 0x85, 0xc0, 0x74, 0x8, 0xf, 0xbf, 0x45, 0x14, 0x85, 0xc0, 0x75, 0x5, 0xe9, 0xca, 0x1, 0, 0, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0x10, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0xf8, 0xe8, 0x4d, 0x97, 0xf8, 0xff, 0x89, 0x45, 0xf8, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0x10, 0xc1, 0xf8, 0x2, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0xf8, 0x39, 0xc2, 0x7f, 0x18, 0xc7, 0x45, 0xe0, 0x1, 0, 0, 0, 0x66, 0x81, 0x7d, 0xf4, 0x76, 0x2, 0x75, 0x7, 0xc7, 0x45, 0xf4, 0x7a, 0x2, 0, 0, 0xeb, 0x31, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0x10, 0xd1, 0xf8, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0xf8, 0x39, 0xc2, 0x7f, 0x18, 0xc7, 0x45, 0xe0, 0x4, 0, 0, 0, 0x66, 0x81, 0x7d, 0xf4, 0x76, 0x2, 0x75, 0x7, 0xc7, 0x45, 0xf4, 0x78, 0x2, 0, 0, 0xeb, 0x7, 0xc7, 0x45, 0xe0, 0x2, 0, 0, 0, 0xb8, 0x2, 0, 0, 0, 0xe8, 0xac, 0xa1, 0x6, 0, 0xc7, 0x45, 0xdc, 0x19, 0, 0, 0, 0x66, 0x81, 0x7d, 0xf4, 0x80, 0x2, 0x74, 0x8, 0x66, 0x81, 0x7d, 0xf4, 0x82, 0x2, 0x75, 0x7, 0xc7, 0x45, 0xdc, 0x14, 0, 0, 0, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0x10, 0xf, 0xbf, 0x55, 0x14, 0x1, 0xc2, 0xf, 0xbf, 0x5d, 0x14, 0x4a, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0xf, 0xbf, 0x55, 0xdc, 0x39, 0xd0, 0x7e, 0x1b, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0x10, 0xf, 0xbf, 0x45, 0xdc, 0x1, 0xc2, 0xf, 0xbf, 0x5d, 0xdc, 0x4a, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x89, 0x45, 0x14, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0x10, 0x50, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0xf8, 0x50, 0xb8, 0x25, 0x2b, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0xa8, 0x50, 0xe8, 0xeb, 0x5d, 0x6, 0, 0x83, 0xc4, 0x10, 0xb8, 0x1, 0, 0, 0, 0x50, 0xb8, 0x1, 0, 0, 0, 0x50, 0x8b, 0x45, 0xe0, 0x50, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0xb8, 0x2d, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc9, 0x8d, 0x5d, 0xa8, 0x8b, 0x55, 0xec, 0x8b, 0x52, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x16, 0xe8, 0x95, 0x99, 0xfe, 0xff, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0xf8, 0xf, 0xbf, 0x45, 0x14, 0x1, 0xc2, 0xf, 0xbf, 0x5d, 0x14, 0x4a, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x89, 0x45, 0xf8, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0x10, 0xf, 0xbf, 0x45, 0x14, 0x1, 0xc2, 0xf, 0xbf, 0x5d, 0x14, 0x4a, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x89, 0x45, 0x10, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x68, 0xa2, 0, 0, 0, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0xb8, 0x1e, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xb9, 0x2d, 0, 0, 0, 0x8b, 0x5d, 0xf0, 0x8b, 0x55, 0xec, 0x8b, 0x52, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x16, 0xe8, 0x27, 0x99, 0xfe, 0xff, 0x83, 0x45, 0xe8, 0xb5, 0xf, 0xbf, 0x45, 0x10, 0x50, 0xf, 0xbf, 0x45, 0xf8, 0x50, 0xf, 0xbf, 0x45, 0xf4, 0x50, 0xf, 0xbf, 0x4d, 0xe4, 0xf, 0xbf, 0x5d, 0xe8, 0x8b, 0x55, 0xec, 0x8b, 0x52, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x16, 0x83, 0xc0, 0x4b, 0xe8, 0x72, 0xfb, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc2, 0x8, 0}))
    II(0x100fff95, 0x5)   pushd(0x80);                          /* push dword 0x80 */
    II(0x100fff9a, 0x5)   calld(sys_check_available_stack_size, 0x65db3); /* call 0x10165d52 */
    II(0x100fff9f, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fffa0, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fffa1, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fffa2, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fffa4, 0x6)   sub(esp, 0x58);                       /* sub esp, 0x58 */
    II(0x100fffaa, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100fffad, 0x3)   mov(memb_a32(ss, ebp - 0x4), dl);     /* mov [ebp-0x4], dl */
    II(0x100fffb0, 0x3)   mov(memd_a32(ss, ebp - 0xc), ebx);    /* mov [ebp-0xc], ebx */
    II(0x100fffb3, 0x3)   mov(memd_a32(ss, ebp - 0x8), ecx);    /* mov [ebp-0x8], ecx */
    II(0x100fffb6, 0x4)   movsx(eax, memb_a32(ss, ebp - 0x4));  /* movsx eax, byte [ebp-0x4] */
    II(0x100fffba, 0x5)   calld(0x100e883d, -0x17782);          /* call 0x100e883d */
    II(0x100fffbf, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
//    II(0x100fffc2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100fffc5, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100fffc9, 0x3)   mov(edx, memd_a32(ss, ebp - 0x14));   /* mov edx, [ebp-0x14] */
    II(0x100fffcc, 0x3)   sub(ax, memw_a32(ds, edx));           /* sub ax, [edx] */
    II(0x100fffcf, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100fffd2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100fffd5, 0x4)   mov(ax, memw_a32(ds, eax + 0xc));     /* mov ax, [eax+0xc] */
    II(0x100fffd9, 0x3)   mov(edx, memd_a32(ss, ebp - 0x14));   /* mov edx, [ebp-0x14] */
    II(0x100fffdc, 0x4)   sub(ax, memw_a32(ds, edx + 0x4));     /* sub ax, [edx+0x4] */
    II(0x100fffe0, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100fffe3, 0x4)   cmp(memb_a32(ss, ebp - 0x4), 0xd);    /* cmp byte [ebp-0x4], 0xd */
    II(0x100fffe7, 0x2)   jzd(0x1010000f, 0x26);                /* jz 0x1010000f */
    II(0x100fffe9, 0x2)   pushd(0x3c);                          /* push 0x3c */
    II(0x100fffeb, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x100fffef, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ffff0, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x100ffff4, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ffff5, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x1c)); /* movsx ecx, word [ebp-0x1c] */
    II(0x100ffff9, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100ffffb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100ffffe, 0x3)   mov(edx, memd_a32(ds, eax + 0xe));    /* mov edx, [eax+0xe] */
    II(0x10100001, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x10100004, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x10100007, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1010000a, 0x5)   calld(/* sys */ 0x1016a5a0, 0x6a591); /* call 0x1016a5a0 */
l_0x1010000f:
    II(0x1010000f, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10100011, 0x4)   mov(ax, memw_a32(ss, ebp + 0x10));    /* mov ax, [ebp+0x10] */
    II(0x10100015, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x10100017, 0x2)   jzd(0x10100021, 0x8);                 /* jz 0x10100021 */
    II(0x10100019, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x14)); /* movsx eax, word [ebp+0x14] */
    II(0x1010001d, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1010001f, 0x2)   jnzd(0x10100026, 0x5);                /* jnz 0x10100026 */
l_0x10100021:
    II(0x10100021, 0x5)   jmpd(0x101001f0, 0x1ca);              /* jmp 0x101001f0 */
l_0x10100026:
    II(0x10100026, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10100028, 0x4)   mov(dx, memw_a32(ss, ebp + 0x10));    /* mov dx, [ebp+0x10] */
    II(0x1010002c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1010002e, 0x4)   mov(ax, memw_a32(ss, ebp - 0x8));     /* mov ax, [ebp-0x8] */
    II(0x10100032, 0x5)   calld(my_min, -0x768b3);              /* call 0x10089784 */
    II(0x10100037, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1010003a, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1010003c, 0x4)   mov(ax, memw_a32(ss, ebp + 0x10));    /* mov ax, [ebp+0x10] */
    II(0x10100040, 0x3)   sar(eax, 0x2);                        /* sar eax, 0x2 */
    II(0x10100043, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10100045, 0x4)   mov(dx, memw_a32(ss, ebp - 0x8));     /* mov dx, [ebp-0x8] */
    II(0x10100049, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1010004b, 0x2)   jgd(0x10100065, 0x18);                /* jg 0x10100065 */
    II(0x1010004d, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x1);   /* mov dword [ebp-0x20], 0x1 */
    II(0x10100054, 0x6)   cmp(memw_a32(ss, ebp - 0xc), 0x276);  /* cmp word [ebp-0xc], 0x276 */
    II(0x1010005a, 0x2)   jnzd(0x10100063, 0x7);                /* jnz 0x10100063 */
    II(0x1010005c, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x27a);  /* mov dword [ebp-0xc], 0x27a */
l_0x10100063:
    II(0x10100063, 0x2)   jmpd(0x10100096, 0x31);               /* jmp 0x10100096 */
l_0x10100065:
    II(0x10100065, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10100067, 0x4)   mov(ax, memw_a32(ss, ebp + 0x10));    /* mov ax, [ebp+0x10] */
    II(0x1010006b, 0x2)   sar(eax, 0x1);                        /* sar eax, 1 */
    II(0x1010006d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1010006f, 0x4)   mov(dx, memw_a32(ss, ebp - 0x8));     /* mov dx, [ebp-0x8] */
    II(0x10100073, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x10100075, 0x2)   jgd(0x1010008f, 0x18);                /* jg 0x1010008f */
    II(0x10100077, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x4);   /* mov dword [ebp-0x20], 0x4 */
    II(0x1010007e, 0x6)   cmp(memw_a32(ss, ebp - 0xc), 0x276);  /* cmp word [ebp-0xc], 0x276 */
    II(0x10100084, 0x2)   jnzd(0x1010008d, 0x7);                /* jnz 0x1010008d */
    II(0x10100086, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x278);  /* mov dword [ebp-0xc], 0x278 */
l_0x1010008d:
    II(0x1010008d, 0x2)   jmpd(0x10100096, 0x7);                /* jmp 0x10100096 */
l_0x1010008f:
    II(0x1010008f, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x2);   /* mov dword [ebp-0x20], 0x2 */
l_0x10100096:
    II(0x10100096, 0x5)   mov(eax, 0x2);                        /* mov eax, 0x2 */
    II(0x1010009b, 0x5)   calld(/* sys */ 0x1016a24c, 0x6a1ac); /* call 0x1016a24c */
    II(0x101000a0, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0x19);  /* mov dword [ebp-0x24], 0x19 */
    II(0x101000a7, 0x6)   cmp(memw_a32(ss, ebp - 0xc), 0x280);  /* cmp word [ebp-0xc], 0x280 */
    II(0x101000ad, 0x2)   jzd(0x101000b7, 0x8);                 /* jz 0x101000b7 */
    II(0x101000af, 0x6)   cmp(memw_a32(ss, ebp - 0xc), 0x282);  /* cmp word [ebp-0xc], 0x282 */
    II(0x101000b5, 0x2)   jnzd(0x101000be, 0x7);                /* jnz 0x101000be */
l_0x101000b7:
    II(0x101000b7, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0x14);  /* mov dword [ebp-0x24], 0x14 */
l_0x101000be:
    II(0x101000be, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101000c0, 0x4)   mov(ax, memw_a32(ss, ebp + 0x10));    /* mov ax, [ebp+0x10] */
    II(0x101000c4, 0x4)   movsx(edx, memw_a32(ss, ebp + 0x14)); /* movsx edx, word [ebp+0x14] */
    II(0x101000c8, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x101000ca, 0x4)   movsx(ebx, memw_a32(ss, ebp + 0x14)); /* movsx ebx, word [ebp+0x14] */
    II(0x101000ce, 0x1)   dec(edx);                             /* dec edx */
    II(0x101000cf, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x101000d1, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x101000d4, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x101000d6, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x24)); /* movsx edx, word [ebp-0x24] */
    II(0x101000da, 0x2)   cmp(eax, edx);                        /* cmp eax, edx */
    II(0x101000dc, 0x2)   jled(0x101000f9, 0x1b);               /* jle 0x101000f9 */
    II(0x101000de, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101000e0, 0x4)   mov(dx, memw_a32(ss, ebp + 0x10));    /* mov dx, [ebp+0x10] */
    II(0x101000e4, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x24)); /* movsx eax, word [ebp-0x24] */
    II(0x101000e8, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x101000ea, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x24)); /* movsx ebx, word [ebp-0x24] */
    II(0x101000ee, 0x1)   dec(edx);                             /* dec edx */
    II(0x101000ef, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x101000f1, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x101000f4, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x101000f6, 0x3)   mov(memd_a32(ss, ebp + 0x14), eax);   /* mov [ebp+0x14], eax */
l_0x101000f9:
    II(0x101000f9, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101000fb, 0x4)   mov(ax, memw_a32(ss, ebp + 0x10));    /* mov ax, [ebp+0x10] */
    II(0x101000ff, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100100, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10100102, 0x4)   mov(ax, memw_a32(ss, ebp - 0x8));     /* mov ax, [ebp-0x8] */
    II(0x10100106, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100107, 0x5)   mov(eax, 0x101a2b25);                 /* mov eax, 0x101a2b25 */ /* "%i/%i" */
    II(0x1010010c, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010010d, 0x3)   lea(eax, ebp - 0x58);                 /* lea eax, [ebp-0x58] */
    II(0x10100110, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100111, 0x5)   calld(sys_sprintf, 0x65deb);          /* call 0x10165f01 */
    II(0x10100116, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x10100119, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x1010011e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010011f, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x10100124, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100125, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x10100128, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100129, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x1010012d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010012e, 0x5)   mov(eax, 0x2d);                       /* mov eax, 0x2d */
    II(0x10100133, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100134, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10100136, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100137, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10100139, 0x3)   lea(ebx, ebp - 0x58);                 /* lea ebx, [ebp-0x58] */
    II(0x1010013c, 0x3)   mov(edx, memd_a32(ss, ebp - 0x14));   /* mov edx, [ebp-0x14] */
    II(0x1010013f, 0x3)   mov(edx, memd_a32(ds, edx + 0xe));    /* mov edx, [edx+0xe] */
    II(0x10100142, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x10100145, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x10100148, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1010014b, 0x5)   calld(0x100e9ae5, -0x1666b);          /* call 0x100e9ae5 */
    II(0x10100150, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10100152, 0x4)   mov(dx, memw_a32(ss, ebp - 0x8));     /* mov dx, [ebp-0x8] */
    II(0x10100156, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x14)); /* movsx eax, word [ebp+0x14] */
    II(0x1010015a, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x1010015c, 0x4)   movsx(ebx, memw_a32(ss, ebp + 0x14)); /* movsx ebx, word [ebp+0x14] */
    II(0x10100160, 0x1)   dec(edx);                             /* dec edx */
    II(0x10100161, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x10100163, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x10100166, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x10100168, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1010016b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1010016d, 0x4)   mov(dx, memw_a32(ss, ebp + 0x10));    /* mov dx, [ebp+0x10] */
    II(0x10100171, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x14)); /* movsx eax, word [ebp+0x14] */
    II(0x10100175, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10100177, 0x4)   movsx(ebx, memw_a32(ss, ebp + 0x14)); /* movsx ebx, word [ebp+0x14] */
    II(0x1010017b, 0x1)   dec(edx);                             /* dec edx */
    II(0x1010017c, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x1010017e, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x10100181, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x10100183, 0x3)   mov(memd_a32(ss, ebp + 0x10), eax);   /* mov [ebp+0x10], eax */
    II(0x10100186, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x1010018b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010018c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1010018e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010018f, 0x5)   pushd(0xa2);                          /* push dword 0xa2 */
    II(0x10100194, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x10100198, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100199, 0x5)   mov(eax, 0x1e);                       /* mov eax, 0x1e */
    II(0x1010019e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010019f, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101001a1, 0x1)   pushd(eax);                           /* push eax */
    II(0x101001a2, 0x5)   mov(ecx, 0x2d);                       /* mov ecx, 0x2d */
    II(0x101001a7, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x10));   /* mov ebx, [ebp-0x10] */
    II(0x101001aa, 0x3)   mov(edx, memd_a32(ss, ebp - 0x14));   /* mov edx, [ebp-0x14] */
    II(0x101001ad, 0x3)   mov(edx, memd_a32(ds, edx + 0xe));    /* mov edx, [edx+0xe] */
    II(0x101001b0, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x101001b3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x101001b6, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x101001b9, 0x5)   calld(0x100e9ae5, -0x166d9);          /* call 0x100e9ae5 */
    II(0x101001be, 0x4)   add(memd_a32(ss, ebp - 0x18), -0x4b /* 0xb5 */); /* add dword [ebp-0x18], 0xb5 */
    II(0x101001c2, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x10)); /* movsx eax, word [ebp+0x10] */
    II(0x101001c6, 0x1)   pushd(eax);                           /* push eax */
    II(0x101001c7, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x101001cb, 0x1)   pushd(eax);                           /* push eax */
    II(0x101001cc, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x101001d0, 0x1)   pushd(eax);                           /* push eax */
    II(0x101001d1, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x1c)); /* movsx ecx, word [ebp-0x1c] */
    II(0x101001d5, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x18)); /* movsx ebx, word [ebp-0x18] */
    II(0x101001d9, 0x3)   mov(edx, memd_a32(ss, ebp - 0x14));   /* mov edx, [ebp-0x14] */
    II(0x101001dc, 0x3)   mov(edx, memd_a32(ds, edx + 0xe));    /* mov edx, [edx+0xe] */
    II(0x101001df, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x101001e2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x101001e5, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x101001e8, 0x3)   add(eax, 0x4b);                       /* add eax, 0x4b */
    II(0x101001eb, 0x5)   calld(0x100ffd62, -0x48e);            /* call 0x100ffd62 */
l_0x101001f0:
    II(0x101001f0, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101001f2, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101001f3, 0x1)   popd(edi);                            /* pop edi */
    II(0x101001f4, 0x1)   popd(esi);                            /* pop esi */
    II(0x101001f5, 0x3)   retd(0x8);                            /* ret 0x8 */
FUNC_END

