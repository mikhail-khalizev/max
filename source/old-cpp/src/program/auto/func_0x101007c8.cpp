FUNC_BEGIN(0x101007c8, 0xd17823d3880b8136, 0x20, ({0x68, 0x44, 0, 0, 0, 0xe8, 0x80, 0x55, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0xe8, 0x51, 0x5a, 0xf7, 0xff, 0x8d, 0x5d, 0xec, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x9, 0x60, 0xf7, 0xff, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xf0, 0xe8, 0xe5, 0x12, 0x4, 0, 0x89, 0x45, 0xf4, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x1a, 0x75, 0x10, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x26, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x4, 0x75, 0x2, 0xeb, 0x48, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x58, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x1, 0x75, 0xf, 0xba, 0x74, 0x2b, 0x1a, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0x89, 0x19, 0x4, 0, 0xeb, 0x24, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x58, 0x25, 0xff, 0, 0, 0, 0x50, 0xb8, 0x85, 0x2b, 0x1a, 0x10, 0x50, 0xb8, 0x19, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0xd2, 0x17, 0x4, 0, 0x83, 0xc4, 0x10, 0xe9, 0x9f, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x3a, 0xc1, 0xfa, 0x18, 0xc1, 0xe2, 0x2, 0x8b, 0x92, 0x78, 0x89, 0x1b, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0x44, 0x19, 0x4, 0, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0, 0x74, 0x9, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x2, 0x75, 0x13, 0x8b, 0x45, 0xfc, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x39, 0xc2, 0x74, 0x2, 0xeb, 0x5e, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x5c, 0, 0x74, 0xd, 0xba, 0x98, 0x2b, 0x1a, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0x7, 0x19, 0x4, 0, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x5b, 0, 0x74, 0xd, 0xba, 0xa2, 0x2b, 0x1a, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0xf1, 0x18, 0x4, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x6a, 0xa1, 0xf8, 0xff, 0x3c, 0x2, 0x75, 0xd, 0xba, 0xb4, 0x2b, 0x1a, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0xd8, 0x18, 0x4, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x51, 0xa1, 0xf8, 0xff, 0x3c, 0x1, 0x75, 0xd, 0xba, 0xc2, 0x2b, 0x1a, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0xbf, 0x18, 0x4, 0, 0x8d, 0x55, 0xf0, 0x8d, 0x45, 0xe8, 0xe8, 0x8f, 0x11, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x9, 0x12, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xc1, 0x55, 0xf7, 0xff, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xf3, 0x11, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xab, 0x55, 0xf7, 0xff, 0x8b, 0x45, 0xe8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x101007c8, 0x5)   pushd(0x44);                          /* push dword 0x44 */
    II(0x101007cd, 0x5)   calld(sys_check_available_stack_size, 0x65580); /* call 0x10165d52 */
    II(0x101007d2, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x101007d3, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x101007d4, 0x1)   pushd(edx);                           /* push edx */
    II(0x101007d5, 0x1)   pushd(esi);                           /* push esi */
    II(0x101007d6, 0x1)   pushd(edi);                           /* push edi */
    II(0x101007d7, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x101007d8, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x101007da, 0x6)   sub(esp, 0x18);                       /* sub esp, 0x18 */
    II(0x101007e0, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x101007e3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101007e6, 0x5)   calld(0x1007623c, -0x8a5af);          /* call 0x1007623c */
    II(0x101007eb, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x101007ee, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x101007f0, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x101007f2, 0x5)   calld(0x10076800, -0x89ff7);          /* call 0x10076800 */
    II(0x101007f7, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x101007fb, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x101007fe, 0x5)   calld(my_string_ctor, 0x412e5);       /* call 0x10141ae8 */
    II(0x10100803, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10100806, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1010080a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1010080d, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1a);  /* cmp byte [eax+0x3d], 0x1a */
    II(0x10100811, 0x2)   jnzd(0x10100823, 0x10);               /* jnz 0x10100823 */
    II(0x10100813, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10100816, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x10100819, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1010081e, 0x3)   cmp(eax, 0x4);                        /* cmp eax, 0x4 */
    II(0x10100821, 0x2)   jnzd(0x10100825, 0x2);                /* jnz 0x10100825 */
l_0x10100823:
    II(0x10100823, 0x2)   jmpd(0x1010086d, 0x48);               /* jmp 0x1010086d */
l_0x10100825:
    II(0x10100825, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10100828, 0x3)   mov(al, memb_a32(ds, eax + 0x58));    /* mov al, [eax+0x58] */
    II(0x1010082b, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10100830, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x10100833, 0x2)   jnzd(0x10100844, 0xf);                /* jnz 0x10100844 */
    II(0x10100835, 0x5)   mov(edx, 0x101a2b74);                 /* mov edx, 0x101a2b74 */ /* "Disabled 1 turn." */
    II(0x1010083a, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1010083d, 0x5)   calld(0x101421cb, 0x41989);           /* call 0x101421cb */
    II(0x10100842, 0x2)   jmpd(0x10100868, 0x24);               /* jmp 0x10100868 */
l_0x10100844:
    II(0x10100844, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10100847, 0x3)   mov(al, memb_a32(ds, eax + 0x58));    /* mov al, [eax+0x58] */
    II(0x1010084a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1010084f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100850, 0x5)   mov(eax, 0x101a2b85);                 /* mov eax, 0x101a2b85 */ /* "Disabled %i turns." */
    II(0x10100855, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100856, 0x5)   mov(eax, 0x19);                       /* mov eax, 0x19 */
    II(0x1010085b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010085c, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1010085f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10100860, 0x5)   calld(0x10142037, 0x417d2);           /* call 0x10142037 */
    II(0x10100865, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
l_0x10100868:
    II(0x10100868, 0x5)   jmpd(0x1010090c, 0x9f);               /* jmp 0x1010090c */
l_0x1010086d:
    II(0x1010086d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10100870, 0x3)   mov(edx, memd_a32(ds, eax + 0x3a));   /* mov edx, [eax+0x3a] */
    II(0x10100873, 0x3)   sar(edx, 0x18);                       /* sar edx, 0x18 */
    II(0x10100876, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x10100879, 0x6)   mov(edx, memd_a32(ds, edx + 0x101b8978)); /* mov edx, [edx+0x101b8978] */
    II(0x1010087f, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10100882, 0x5)   calld(0x101421cb, 0x41944);           /* call 0x101421cb */
    II(0x10100887, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1010088a, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0);     /* cmp byte [eax+0x3d], 0x0 */
    II(0x1010088e, 0x2)   jzd(0x10100899, 0x9);                 /* jz 0x10100899 */
    II(0x10100890, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10100893, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x2);   /* cmp byte [eax+0x3d], 0x2 */
    II(0x10100897, 0x2)   jnzd(0x101008ac, 0x13);               /* jnz 0x101008ac */
l_0x10100899:
    II(0x10100899, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1010089c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1010089e, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x101008a1, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101008a3, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x101008a8, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x101008aa, 0x2)   jzd(0x101008ae, 0x2);                 /* jz 0x101008ae */
l_0x101008ac:
    II(0x101008ac, 0x2)   jmpd(0x1010090c, 0x5e);               /* jmp 0x1010090c */
l_0x101008ae:
    II(0x101008ae, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101008b1, 0x4)   cmp(memb_a32(ds, eax + 0x5c), 0);     /* cmp byte [eax+0x5c], 0x0 */
    II(0x101008b5, 0x2)   jzd(0x101008c4, 0xd);                 /* jz 0x101008c4 */
    II(0x101008b7, 0x5)   mov(edx, 0x101a2b98);                 /* mov edx, 0x101a2b98 */ /* "Surveying" */
    II(0x101008bc, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x101008bf, 0x5)   calld(0x101421cb, 0x41907);           /* call 0x101421cb */
l_0x101008c4:
    II(0x101008c4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101008c7, 0x4)   cmp(memb_a32(ds, eax + 0x5b), 0);     /* cmp byte [eax+0x5b], 0x0 */
    II(0x101008cb, 0x2)   jzd(0x101008da, 0xd);                 /* jz 0x101008da */
    II(0x101008cd, 0x5)   mov(edx, 0x101a2ba2);                 /* mov edx, 0x101a2ba2 */ /* "Reaction Fire Off" */
    II(0x101008d2, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x101008d5, 0x5)   calld(0x101421cb, 0x418f1);           /* call 0x101421cb */
l_0x101008da:
    II(0x101008da, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101008dd, 0x5)   calld(0x1008aa4c, -0x75e96);          /* call 0x1008aa4c */
    II(0x101008e2, 0x2)   cmp(al, 0x2);                         /* cmp al, 0x2 */
    II(0x101008e4, 0x2)   jnzd(0x101008f3, 0xd);                /* jnz 0x101008f3 */
    II(0x101008e6, 0x5)   mov(edx, 0x101a2bb4);                 /* mov edx, 0x101a2bb4 */ /* "Placing mines" */
    II(0x101008eb, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x101008ee, 0x5)   calld(0x101421cb, 0x418d8);           /* call 0x101421cb */
l_0x101008f3:
    II(0x101008f3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101008f6, 0x5)   calld(0x1008aa4c, -0x75eaf);          /* call 0x1008aa4c */
    II(0x101008fb, 0x2)   cmp(al, 0x1);                         /* cmp al, 0x1 */
    II(0x101008fd, 0x2)   jnzd(0x1010090c, 0xd);                /* jnz 0x1010090c */
    II(0x101008ff, 0x5)   mov(edx, 0x101a2bc2);                 /* mov edx, 0x101a2bc2 */ /* "Removing mines" */
    II(0x10100904, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10100907, 0x5)   calld(0x101421cb, 0x418bf);           /* call 0x101421cb */
l_0x1010090c:
    II(0x1010090c, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x1010090f, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10100912, 0x5)   calld(my_string_ctor_string, 0x4118f); /* call 0x10141aa6 */
    II(0x10100917, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10100919, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1010091c, 0x5)   calld(my_string_dtor, 0x41209);       /* call 0x10141b2a */
    II(0x10100921, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10100923, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10100926, 0x5)   calld(0x10075eec, -0x8aa3f);          /* call 0x10075eec */
    II(0x1010092b, 0x2)   jmpd(0x10100941, 0x14);               /* jmp 0x10100941 */
//  II(0x1010092d, 0x14)  /* Недостижимый код. */
l_0x10100941:
    II(0x10100941, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x10100944, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10100946, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10100947, 0x1)   popd(edi);                            /* pop edi */
    II(0x10100948, 0x1)   popd(esi);                            /* pop esi */
    II(0x10100949, 0x1)   popd(edx);                            /* pop edx */
    II(0x1010094a, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1010094b, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1010094c, 0x1)   retd();                               /* ret */
FUNC_END

