FUNC_BEGIN(0x1014710b, 0x67971022603f115a, 0x20, ({0x68, 0x48, 0, 0, 0, 0xe8, 0x3d, 0xec, 0x1, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x28, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0xb4, 0xa9, 0xff, 0xff, 0x89, 0x45, 0xf0, 0x80, 0x65, 0xf4, 0xfe, 0x8b, 0x45, 0xf8, 0xe8, 0x9f, 0xf7, 0xff, 0xff, 0x84, 0xc0, 0x75, 0x19, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xf3, 0xd, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xcf, 0xa9, 0xff, 0xff, 0xe9, 0x87, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x83, 0x78, 0x1c, 0x7d, 0x74, 0x9, 0x8b, 0x45, 0xf8, 0x83, 0x78, 0x1c, 0x3e, 0x75, 0x19, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xc8, 0xd, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xa4, 0xa9, 0xff, 0xff, 0xe9, 0x5c, 0x1, 0, 0, 0x8d, 0x55, 0xec, 0x8b, 0x45, 0xf8, 0xe8, 0xa2, 0xf9, 0xff, 0xff, 0x84, 0xc0, 0x75, 0x19, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xa0, 0xd, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x7c, 0xa9, 0xff, 0xff, 0xe9, 0x34, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0x27, 0xf7, 0xff, 0xff, 0x84, 0xc0, 0x75, 0x19, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0x7b, 0xd, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x57, 0xa9, 0xff, 0xff, 0xe9, 0xf, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x1c, 0x89, 0x45, 0xe8, 0xe9, 0xaf, 0, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0x34, 0xf5, 0xff, 0xff, 0xb8, 0x28, 0, 0, 0, 0xe8, 0x8, 0xec, 0x1, 0, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xe4, 0x89, 0x45, 0xe0, 0x83, 0x7d, 0xe0, 0, 0x74, 0x25, 0x8b, 0x45, 0xf8, 0x50, 0xb9, 0x7d, 0, 0, 0, 0x8b, 0x5d, 0xf8, 0x83, 0xc3, 0x12, 0x8d, 0x55, 0xec, 0x8b, 0x45, 0xe4, 0xe8, 0x4a, 0xe8, 0xff, 0xff, 0x89, 0x45, 0xdc, 0x8b, 0x45, 0xdc, 0x89, 0x45, 0xd8, 0xeb, 0x6, 0x8b, 0x45, 0xe0, 0x89, 0x45, 0xd8, 0x8b, 0x55, 0xd8, 0x8b, 0x45, 0xfc, 0xe8, 0x7, 0xd, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xe3, 0xa8, 0xff, 0xff, 0xe9, 0x9b, 0, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0xce, 0xf4, 0xff, 0xff, 0x8d, 0x5d, 0xec, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0xe8, 0x75, 0xf9, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xbe, 0xa8, 0xff, 0xff, 0xe9, 0x76, 0, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0xa9, 0xf4, 0xff, 0xff, 0x8d, 0x5d, 0xec, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0xe8, 0x26, 0xfc, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x99, 0xa8, 0xff, 0xff, 0xeb, 0x54, 0xeb, 0x20, 0x83, 0x7d, 0xe8, 0x3d, 0x72, 0x12, 0x83, 0x7d, 0xe8, 0x3d, 0x76, 0xab, 0x83, 0x7d, 0xe8, 0x7b, 0xf, 0x84, 0x3b, 0xff, 0xff, 0xff, 0xeb, 0xe6, 0x83, 0x7d, 0xe8, 0x3c, 0x74, 0xbe, 0xeb, 0xde, 0xb8, 0x3, 0xd1, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xf8, 0x50, 0xe8, 0xf1, 0xf6, 0xff, 0xff, 0x83, 0xc4, 0x8, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0x73, 0xc, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x4f, 0xa8, 0xff, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x43, 0xa8, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x1014710b, 0x5)   pushd(0x48);                          /* push dword 0x48 */
    II(0x10147110, 0x5)   calld(sys_check_available_stack_size, 0x1ec3d); /* call 0x10165d52 */
    II(0x10147115, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10147116, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10147117, 0x1)   pushd(esi);                           /* push esi */
    II(0x10147118, 0x1)   pushd(edi);                           /* push edi */
    II(0x10147119, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1014711a, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1014711c, 0x6)   sub(esp, 0x28);                       /* sub esp, 0x28 */
    II(0x10147122, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10147125, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x10147128, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x1014712c, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x1014712f, 0x5)   calld(my_string_ctor, -0x564c);       /* call 0x10141ae8 */
    II(0x10147134, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10147137, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x1014713b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014713e, 0x5)   calld(0x101468e2, -0x861);            /* call 0x101468e2 */
    II(0x10147143, 0x2)   test(al, al);                         /* test al, al */
    II(0x10147145, 0x2)   jnzd(0x10147160, 0x19);               /* jnz 0x10147160 */
    II(0x10147147, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10147149, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1014714c, 0x5)   calld(0x10147f44, 0xdf3);             /* call 0x10147f44 */
    II(0x10147151, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10147153, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10147156, 0x5)   calld(my_string_dtor, -0x5631);       /* call 0x10141b2a */
    II(0x1014715b, 0x5)   jmpd(0x101472e7, 0x187);              /* jmp 0x101472e7 */
l_0x10147160:
    II(0x10147160, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10147163, 0x4)   cmp(memd_a32(ds, eax + 0x1c), 0x7d);  /* cmp dword [eax+0x1c], 0x7d */
    II(0x10147167, 0x2)   jzd(0x10147172, 0x9);                 /* jz 0x10147172 */
    II(0x10147169, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014716c, 0x4)   cmp(memd_a32(ds, eax + 0x1c), 0x3e);  /* cmp dword [eax+0x1c], 0x3e */
    II(0x10147170, 0x2)   jnzd(0x1014718b, 0x19);               /* jnz 0x1014718b */
l_0x10147172:
    II(0x10147172, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10147174, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10147177, 0x5)   calld(0x10147f44, 0xdc8);             /* call 0x10147f44 */
    II(0x1014717c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1014717e, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10147181, 0x5)   calld(my_string_dtor, -0x565c);       /* call 0x10141b2a */
    II(0x10147186, 0x5)   jmpd(0x101472e7, 0x15c);              /* jmp 0x101472e7 */
l_0x1014718b:
    II(0x1014718b, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x1014718e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10147191, 0x5)   calld(0x10146b38, -0x65e);            /* call 0x10146b38 */
    II(0x10147196, 0x2)   test(al, al);                         /* test al, al */
    II(0x10147198, 0x2)   jnzd(0x101471b3, 0x19);               /* jnz 0x101471b3 */
    II(0x1014719a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1014719c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1014719f, 0x5)   calld(0x10147f44, 0xda0);             /* call 0x10147f44 */
    II(0x101471a4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101471a6, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101471a9, 0x5)   calld(my_string_dtor, -0x5684);       /* call 0x10141b2a */
    II(0x101471ae, 0x5)   jmpd(0x101472e7, 0x134);              /* jmp 0x101472e7 */
l_0x101471b3:
    II(0x101471b3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101471b6, 0x5)   calld(0x101468e2, -0x8d9);            /* call 0x101468e2 */
    II(0x101471bb, 0x2)   test(al, al);                         /* test al, al */
    II(0x101471bd, 0x2)   jnzd(0x101471d8, 0x19);               /* jnz 0x101471d8 */
    II(0x101471bf, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101471c1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101471c4, 0x5)   calld(0x10147f44, 0xd7b);             /* call 0x10147f44 */
    II(0x101471c9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101471cb, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101471ce, 0x5)   calld(my_string_dtor, -0x56a9);       /* call 0x10141b2a */
    II(0x101471d3, 0x5)   jmpd(0x101472e7, 0x10f);              /* jmp 0x101472e7 */
l_0x101471d8:
    II(0x101471d8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101471db, 0x3)   mov(eax, memd_a32(ds, eax + 0x1c));   /* mov eax, [eax+0x1c] */
    II(0x101471de, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x101471e1, 0x5)   jmpd(0x10147295, 0xaf);               /* jmp 0x10147295 */
l_0x101471e6:
    II(0x101471e6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101471e9, 0x5)   calld(0x10146722, -0xacc);            /* call 0x10146722 */
    II(0x101471ee, 0x5)   mov(eax, 0x28);                       /* mov eax, 0x28 */
    II(0x101471f3, 0x5)   calld(sys_new, 0x1ec08);              /* call 0x10165e00 */
    II(0x101471f8, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
//    II(0x101471fb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x101471fe, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10147201, 0x4)   cmp(memd_a32(ss, ebp - 0x20), 0);     /* cmp dword [ebp-0x20], 0x0 */
    II(0x10147205, 0x2)   jzd(0x1014722c, 0x25);                /* jz 0x1014722c */
    II(0x10147207, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014720a, 0x1)   pushd(eax);                           /* push eax */
    II(0x1014720b, 0x5)   mov(ecx, 0x7d);                       /* mov ecx, 0x7d */
    II(0x10147210, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x8));    /* mov ebx, [ebp-0x8] */
    II(0x10147213, 0x3)   add(ebx, 0x12);                       /* add ebx, 0x12 */
    II(0x10147216, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x10147219, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x1014721c, 0x5)   calld(0x10145a6b, -0x17b6);           /* call 0x10145a6b */
    II(0x10147221, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
//    II(0x10147224, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x10147227, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x1014722a, 0x2)   jmpd(0x10147232, 0x6);                /* jmp 0x10147232 */
l_0x1014722c:
    II(0x1014722c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1014722f, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
l_0x10147232:
    II(0x10147232, 0x3)   mov(edx, memd_a32(ss, ebp - 0x28));   /* mov edx, [ebp-0x28] */
    II(0x10147235, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10147238, 0x5)   calld(0x10147f44, 0xd07);             /* call 0x10147f44 */
    II(0x1014723d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1014723f, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10147242, 0x5)   calld(my_string_dtor, -0x571d);       /* call 0x10141b2a */
    II(0x10147247, 0x5)   jmpd(0x101472e7, 0x9b);               /* jmp 0x101472e7 */
l_0x1014724c:
    II(0x1014724c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014724f, 0x5)   calld(0x10146722, -0xb32);            /* call 0x10146722 */
    II(0x10147254, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x10147257, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1014725a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014725d, 0x5)   calld(0x10146bd7, -0x68b);            /* call 0x10146bd7 */
    II(0x10147262, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10147264, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10147267, 0x5)   calld(my_string_dtor, -0x5742);       /* call 0x10141b2a */
    II(0x1014726c, 0x5)   jmpd(0x101472e7, 0x76);               /* jmp 0x101472e7 */
l_0x10147271:
    II(0x10147271, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10147274, 0x5)   calld(0x10146722, -0xb57);            /* call 0x10146722 */
    II(0x10147279, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x1014727c, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1014727f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10147282, 0x5)   calld(0x10146ead, -0x3da);            /* call 0x10146ead */
    II(0x10147287, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10147289, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x1014728c, 0x5)   calld(my_string_dtor, -0x5767);       /* call 0x10141b2a */
    II(0x10147291, 0x2)   jmpd(0x101472e7, 0x54);               /* jmp 0x101472e7 */
l_0x10147293:
    II(0x10147293, 0x2)   jmpd(0x101472b5, 0x20);               /* jmp 0x101472b5 */
l_0x10147295:
    II(0x10147295, 0x4)   cmp(memd_a32(ss, ebp - 0x18), 0x3d);  /* cmp dword [ebp-0x18], 0x3d */
    II(0x10147299, 0x2)   jbd(0x101472ad, 0x12);                /* jb 0x101472ad */
    II(0x1014729b, 0x4)   cmp(memd_a32(ss, ebp - 0x18), 0x3d);  /* cmp dword [ebp-0x18], 0x3d */
    II(0x1014729f, 0x2)   jbed(0x1014724c, -0x55);              /* jbe 0x1014724c */
    II(0x101472a1, 0x4)   cmp(memd_a32(ss, ebp - 0x18), 0x7b);  /* cmp dword [ebp-0x18], 0x7b */
    II(0x101472a5, 0x6)   jzd(0x101471e6, -0xc5);               /* jz dword 0x101471e6 */
    II(0x101472ab, 0x2)   jmpd(0x10147293, -0x1a);              /* jmp 0x10147293 */
l_0x101472ad:
    II(0x101472ad, 0x4)   cmp(memd_a32(ss, ebp - 0x18), 0x3c);  /* cmp dword [ebp-0x18], 0x3c */
    II(0x101472b1, 0x2)   jzd(0x10147271, -0x42);               /* jz 0x10147271 */
    II(0x101472b3, 0x2)   jmpd(0x10147293, -0x22);              /* jmp 0x10147293 */
l_0x101472b5:
    II(0x101472b5, 0x5)   mov(eax, 0x101ad103);                 /* mov eax, 0x101ad103 */ /* "Expecting {, =, or <" */
    II(0x101472ba, 0x1)   pushd(eax);                           /* push eax */
    II(0x101472bb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101472be, 0x1)   pushd(eax);                           /* push eax */
    II(0x101472bf, 0x5)   calld(0x101469b5, -0x90f);            /* call 0x101469b5 */
    II(0x101472c4, 0x3)   add(esp, 0x8);                        /* add esp, 0x8 */
    II(0x101472c7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101472c9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101472cc, 0x5)   calld(0x10147f44, 0xc73);             /* call 0x10147f44 */
    II(0x101472d1, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101472d3, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101472d6, 0x5)   calld(my_string_dtor, -0x57b1);       /* call 0x10141b2a */
    II(0x101472db, 0x2)   jmpd(0x101472e7, 0xa);                /* jmp 0x101472e7 */
//  II(0x101472dd, 0xa)   /* Недостижимый код. */
l_0x101472e7:
    II(0x101472e7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101472ea, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101472ec, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101472ed, 0x1)   popd(edi);                            /* pop edi */
    II(0x101472ee, 0x1)   popd(esi);                            /* pop esi */
    II(0x101472ef, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x101472f0, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x101472f1, 0x1)   retd();                               /* ret */
FUNC_END

