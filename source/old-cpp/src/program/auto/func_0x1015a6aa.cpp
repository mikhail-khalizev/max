FUNC_BEGIN(0x1015a6aa, 0x36bb47c7ba3ab4ce, 0x20, ({0x68, 0x44, 0, 0, 0, 0xe8, 0x9e, 0xb6, 0, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xf0, 0x89, 0x55, 0xf4, 0x89, 0x5d, 0xf8, 0x89, 0x4d, 0xfc, 0x80, 0x4d, 0xec, 0x1, 0x8d, 0x45, 0xe8, 0xe8, 0x19, 0xc0, 0xf1, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xec, 0xfe, 0xe8, 0xa1, 0x84, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0x10, 0x50, 0xf, 0xbf, 0x45, 0xfc, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xf8, 0xf, 0xbf, 0x55, 0xf4, 0x8d, 0x45, 0xe0, 0xe8, 0xcc, 0xfb, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xe8, 0xe8, 0, 0x5, 0xf3, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xa, 0xb8, 0xf1, 0xff, 0x8b, 0x55, 0x14, 0x8d, 0x45, 0xe8, 0xe8, 0x47, 0xbe, 0xf1, 0xff, 0xe8, 0x66, 0x2, 0xf3, 0xff, 0xf, 0xbf, 0x55, 0xf8, 0x8d, 0x45, 0xe8, 0xe8, 0x36, 0xbe, 0xf1, 0xff, 0xe8, 0xf1, 0x4e, 0xff, 0xff, 0x8d, 0x55, 0xe8, 0x8b, 0x45, 0xf0, 0xe8, 0x1a, 0xbf, 0xf1, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xd4, 0xb7, 0xf1, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xc8, 0xb7, 0xf1, 0xff, 0x8b, 0x45, 0xf0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc2, 0x8, 0}))
    II(0x1015a6aa, 0x5)   pushd(0x44);                          /* push dword 0x44 */
    II(0x1015a6af, 0x5)   calld(sys_check_available_stack_size, 0xb69e); /* call 0x10165d52 */
    II(0x1015a6b4, 0x1)   pushd(esi);                           /* push esi */
    II(0x1015a6b5, 0x1)   pushd(edi);                           /* push edi */
    II(0x1015a6b6, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1015a6b7, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1015a6b9, 0x6)   sub(esp, 0x20);                       /* sub esp, 0x20 */
    II(0x1015a6bf, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1015a6c2, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x1015a6c5, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x1015a6c8, 0x3)   mov(memd_a32(ss, ebp - 0x4), ecx);    /* mov [ebp-0x4], ecx */
    II(0x1015a6cb, 0x4)   or_(memb_a32(ss, ebp - 0x14), 0x1);   /* or byte [ebp-0x14], 0x1 */
    II(0x1015a6cf, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015a6d2, 0x5)   calld(my_ctor_0x101b38f8, -0xe3fe7);  /* call 0x100766f0 */
    II(0x1015a6d7, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x1015a6da, 0x4)   and_(memb_a32(ss, ebp - 0x14), -0x2 /* 0xfe */); /* and byte [ebp-0x14], 0xfe */
    II(0x1015a6de, 0x5)   calld(0x10102b84, -0x57b5f);          /* call 0x10102b84 */
    II(0x1015a6e3, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015a6e8, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015a6e9, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x1015a6ee, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015a6ef, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015a6f1, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015a6f2, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x10)); /* movsx eax, word [ebp+0x10] */
    II(0x1015a6f6, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015a6f7, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1015a6fb, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015a6fc, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x1015a6fe, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x8));  /* movsx ebx, word [ebp-0x8] */
    II(0x1015a702, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x1015a706, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1015a709, 0x5)   calld(0x1015a2da, -0x434);            /* call 0x1015a2da */
    II(0x1015a70e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015a710, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015a713, 0x5)   calld(0x1008ac18, -0xcfb00);          /* call 0x1008ac18 */
    II(0x1015a718, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015a71a, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1015a71d, 0x5)   calld(0x10075f2c, -0xe47f6);          /* call 0x10075f2c */
    II(0x1015a722, 0x3)   mov(edx, memd_a32(ss, ebp + 0x14));   /* mov edx, [ebp+0x14] */
    II(0x1015a725, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015a728, 0x5)   calld(0x10076574, -0xe41b9);          /* call 0x10076574 */
    II(0x1015a72d, 0x5)   calld(0x1008a998, -0xcfd9a);          /* call 0x1008a998 */
    II(0x1015a732, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x1015a736, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015a739, 0x5)   calld(0x10076574, -0xe41ca);          /* call 0x10076574 */
    II(0x1015a73e, 0x5)   calld(0x1014f634, -0xb10f);           /* call 0x1014f634 */
    II(0x1015a743, 0x3)   lea(edx, ebp - 0x18);                 /* lea edx, [ebp-0x18] */
    II(0x1015a746, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1015a749, 0x5)   calld(0x10076668, -0xe40e6);          /* call 0x10076668 */
    II(0x1015a74e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015a750, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015a753, 0x5)   calld(0x10075f2c, -0xe482c);          /* call 0x10075f2c */
    II(0x1015a758, 0x2)   jmpd(0x1015a764, 0xa);                /* jmp 0x1015a764 */
//  II(0x1015a75a, 0xa)   /* Недостижимый код. */
l_0x1015a764:
    II(0x1015a764, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1015a767, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1015a769, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1015a76a, 0x1)   popd(edi);                            /* pop edi */
    II(0x1015a76b, 0x1)   popd(esi);                            /* pop esi */
    II(0x1015a76c, 0x3)   retd(0x8);                            /* ret 0x8 */
FUNC_END

