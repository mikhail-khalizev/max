FUNC_BEGIN(0x10110efc, 0x3b6f8c5770713819, 0x20, ({0x68, 0x28, 0, 0, 0, 0xe8, 0x4c, 0x4e, 0x5, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc, 0, 0, 0, 0x89, 0x45, 0xfc, 0x31, 0xc0, 0x8b, 0x55, 0xfc, 0x8a, 0x82, 0x42, 0x1, 0, 0, 0x89, 0x45, 0xf4, 0x31, 0xc0, 0x8b, 0x55, 0xfc, 0x8a, 0x82, 0x40, 0x1, 0, 0, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xfc, 0x81, 0x78, 0xc, 0x48, 0x1, 0, 0, 0x75, 0x15, 0xf, 0xbf, 0x45, 0xf4, 0x83, 0xf8, 0x1, 0xf, 0x84, 0xe0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0xff, 0x4d, 0xf4, 0xeb, 0x6, 0x8b, 0x45, 0xf4, 0xff, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x66, 0x3b, 0x45, 0xf8, 0x7d, 0x6, 0x83, 0x45, 0xf8, 0xf4, 0xeb, 0xf1, 0xf, 0xbf, 0x45, 0xf8, 0xf, 0xbf, 0x55, 0xf4, 0x83, 0xc0, 0xc, 0x39, 0xc2, 0x7c, 0x6, 0x83, 0x45, 0xf8, 0xc, 0xeb, 0xeb, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x40, 0x1, 0, 0, 0x25, 0xff, 0, 0, 0, 0xf, 0xbf, 0x55, 0xf8, 0x39, 0xc2, 0x74, 0x24, 0xf, 0xbf, 0x55, 0xf8, 0x8b, 0x45, 0xfc, 0xe8, 0xba, 0xfe, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x14, 0x8a, 0x45, 0xf8, 0x8b, 0x55, 0xfc, 0x88, 0x82, 0x40, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x5a, 0xf8, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x31, 0xd2, 0x8a, 0x90, 0x40, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x41, 0x1, 0, 0, 0x25, 0xff, 0, 0, 0, 0x1, 0xd0, 0xf, 0xbf, 0x55, 0xf4, 0x39, 0xc2, 0x7c, 0x1c, 0x8b, 0x45, 0xfc, 0x31, 0xd2, 0x8a, 0x90, 0x40, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x41, 0x1, 0, 0, 0x30, 0xe4, 0x1, 0xd0, 0x48, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x42, 0x1, 0, 0, 0x25, 0xff, 0, 0, 0, 0xf, 0xbf, 0x55, 0xf4, 0x39, 0xc2, 0x74, 0x1f, 0x8b, 0x45, 0xfc, 0x31, 0xdb, 0x8a, 0x98, 0x40, 0x1, 0, 0, 0xf, 0xbf, 0x55, 0xf4, 0x8b, 0x45, 0xfc, 0x29, 0xda, 0x89, 0x50, 0xc, 0x8b, 0x45, 0xfc, 0xe8, 0xb0, 0x1, 0, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10110efc, 0x5)   pushd(0x28);                          /* push dword 0x28 */
    II(0x10110f01, 0x5)   calld(sys_check_available_stack_size, 0x54e4c); /* call 0x10165d52 */
    II(0x10110f06, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10110f07, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10110f08, 0x1)   pushd(edx);                           /* push edx */
    II(0x10110f09, 0x1)   pushd(esi);                           /* push esi */
    II(0x10110f0a, 0x1)   pushd(edi);                           /* push edi */
    II(0x10110f0b, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10110f0c, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10110f0e, 0x6)   sub(esp, 0xc);                        /* sub esp, 0xc */
    II(0x10110f14, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10110f17, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10110f19, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10110f1c, 0x6)   mov(al, memb_a32(ds, edx + 0x142));   /* mov al, [edx+0x142] */
    II(0x10110f22, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10110f25, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10110f27, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10110f2a, 0x6)   mov(al, memb_a32(ds, edx + 0x140));   /* mov al, [edx+0x140] */
    II(0x10110f30, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10110f33, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110f36, 0x7)   cmp(memd_a32(ds, eax + 0xc), 0x148);  /* cmp dword [eax+0xc], 0x148 */
    II(0x10110f3d, 0x2)   jnzd(0x10110f54, 0x15);               /* jnz 0x10110f54 */
    II(0x10110f3f, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10110f43, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x10110f46, 0x6)   jzd(0x1011102c, 0xe0);                /* jz dword 0x1011102c */
    II(0x10110f4c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10110f4f, 0x3)   dec(memd_a32(ss, ebp - 0xc));         /* dec dword [ebp-0xc] */
    II(0x10110f52, 0x2)   jmpd(0x10110f5a, 0x6);                /* jmp 0x10110f5a */
l_0x10110f54:
    II(0x10110f54, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10110f57, 0x3)   inc(memd_a32(ss, ebp - 0xc));         /* inc dword [ebp-0xc] */
l_0x10110f5a:
    II(0x10110f5a, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10110f5d, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x10110f61, 0x2)   jged(0x10110f69, 0x6);                /* jge 0x10110f69 */
    II(0x10110f63, 0x4)   add(memd_a32(ss, ebp - 0x8), -0xc /* 0xf4 */); /* add dword [ebp-0x8], 0xf4 */
    II(0x10110f67, 0x2)   jmpd(0x10110f5a, -0xf);               /* jmp 0x10110f5a */
l_0x10110f69:
    II(0x10110f69, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x10110f6d, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x10110f71, 0x3)   add(eax, 0xc);                        /* add eax, 0xc */
    II(0x10110f74, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x10110f76, 0x2)   jld(0x10110f7e, 0x6);                 /* jl 0x10110f7e */
    II(0x10110f78, 0x4)   add(memd_a32(ss, ebp - 0x8), 0xc);    /* add dword [ebp-0x8], 0xc */
    II(0x10110f7c, 0x2)   jmpd(0x10110f69, -0x15);              /* jmp 0x10110f69 */
l_0x10110f7e:
    II(0x10110f7e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110f81, 0x6)   mov(al, memb_a32(ds, eax + 0x140));   /* mov al, [eax+0x140] */
    II(0x10110f87, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10110f8c, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10110f90, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x10110f92, 0x2)   jzd(0x10110fb8, 0x24);                /* jz 0x10110fb8 */
    II(0x10110f94, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10110f98, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110f9b, 0x5)   calld(0x10110e5a, -0x146);            /* call 0x10110e5a */
    II(0x10110fa0, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x10110fa2, 0x2)   jzd(0x10110fb8, 0x14);                /* jz 0x10110fb8 */
    II(0x10110fa4, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x10110fa7, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10110faa, 0x6)   mov(memb_a32(ds, edx + 0x140), al);   /* mov [edx+0x140], al */
    II(0x10110fb0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110fb3, 0x5)   calld(0x10110812, -0x7a6);            /* call 0x10110812 */
l_0x10110fb8:
    II(0x10110fb8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110fbb, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10110fbd, 0x6)   mov(dl, memb_a32(ds, eax + 0x140));   /* mov dl, [eax+0x140] */
    II(0x10110fc3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110fc6, 0x6)   mov(al, memb_a32(ds, eax + 0x141));   /* mov al, [eax+0x141] */
    II(0x10110fcc, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10110fd1, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x10110fd3, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x10110fd7, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x10110fd9, 0x2)   jld(0x10110ff7, 0x1c);                /* jl 0x10110ff7 */
    II(0x10110fdb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110fde, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10110fe0, 0x6)   mov(dl, memb_a32(ds, eax + 0x140));   /* mov dl, [eax+0x140] */
    II(0x10110fe6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110fe9, 0x6)   mov(al, memb_a32(ds, eax + 0x141));   /* mov al, [eax+0x141] */
    II(0x10110fef, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x10110ff1, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x10110ff3, 0x1)   dec(eax);                             /* dec eax */
    II(0x10110ff4, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
l_0x10110ff7:
    II(0x10110ff7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10110ffa, 0x6)   mov(al, memb_a32(ds, eax + 0x142));   /* mov al, [eax+0x142] */
    II(0x10111000, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10111005, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x10111009, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1011100b, 0x2)   jzd(0x1011102c, 0x1f);                /* jz 0x1011102c */
    II(0x1011100d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10111010, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10111012, 0x6)   mov(bl, memb_a32(ds, eax + 0x140));   /* mov bl, [eax+0x140] */
    II(0x10111018, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x1011101c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011101f, 0x2)   sub(edx, ebx);                        /* sub edx, ebx */
    II(0x10111021, 0x3)   mov(memd_a32(ds, eax + 0xc), edx);    /* mov [eax+0xc], edx */
    II(0x10111024, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10111027, 0x5)   calld(0x101111dc, 0x1b0);             /* call 0x101111dc */
l_0x1011102c:
    II(0x1011102c, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1011102e, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1011102f, 0x1)   popd(edi);                            /* pop edi */
    II(0x10111030, 0x1)   popd(esi);                            /* pop esi */
    II(0x10111031, 0x1)   popd(edx);                            /* pop edx */
    II(0x10111032, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10111033, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10111034, 0x1)   retd();                               /* ret */
FUNC_END

