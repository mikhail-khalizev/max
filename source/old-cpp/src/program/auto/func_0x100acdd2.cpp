FUNC_BEGIN(0x100acdd2, 0xfbe85307bca57268, 0x20, ({0x68, 0x28, 0, 0, 0, 0xe8, 0x76, 0x8f, 0xb, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc, 0, 0, 0, 0x89, 0x45, 0xfc, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x77, 0xdf, 0x8, 0, 0x84, 0xc0, 0xf, 0x84, 0x4b, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x67, 0x97, 0xfc, 0xff, 0x80, 0x78, 0x3d, 0x10, 0x75, 0x11, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x56, 0x97, 0xfc, 0xff, 0x80, 0x78, 0x3e, 0x4, 0x74, 0x2, 0xeb, 0xd, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x26, 0xc1, 0xf8, 0x10, 0x85, 0xc0, 0x7c, 0x5, 0xe9, 0x94, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x31, 0x97, 0xfc, 0xff, 0xe8, 0xd4, 0x92, 0xfc, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xf8, 0xe8, 0x5a, 0x98, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf8, 0xe8, 0x15, 0xdf, 0x8, 0, 0x84, 0xc0, 0x74, 0x9, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x70, 0x2, 0, 0, 0xbb, 0x8d, 0xe, 0x1a, 0x10, 0xba, 0x99, 0xe, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0x13, 0x8f, 0xb, 0, 0x89, 0x45, 0xf4, 0x8d, 0x45, 0xf8, 0xe8, 0xea, 0x96, 0xfc, 0xff, 0x66, 0x8b, 0x50, 0x1a, 0x8b, 0x45, 0xfc, 0x66, 0x89, 0x50, 0x28, 0x8d, 0x45, 0xf8, 0xe8, 0xd7, 0x96, 0xfc, 0xff, 0x66, 0x8b, 0x50, 0x1c, 0x8b, 0x45, 0xfc, 0x66, 0x89, 0x50, 0x2a, 0x8b, 0x45, 0xfc, 0xe8, 0xa, 0xf8, 0xff, 0xff, 0xba, 0x1, 0, 0, 0, 0x8d, 0x45, 0xf8, 0xe8, 0x13, 0x97, 0xfc, 0xff, 0xe8, 0xbb, 0x5a, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf8, 0xe8, 0x60, 0x90, 0xfc, 0xff, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x3c, 0xe8, 0x38, 0xde, 0x8, 0, 0x84, 0xc0, 0x74, 0x17, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x89, 0x96, 0xfc, 0xff, 0xe8, 0x62, 0x5b, 0xa, 0, 0x84, 0xc0, 0x75, 0x2, 0xeb, 0x57, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x26, 0xff, 0x74, 0x10, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x2c, 0xe8, 0x75, 0xe5, 0xfd, 0xff, 0x98, 0x85, 0xc0, 0x74, 0x2, 0xeb, 0xf, 0xba, 0x1, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x9c, 0xfc, 0xff, 0xff, 0xeb, 0x2c, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x48, 0x96, 0xfc, 0xff, 0x8a, 0x40, 0x4e, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0x7e, 0x15, 0xba, 0x1, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x13, 0xe8, 0x88, 0x96, 0xfc, 0xff, 0xe8, 0x30, 0x5a, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100acdd2, 0x5)   pushd(0x28);                          /* push dword 0x28 */
    II(0x100acdd7, 0x5)   calld(sys_check_available_stack_size, 0xb8f76); /* call 0x10165d52 */
    II(0x100acddc, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100acddd, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100acdde, 0x1)   pushd(edx);                           /* push edx */
    II(0x100acddf, 0x1)   pushd(esi);                           /* push esi */
    II(0x100acde0, 0x1)   pushd(edi);                           /* push edi */
    II(0x100acde1, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100acde2, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100acde4, 0x6)   sub(esp, 0xc);                        /* sub esp, 0xc */
    II(0x100acdea, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100acded, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100acdef, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acdf2, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100acdf5, 0x5)   calld(0x1013ad71, 0x8df77);           /* call 0x1013ad71 */
    II(0x100acdfa, 0x2)   test(al, al);                         /* test al, al */
    II(0x100acdfc, 0x6)   jzd(0x100acf4d, 0x14b);               /* jz dword 0x100acf4d */
    II(0x100ace02, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ace05, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100ace08, 0x5)   calld(0x10076574, -0x36899);          /* call 0x10076574 */
    II(0x100ace0d, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x10);  /* cmp byte [eax+0x3d], 0x10 */
    II(0x100ace11, 0x2)   jnzd(0x100ace24, 0x11);               /* jnz 0x100ace24 */
    II(0x100ace13, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ace16, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100ace19, 0x5)   calld(0x10076574, -0x368aa);          /* call 0x10076574 */
    II(0x100ace1e, 0x4)   cmp(memb_a32(ds, eax + 0x3e), 0x4);   /* cmp byte [eax+0x3e], 0x4 */
    II(0x100ace22, 0x2)   jzd(0x100ace26, 0x2);                 /* jz 0x100ace26 */
l_0x100ace24:
    II(0x100ace24, 0x2)   jmpd(0x100ace33, 0xd);                /* jmp 0x100ace33 */
l_0x100ace26:
    II(0x100ace26, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ace29, 0x3)   mov(eax, memd_a32(ds, eax + 0x26));   /* mov eax, [eax+0x26] */
    II(0x100ace2c, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ace2f, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100ace31, 0x2)   jld(0x100ace38, 0x5);                 /* jl 0x100ace38 */
l_0x100ace33:
    II(0x100ace33, 0x5)   jmpd(0x100acecc, 0x94);               /* jmp 0x100acecc */
l_0x100ace38:
    II(0x100ace38, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ace3b, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100ace3e, 0x5)   calld(0x10076574, -0x368cf);          /* call 0x10076574 */
    II(0x100ace43, 0x5)   calld(0x1007611c, -0x36d2c);          /* call 0x1007611c */
    II(0x100ace48, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100ace4a, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100ace4d, 0x5)   calld(0x100766ac, -0x367a6);          /* call 0x100766ac */
    II(0x100ace52, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100ace54, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100ace57, 0x5)   calld(0x1013ad71, 0x8df15);           /* call 0x1013ad71 */
    II(0x100ace5c, 0x2)   test(al, al);                         /* test al, al */
    II(0x100ace5e, 0x2)   jzd(0x100ace69, 0x9);                 /* jz 0x100ace69 */
    II(0x100ace60, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0);      /* mov dword [ebp-0xc], 0x0 */
    II(0x100ace67, 0x2)   jmpd(0x100ace82, 0x19);               /* jmp 0x100ace82 */
l_0x100ace69:
    II(0x100ace69, 0x5)   mov(ecx, 0x270);                      /* mov ecx, 0x270 */
    II(0x100ace6e, 0x5)   mov(ebx, 0x101a0e8d);                 /* mov ebx, 0x101a0e8d */ /* "ai_move.cpp" */
    II(0x100ace73, 0x5)   mov(edx, 0x101a0e99);                 /* mov edx, 0x101a0e99 */ /* "transport != 0" */
    II(0x100ace78, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100ace7a, 0x5)   calld(sys_assert, 0xb8f13);           /* call 0x10165d92 */
    II(0x100ace7f, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
l_0x100ace82:
    II(0x100ace82, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100ace85, 0x5)   calld(0x10076574, -0x36916);          /* call 0x10076574 */
    II(0x100ace8a, 0x4)   mov(dx, memw_a32(ds, eax + 0x1a));    /* mov dx, [eax+0x1a] */
    II(0x100ace8e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ace91, 0x4)   mov(memw_a32(ds, eax + 0x28), dx);    /* mov [eax+0x28], dx */
    II(0x100ace95, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100ace98, 0x5)   calld(0x10076574, -0x36929);          /* call 0x10076574 */
    II(0x100ace9d, 0x4)   mov(dx, memw_a32(ds, eax + 0x1c));    /* mov dx, [eax+0x1c] */
    II(0x100acea1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acea4, 0x4)   mov(memw_a32(ds, eax + 0x2a), dx);    /* mov [eax+0x2a], dx */
    II(0x100acea8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100aceab, 0x5)   calld(0x100ac6ba, -0x7f6);            /* call 0x100ac6ba */
    II(0x100aceb0, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100aceb5, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100aceb8, 0x5)   calld(0x100765d0, -0x368ed);          /* call 0x100765d0 */
    II(0x100acebd, 0x5)   calld(0x100a297d, -0xa545);           /* call 0x100a297d */
    II(0x100acec2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100acec4, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100acec7, 0x5)   calld(0x10075f2c, -0x36fa0);          /* call 0x10075f2c */
l_0x100acecc:
    II(0x100acecc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100acece, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100aced1, 0x3)   add(eax, 0x3c);                       /* add eax, 0x3c */
    II(0x100aced4, 0x5)   calld(0x1013ad11, 0x8de38);           /* call 0x1013ad11 */
    II(0x100aced9, 0x2)   test(al, al);                         /* test al, al */
    II(0x100acedb, 0x2)   jzd(0x100acef4, 0x17);                /* jz 0x100acef4 */
    II(0x100acedd, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100acee0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acee3, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100acee6, 0x5)   calld(0x10076574, -0x36977);          /* call 0x10076574 */
    II(0x100aceeb, 0x5)   calld(0x10152a52, 0xa5b62);           /* call 0x10152a52 */
    II(0x100acef0, 0x2)   test(al, al);                         /* test al, al */
    II(0x100acef2, 0x2)   jnzd(0x100acef6, 0x2);                /* jnz 0x100acef6 */
l_0x100acef4:
    II(0x100acef4, 0x2)   jmpd(0x100acf4d, 0x57);               /* jmp 0x100acf4d */
l_0x100acef6:
    II(0x100acef6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acef9, 0x5)   cmp(memw_a32(ds, eax + 0x26), -0x1 /* 0xff */); /* cmp word [eax+0x26], 0xff */
    II(0x100acefe, 0x2)   jzd(0x100acf10, 0x10);                /* jz 0x100acf10 */
    II(0x100acf00, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acf03, 0x3)   add(eax, 0x2c);                       /* add eax, 0x2c */
    II(0x100acf06, 0x5)   calld(my_3_get_count, -0x21a8b);      /* call 0x1008b480 */
    II(0x100acf0b, 0x1)   cwde();                               /* cwde */
    II(0x100acf0c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100acf0e, 0x2)   jzd(0x100acf12, 0x2);                 /* jz 0x100acf12 */
l_0x100acf10:
    II(0x100acf10, 0x2)   jmpd(0x100acf21, 0xf);                /* jmp 0x100acf21 */
l_0x100acf12:
    II(0x100acf12, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100acf17, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acf1a, 0x5)   calld(0x100acbbb, -0x364);            /* call 0x100acbbb */
    II(0x100acf1f, 0x2)   jmpd(0x100acf4d, 0x2c);               /* jmp 0x100acf4d */
l_0x100acf21:
    II(0x100acf21, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acf24, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100acf27, 0x5)   calld(0x10076574, -0x369b8);          /* call 0x10076574 */
    II(0x100acf2c, 0x3)   mov(al, memb_a32(ds, eax + 0x4e));    /* mov al, [eax+0x4e] */
    II(0x100acf2f, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100acf34, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100acf36, 0x2)   jled(0x100acf4d, 0x15);               /* jle 0x100acf4d */
    II(0x100acf38, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100acf3d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100acf40, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100acf43, 0x5)   calld(0x100765d0, -0x36978);          /* call 0x100765d0 */
    II(0x100acf48, 0x5)   calld(0x100a297d, -0xa5d0);           /* call 0x100a297d */
l_0x100acf4d:
    II(0x100acf4d, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100acf4f, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100acf50, 0x1)   popd(edi);                            /* pop edi */
    II(0x100acf51, 0x1)   popd(esi);                            /* pop esi */
    II(0x100acf52, 0x1)   popd(edx);                            /* pop edx */
    II(0x100acf53, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100acf54, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100acf55, 0x1)   retd();                               /* ret */
FUNC_END

