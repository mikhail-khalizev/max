FUNC_BEGIN(0x100fb43c, 0xff99156a6d35c38a, 0x20, ({0x68, 0xe8, 0x4, 0, 0, 0xe8, 0xc, 0xa9, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc0, 0x4, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0xf, 0xbf, 0x55, 0xfc, 0x8d, 0x85, 0x10, 0xfc, 0xff, 0xff, 0xe8, 0x5f, 0x15, 0xfe, 0xff, 0x89, 0x85, 0xc, 0xfc, 0xff, 0xff, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x3d, 0x8b, 0x38, 0x1c, 0x10, 0, 0x74, 0x44, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x2, 0xff, 0xb0, 0x44, 0xb4, 0x1b, 0x10, 0xb8, 0x98, 0x28, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x44, 0xfb, 0xff, 0xff, 0x50, 0xe8, 0x65, 0xaa, 0x6, 0, 0x83, 0xc4, 0xc, 0xe8, 0x5c, 0xf5, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xb9, 0x1, 0, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x85, 0x44, 0xfb, 0xff, 0xff, 0xe8, 0x62, 0xa8, 0x1, 0, 0x8d, 0x85, 0x10, 0xfc, 0xff, 0xff, 0xe8, 0x5d, 0xfd, 0xfd, 0xff, 0x89, 0x85, 0x40, 0xfb, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0x10, 0xfc, 0xff, 0xff, 0xe8, 0xa9, 0x2c, 0xfe, 0xff, 0xeb, 0xd, 0x31, 0xd2, 0x8d, 0x85, 0x10, 0xfc, 0xff, 0xff, 0xe8, 0x9a, 0x2c, 0xfe, 0xff, 0x8b, 0x85, 0x40, 0xfb, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100fb43c, 0x5)   pushd(0x4e8);                         /* push dword 0x4e8 */
    II(0x100fb441, 0x5)   calld(sys_check_available_stack_size, 0x6a90c); /* call 0x10165d52 */
    II(0x100fb446, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100fb447, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100fb448, 0x1)   pushd(edx);                           /* push edx */
    II(0x100fb449, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fb44a, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fb44b, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fb44c, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fb44e, 0x6)   sub(esp, 0x4c0);                      /* sub esp, 0x4c0 */
    II(0x100fb454, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100fb457, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100fb45b, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100fb45f, 0x6)   lea(eax, ebp - 0x3f0);                /* lea eax, [ebp+0xfffffc10] */
    II(0x100fb465, 0x5)   calld(0x100dc9c9, -0x1eaa1);          /* call 0x100dc9c9 */
    II(0x100fb46a, 0x6)   mov(memd_a32(ss, ebp - 0x3f4), eax);  /* mov [ebp+0xfffffc0c], eax */
    II(0x100fb470, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100fb474, 0x7)   cmp(memb_a32(ds, 0x101c388b), 0);     /* cmp byte [0x101c388b], 0x0 */
    II(0x100fb47b, 0x2)   jzd(0x100fb4c1, 0x44);                /* jz 0x100fb4c1 */
    II(0x100fb47d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fb481, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100fb484, 0x6)   pushd(memd_a32(ds, eax + 0x101bb444)); /* push dword [eax+0x101bb444] */
    II(0x100fb48a, 0x5)   mov(eax, 0x101a2898);                 /* mov eax, 0x101a2898 */ /* "%s:\nBegin cargo selection." */
    II(0x100fb48f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fb490, 0x6)   lea(eax, ebp - 0x4bc);                /* lea eax, [ebp+0xfffffb44] */
    II(0x100fb496, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fb497, 0x5)   calld(sys_sprintf, 0x6aa65);          /* call 0x10165f01 */
    II(0x100fb49c, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100fb49f, 0x5)   calld(0x100caa00, -0x30aa4);          /* call 0x100caa00 */
    II(0x100fb4a4, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fb4a9, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fb4aa, 0x5)   mov(ecx, 0x1);                        /* mov ecx, 0x1 */
    II(0x100fb4af, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fb4b4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fb4b6, 0x6)   lea(eax, ebp - 0x4bc);                /* lea eax, [ebp+0xfffffb44] */
    II(0x100fb4bc, 0x5)   calld(0x10115d23, 0x1a862);           /* call 0x10115d23 */
l_0x100fb4c1:
    II(0x100fb4c1, 0x6)   lea(eax, ebp - 0x3f0);                /* lea eax, [ebp+0xfffffc10] */
    II(0x100fb4c7, 0x5)   calld(0x100db229, -0x202a3);          /* call 0x100db229 */
    II(0x100fb4cc, 0x6)   mov(memd_a32(ss, ebp - 0x4c0), eax);  /* mov [ebp+0xfffffb40], eax */
    II(0x100fb4d2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fb4d4, 0x6)   lea(eax, ebp - 0x3f0);                /* lea eax, [ebp+0xfffffc10] */
    II(0x100fb4da, 0x5)   calld(0x100de188, -0x1d357);          /* call 0x100de188 */
    II(0x100fb4df, 0x2)   jmpd(0x100fb4ee, 0xd);                /* jmp 0x100fb4ee */
//  II(0x100fb4e1, 0xd)   /* Недостижимый код. */
l_0x100fb4ee:
    II(0x100fb4ee, 0x6)   mov(eax, memd_a32(ss, ebp - 0x4c0));  /* mov eax, [ebp+0xfffffb40] */
    II(0x100fb4f4, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100fb4f6, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100fb4f7, 0x1)   popd(edi);                            /* pop edi */
    II(0x100fb4f8, 0x1)   popd(esi);                            /* pop esi */
    II(0x100fb4f9, 0x1)   popd(edx);                            /* pop edx */
    II(0x100fb4fa, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100fb4fb, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100fb4fc, 0x1)   retd();                               /* ret */
FUNC_END

