FUNC_BEGIN(0x10163378, 0xc7e94519dd15a13, 0x20, ({0x68, 0x68, 0, 0, 0, 0xe8, 0xd0, 0x29, 0, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x34, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x8, 0x3d, 0x75, 0x1c, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x50, 0x1a, 0x8b, 0x45, 0xfc, 0x66, 0x89, 0x50, 0x41, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x50, 0x1c, 0x8b, 0x45, 0xfc, 0x66, 0x89, 0x50, 0x43, 0x8b, 0x45, 0xfc, 0x8a, 0x50, 0x3f, 0x8b, 0x45, 0xfc, 0x88, 0x50, 0x3d, 0x8b, 0x45, 0xfc, 0x8a, 0x50, 0x40, 0x8b, 0x45, 0xfc, 0x88, 0x50, 0x3e, 0x8b, 0x45, 0xfc, 0xe8, 0xae, 0xef, 0xfe, 0xff, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x3, 0xe7, 0xfd, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x55, 0xdc, 0x8b, 0x45, 0xfc, 0xe8, 0x68, 0xd6, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x27, 0x7e, 0xf2, 0xff, 0x66, 0x8b, 0, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xfc, 0xe8, 0x91, 0x95, 0xf3, 0xff, 0x89, 0x45, 0xec, 0x8d, 0x45, 0xdc, 0xe8, 0x4e, 0x7f, 0xf2, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0x9, 0xc7, 0x45, 0xd8, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x45, 0x1f, 0, 0, 0xbb, 0xf2, 0x29, 0x1b, 0x10, 0xba, 0xff, 0x29, 0x1b, 0x10, 0x31, 0xc0, 0xe8, 0x54, 0x29, 0, 0, 0x89, 0x45, 0xd8, 0x8d, 0x7d, 0xcc, 0xbe, 0x88, 0xdd, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x8d, 0x4d, 0xf0, 0xf, 0xbf, 0x5d, 0xec, 0xf, 0xbf, 0x55, 0xf4, 0x8b, 0x45, 0xfc, 0xe8, 0x29, 0x1b, 0xff, 0xff, 0xf, 0xbf, 0x45, 0xf0, 0x50, 0x31, 0xd2, 0x8a, 0x15, 0xda, 0x37, 0x1c, 0x10, 0x69, 0xd2, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x45, 0xf4, 0x1, 0xd0, 0x8a, 0x80, 0x92, 0xa4, 0x1c, 0x10, 0x25, 0xff, 0, 0, 0, 0x50, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x33, 0x8b, 0x80, 0xd3, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xcc, 0xb8, 0xfa, 0, 0, 0, 0x50, 0x8d, 0x45, 0xe0, 0x50, 0xe8, 0x80, 0xeb, 0xfd, 0xff, 0x83, 0xc4, 0x18, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xfc, 0x8b, 0x52, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe8, 0xe8, 0xd8, 0x35, 0xf1, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xfc, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xe5, 0x62, 0xf2, 0xff, 0xe8, 0x78, 0x26, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x12, 0x56, 0xf2, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x2e, 0xe6, 0xfd, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10163378, 0x5)   pushd(0x68);                          /* push dword 0x68 */
    II(0x1016337d, 0x5)   calld(sys_check_available_stack_size, 0x29d0); /* call 0x10165d52 */
    II(0x10163382, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10163383, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10163384, 0x1)   pushd(edx);                           /* push edx */
    II(0x10163385, 0x1)   pushd(esi);                           /* push esi */
    II(0x10163386, 0x1)   pushd(edi);                           /* push edi */
    II(0x10163387, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10163388, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1016338a, 0x6)   sub(esp, 0x34);                       /* sub esp, 0x34 */
    II(0x10163390, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x10163393, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10163396, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x3d);   /* cmp word [eax+0x8], 0x3d */
    II(0x1016339b, 0x2)   jnzd(0x101633b9, 0x1c);               /* jnz 0x101633b9 */
    II(0x1016339d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633a0, 0x4)   mov(dx, memw_a32(ds, eax + 0x1a));    /* mov dx, [eax+0x1a] */
//    II(0x101633a4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633a7, 0x4)   mov(memw_a32(ds, eax + 0x41), dx);    /* mov [eax+0x41], dx */
    II(0x101633ab, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633ae, 0x4)   mov(dx, memw_a32(ds, eax + 0x1c));    /* mov dx, [eax+0x1c] */
//    II(0x101633b2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633b5, 0x4)   mov(memw_a32(ds, eax + 0x43), dx);    /* mov [eax+0x43], dx */
l_0x101633b9:
    II(0x101633b9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633bc, 0x3)   mov(dl, memb_a32(ds, eax + 0x3f));    /* mov dl, [eax+0x3f] */
//    II(0x101633bf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633c2, 0x3)   mov(memb_a32(ds, eax + 0x3d), dl);    /* mov [eax+0x3d], dl */
    II(0x101633c5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633c8, 0x3)   mov(dl, memb_a32(ds, eax + 0x40));    /* mov dl, [eax+0x40] */
//    II(0x101633cb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633ce, 0x3)   mov(memb_a32(ds, eax + 0x3e), dl);    /* mov [eax+0x3e], dl */
    II(0x101633d1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633d4, 0x5)   calld(0x10152387, -0x11052);          /* call 0x10152387 */
    II(0x101633d9, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x101633dd, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101633e0, 0x5)   calld(my_string_ctor, -0x218fd);      /* call 0x10141ae8 */
    II(0x101633e5, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x101633e8, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x101633ec, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x101633ef, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101633f2, 0x5)   calld(0x10150a5f, -0x12998);          /* call 0x10150a5f */
    II(0x101633f7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101633f9, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x101633fc, 0x5)   calld(0x1008b228, -0xd81d9);          /* call 0x1008b228 */
    II(0x10163401, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x10163404, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10163407, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016340a, 0x5)   calld(0x1009c9a0, -0xc6a6f);          /* call 0x1009c9a0 */
    II(0x1016340f, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x10163412, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10163415, 0x5)   calld(my_2_get_count, -0xd80b2);      /* call 0x1008b368 */
    II(0x1016341a, 0x1)   cwde();                               /* cwde */
    II(0x1016341b, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1016341d, 0x2)   jled(0x10163428, 0x9);                /* jle 0x10163428 */
    II(0x1016341f, 0x7)   mov(memd_a32(ss, ebp - 0x28), 0);     /* mov dword [ebp-0x28], 0x0 */
    II(0x10163426, 0x2)   jmpd(0x10163441, 0x19);               /* jmp 0x10163441 */
l_0x10163428:
    II(0x10163428, 0x5)   mov(ecx, 0x1f45);                     /* mov ecx, 0x1f45 */
    II(0x1016342d, 0x5)   mov(ebx, 0x101b29f2);                 /* mov ebx, 0x101b29f2 */ /* "unitsmgr.cpp" */
    II(0x10163432, 0x5)   mov(edx, 0x101b29ff);                 /* mov edx, 0x101b29ff */ /* "build_list.GetCount() > 0" */
    II(0x10163437, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10163439, 0x5)   calld(sys_assert, 0x2954);            /* call 0x10165d92 */
    II(0x1016343e, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
l_0x10163441:
    II(0x10163441, 0x3)   lea(edi, ebp - 0x34);                 /* lea edi, [ebp-0x34] */
    II(0x10163444, 0x5)   mov(esi, 0x101bdd88);                 /* mov esi, 0x101bdd88 */
    II(0x10163449, 0x1)   movsd_a32();                          /* movsd */
    II(0x1016344a, 0x1)   movsd_a32();                          /* movsd */
    II(0x1016344b, 0x1)   movsd_a32();                          /* movsd */
    II(0x1016344c, 0x3)   lea(ecx, ebp - 0x10);                 /* lea ecx, [ebp-0x10] */
    II(0x1016344f, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x10163453, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x10163457, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1016345a, 0x5)   calld(0x10154f88, -0xe4d7);           /* call 0x10154f88 */
    II(0x1016345f, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x10163463, 0x1)   pushd(eax);                           /* push eax */
    II(0x10163464, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10163466, 0x6)   mov(dl, memb_a32(ds, 0x101c37da));    /* mov dl, [0x101c37da] */
    II(0x1016346c, 0x6)   imul(edx, edx, 0x247);                /* imul edx, edx, 0x247 */
    II(0x10163472, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10163476, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x10163478, 0x6)   mov(al, memb_a32(ds, eax + 0x101ca492)); /* mov al, [eax+0x101ca492] */
    II(0x1016347e, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10163483, 0x1)   pushd(eax);                           /* push eax */
    II(0x10163484, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10163488, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x1016348b, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x10163491, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10163495, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x10163498, 0x6)   mov(eax, memd_a32(ds, eax + 0x101c81d3)); /* mov eax, [eax+0x101c81d3] */
    II(0x1016349e, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x101634a1, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x101634a4, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x34)); /* push dword [eax+ebp-0x34] */
    II(0x101634a8, 0x5)   mov(eax, 0xfa);                       /* mov eax, 0xfa */
    II(0x101634ad, 0x1)   pushd(eax);                           /* push eax */
    II(0x101634ae, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101634b1, 0x1)   pushd(eax);                           /* push eax */
    II(0x101634b2, 0x5)   calld(0x10142037, -0x21480);          /* call 0x10142037 */
    II(0x101634b7, 0x3)   add(esp, 0x18);                       /* add esp, 0x18 */
    II(0x101634ba, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x101634bd, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x1a));   /* mov ebx, [ebx+0x1a] */
    II(0x101634c0, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x101634c3, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x101634c6, 0x3)   mov(edx, memd_a32(ds, edx + 0x18));   /* mov edx, [edx+0x18] */
    II(0x101634c9, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x101634cc, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101634cf, 0x5)   calld(0x10076aac, -0xeca28);          /* call 0x10076aac */
    II(0x101634d4, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x101634d6, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x101634d9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101634db, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101634de, 0x5)   calld(my_strobj_c_str_v2, -0xd9d1b);  /* call 0x100897c8 */
    II(0x101634e3, 0x5)   calld(0x10115b60, -0x4d988);          /* call 0x10115b60 */
    II(0x101634e8, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101634ea, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x101634ed, 0x5)   calld(0x10088b04, -0xda9ee);          /* call 0x10088b04 */
    II(0x101634f2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101634f4, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x101634f7, 0x5)   calld(my_string_dtor, -0x219d2);      /* call 0x10141b2a */
    II(0x101634fc, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101634fe, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101634ff, 0x1)   popd(edi);                            /* pop edi */
    II(0x10163500, 0x1)   popd(esi);                            /* pop esi */
    II(0x10163501, 0x1)   popd(edx);                            /* pop edx */
    II(0x10163502, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10163503, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10163504, 0x1)   retd();                               /* ret */
FUNC_END

