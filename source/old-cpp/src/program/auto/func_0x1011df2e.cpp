FUNC_BEGIN(0x1011df2e, 0x7b79455dfea2f381, 0x20, ({0x68, 0xd4, 0, 0, 0, 0xe8, 0x1a, 0x7e, 0x4, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xa4, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xcc, 0xe8, 0x9b, 0x87, 0xf5, 0xff, 0x89, 0x45, 0xd0, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xd4, 0xe8, 0x8c, 0xd4, 0xf8, 0xff, 0x89, 0x45, 0xd8, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xdc, 0xe8, 0x61, 0xa0, 0xf9, 0xff, 0x89, 0x45, 0xe0, 0x80, 0x65, 0xf8, 0xfe, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xe5, 0xcd, 0x1, 0, 0x84, 0xc0, 0x74, 0x3a, 0xe8, 0x5f, 0xa3, 0x2, 0, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x2b, 0x50, 0x12, 0x89, 0x50, 0x12, 0x8b, 0x45, 0xfc, 0x83, 0x78, 0x1a, 0, 0x75, 0x21, 0x8b, 0x45, 0xfc, 0xe8, 0xc3, 0x9f, 0xf9, 0xff, 0x8b, 0x5d, 0xfc, 0x83, 0xc3, 0x4, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x74, 0x28, 0, 0, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xda, 0x9f, 0xf9, 0xff, 0xe8, 0x25, 0xa3, 0x2, 0, 0x2b, 0x5, 0x74, 0x39, 0x1c, 0x10, 0x3b, 0x5, 0x84, 0xdd, 0x1b, 0x10, 0x76, 0x20, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0x8a, 0xcd, 0x1, 0, 0x84, 0xc0, 0x75, 0x10, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x4, 0xe8, 0x9a, 0x8b, 0xf5, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0x2, 0xeb, 0x2, 0xeb, 0x33, 0xe8, 0xf0, 0xa2, 0x2, 0, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x2b, 0x50, 0x12, 0x89, 0x50, 0x12, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x4f, 0x93, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x15, 0xbf, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xff, 0x7e, 0xf5, 0xff, 0xe9, 0x7, 0x3, 0, 0, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0xe8, 0xd5, 0xcc, 0x1, 0, 0x84, 0xc0, 0xf, 0x84, 0x86, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x4, 0xe8, 0x41, 0x8b, 0xf5, 0xff, 0x98, 0x85, 0xc0, 0x75, 0x23, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xa, 0x93, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xd0, 0xbe, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xba, 0x7e, 0xf5, 0xff, 0xe9, 0xc2, 0x2, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0xfa, 0x15, 0, 0, 0xe8, 0x70, 0xa2, 0x2, 0, 0x2b, 0x5, 0x74, 0x39, 0x1c, 0x10, 0x3b, 0x5, 0x84, 0xdd, 0x1b, 0x10, 0x76, 0x33, 0xe8, 0x5d, 0xa2, 0x2, 0, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x2b, 0x50, 0x12, 0x89, 0x50, 0x12, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xbc, 0x92, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x82, 0xbe, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x6c, 0x7e, 0xf5, 0xff, 0xe9, 0x74, 0x2, 0, 0, 0xe9, 0x68, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0xe8, 0x46, 0x9e, 0xf9, 0xff, 0xe8, 0x45, 0x9f, 0xf9, 0xff, 0x8d, 0x5d, 0xcc, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x4d, 0x85, 0xf5, 0xff, 0xc7, 0x45, 0xf4, 0x5, 0, 0, 0, 0x8b, 0x55, 0xfc, 0x8d, 0x45, 0xdc, 0xe8, 0x13, 0x28, 0, 0, 0xe8, 0xed, 0xc6, 0xfc, 0xff, 0x8b, 0x45, 0xf4, 0xff, 0x4d, 0xf4, 0x98, 0x85, 0xc0, 0x7f, 0x4d, 0xc7, 0x45, 0xf4, 0x5, 0, 0, 0, 0xe8, 0xe3, 0xa1, 0x2, 0, 0x2b, 0x5, 0x74, 0x39, 0x1c, 0x10, 0x3b, 0x5, 0x84, 0xdd, 0x1b, 0x10, 0x76, 0x33, 0xe8, 0xd0, 0xa1, 0x2, 0, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x2b, 0x50, 0x12, 0x89, 0x50, 0x12, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x2f, 0x92, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xf5, 0xbd, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xdf, 0x7d, 0xf5, 0xff, 0xe9, 0xe7, 0x1, 0, 0, 0x8d, 0x55, 0xdc, 0x8b, 0x45, 0xfc, 0xe8, 0x67, 0xea, 0xf7, 0xff, 0x84, 0xc0, 0x74, 0x23, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xfd, 0x91, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xc3, 0xbd, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xad, 0x7d, 0xf5, 0xff, 0xe9, 0xb5, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x83, 0x78, 0x1a, 0, 0x74, 0x9, 0xc7, 0x45, 0xc8, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0xcb, 0xa, 0, 0, 0xbb, 0x9e, 0x7d, 0x1a, 0x10, 0xba, 0xa8, 0x7d, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xe6, 0x7b, 0x4, 0, 0x89, 0x45, 0xc8, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x16, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x1a, 0xe8, 0x44, 0xea, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x1a, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x16, 0xe8, 0x39, 0xe8, 0xff, 0xff, 0x84, 0xc0, 0xf, 0x85, 0x1c, 0xff, 0xff, 0xff, 0xa1, 0xe2, 0x52, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x83, 0xf8, 0x1, 0x7c, 0x51, 0xa1, 0xfa, 0x52, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0xe, 0xe8, 0xb3, 0xa3, 0x2, 0, 0x50, 0xff, 0x35, 0xe8, 0x52, 0x1c, 0x10, 0xb8, 0xbf, 0x7d, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x64, 0xff, 0xff, 0xff, 0x50, 0xe8, 0xee, 0x7c, 0x4, 0, 0x83, 0xc4, 0x14, 0xe8, 0xe5, 0xc7, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xfa, 0xc7, 0xfa, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0x31, 0xd2, 0x8d, 0x85, 0x64, 0xff, 0xff, 0xff, 0xe8, 0xec, 0x7a, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0xff, 0x70, 0x1a, 0x8b, 0x45, 0xfc, 0xe8, 0xd3, 0x9c, 0xf9, 0xff, 0xe8, 0x7e, 0x27, 0, 0, 0xf, 0xbf, 0xc8, 0x8d, 0x45, 0xcc, 0xe8, 0x1f, 0x83, 0xf5, 0xff, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8d, 0x45, 0xcc, 0xe8, 0x11, 0x83, 0xf5, 0xff, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe4, 0xe8, 0x3b, 0x88, 0xf5, 0xff, 0x89, 0xc3, 0x8d, 0x55, 0xe8, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x16, 0xe8, 0xa5, 0xeb, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd4, 0xe8, 0x45, 0x28, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xa3, 0xbc, 0xf8, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x16, 0x89, 0x45, 0xec, 0x83, 0x7d, 0xec, 0, 0x74, 0x17, 0x31, 0xd2, 0x8b, 0x45, 0xec, 0xe8, 0x94, 0xdf, 0xff, 0xff, 0xe8, 0xb1, 0x7c, 0x4, 0, 0x89, 0x85, 0x60, 0xff, 0xff, 0xff, 0xeb, 0xa, 0xc7, 0x85, 0x60, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x1a, 0x89, 0x45, 0xf0, 0x83, 0x7d, 0xf0, 0, 0x74, 0x17, 0x31, 0xd2, 0x8b, 0x45, 0xf0, 0xe8, 0x64, 0xdf, 0xff, 0xff, 0xe8, 0x81, 0x7c, 0x4, 0, 0x89, 0x85, 0x5c, 0xff, 0xff, 0xff, 0xeb, 0xa, 0xc7, 0x85, 0x5c, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xc7, 0x40, 0x16, 0, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xc7, 0x40, 0x1a, 0, 0, 0, 0, 0x8d, 0x45, 0xd4, 0xe8, 0x2b, 0xd0, 0xf8, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0xe8, 0x27, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x43, 0x90, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x9, 0xbc, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xf3, 0x7b, 0xf5, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x1011df2e, 0x5)   pushd(0xd4);                          /* push dword 0xd4 */
    II(0x1011df33, 0x5)   calld(sys_check_available_stack_size, 0x47e1a); /* call 0x10165d52 */
    II(0x1011df38, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1011df39, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1011df3a, 0x1)   pushd(edx);                           /* push edx */
    II(0x1011df3b, 0x1)   pushd(esi);                           /* push esi */
    II(0x1011df3c, 0x1)   pushd(edi);                           /* push edi */
    II(0x1011df3d, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1011df3e, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1011df40, 0x6)   sub(esp, 0xa4);                       /* sub esp, 0xa4 */
    II(0x1011df46, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x1011df49, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1011df4d, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011df50, 0x5)   calld(my_ctor_0x101b38f8, -0xa7865);  /* call 0x100766f0 */
    II(0x1011df55, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
    II(0x1011df58, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1011df5c, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1011df60, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011df63, 0x5)   calld(0x100ab3f4, -0x72b74);          /* call 0x100ab3f4 */
    II(0x1011df68, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x1011df6b, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1011df6f, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1011df73, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011df76, 0x5)   calld(0x100b7fdc, -0x65f9f);          /* call 0x100b7fdc */
    II(0x1011df7b, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x1011df7e, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1011df82, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011df84, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011df87, 0x5)   calld(0x1013ad71, 0x1cde5);           /* call 0x1013ad71 */
    II(0x1011df8c, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011df8e, 0x2)   jzd(0x1011dfca, 0x3a);                /* jz 0x1011dfca */
    II(0x1011df90, 0x5)   calld(0x101482f4, 0x2a35f);           /* call 0x101482f4 */
    II(0x1011df95, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011df97, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011df9a, 0x3)   sub(edx, memd_a32(ds, eax + 0x12));   /* sub edx, [eax+0x12] */
    II(0x1011df9d, 0x3)   mov(memd_a32(ds, eax + 0x12), edx);   /* mov [eax+0x12], edx */
    II(0x1011dfa0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011dfa3, 0x4)   cmp(memd_a32(ds, eax + 0x1a), 0);     /* cmp dword [eax+0x1a], 0x0 */
    II(0x1011dfa7, 0x2)   jnzd(0x1011dfca, 0x21);               /* jnz 0x1011dfca */
    II(0x1011dfa9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011dfac, 0x5)   calld(0x100b7f74, -0x6603d);          /* call 0x100b7f74 */
    II(0x1011dfb1, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1011dfb4, 0x3)   add(ebx, 0x4);                        /* add ebx, 0x4 */
    II(0x1011dfb7, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011dfb9, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x1011dfbb, 0x5)   calld(0x10120834, 0x2874);            /* call 0x10120834 */
    II(0x1011dfc0, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011dfc2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011dfc5, 0x5)   calld(0x100b7fa4, -0x66026);          /* call 0x100b7fa4 */
l_0x1011dfca:
    II(0x1011dfca, 0x5)   calld(0x101482f4, 0x2a325);           /* call 0x101482f4 */
    II(0x1011dfcf, 0x6)   sub(eax, memd_a32(ds, 0x101c3974));   /* sub eax, [0x101c3974] */
    II(0x1011dfd5, 0x6)   cmp(eax, memd_a32(ds, 0x101bdd84));   /* cmp eax, [0x101bdd84] */
    II(0x1011dfdb, 0x2)   jbed(0x1011dffd, 0x20);               /* jbe 0x1011dffd */
    II(0x1011dfdd, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011dfdf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011dfe2, 0x5)   calld(0x1013ad71, 0x1cd8a);           /* call 0x1013ad71 */
    II(0x1011dfe7, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011dfe9, 0x2)   jnzd(0x1011dffb, 0x10);               /* jnz 0x1011dffb */
    II(0x1011dfeb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011dfee, 0x3)   add(eax, 0x4);                        /* add eax, 0x4 */
    II(0x1011dff1, 0x5)   calld(0x10076b90, -0xa7466);          /* call 0x10076b90 */
    II(0x1011dff6, 0x1)   cwde();                               /* cwde */
    II(0x1011dff7, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1011dff9, 0x2)   jled(0x1011dffd, 0x2);                /* jle 0x1011dffd */
l_0x1011dffb:
    II(0x1011dffb, 0x2)   jmpd(0x1011dfff, 0x2);                /* jmp 0x1011dfff */
l_0x1011dffd:
    II(0x1011dffd, 0x2)   jmpd(0x1011e032, 0x33);               /* jmp 0x1011e032 */
l_0x1011dfff:
    II(0x1011dfff, 0x5)   calld(0x101482f4, 0x2a2f0);           /* call 0x101482f4 */
    II(0x1011e004, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e006, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e009, 0x3)   sub(edx, memd_a32(ds, eax + 0x12));   /* sub edx, [eax+0x12] */
    II(0x1011e00c, 0x3)   mov(memd_a32(ds, eax + 0x12), edx);   /* mov [eax+0x12], edx */
    II(0x1011e00f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e011, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e014, 0x5)   calld(0x100b7368, -0x66cb1);          /* call 0x100b7368 */
    II(0x1011e019, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e01b, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e01e, 0x5)   calld(0x100a9f38, -0x740eb);          /* call 0x100a9f38 */
    II(0x1011e023, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e025, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e028, 0x5)   calld(0x10075f2c, -0xa8101);          /* call 0x10075f2c */
    II(0x1011e02d, 0x5)   jmpd(0x1011e339, 0x307);              /* jmp 0x1011e339 */
l_0x1011e032:
    II(0x1011e032, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e034, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e037, 0x5)   calld(0x1013ad11, 0x1ccd5);           /* call 0x1013ad11 */
    II(0x1011e03c, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011e03e, 0x6)   jzd(0x1011e0ca, 0x86);                /* jz dword 0x1011e0ca */
    II(0x1011e044, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e047, 0x3)   add(eax, 0x4);                        /* add eax, 0x4 */
    II(0x1011e04a, 0x5)   calld(0x10076b90, -0xa74bf);          /* call 0x10076b90 */
    II(0x1011e04f, 0x1)   cwde();                               /* cwde */
    II(0x1011e050, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1011e052, 0x2)   jnzd(0x1011e077, 0x23);               /* jnz 0x1011e077 */
    II(0x1011e054, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e056, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e059, 0x5)   calld(0x100b7368, -0x66cf6);          /* call 0x100b7368 */
    II(0x1011e05e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e060, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e063, 0x5)   calld(0x100a9f38, -0x74130);          /* call 0x100a9f38 */
    II(0x1011e068, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e06a, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e06d, 0x5)   calld(0x10075f2c, -0xa8146);          /* call 0x10075f2c */
    II(0x1011e072, 0x5)   jmpd(0x1011e339, 0x2c2);              /* jmp 0x1011e339 */
l_0x1011e077:
    II(0x1011e077, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e07a, 0x5)   calld(0x1011f679, 0x15fa);            /* call 0x1011f679 */
    II(0x1011e07f, 0x5)   calld(0x101482f4, 0x2a270);           /* call 0x101482f4 */
    II(0x1011e084, 0x6)   sub(eax, memd_a32(ds, 0x101c3974));   /* sub eax, [0x101c3974] */
    II(0x1011e08a, 0x6)   cmp(eax, memd_a32(ds, 0x101bdd84));   /* cmp eax, [0x101bdd84] */
    II(0x1011e090, 0x2)   jbed(0x1011e0c5, 0x33);               /* jbe 0x1011e0c5 */
    II(0x1011e092, 0x5)   calld(0x101482f4, 0x2a25d);           /* call 0x101482f4 */
    II(0x1011e097, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e099, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e09c, 0x3)   sub(edx, memd_a32(ds, eax + 0x12));   /* sub edx, [eax+0x12] */
    II(0x1011e09f, 0x3)   mov(memd_a32(ds, eax + 0x12), edx);   /* mov [eax+0x12], edx */
    II(0x1011e0a2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e0a4, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e0a7, 0x5)   calld(0x100b7368, -0x66d44);          /* call 0x100b7368 */
    II(0x1011e0ac, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e0ae, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e0b1, 0x5)   calld(0x100a9f38, -0x7417e);          /* call 0x100a9f38 */
    II(0x1011e0b6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e0b8, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e0bb, 0x5)   calld(0x10075f2c, -0xa8194);          /* call 0x10075f2c */
    II(0x1011e0c0, 0x5)   jmpd(0x1011e339, 0x274);              /* jmp 0x1011e339 */
l_0x1011e0c5:
    II(0x1011e0c5, 0x5)   jmpd(0x1011e032, -0x98);              /* jmp 0x1011e032 */
l_0x1011e0ca:
    II(0x1011e0ca, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e0cd, 0x5)   calld(0x100b7f18, -0x661ba);          /* call 0x100b7f18 */
    II(0x1011e0d2, 0x5)   calld(my__get_unit, -0x660bb);        /* call 0x100b801c */
    II(0x1011e0d7, 0x3)   lea(ebx, ebp - 0x34);                 /* lea ebx, [ebp-0x34] */
    II(0x1011e0da, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e0dc, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x1011e0de, 0x5)   calld(0x10076630, -0xa7ab3);          /* call 0x10076630 */
    II(0x1011e0e3, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x5);    /* mov dword [ebp-0xc], 0x5 */
    II(0x1011e0ea, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1011e0ed, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e0f0, 0x5)   calld(0x10120908, 0x2813);            /* call 0x10120908 */
l_0x1011e0f5:
    II(0x1011e0f5, 0x5)   calld(0x100ea7e7, -0x33913);          /* call 0x100ea7e7 */
    II(0x1011e0fa, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1011e0fd, 0x3)   dec(memd_a32(ss, ebp - 0xc));         /* dec dword [ebp-0xc] */
    II(0x1011e100, 0x1)   cwde();                               /* cwde */
    II(0x1011e101, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1011e103, 0x2)   jgd(0x1011e152, 0x4d);                /* jg 0x1011e152 */
    II(0x1011e105, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x5);    /* mov dword [ebp-0xc], 0x5 */
    II(0x1011e10c, 0x5)   calld(0x101482f4, 0x2a1e3);           /* call 0x101482f4 */
    II(0x1011e111, 0x6)   sub(eax, memd_a32(ds, 0x101c3974));   /* sub eax, [0x101c3974] */
    II(0x1011e117, 0x6)   cmp(eax, memd_a32(ds, 0x101bdd84));   /* cmp eax, [0x101bdd84] */
    II(0x1011e11d, 0x2)   jbed(0x1011e152, 0x33);               /* jbe 0x1011e152 */
    II(0x1011e11f, 0x5)   calld(0x101482f4, 0x2a1d0);           /* call 0x101482f4 */
    II(0x1011e124, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e126, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e129, 0x3)   sub(edx, memd_a32(ds, eax + 0x12));   /* sub edx, [eax+0x12] */
    II(0x1011e12c, 0x3)   mov(memd_a32(ds, eax + 0x12), edx);   /* mov [eax+0x12], edx */
    II(0x1011e12f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e131, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e134, 0x5)   calld(0x100b7368, -0x66dd1);          /* call 0x100b7368 */
    II(0x1011e139, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e13b, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e13e, 0x5)   calld(0x100a9f38, -0x7420b);          /* call 0x100a9f38 */
    II(0x1011e143, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e145, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e148, 0x5)   calld(0x10075f2c, -0xa8221);          /* call 0x10075f2c */
    II(0x1011e14d, 0x5)   jmpd(0x1011e339, 0x1e7);              /* jmp 0x1011e339 */
l_0x1011e152:
    II(0x1011e152, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x1011e155, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e158, 0x5)   calld(0x1009cbc4, -0x81599);          /* call 0x1009cbc4 */
    II(0x1011e15d, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011e15f, 0x2)   jzd(0x1011e184, 0x23);                /* jz 0x1011e184 */
    II(0x1011e161, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e163, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e166, 0x5)   calld(0x100b7368, -0x66e03);          /* call 0x100b7368 */
    II(0x1011e16b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e16d, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e170, 0x5)   calld(0x100a9f38, -0x7423d);          /* call 0x100a9f38 */
    II(0x1011e175, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e177, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e17a, 0x5)   calld(0x10075f2c, -0xa8253);          /* call 0x10075f2c */
    II(0x1011e17f, 0x5)   jmpd(0x1011e339, 0x1b5);              /* jmp 0x1011e339 */
l_0x1011e184:
    II(0x1011e184, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e187, 0x4)   cmp(memd_a32(ds, eax + 0x1a), 0);     /* cmp dword [eax+0x1a], 0x0 */
    II(0x1011e18b, 0x2)   jzd(0x1011e196, 0x9);                 /* jz 0x1011e196 */
    II(0x1011e18d, 0x7)   mov(memd_a32(ss, ebp - 0x38), 0);     /* mov dword [ebp-0x38], 0x0 */
    II(0x1011e194, 0x2)   jmpd(0x1011e1af, 0x19);               /* jmp 0x1011e1af */
l_0x1011e196:
    II(0x1011e196, 0x5)   mov(ecx, 0xacb);                      /* mov ecx, 0xacb */
    II(0x1011e19b, 0x5)   mov(ebx, 0x101a7d9e);                 /* mov ebx, 0x101a7d9e */ /* "paths.cpp" */
    II(0x1011e1a0, 0x5)   mov(edx, 0x101a7da8);                 /* mov edx, 0x101a7da8 */ /* "backward_searcher != 0" */
    II(0x1011e1a5, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1011e1a7, 0x5)   calld(sys_assert, 0x47be6);           /* call 0x10165d92 */
    II(0x1011e1ac, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
l_0x1011e1af:
    II(0x1011e1af, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e1b2, 0x3)   mov(edx, memd_a32(ds, eax + 0x16));   /* mov edx, [eax+0x16] */
//    II(0x1011e1b5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e1b8, 0x3)   mov(eax, memd_a32(ds, eax + 0x1a));   /* mov eax, [eax+0x1a] */
    II(0x1011e1bb, 0x5)   calld(0x1011cc04, -0x15bc);           /* call 0x1011cc04 */
    II(0x1011e1c0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e1c3, 0x3)   mov(edx, memd_a32(ds, eax + 0x1a));   /* mov edx, [eax+0x1a] */
//    II(0x1011e1c6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e1c9, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1011e1cc, 0x5)   calld(0x1011ca0a, -0x17c7);           /* call 0x1011ca0a */
    II(0x1011e1d1, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011e1d3, 0x6)   jnzd(0x1011e0f5, -0xe4);              /* jnz dword 0x1011e0f5 */
    II(0x1011e1d9, 0x5)   mov(eax, memd_a32(ds, 0x101c52e2));   /* mov eax, [0x101c52e2] */
    II(0x1011e1de, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1011e1e1, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x1011e1e4, 0x2)   jld(0x1011e237, 0x51);                /* jl 0x1011e237 */
    II(0x1011e1e6, 0x5)   mov(eax, memd_a32(ds, 0x101c52fa));   /* mov eax, [0x101c52fa] */
    II(0x1011e1eb, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1011e1ee, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011e1ef, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e1f2, 0x3)   mov(eax, memd_a32(ds, eax + 0xe));    /* mov eax, [eax+0xe] */
    II(0x1011e1f5, 0x5)   calld(0x101485ad, 0x2a3b3);           /* call 0x101485ad */
    II(0x1011e1fa, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011e1fb, 0x6)   pushd(memd_a32(ds, 0x101c52e8));      /* push dword [0x101c52e8] */
    II(0x1011e201, 0x5)   mov(eax, 0x101a7dbf);                 /* mov eax, 0x101a7dbf */ /* "Debug: path generator evaluated %li tiles in %li msecs, max depth = %i" */
    II(0x1011e206, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011e207, 0x6)   lea(eax, ebp - 0x9c);                 /* lea eax, [ebp+0xffffff64] */
    II(0x1011e20d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011e20e, 0x5)   calld(sys_sprintf, 0x47cee);          /* call 0x10165f01 */
    II(0x1011e213, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x1011e216, 0x5)   calld(0x100caa00, -0x5381b);          /* call 0x100caa00 */
    II(0x1011e21b, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1011e220, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011e221, 0x5)   calld(0x100caa20, -0x53806);          /* call 0x100caa20 */
    II(0x1011e226, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x1011e228, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x1011e22a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e22c, 0x6)   lea(eax, ebp - 0x9c);                 /* lea eax, [ebp+0xffffff64] */
    II(0x1011e232, 0x5)   calld(0x10115d23, -0x8514);           /* call 0x10115d23 */
l_0x1011e237:
    II(0x1011e237, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e23a, 0x3)   pushd(memd_a32(ds, eax + 0x1a));      /* push dword [eax+0x1a] */
    II(0x1011e23d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e240, 0x5)   calld(0x100b7f18, -0x6632d);          /* call 0x100b7f18 */
    II(0x1011e245, 0x5)   calld(0x101209c8, 0x277e);            /* call 0x101209c8 */
    II(0x1011e24a, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x1011e24d, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e250, 0x5)   calld(0x10076574, -0xa7ce1);          /* call 0x10076574 */
    II(0x1011e255, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x1011e258, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1011e25b, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e25e, 0x5)   calld(0x10076574, -0xa7cef);          /* call 0x10076574 */
    II(0x1011e263, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x1011e266, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1011e269, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x1011e26c, 0x5)   calld(0x10076aac, -0xa77c5);          /* call 0x10076aac */
    II(0x1011e271, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x1011e273, 0x3)   lea(edx, ebp - 0x18);                 /* lea edx, [ebp-0x18] */
    II(0x1011e276, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e279, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1011e27c, 0x5)   calld(0x1011ce26, -0x145b);           /* call 0x1011ce26 */
    II(0x1011e281, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e283, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e286, 0x5)   calld(0x10120ad0, 0x2845);            /* call 0x10120ad0 */
    II(0x1011e28b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e28d, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1011e290, 0x5)   calld(0x100a9f38, -0x7435d);          /* call 0x100a9f38 */
    II(0x1011e295, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e298, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1011e29b, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x1011e29e, 0x4)   cmp(memd_a32(ss, ebp - 0x14), 0);     /* cmp dword [ebp-0x14], 0x0 */
    II(0x1011e2a2, 0x2)   jzd(0x1011e2bb, 0x17);                /* jz 0x1011e2bb */
    II(0x1011e2a4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e2a6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x1011e2a9, 0x5)   calld(my_dtor_d7, -0x206c);           /* call 0x1011c242 */
    II(0x1011e2ae, 0x5)   calld(sys_delete, 0x47cb1);           /* call 0x10165f64 */
    II(0x1011e2b3, 0x6)   mov(memd_a32(ss, ebp - 0xa0), eax);   /* mov [ebp+0xffffff60], eax */
    II(0x1011e2b9, 0x2)   jmpd(0x1011e2c5, 0xa);                /* jmp 0x1011e2c5 */
l_0x1011e2bb:
    II(0x1011e2bb, 0xa)   mov(memd_a32(ss, ebp - 0xa0), 0);     /* mov dword [ebp+0xffffff60], 0x0 */
l_0x1011e2c5:
    II(0x1011e2c5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e2c8, 0x3)   mov(eax, memd_a32(ds, eax + 0x1a));   /* mov eax, [eax+0x1a] */
    II(0x1011e2cb, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1011e2ce, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0);     /* cmp dword [ebp-0x10], 0x0 */
    II(0x1011e2d2, 0x2)   jzd(0x1011e2eb, 0x17);                /* jz 0x1011e2eb */
    II(0x1011e2d4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e2d6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1011e2d9, 0x5)   calld(my_dtor_d7, -0x209c);           /* call 0x1011c242 */
    II(0x1011e2de, 0x5)   calld(sys_delete, 0x47c81);           /* call 0x10165f64 */
    II(0x1011e2e3, 0x6)   mov(memd_a32(ss, ebp - 0xa4), eax);   /* mov [ebp+0xffffff5c], eax */
    II(0x1011e2e9, 0x2)   jmpd(0x1011e2f5, 0xa);                /* jmp 0x1011e2f5 */
l_0x1011e2eb:
    II(0x1011e2eb, 0xa)   mov(memd_a32(ss, ebp - 0xa4), 0);     /* mov dword [ebp+0xffffff5c], 0x0 */
l_0x1011e2f5:
    II(0x1011e2f5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e2f8, 0x7)   mov(memd_a32(ds, eax + 0x16), 0);     /* mov dword [eax+0x16], 0x0 */
    II(0x1011e2ff, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e302, 0x7)   mov(memd_a32(ds, eax + 0x1a), 0);     /* mov dword [eax+0x1a], 0x0 */
    II(0x1011e309, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e30c, 0x5)   calld(0x100ab33c, -0x72fd5);          /* call 0x100ab33c */
    II(0x1011e311, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1011e313, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011e316, 0x5)   calld(0x1011e342, 0x27);              /* call 0x1011e342 */
    II(0x1011e31b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e31d, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1011e320, 0x5)   calld(0x100b7368, -0x66fbd);          /* call 0x100b7368 */
    II(0x1011e325, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e327, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1011e32a, 0x5)   calld(0x100a9f38, -0x743f7);          /* call 0x100a9f38 */
    II(0x1011e32f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011e331, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1011e334, 0x5)   calld(0x10075f2c, -0xa840d);          /* call 0x10075f2c */
l_0x1011e339:
    II(0x1011e339, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1011e33b, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1011e33c, 0x1)   popd(edi);                            /* pop edi */
    II(0x1011e33d, 0x1)   popd(esi);                            /* pop esi */
    II(0x1011e33e, 0x1)   popd(edx);                            /* pop edx */
    II(0x1011e33f, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1011e340, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1011e341, 0x1)   retd();                               /* ret */
FUNC_END

