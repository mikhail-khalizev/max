FUNC_BEGIN(0x1012fbcd, 0xbd4a40cd29f820f7, 0x20, ({0x68, 0x58, 0, 0, 0, 0xe8, 0x7b, 0x61, 0x3, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x30, 0, 0, 0, 0x89, 0x45, 0xf0, 0x89, 0x55, 0xf4, 0x89, 0x5d, 0xf8, 0x89, 0x4d, 0xfc, 0x80, 0x4d, 0xec, 0x1, 0x8d, 0x45, 0xe8, 0xe8, 0xee, 0x1e, 0x1, 0, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xec, 0xfe, 0xb8, 0x5, 0, 0, 0, 0xe8, 0x41, 0xa6, 0x3, 0, 0x83, 0x45, 0x10, 0xd8, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0x4, 0x74, 0x9, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0xb, 0x75, 0x2, 0xeb, 0x9, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0x15, 0x75, 0x2, 0xeb, 0xd, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0x1f, 0xf, 0x85, 0x98, 0x1, 0, 0, 0x8b, 0x45, 0xf0, 0x66, 0x83, 0x78, 0x8, 0x3e, 0x75, 0x29, 0x8b, 0x45, 0xf0, 0x8a, 0x40, 0x45, 0x25, 0xff, 0, 0, 0, 0x50, 0xb8, 0xf4, 0x87, 0x1a, 0x10, 0x50, 0xb8, 0x50, 0, 0, 0, 0x50, 0x8d, 0x45, 0xe8, 0x50, 0xe8, 0xd1, 0x23, 0x1, 0, 0x83, 0xc4, 0x10, 0xe9, 0x63, 0x1, 0, 0, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3e, 0x1f, 0x75, 0x25, 0x8b, 0x45, 0xf0, 0xe8, 0x49, 0xb, 0xfd, 0xff, 0x89, 0x45, 0xe0, 0x8d, 0x55, 0xe0, 0x8d, 0x45, 0xe8, 0xe8, 0xb9, 0x25, 0x1, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x93, 0x1e, 0x1, 0, 0xe9, 0x35, 0x1, 0, 0, 0x8d, 0x55, 0xdc, 0x8b, 0x45, 0xf0, 0xe8, 0xb8, 0xd, 0x2, 0, 0x8d, 0x45, 0xdc, 0xe8, 0xb9, 0xb6, 0xf5, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0x9, 0xc7, 0x45, 0xd8, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x6, 0x5, 0, 0, 0xbb, 0x17, 0x88, 0x1a, 0x10, 0xba, 0x23, 0x88, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xbf, 0x60, 0x3, 0, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0x15, 0x74, 0x9, 0x8b, 0x45, 0xf0, 0x80, 0x78, 0x3d, 0x1f, 0x75, 0x3c, 0x8b, 0x45, 0xf0, 0x8a, 0x40, 0x45, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x2a, 0xb5, 0xf5, 0xff, 0xf, 0xbf, 0, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0x3d, 0x88, 0x1a, 0x10, 0x50, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xe8, 0x50, 0xe8, 0x18, 0x23, 0x1, 0, 0x83, 0xc4, 0x14, 0xeb, 0x56, 0x8d, 0x4d, 0xd4, 0x8b, 0x45, 0xf0, 0xe8, 0x71, 0xcc, 0xf6, 0xff, 0xf, 0xbf, 0xd8, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xec, 0xb4, 0xf5, 0xff, 0xf, 0xbf, 0x10, 0x8b, 0x45, 0xf0, 0xe8, 0x41, 0x52, 0x2, 0, 0xf, 0xbf, 0x45, 0xd4, 0x50, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xd2, 0xb4, 0xf5, 0xff, 0xf, 0xbf, 0, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0x6b, 0x88, 0x1a, 0x10, 0x50, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xe8, 0x50, 0xe8, 0xc0, 0x22, 0x1, 0, 0x83, 0xc4, 0x14, 0xf, 0xbf, 0x55, 0x14, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0x2b, 0xc2, 0xd1, 0xf8, 0xf, 0xbf, 0x55, 0xfc, 0x1, 0xd0, 0x98, 0x50, 0x8b, 0x45, 0xf8, 0x3, 0x45, 0x10, 0x5, 0x14, 0, 0, 0, 0x98, 0x50, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0xf, 0xbf, 0xc8, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x78, 0xb4, 0xf5, 0xff, 0xf, 0xbf, 0x18, 0x8b, 0x45, 0xf4, 0x8b, 0x50, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x16, 0xe8, 0xe8, 0xb8, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x33, 0x8d, 0xf5, 0xff, 0xeb, 0x20, 0x8b, 0x45, 0xf0, 0xe8, 0xed, 0x9, 0xfd, 0xff, 0x89, 0x45, 0xd0, 0x8d, 0x55, 0xd0, 0x8d, 0x45, 0xe8, 0xe8, 0x5d, 0x24, 0x1, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x37, 0x1d, 0x1, 0, 0xe8, 0x24, 0x55, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x68, 0xa2, 0, 0, 0, 0xf, 0xbf, 0x45, 0x14, 0x50, 0xf, 0xbf, 0x45, 0x10, 0x50, 0xf, 0xbf, 0x45, 0xfc, 0x50, 0xf, 0xbf, 0x4d, 0xf8, 0x8d, 0x45, 0xe8, 0xe8, 0xa7, 0x99, 0xf5, 0xff, 0x89, 0xc3, 0x8b, 0x45, 0xf4, 0x8b, 0x50, 0xe, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xf4, 0x8b, 0x40, 0x16, 0xe8, 0xae, 0x9c, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xe9, 0x1c, 0x1, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc2, 0x8, 0}))
    II(0x1012fbcd, 0x5)   pushd(0x58);                          /* push dword 0x58 */
    II(0x1012fbd2, 0x5)   calld(sys_check_available_stack_size, 0x3617b); /* call 0x10165d52 */
    II(0x1012fbd7, 0x1)   pushd(esi);                           /* push esi */
    II(0x1012fbd8, 0x1)   pushd(edi);                           /* push edi */
    II(0x1012fbd9, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1012fbda, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1012fbdc, 0x6)   sub(esp, 0x30);                       /* sub esp, 0x30 */
    II(0x1012fbe2, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1012fbe5, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x1012fbe8, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x1012fbeb, 0x3)   mov(memd_a32(ss, ebp - 0x4), ecx);    /* mov [ebp-0x4], ecx */
    II(0x1012fbee, 0x4)   or_(memb_a32(ss, ebp - 0x14), 0x1);   /* or byte [ebp-0x14], 0x1 */
    II(0x1012fbf2, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fbf5, 0x5)   calld(my_string_ctor, 0x11eee);       /* call 0x10141ae8 */
    II(0x1012fbfa, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x1012fbfd, 0x4)   and_(memb_a32(ss, ebp - 0x14), -0x2 /* 0xfe */); /* and byte [ebp-0x14], 0xfe */
    II(0x1012fc01, 0x5)   mov(eax, 0x5);                        /* mov eax, 0x5 */
    II(0x1012fc06, 0x5)   calld(/* sys */ 0x1016a24c, 0x3a641); /* call 0x1016a24c */
    II(0x1012fc0b, 0x4)   add(memd_a32(ss, ebp + 0x10), -0x28 /* 0xd8 */); /* add dword [ebp+0x10], 0xd8 */
    II(0x1012fc0f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc12, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x4);   /* cmp byte [eax+0x3d], 0x4 */
    II(0x1012fc16, 0x2)   jzd(0x1012fc21, 0x9);                 /* jz 0x1012fc21 */
    II(0x1012fc18, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc1b, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0xb);   /* cmp byte [eax+0x3d], 0xb */
    II(0x1012fc1f, 0x2)   jnzd(0x1012fc23, 0x2);                /* jnz 0x1012fc23 */
l_0x1012fc21:
    II(0x1012fc21, 0x2)   jmpd(0x1012fc2c, 0x9);                /* jmp 0x1012fc2c */
l_0x1012fc23:
    II(0x1012fc23, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc26, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x15);  /* cmp byte [eax+0x3d], 0x15 */
    II(0x1012fc2a, 0x2)   jnzd(0x1012fc2e, 0x2);                /* jnz 0x1012fc2e */
l_0x1012fc2c:
    II(0x1012fc2c, 0x2)   jmpd(0x1012fc3b, 0xd);                /* jmp 0x1012fc3b */
l_0x1012fc2e:
    II(0x1012fc2e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc31, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1f);  /* cmp byte [eax+0x3d], 0x1f */
    II(0x1012fc35, 0x6)   jnzd(0x1012fdd3, 0x198);              /* jnz dword 0x1012fdd3 */
l_0x1012fc3b:
    II(0x1012fc3b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc3e, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x3e);   /* cmp word [eax+0x8], 0x3e */
    II(0x1012fc43, 0x2)   jnzd(0x1012fc6e, 0x29);               /* jnz 0x1012fc6e */
    II(0x1012fc45, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc48, 0x3)   mov(al, memb_a32(ds, eax + 0x45));    /* mov al, [eax+0x45] */
    II(0x1012fc4b, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012fc50, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fc51, 0x5)   mov(eax, 0x101a87f4);                 /* mov eax, 0x101a87f4 */ /* "Number of turns to clear site: %i." */
    II(0x1012fc56, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fc57, 0x5)   mov(eax, 0x50);                       /* mov eax, 0x50 */
    II(0x1012fc5c, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fc5d, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fc60, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fc61, 0x5)   calld(0x10142037, 0x123d1);           /* call 0x10142037 */
    II(0x1012fc66, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x1012fc69, 0x5)   jmpd(0x1012fdd1, 0x163);              /* jmp 0x1012fdd1 */
l_0x1012fc6e:
    II(0x1012fc6e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc71, 0x4)   cmp(memb_a32(ds, eax + 0x3e), 0x1f);  /* cmp byte [eax+0x3e], 0x1f */
    II(0x1012fc75, 0x2)   jnzd(0x1012fc9c, 0x25);               /* jnz 0x1012fc9c */
    II(0x1012fc77, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fc7a, 0x5)   calld(0x101007c8, -0x2f4b7);          /* call 0x101007c8 */
    II(0x1012fc7f, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x1012fc82, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x1012fc85, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fc88, 0x5)   calld(0x10142246, 0x125b9);           /* call 0x10142246 */
    II(0x1012fc8d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fc8f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1012fc92, 0x5)   calld(my_string_dtor, 0x11e93);       /* call 0x10141b2a */
    II(0x1012fc97, 0x5)   jmpd(0x1012fdd1, 0x135);              /* jmp 0x1012fdd1 */
l_0x1012fc9c:
    II(0x1012fc9c, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x1012fc9f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fca2, 0x5)   calld(0x10150a5f, 0x20db8);           /* call 0x10150a5f */
    II(0x1012fca7, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fcaa, 0x5)   calld(my_2_get_count, -0xa4947);      /* call 0x1008b368 */
    II(0x1012fcaf, 0x1)   cwde();                               /* cwde */
    II(0x1012fcb0, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1012fcb2, 0x2)   jled(0x1012fcbd, 0x9);                /* jle 0x1012fcbd */
    II(0x1012fcb4, 0x7)   mov(memd_a32(ss, ebp - 0x28), 0);     /* mov dword [ebp-0x28], 0x0 */
    II(0x1012fcbb, 0x2)   jmpd(0x1012fcd6, 0x19);               /* jmp 0x1012fcd6 */
l_0x1012fcbd:
    II(0x1012fcbd, 0x5)   mov(ecx, 0x506);                      /* mov ecx, 0x506 */
    II(0x1012fcc2, 0x5)   mov(ebx, 0x101a8817);                 /* mov ebx, 0x101a8817 */ /* "reports.cpp" */
    II(0x1012fcc7, 0x5)   mov(edx, 0x101a8823);                 /* mov edx, 0x101a8823 */ /* "build_list.GetCount() > 0" */
    II(0x1012fccc, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012fcce, 0x5)   calld(sys_assert, 0x360bf);           /* call 0x10165d92 */
    II(0x1012fcd3, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
l_0x1012fcd6:
    II(0x1012fcd6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fcd9, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x15);  /* cmp byte [eax+0x3d], 0x15 */
    II(0x1012fcdd, 0x2)   jzd(0x1012fce8, 0x9);                 /* jz 0x1012fce8 */
    II(0x1012fcdf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fce2, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1f);  /* cmp byte [eax+0x3d], 0x1f */
    II(0x1012fce6, 0x2)   jnzd(0x1012fd24, 0x3c);               /* jnz 0x1012fd24 */
l_0x1012fce8:
    II(0x1012fce8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fceb, 0x3)   mov(al, memb_a32(ds, eax + 0x45));    /* mov al, [eax+0x45] */
    II(0x1012fcee, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012fcf3, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fcf4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fcf6, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fcf9, 0x5)   calld(0x1008b228, -0xa4ad6);          /* call 0x1008b228 */
    II(0x1012fcfe, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x1012fd01, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x1012fd04, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x1012fd0a, 0x5)   mov(eax, 0x101a883d);                 /* mov eax, 0x101a883d */ /* "Was building %s, with %i turns to completion." */
    II(0x1012fd0f, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd10, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x1012fd15, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd16, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fd19, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd1a, 0x5)   calld(0x10142037, 0x12318);           /* call 0x10142037 */
    II(0x1012fd1f, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x1012fd22, 0x2)   jmpd(0x1012fd7a, 0x56);               /* jmp 0x1012fd7a */
l_0x1012fd24:
    II(0x1012fd24, 0x3)   lea(ecx, ebp - 0x2c);                 /* lea ecx, [ebp-0x2c] */
    II(0x1012fd27, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fd2a, 0x5)   calld(0x1009c9a0, -0x9338f);          /* call 0x1009c9a0 */
    II(0x1012fd2f, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012fd32, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fd34, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fd37, 0x5)   calld(0x1008b228, -0xa4b14);          /* call 0x1008b228 */
    II(0x1012fd3c, 0x3)   movsx(edx, memw_a32(ds, eax));        /* movsx edx, word [eax] */
    II(0x1012fd3f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fd42, 0x5)   calld(0x10154f88, 0x25241);           /* call 0x10154f88 */
    II(0x1012fd47, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x2c)); /* movsx eax, word [ebp-0x2c] */
    II(0x1012fd4b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd4c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fd4e, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fd51, 0x5)   calld(0x1008b228, -0xa4b2e);          /* call 0x1008b228 */
    II(0x1012fd56, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x1012fd59, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x1012fd5c, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x1012fd62, 0x5)   mov(eax, 0x101a886b);                 /* mov eax, 0x101a886b */ /* "Currently building: %s.\nTurns to completion: %i." */
    II(0x1012fd67, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd68, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x1012fd6d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd6e, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fd71, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd72, 0x5)   calld(0x10142037, 0x122c0);           /* call 0x10142037 */
    II(0x1012fd77, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
l_0x1012fd7a:
    II(0x1012fd7a, 0x4)   movsx(edx, memw_a32(ss, ebp + 0x14)); /* movsx edx, word [ebp+0x14] */
    II(0x1012fd7e, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x1012fd80, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x1012fd83, 0x2)   sub(eax, edx);                        /* sub eax, edx */
    II(0x1012fd85, 0x2)   sar(eax, 0x1);                        /* sar eax, 1 */
    II(0x1012fd87, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x1012fd8b, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x1012fd8d, 0x1)   cwde();                               /* cwde */
    II(0x1012fd8e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd8f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012fd92, 0x3)   add(eax, memd_a32(ss, ebp + 0x10));   /* add eax, [ebp+0x10] */
    II(0x1012fd95, 0x5)   add(eax, 0x14);                       /* add eax, 0x14 */
    II(0x1012fd9a, 0x1)   cwde();                               /* cwde */
    II(0x1012fd9b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fd9c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012fd9e, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1012fda3, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x1012fda6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fda8, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fdab, 0x5)   calld(0x1008b228, -0xa4b88);          /* call 0x1008b228 */
    II(0x1012fdb0, 0x3)   movsx(ebx, memw_a32(ds, eax));        /* movsx ebx, word [eax] */
    II(0x1012fdb3, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1012fdb6, 0x3)   mov(edx, memd_a32(ds, eax + 0xe));    /* mov edx, [eax+0xe] */
    II(0x1012fdb9, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012fdbc, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1012fdbf, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1012fdc2, 0x5)   calld(0x1012b6af, -0x4718);           /* call 0x1012b6af */
    II(0x1012fdc7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fdc9, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1012fdcc, 0x5)   calld(0x10088b04, -0xa72cd);          /* call 0x10088b04 */
l_0x1012fdd1:
    II(0x1012fdd1, 0x2)   jmpd(0x1012fdf3, 0x20);               /* jmp 0x1012fdf3 */
l_0x1012fdd3:
    II(0x1012fdd3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1012fdd6, 0x5)   calld(0x101007c8, -0x2f613);          /* call 0x101007c8 */
    II(0x1012fddb, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
    II(0x1012fdde, 0x3)   lea(edx, ebp - 0x30);                 /* lea edx, [ebp-0x30] */
    II(0x1012fde1, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fde4, 0x5)   calld(0x10142246, 0x1245d);           /* call 0x10142246 */
    II(0x1012fde9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fdeb, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x1012fdee, 0x5)   calld(my_string_dtor, 0x11d37);       /* call 0x10141b2a */
l_0x1012fdf3:
    II(0x1012fdf3, 0x5)   calld(0x100d531c, -0x5aadc);          /* call 0x100d531c */
    II(0x1012fdf8, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012fdfd, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fdfe, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012fe00, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fe01, 0x5)   pushd(0xa2);                          /* push dword 0xa2 */
    II(0x1012fe06, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x14)); /* movsx eax, word [ebp+0x14] */
    II(0x1012fe0a, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fe0b, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x10)); /* movsx eax, word [ebp+0x10] */
    II(0x1012fe0f, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fe10, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012fe14, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012fe15, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x8));  /* movsx ecx, word [ebp-0x8] */
    II(0x1012fe19, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fe1c, 0x5)   calld(my_strobj_c_str_v2, -0xa6659);  /* call 0x100897c8 */
    II(0x1012fe21, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x1012fe23, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1012fe26, 0x3)   mov(edx, memd_a32(ds, eax + 0xe));    /* mov edx, [eax+0xe] */
    II(0x1012fe29, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012fe2c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1012fe2f, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x1012fe32, 0x5)   calld(0x100e9ae5, -0x46352);          /* call 0x100e9ae5 */
    II(0x1012fe37, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1012fe39, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012fe3c, 0x5)   calld(my_string_dtor, 0x11ce9);       /* call 0x10141b2a */
    II(0x1012fe41, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1012fe43, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1012fe44, 0x1)   popd(edi);                            /* pop edi */
    II(0x1012fe45, 0x1)   popd(esi);                            /* pop esi */
    II(0x1012fe46, 0x3)   retd(0x8);                            /* ret 0x8 */
FUNC_END

