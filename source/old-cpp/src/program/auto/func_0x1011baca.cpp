FUNC_BEGIN(0x1011baca, 0x496268fe00afbd9f, 0x20, ({0x68, 0x38, 0, 0, 0, 0xe8, 0x7e, 0xa2, 0x4, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x31, 0xc0, 0x8b, 0x55, 0xfc, 0x8a, 0x42, 0x26, 0x89, 0x45, 0xe8, 0x80, 0x4d, 0xf0, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0xf6, 0xf8, 0xf8, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xf0, 0xfe, 0xb8, 0x52, 0, 0, 0, 0xe8, 0xcd, 0xa4, 0xf5, 0xff, 0x85, 0xc0, 0x74, 0x8, 0x8b, 0x45, 0xfc, 0xe8, 0x8d, 0xe4, 0x2, 0, 0x83, 0x3d, 0x24, 0x56, 0x1c, 0x10, 0, 0x75, 0x16, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x3e, 0xa5, 0xf5, 0xff, 0x84, 0xc0, 0x74, 0x2, 0xeb, 0x13, 0xc6, 0x45, 0xf4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xee, 0xe3, 0xf8, 0xff, 0xe9, 0x80, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x29, 0x25, 0xff, 0, 0, 0, 0x83, 0xc0, 0x2, 0x83, 0xe0, 0x7, 0x66, 0xf, 0xbe, 0x90, 0x14, 0xd9, 0x1b, 0x10, 0x8b, 0x45, 0xf8, 0x66, 0x89, 0x50, 0x16, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x29, 0x25, 0xff, 0, 0, 0, 0x83, 0xc0, 0x2, 0x83, 0xe0, 0x7, 0x66, 0xf, 0xbe, 0x90, 0x1c, 0xd9, 0x1b, 0x10, 0x8b, 0x45, 0xf8, 0x66, 0x89, 0x50, 0x18, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x16, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x14, 0xc1, 0xf8, 0x10, 0xe8, 0x94, 0xe2, 0xff, 0xff, 0x89, 0x45, 0xec, 0xf, 0xbf, 0x55, 0xec, 0x8b, 0x45, 0xfc, 0xe8, 0x3, 0xc4, 0xff, 0xff, 0xc6, 0x45, 0xf4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x75, 0xe3, 0xf8, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x69, 0xe3, 0xf8, 0xff, 0x8a, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x1011baca, 0x5)   pushd(0x38);                          /* push dword 0x38 */
    II(0x1011bacf, 0x5)   calld(sys_check_available_stack_size, 0x4a27e); /* call 0x10165d52 */
    II(0x1011bad4, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1011bad5, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1011bad6, 0x1)   pushd(esi);                           /* push esi */
    II(0x1011bad7, 0x1)   pushd(edi);                           /* push edi */
    II(0x1011bad8, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1011bad9, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1011badb, 0x6)   sub(esp, 0x20);                       /* sub esp, 0x20 */
    II(0x1011bae1, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1011bae4, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x1011bae7, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1011bae9, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1011baec, 0x3)   mov(al, memb_a32(ds, edx + 0x26));    /* mov al, [edx+0x26] */
    II(0x1011baef, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x1011baf2, 0x4)   or_(memb_a32(ss, ebp - 0x10), 0x1);   /* or byte [ebp-0x10], 0x1 */
    II(0x1011baf6, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1011baf9, 0x5)   calld(0x100ab3f4, -0x7070a);          /* call 0x100ab3f4 */
    II(0x1011bafe, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x1011bb01, 0x4)   and_(memb_a32(ss, ebp - 0x10), -0x2 /* 0xfe */); /* and byte [ebp-0x10], 0xfe */
    II(0x1011bb05, 0x5)   mov(eax, 0x52);                       /* mov eax, 0x52 */
    II(0x1011bb0a, 0x5)   calld(0x10075fdc, -0xa5b33);          /* call 0x10075fdc */
    II(0x1011bb0f, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1011bb11, 0x2)   jzd(0x1011bb1b, 0x8);                 /* jz 0x1011bb1b */
    II(0x1011bb13, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011bb16, 0x5)   calld(0x10149fa8, 0x2e48d);           /* call 0x10149fa8 */
l_0x1011bb1b:
    II(0x1011bb1b, 0x7)   cmp(memd_a32(ds, 0x101c5624), 0);     /* cmp dword [0x101c5624], 0x0 */
    II(0x1011bb22, 0x2)   jnzd(0x1011bb3a, 0x16);               /* jnz 0x1011bb3a */
    II(0x1011bb24, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1011bb26, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1011bb2b, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1011bb2e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011bb31, 0x5)   calld(0x10076074, -0xa5ac2);          /* call 0x10076074 */
    II(0x1011bb36, 0x2)   test(al, al);                         /* test al, al */
    II(0x1011bb38, 0x2)   jzd(0x1011bb3c, 0x2);                 /* jz 0x1011bb3c */
l_0x1011bb3a:
    II(0x1011bb3a, 0x2)   jmpd(0x1011bb4f, 0x13);               /* jmp 0x1011bb4f */
l_0x1011bb3c:
    II(0x1011bb3c, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x1011bb40, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011bb42, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1011bb45, 0x5)   calld(0x100a9f38, -0x71c12);          /* call 0x100a9f38 */
    II(0x1011bb4a, 0x5)   jmpd(0x1011bbcf, 0x80);               /* jmp 0x1011bbcf */
l_0x1011bb4f:
    II(0x1011bb4f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011bb52, 0x3)   mov(al, memb_a32(ds, eax + 0x29));    /* mov al, [eax+0x29] */
    II(0x1011bb55, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1011bb5a, 0x3)   add(eax, 0x2);                        /* add eax, 0x2 */
    II(0x1011bb5d, 0x3)   and_(eax, 0x7);                       /* and eax, 0x7 */
    II(0x1011bb60, 0x8)   movsx(dx, memb_a32(ds, eax + 0x101bd914)); /* movsx dx, byte [eax+0x101bd914] */
    II(0x1011bb68, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1011bb6b, 0x4)   mov(memw_a32(ds, eax + 0x16), dx);    /* mov [eax+0x16], dx */
    II(0x1011bb6f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011bb72, 0x3)   mov(al, memb_a32(ds, eax + 0x29));    /* mov al, [eax+0x29] */
    II(0x1011bb75, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1011bb7a, 0x3)   add(eax, 0x2);                        /* add eax, 0x2 */
    II(0x1011bb7d, 0x3)   and_(eax, 0x7);                       /* and eax, 0x7 */
    II(0x1011bb80, 0x8)   movsx(dx, memb_a32(ds, eax + 0x101bd91c)); /* movsx dx, byte [eax+0x101bd91c] */
    II(0x1011bb88, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1011bb8b, 0x4)   mov(memw_a32(ds, eax + 0x18), dx);    /* mov [eax+0x18], dx */
    II(0x1011bb8f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1011bb92, 0x3)   mov(edx, memd_a32(ds, eax + 0x16));   /* mov edx, [eax+0x16] */
    II(0x1011bb95, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1011bb98, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1011bb9b, 0x3)   mov(eax, memd_a32(ds, eax + 0x14));   /* mov eax, [eax+0x14] */
    II(0x1011bb9e, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1011bba1, 0x5)   calld(0x10119e3a, -0x1d6c);           /* call 0x10119e3a */
    II(0x1011bba6, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x1011bba9, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x1011bbad, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011bbb0, 0x5)   calld(0x10117fb8, -0x3bfd);           /* call 0x10117fb8 */
    II(0x1011bbb5, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x1011bbb9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1011bbbb, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1011bbbe, 0x5)   calld(0x100a9f38, -0x71c8b);          /* call 0x100a9f38 */
    II(0x1011bbc3, 0x2)   jmpd(0x1011bbcf, 0xa);                /* jmp 0x1011bbcf */
//  II(0x1011bbc5, 0xa)   /* Недостижимый код. */
l_0x1011bbcf:
    II(0x1011bbcf, 0x3)   mov(al, memb_a32(ss, ebp - 0xc));     /* mov al, [ebp-0xc] */
    II(0x1011bbd2, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1011bbd4, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1011bbd5, 0x1)   popd(edi);                            /* pop edi */
    II(0x1011bbd6, 0x1)   popd(esi);                            /* pop esi */
    II(0x1011bbd7, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1011bbd8, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1011bbd9, 0x1)   retd();                               /* ret */
FUNC_END

