FUNC_BEGIN(0x100a15dd, 0xfef67e30c02d2017, 0x20, ({0x68, 0x30, 0, 0, 0, 0xe8, 0x6b, 0x47, 0xc, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xf8, 0x88, 0x55, 0xfc, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xf0, 0xe8, 0xf6, 0x4e, 0xfd, 0xff, 0x89, 0x45, 0xec, 0x80, 0x65, 0xf4, 0xfe, 0x31, 0xd2, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x44, 0xe8, 0x57, 0x97, 0x9, 0, 0x84, 0xc0, 0x74, 0x20, 0x31, 0xdb, 0x8a, 0x5d, 0xfc, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x44, 0xe8, 0xd2, 0x4f, 0xfd, 0xff, 0x8b, 0x4d, 0xf8, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0x26, 0xfe, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x16, 0xc7, 0x45, 0xe8, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x1b, 0x49, 0xfd, 0xff, 0xe9, 0x7b, 0, 0, 0, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0xd8, 0x4c, 0xfd, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xd0, 0x4d, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xfb, 0x96, 0x9, 0, 0x84, 0xc0, 0x74, 0x3a, 0x31, 0xdb, 0x8a, 0x5d, 0xfc, 0x8d, 0x45, 0xf0, 0xe8, 0x81, 0x4d, 0xfd, 0xff, 0x8b, 0x4d, 0xf8, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0xcd, 0xfd, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x13, 0xc7, 0x45, 0xe8, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xc4, 0x48, 0xfd, 0xff, 0xeb, 0x27, 0x8d, 0x45, 0xf0, 0xe8, 0x46, 0x55, 0xfd, 0xff, 0xeb, 0xb8, 0xc7, 0x45, 0xe8, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xa7, 0x48, 0xfd, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x9b, 0x48, 0xfd, 0xff, 0x8b, 0x45, 0xe8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100a15dd, 0x5)   pushd(0x30);                          /* push dword 0x30 */
    II(0x100a15e2, 0x5)   calld(sys_check_available_stack_size, 0xc476b); /* call 0x10165d52 */
    II(0x100a15e7, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100a15e8, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a15e9, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a15ea, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a15eb, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a15ec, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a15ee, 0x6)   sub(esp, 0x18);                       /* sub esp, 0x18 */
    II(0x100a15f4, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100a15f7, 0x3)   mov(memb_a32(ss, ebp - 0x4), dl);     /* mov [ebp-0x4], dl */
    II(0x100a15fa, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100a15fe, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a1601, 0x5)   calld(0x100764fc, -0x2b10a);          /* call 0x100764fc */
    II(0x100a1606, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100a1609, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100a160d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a160f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100a1612, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1615, 0x5)   calld(0x1013ad71, 0x99757);           /* call 0x1013ad71 */
    II(0x100a161a, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a161c, 0x2)   jzd(0x100a163e, 0x20);                /* jz 0x100a163e */
    II(0x100a161e, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100a1620, 0x3)   mov(bl, memb_a32(ss, ebp - 0x4));     /* mov bl, [ebp-0x4] */
    II(0x100a1623, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100a1626, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1629, 0x5)   calld(0x10076600, -0x2b02e);          /* call 0x10076600 */
    II(0x100a162e, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x8));    /* mov ecx, [ebp-0x8] */
    II(0x100a1631, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a1633, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x100a1635, 0x5)   calld(0x100a1460, -0x1da);            /* call 0x100a1460 */
    II(0x100a163a, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a163c, 0x2)   jnzd(0x100a1640, 0x2);                /* jnz 0x100a1640 */
l_0x100a163e:
    II(0x100a163e, 0x2)   jmpd(0x100a1656, 0x16);               /* jmp 0x100a1656 */
l_0x100a1640:
    II(0x100a1640, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0x1);   /* mov dword [ebp-0x18], 0x1 */
    II(0x100a1647, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1649, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a164c, 0x5)   calld(0x10075f6c, -0x2b6e5);          /* call 0x10075f6c */
    II(0x100a1651, 0x5)   jmpd(0x100a16d1, 0x7b);               /* jmp 0x100a16d1 */
l_0x100a1656:
    II(0x100a1656, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a165b, 0x5)   calld(0x10076338, -0x2b328);          /* call 0x10076338 */
    II(0x100a1660, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x100a1663, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a1665, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a1667, 0x5)   calld(0x1007643c, -0x2b230);          /* call 0x1007643c */
l_0x100a166c:
    II(0x100a166c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a166e, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a1671, 0x5)   calld(0x1013ad71, 0x996fb);           /* call 0x1013ad71 */
    II(0x100a1676, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a1678, 0x2)   jzd(0x100a16b4, 0x3a);                /* jz 0x100a16b4 */
    II(0x100a167a, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100a167c, 0x3)   mov(bl, memb_a32(ss, ebp - 0x4));     /* mov bl, [ebp-0x4] */
    II(0x100a167f, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a1682, 0x5)   calld(0x10076408, -0x2b27f);          /* call 0x10076408 */
    II(0x100a1687, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x8));    /* mov ecx, [ebp-0x8] */
    II(0x100a168a, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a168c, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x100a168e, 0x5)   calld(0x100a1460, -0x233);            /* call 0x100a1460 */
    II(0x100a1693, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a1695, 0x2)   jzd(0x100a16aa, 0x13);                /* jz 0x100a16aa */
    II(0x100a1697, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0x1);   /* mov dword [ebp-0x18], 0x1 */
    II(0x100a169e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a16a0, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a16a3, 0x5)   calld(0x10075f6c, -0x2b73c);          /* call 0x10075f6c */
    II(0x100a16a8, 0x2)   jmpd(0x100a16d1, 0x27);               /* jmp 0x100a16d1 */
l_0x100a16aa:
    II(0x100a16aa, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a16ad, 0x5)   calld(0x10076bf8, -0x2aaba);          /* call 0x10076bf8 */
    II(0x100a16b2, 0x2)   jmpd(0x100a166c, -0x48);              /* jmp 0x100a166c */
l_0x100a16b4:
    II(0x100a16b4, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0);     /* mov dword [ebp-0x18], 0x0 */
    II(0x100a16bb, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a16bd, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a16c0, 0x5)   calld(0x10075f6c, -0x2b759);          /* call 0x10075f6c */
    II(0x100a16c5, 0x2)   jmpd(0x100a16d1, 0xa);                /* jmp 0x100a16d1 */
//  II(0x100a16c7, 0xa)   /* Недостижимый код. */
l_0x100a16d1:
    II(0x100a16d1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100a16d4, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a16d6, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a16d7, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a16d8, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a16d9, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a16da, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100a16db, 0x1)   retd();                               /* ret */
FUNC_END

