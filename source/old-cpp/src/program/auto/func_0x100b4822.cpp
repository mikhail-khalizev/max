FUNC_BEGIN(0x100b4822, 0x207fe1ebe79cdee8, 0x20, ({0x68, 0x70, 0, 0, 0, 0xe8, 0x26, 0x15, 0xb, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x5c, 0, 0, 0, 0x89, 0x45, 0xf0, 0x89, 0x55, 0xf4, 0x89, 0x5d, 0xf8, 0x88, 0x4d, 0xfc, 0x8d, 0x45, 0xec, 0xe8, 0xa5, 0x22, 0xfc, 0xff, 0xc6, 0x45, 0xe8, 0, 0x8b, 0x45, 0xf0, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe4, 0xe8, 0x43, 0x22, 0xfc, 0xff, 0x80, 0x4d, 0xe0, 0x1, 0x8b, 0x45, 0xf0, 0xf6, 0x40, 0x13, 0x1, 0x74, 0x9, 0xc7, 0x45, 0xdc, 0x4e, 0, 0, 0, 0xeb, 0x7, 0xc7, 0x45, 0xdc, 0xff, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xda, 0xc1, 0xf8, 0x10, 0x50, 0x31, 0xc9, 0xbb, 0x1, 0, 0, 0, 0x8b, 0x55, 0xf0, 0x8d, 0x45, 0xcc, 0xe8, 0x22, 0xb6, 0x6, 0, 0x89, 0x45, 0xc8, 0x80, 0x65, 0xe0, 0xfe, 0x8b, 0x45, 0xf4, 0xf6, 0x40, 0x12, 0x10, 0x74, 0x9, 0xc7, 0x45, 0xc4, 0x3, 0, 0, 0, 0xeb, 0x7, 0xc7, 0x45, 0xc4, 0x2, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0x8b, 0x40, 0x1a, 0x48, 0x66, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xf4, 0x66, 0x8b, 0x40, 0x1c, 0x3, 0x45, 0xc4, 0x48, 0x66, 0x89, 0x45, 0xee, 0xc7, 0x45, 0xc0, 0, 0, 0, 0, 0xeb, 0x4, 0x83, 0x45, 0xc0, 0x2, 0xf, 0xbf, 0x45, 0xc0, 0x83, 0xf8, 0x8, 0xf, 0x8d, 0xca, 0, 0, 0, 0xc7, 0x45, 0xbc, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xbc, 0xff, 0x45, 0xbc, 0x8b, 0x45, 0xbc, 0x66, 0x3b, 0x45, 0xc4, 0xf, 0x8d, 0xa9, 0, 0, 0, 0xf, 0xbf, 0x55, 0xc0, 0xc1, 0xe2, 0x2, 0xb8, 0x48, 0x53, 0x1c, 0x10, 0x1, 0xc2, 0x8d, 0x45, 0xec, 0xe8, 0x7e, 0x68, 0xfd, 0xff, 0x8d, 0x55, 0xec, 0x8d, 0x45, 0xb8, 0xe8, 0x33, 0x15, 0xfc, 0xff, 0x89, 0xc3, 0x8d, 0x55, 0xe4, 0x8d, 0x45, 0xb4, 0xe8, 0x26, 0x15, 0xfc, 0xff, 0x89, 0xda, 0xe8, 0x85, 0x16, 0xff, 0xff, 0x89, 0x45, 0xb0, 0x80, 0x7d, 0xe8, 0, 0x74, 0x9, 0x8b, 0x45, 0xb0, 0x66, 0x3b, 0x45, 0xac, 0x7d, 0x2b, 0xf, 0xbe, 0x45, 0xfc, 0x50, 0xf, 0xbf, 0x4d, 0xee, 0xf, 0xbf, 0x5d, 0xec, 0x8b, 0x45, 0xf0, 0x8a, 0x40, 0x26, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xf0, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0xe8, 0x3c, 0xb9, 0xfb, 0xff, 0x66, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x19, 0x8d, 0x55, 0xec, 0x8d, 0x45, 0xa8, 0xe8, 0xd5, 0x14, 0xfc, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xcc, 0xe8, 0xb3, 0xb5, 0x6, 0, 0x84, 0xc0, 0x75, 0x2, 0xeb, 0x15, 0x8d, 0x55, 0xec, 0x8b, 0x45, 0xf8, 0xe8, 0x9a, 0x41, 0xfd, 0xff, 0xc6, 0x45, 0xe8, 0x1, 0x8b, 0x45, 0xb0, 0x89, 0x45, 0xac, 0xe9, 0x44, 0xff, 0xff, 0xff, 0xe9, 0x25, 0xff, 0xff, 0xff, 0x8a, 0x45, 0xe8, 0x88, 0x45, 0xa4, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x2e, 0x43, 0xfd, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x22, 0x43, 0xfd, 0xff, 0x8a, 0x45, 0xa4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc3}))
    II(0x100b4822, 0x5)   pushd(0x70);                          /* push dword 0x70 */
    II(0x100b4827, 0x5)   calld(sys_check_available_stack_size, 0xb1526); /* call 0x10165d52 */
    II(0x100b482c, 0x1)   pushd(esi);                           /* push esi */
    II(0x100b482d, 0x1)   pushd(edi);                           /* push edi */
    II(0x100b482e, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100b482f, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100b4831, 0x6)   sub(esp, 0x5c);                       /* sub esp, 0x5c */
    II(0x100b4837, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100b483a, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x100b483d, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x100b4840, 0x3)   mov(memb_a32(ss, ebp - 0x4), cl);     /* mov [ebp-0x4], cl */
    II(0x100b4843, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100b4846, 0x5)   calld(my_ctor_0x101b4184, -0x3dd5b);  /* call 0x10076af0 */
    II(0x100b484b, 0x4)   mov(memb_a32(ss, ebp - 0x18), 0);     /* mov byte [ebp-0x18], 0x0 */
    II(0x100b484f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100b4852, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x100b4855, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100b4858, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100b485b, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x100b485e, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100b4861, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100b4864, 0x5)   calld(0x10076aac, -0x3ddbd);          /* call 0x10076aac */
    II(0x100b4869, 0x4)   or_(memb_a32(ss, ebp - 0x20), 0x1);   /* or byte [ebp-0x20], 0x1 */
    II(0x100b486d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100b4870, 0x4)   test(memb_a32(ds, eax + 0x13), 0x1);  /* test byte [eax+0x13], 0x1 */
    II(0x100b4874, 0x2)   jzd(0x100b487f, 0x9);                 /* jz 0x100b487f */
    II(0x100b4876, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0x4e);  /* mov dword [ebp-0x24], 0x4e */
    II(0x100b487d, 0x2)   jmpd(0x100b4886, 0x7);                /* jmp 0x100b4886 */
l_0x100b487f:
    II(0x100b487f, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0xffffffff); /* mov dword [ebp-0x24], 0xffffffff */
l_0x100b4886:
    II(0x100b4886, 0x3)   mov(eax, memd_a32(ss, ebp - 0x26));   /* mov eax, [ebp-0x26] */
    II(0x100b4889, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100b488c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100b488d, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100b488f, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100b4894, 0x3)   mov(edx, memd_a32(ss, ebp - 0x10));   /* mov edx, [ebp-0x10] */
    II(0x100b4897, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100b489a, 0x5)   calld(0x1011fec1, 0x6b622);           /* call 0x1011fec1 */
    II(0x100b489f, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
    II(0x100b48a2, 0x4)   and_(memb_a32(ss, ebp - 0x20), -0x2 /* 0xfe */); /* and byte [ebp-0x20], 0xfe */
    II(0x100b48a6, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100b48a9, 0x4)   test(memb_a32(ds, eax + 0x12), 0x10); /* test byte [eax+0x12], 0x10 */
    II(0x100b48ad, 0x2)   jzd(0x100b48b8, 0x9);                 /* jz 0x100b48b8 */
    II(0x100b48af, 0x7)   mov(memd_a32(ss, ebp - 0x3c), 0x3);   /* mov dword [ebp-0x3c], 0x3 */
    II(0x100b48b6, 0x2)   jmpd(0x100b48bf, 0x7);                /* jmp 0x100b48bf */
l_0x100b48b8:
    II(0x100b48b8, 0x7)   mov(memd_a32(ss, ebp - 0x3c), 0x2);   /* mov dword [ebp-0x3c], 0x2 */
l_0x100b48bf:
    II(0x100b48bf, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100b48c2, 0x4)   mov(ax, memw_a32(ds, eax + 0x1a));    /* mov ax, [eax+0x1a] */
    II(0x100b48c6, 0x1)   dec(eax);                             /* dec eax */
    II(0x100b48c7, 0x4)   mov(memw_a32(ss, ebp - 0x14), ax);    /* mov [ebp-0x14], ax */
    II(0x100b48cb, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100b48ce, 0x4)   mov(ax, memw_a32(ds, eax + 0x1c));    /* mov ax, [eax+0x1c] */
    II(0x100b48d2, 0x3)   add(eax, memd_a32(ss, ebp - 0x3c));   /* add eax, [ebp-0x3c] */
    II(0x100b48d5, 0x1)   dec(eax);                             /* dec eax */
    II(0x100b48d6, 0x4)   mov(memw_a32(ss, ebp - 0x12), ax);    /* mov [ebp-0x12], ax */
    II(0x100b48da, 0x7)   mov(memd_a32(ss, ebp - 0x40), 0);     /* mov dword [ebp-0x40], 0x0 */
    II(0x100b48e1, 0x2)   jmpd(0x100b48e7, 0x4);                /* jmp 0x100b48e7 */
l_0x100b48e3:
    II(0x100b48e3, 0x4)   add(memd_a32(ss, ebp - 0x40), 0x2);   /* add dword [ebp-0x40], 0x2 */
l_0x100b48e7:
    II(0x100b48e7, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x40)); /* movsx eax, word [ebp-0x40] */
    II(0x100b48eb, 0x3)   cmp(eax, 0x8);                        /* cmp eax, 0x8 */
    II(0x100b48ee, 0x6)   jged(0x100b49be, 0xca);               /* jge dword 0x100b49be */
    II(0x100b48f4, 0x7)   mov(memd_a32(ss, ebp - 0x44), 0);     /* mov dword [ebp-0x44], 0x0 */
    II(0x100b48fb, 0x2)   jmpd(0x100b4903, 0x6);                /* jmp 0x100b4903 */
l_0x100b48fd:
    II(0x100b48fd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x44));   /* mov eax, [ebp-0x44] */
    II(0x100b4900, 0x3)   inc(memd_a32(ss, ebp - 0x44));        /* inc dword [ebp-0x44] */
l_0x100b4903:
    II(0x100b4903, 0x3)   mov(eax, memd_a32(ss, ebp - 0x44));   /* mov eax, [ebp-0x44] */
    II(0x100b4906, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x3c));    /* cmp ax, [ebp-0x3c] */
    II(0x100b490a, 0x6)   jged(0x100b49b9, 0xa9);               /* jge dword 0x100b49b9 */
    II(0x100b4910, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x40)); /* movsx edx, word [ebp-0x40] */
    II(0x100b4914, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x100b4917, 0x5)   mov(eax, 0x101c5348);                 /* mov eax, 0x101c5348 */
    II(0x100b491c, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100b491e, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100b4921, 0x5)   calld(0x1008b1a4, -0x29782);          /* call 0x1008b1a4 */
    II(0x100b4926, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x100b4929, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x100b492c, 0x5)   calld(0x10075e64, -0x3eacd);          /* call 0x10075e64 */
    II(0x100b4931, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x100b4933, 0x3)   lea(edx, ebp - 0x1c);                 /* lea edx, [ebp-0x1c] */
    II(0x100b4936, 0x3)   lea(eax, ebp - 0x4c);                 /* lea eax, [ebp-0x4c] */
    II(0x100b4939, 0x5)   calld(0x10075e64, -0x3eada);          /* call 0x10075e64 */
    II(0x100b493e, 0x2)   mov(edx, ebx);                        /* mov edx, ebx */
    II(0x100b4940, 0x5)   calld(0x100a5fca, -0xe97b);           /* call 0x100a5fca */
    II(0x100b4945, 0x3)   mov(memd_a32(ss, ebp - 0x50), eax);   /* mov [ebp-0x50], eax */
    II(0x100b4948, 0x4)   cmp(memb_a32(ss, ebp - 0x18), 0);     /* cmp byte [ebp-0x18], 0x0 */
    II(0x100b494c, 0x2)   jzd(0x100b4957, 0x9);                 /* jz 0x100b4957 */
    II(0x100b494e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x50));   /* mov eax, [ebp-0x50] */
    II(0x100b4951, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x54));    /* cmp ax, [ebp-0x54] */
    II(0x100b4955, 0x2)   jged(0x100b4982, 0x2b);               /* jge 0x100b4982 */
l_0x100b4957:
    II(0x100b4957, 0x4)   movsx(eax, memb_a32(ss, ebp - 0x4));  /* movsx eax, byte [ebp-0x4] */
    II(0x100b495b, 0x1)   pushd(eax);                           /* push eax */
    II(0x100b495c, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x12)); /* movsx ecx, word [ebp-0x12] */
    II(0x100b4960, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x100b4964, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100b4967, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x100b496a, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x100b496c, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100b496f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100b4972, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100b4975, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100b4978, 0x5)   calld(0x100702b9, -0x446c4);          /* call 0x100702b9 */
    II(0x100b497d, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100b4980, 0x2)   jnzd(0x100b4984, 0x2);                /* jnz 0x100b4984 */
l_0x100b4982:
    II(0x100b4982, 0x2)   jmpd(0x100b499d, 0x19);               /* jmp 0x100b499d */
l_0x100b4984:
    II(0x100b4984, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x100b4987, 0x3)   lea(eax, ebp - 0x58);                 /* lea eax, [ebp-0x58] */
    II(0x100b498a, 0x5)   calld(0x10075e64, -0x3eb2b);          /* call 0x10075e64 */
    II(0x100b498f, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100b4991, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100b4994, 0x5)   calld(0x1011ff4c, 0x6b5b3);           /* call 0x1011ff4c */
    II(0x100b4999, 0x2)   test(al, al);                         /* test al, al */
    II(0x100b499b, 0x2)   jnzd(0x100b499f, 0x2);                /* jnz 0x100b499f */
l_0x100b499d:
    II(0x100b499d, 0x2)   jmpd(0x100b49b4, 0x15);               /* jmp 0x100b49b4 */
l_0x100b499f:
    II(0x100b499f, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x100b49a2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100b49a5, 0x5)   calld(0x10088b44, -0x2be66);          /* call 0x10088b44 */
    II(0x100b49aa, 0x4)   mov(memb_a32(ss, ebp - 0x18), 0x1);   /* mov byte [ebp-0x18], 0x1 */
    II(0x100b49ae, 0x3)   mov(eax, memd_a32(ss, ebp - 0x50));   /* mov eax, [ebp-0x50] */
    II(0x100b49b1, 0x3)   mov(memd_a32(ss, ebp - 0x54), eax);   /* mov [ebp-0x54], eax */
l_0x100b49b4:
    II(0x100b49b4, 0x5)   jmpd(0x100b48fd, -0xbc);              /* jmp 0x100b48fd */
l_0x100b49b9:
    II(0x100b49b9, 0x5)   jmpd(0x100b48e3, -0xdb);              /* jmp 0x100b48e3 */
l_0x100b49be:
    II(0x100b49be, 0x3)   mov(al, memb_a32(ss, ebp - 0x18));    /* mov al, [ebp-0x18] */
    II(0x100b49c1, 0x3)   mov(memb_a32(ss, ebp - 0x5c), al);    /* mov [ebp-0x5c], al */
    II(0x100b49c4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100b49c6, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100b49c9, 0x5)   calld(my_dtor_d1, -0x2bcd2);          /* call 0x10088cfc */
    II(0x100b49ce, 0x2)   jmpd(0x100b49da, 0xa);                /* jmp 0x100b49da */
//  II(0x100b49d0, 0xa)   /* Недостижимый код. */
l_0x100b49da:
    II(0x100b49da, 0x3)   mov(al, memb_a32(ss, ebp - 0x5c));    /* mov al, [ebp-0x5c] */
    II(0x100b49dd, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100b49df, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100b49e0, 0x1)   popd(edi);                            /* pop edi */
    II(0x100b49e1, 0x1)   popd(esi);                            /* pop esi */
    II(0x100b49e2, 0x1)   retd();                               /* ret */
FUNC_END

