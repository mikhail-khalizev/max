FUNC_BEGIN(0x10124263, 0x7c55c60ee7dd6653, 0x20, ({0x68, 0x28, 0, 0, 0, 0xe8, 0xe5, 0x1a, 0x4, 0, 0x53, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc, 0, 0, 0, 0xc7, 0x45, 0xfc, 0, 0, 0, 0, 0x8b, 0x45, 0x18, 0x50, 0x8b, 0x45, 0x14, 0x50, 0xe8, 0xc3, 0xf5, 0xff, 0xff, 0x83, 0xc4, 0x8, 0x85, 0xc0, 0x75, 0x9, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xeb, 0x72, 0x8b, 0x45, 0x14, 0x8b, 0x80, 0x9c, 0, 0, 0, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf8, 0x3, 0x45, 0xfc, 0x8a, 0, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0xa, 0x74, 0x8, 0x8b, 0x45, 0xfc, 0xff, 0x45, 0xfc, 0xeb, 0xe6, 0x8b, 0x45, 0xfc, 0xff, 0x45, 0xfc, 0x8b, 0x45, 0x14, 0x8b, 0x90, 0x84, 0, 0, 0, 0x8b, 0x45, 0x14, 0x8b, 0x80, 0x88, 0, 0, 0, 0x1, 0xd0, 0x8b, 0x5d, 0xf8, 0x3, 0x5d, 0xfc, 0x29, 0xd8, 0x89, 0xc3, 0x8b, 0x55, 0xf8, 0x3, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0xe8, 0x82, 0x1e, 0x4, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x55, 0x14, 0x29, 0x82, 0x88, 0, 0, 0, 0x8b, 0x45, 0x14, 0x80, 0x48, 0x1, 0x80, 0xc7, 0x45, 0xf4, 0x1, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5b, 0xc3}))
    II(0x10124263, 0x5)   pushd(0x28);                          /* push dword 0x28 */
    II(0x10124268, 0x5)   calld(sys_check_available_stack_size, 0x41ae5); /* call 0x10165d52 */
    II(0x1012426d, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1012426e, 0x1)   pushd(esi);                           /* push esi */
    II(0x1012426f, 0x1)   pushd(edi);                           /* push edi */
    II(0x10124270, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10124271, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10124273, 0x6)   sub(esp, 0xc);                        /* sub esp, 0xc */
    II(0x10124279, 0x7)   mov(memd_a32(ss, ebp - 0x4), 0);      /* mov dword [ebp-0x4], 0x0 */
    II(0x10124280, 0x3)   mov(eax, memd_a32(ss, ebp + 0x18));   /* mov eax, [ebp+0x18] */
    II(0x10124283, 0x1)   pushd(eax);                           /* push eax */
    II(0x10124284, 0x3)   mov(eax, memd_a32(ss, ebp + 0x14));   /* mov eax, [ebp+0x14] */
    II(0x10124287, 0x1)   pushd(eax);                           /* push eax */
    II(0x10124288, 0x5)   calld(0x10123850, -0xa3d);            /* call 0x10123850 */
    II(0x1012428d, 0x3)   add(esp, 0x8);                        /* add esp, 0x8 */
    II(0x10124290, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x10124292, 0x2)   jnzd(0x1012429d, 0x9);                /* jnz 0x1012429d */
    II(0x10124294, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0);      /* mov dword [ebp-0xc], 0x0 */
    II(0x1012429b, 0x2)   jmpd(0x1012430f, 0x72);               /* jmp 0x1012430f */
l_0x1012429d:
    II(0x1012429d, 0x3)   mov(eax, memd_a32(ss, ebp + 0x14));   /* mov eax, [ebp+0x14] */
    II(0x101242a0, 0x6)   mov(eax, memd_a32(ds, eax + 0x9c));   /* mov eax, [eax+0x9c] */
    II(0x101242a6, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
l_0x101242a9:
    II(0x101242a9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101242ac, 0x3)   add(eax, memd_a32(ss, ebp - 0x4));    /* add eax, [ebp-0x4] */
    II(0x101242af, 0x2)   mov(al, memb_a32(ds, eax));           /* mov al, [eax] */
    II(0x101242b1, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x101242b6, 0x3)   cmp(eax, 0xa);                        /* cmp eax, 0xa */
    II(0x101242b9, 0x2)   jzd(0x101242c3, 0x8);                 /* jz 0x101242c3 */
    II(0x101242bb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101242be, 0x3)   inc(memd_a32(ss, ebp - 0x4));         /* inc dword [ebp-0x4] */
    II(0x101242c1, 0x2)   jmpd(0x101242a9, -0x1a);              /* jmp 0x101242a9 */
l_0x101242c3:
    II(0x101242c3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101242c6, 0x3)   inc(memd_a32(ss, ebp - 0x4));         /* inc dword [ebp-0x4] */
    II(0x101242c9, 0x3)   mov(eax, memd_a32(ss, ebp + 0x14));   /* mov eax, [ebp+0x14] */
    II(0x101242cc, 0x6)   mov(edx, memd_a32(ds, eax + 0x84));   /* mov edx, [eax+0x84] */
//    II(0x101242d2, 0x3)   mov(eax, memd_a32(ss, ebp + 0x14));   /* mov eax, [ebp+0x14] */
    II(0x101242d5, 0x6)   mov(eax, memd_a32(ds, eax + 0x88));   /* mov eax, [eax+0x88] */
    II(0x101242db, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x101242dd, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x8));    /* mov ebx, [ebp-0x8] */
    II(0x101242e0, 0x3)   add(ebx, memd_a32(ss, ebp - 0x4));    /* add ebx, [ebp-0x4] */
    II(0x101242e3, 0x2)   sub(eax, ebx);                        /* sub eax, ebx */
    II(0x101242e5, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x101242e7, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x101242ea, 0x3)   add(edx, memd_a32(ss, ebp - 0x4));    /* add edx, [ebp-0x4] */
    II(0x101242ed, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101242f0, 0x5)   calld(/* sys */ 0x10166177, 0x41e82); /* call 0x10166177 */
    II(0x101242f5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101242f8, 0x3)   mov(edx, memd_a32(ss, ebp + 0x14));   /* mov edx, [ebp+0x14] */
    II(0x101242fb, 0x6)   sub(memd_a32(ds, edx + 0x88), eax);   /* sub [edx+0x88], eax */
    II(0x10124301, 0x3)   mov(eax, memd_a32(ss, ebp + 0x14));   /* mov eax, [ebp+0x14] */
    II(0x10124304, 0x4)   or_(memb_a32(ds, eax + 0x1), -0x80 /* 0x80 */); /* or byte [eax+0x1], 0x80 */
    II(0x10124308, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x1);    /* mov dword [ebp-0xc], 0x1 */
l_0x1012430f:
    II(0x1012430f, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10124312, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10124314, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10124315, 0x1)   popd(edi);                            /* pop edi */
    II(0x10124316, 0x1)   popd(esi);                            /* pop esi */
    II(0x10124317, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10124318, 0x1)   retd();                               /* ret */
FUNC_END

