FUNC_BEGIN(0x100c7824, 0xbc24698283ee0d2b, 0x20, ({0x68, 0x44, 0, 0, 0, 0xe8, 0x24, 0xe5, 0x9, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x2c, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0xbb, 0x1, 0, 0, 0, 0x8d, 0x55, 0xf0, 0x8b, 0x45, 0xf8, 0xe8, 0x26, 0xee, 0xff, 0xff, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0x57, 0x27, 0, 0, 0x89, 0x45, 0xe8, 0x80, 0x65, 0xf4, 0xfe, 0xe8, 0x8b, 0x36, 0, 0, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xec, 0x8d, 0x45, 0xe4, 0xe8, 0xec, 0x35, 0, 0, 0x89, 0xc1, 0xe8, 0x75, 0x36, 0, 0, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xf0, 0x8d, 0x45, 0xe0, 0xe8, 0xd6, 0x35, 0, 0, 0x89, 0xc2, 0x8b, 0x45, 0xf8, 0x89, 0xcb, 0xe8, 0x15, 0xeb, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xfc, 0x2d, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0xf2, 0x2d, 0, 0, 0x8b, 0x45, 0xf8, 0x66, 0x83, 0x78, 0xa, 0xff, 0x74, 0xd, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0xc, 0x66, 0x3b, 0x45, 0xfc, 0x7e, 0x5, 0xe9, 0xba, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0xc, 0x29, 0x45, 0xfc, 0x8b, 0x45, 0xf8, 0xf, 0xbf, 0, 0x6b, 0xc0, 0x13, 0x8b, 0x55, 0xf8, 0x66, 0x8b, 0x52, 0xc, 0x66, 0x29, 0x90, 0xc4, 0x35, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0xf, 0xbf, 0, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8b, 0x55, 0xf8, 0x66, 0x8b, 0x52, 0xc, 0x66, 0x1, 0x90, 0x83, 0xa5, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0xe8, 0x93, 0, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x8d, 0x55, 0xdc, 0x8b, 0x45, 0xf8, 0xe8, 0x5a, 0xed, 0xff, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x7, 0x34, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x6d, 0x2d, 0, 0, 0xe8, 0xbc, 0x35, 0, 0, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xec, 0x8d, 0x45, 0xd8, 0xe8, 0x1d, 0x35, 0, 0, 0x89, 0xc1, 0xe8, 0xa6, 0x35, 0, 0, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xf0, 0x8d, 0x45, 0xd4, 0xe8, 0x7, 0x35, 0, 0, 0x8b, 0x75, 0xf8, 0x89, 0xcb, 0x89, 0xc2, 0x89, 0xf0, 0xe8, 0x44, 0xea, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x2b, 0x2d, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x21, 0x2d, 0, 0, 0xe9, 0x2a, 0xff, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x12, 0x2d, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x8, 0x2d, 0, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100c7824, 0x5)   pushd(0x44);                          /* push dword 0x44 */
    II(0x100c7829, 0x5)   calld(sys_check_available_stack_size, 0x9e524); /* call 0x10165d52 */
    II(0x100c782e, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100c782f, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100c7830, 0x1)   pushd(esi);                           /* push esi */
    II(0x100c7831, 0x1)   pushd(edi);                           /* push edi */
    II(0x100c7832, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100c7833, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100c7835, 0x6)   sub(esp, 0x2c);                       /* sub esp, 0x2c */
    II(0x100c783b, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100c783e, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100c7841, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100c7846, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x100c7849, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c784c, 0x5)   calld(0x100c6677, -0x11da);           /* call 0x100c6677 */
    II(0x100c7851, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100c7855, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100c7858, 0x5)   calld(0x100c9fb4, 0x2757);            /* call 0x100c9fb4 */
    II(0x100c785d, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100c7860, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100c7864, 0x5)   calld(0x100caef4, 0x368b);            /* call 0x100caef4 */
    II(0x100c7869, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100c786b, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100c786d, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x100c7870, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100c7873, 0x5)   calld(0x100cae64, 0x35ec);            /* call 0x100cae64 */
    II(0x100c7878, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100c787a, 0x5)   calld(0x100caef4, 0x3675);            /* call 0x100caef4 */
    II(0x100c787f, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100c7881, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100c7883, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x100c7886, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100c7889, 0x5)   calld(0x100cae64, 0x35d6);            /* call 0x100cae64 */
    II(0x100c788e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100c7890, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c7893, 0x2)   mov(ebx, ecx);                        /* mov ebx, ecx */
    II(0x100c7895, 0x5)   calld(0x100c63af, -0x14eb);           /* call 0x100c63af */
    II(0x100c789a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c789c, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100c789f, 0x5)   calld(0x100ca6a0, 0x2dfc);            /* call 0x100ca6a0 */
    II(0x100c78a4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c78a6, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100c78a9, 0x5)   calld(0x100ca6a0, 0x2df2);            /* call 0x100ca6a0 */
l_0x100c78ae:
    II(0x100c78ae, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c78b1, 0x5)   cmp(memw_a32(ds, eax + 0xa), -0x1 /* 0xff */); /* cmp word [eax+0xa], 0xff */
    II(0x100c78b6, 0x2)   jzd(0x100c78c5, 0xd);                 /* jz 0x100c78c5 */
    II(0x100c78b8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c78bb, 0x4)   mov(ax, memw_a32(ds, eax + 0xc));     /* mov ax, [eax+0xc] */
    II(0x100c78bf, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x100c78c3, 0x2)   jled(0x100c78ca, 0x5);                /* jle 0x100c78ca */
l_0x100c78c5:
    II(0x100c78c5, 0x5)   jmpd(0x100c7984, 0xba);               /* jmp 0x100c7984 */
l_0x100c78ca:
    II(0x100c78ca, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c78cd, 0x4)   mov(ax, memw_a32(ds, eax + 0xc));     /* mov ax, [eax+0xc] */
    II(0x100c78d1, 0x3)   sub(memd_a32(ss, ebp - 0x4), eax);    /* sub [ebp-0x4], eax */
    II(0x100c78d4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c78d7, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100c78da, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x100c78dd, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x100c78e0, 0x4)   mov(dx, memw_a32(ds, edx + 0xc));     /* mov dx, [edx+0xc] */
    II(0x100c78e4, 0x7)   sub(memw_a32(ds, eax + 0x101c35c4), dx); /* sub [eax+0x101c35c4], dx */
    II(0x100c78eb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c78ee, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100c78f1, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100c78f7, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x100c78fa, 0x4)   mov(dx, memw_a32(ds, edx + 0xc));     /* mov dx, [edx+0xc] */
    II(0x100c78fe, 0x7)   add(memw_a32(ds, eax + 0x101ca583), dx); /* add [eax+0x101ca583], dx */
    II(0x100c7905, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c7908, 0x5)   calld(0x100c79a0, 0x93);              /* call 0x100c79a0 */
    II(0x100c790d, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100c7912, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x100c7915, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100c7918, 0x5)   calld(0x100c6677, -0x12a6);           /* call 0x100c6677 */
    II(0x100c791d, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x100c7920, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100c7922, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100c7924, 0x5)   calld(0x100cad30, 0x3407);            /* call 0x100cad30 */
    II(0x100c7929, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c792b, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100c792e, 0x5)   calld(0x100ca6a0, 0x2d6d);            /* call 0x100ca6a0 */
    II(0x100c7933, 0x5)   calld(0x100caef4, 0x35bc);            /* call 0x100caef4 */
    II(0x100c7938, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100c793a, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100c793c, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x100c793f, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100c7942, 0x5)   calld(0x100cae64, 0x351d);            /* call 0x100cae64 */
    II(0x100c7947, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100c7949, 0x5)   calld(0x100caef4, 0x35a6);            /* call 0x100caef4 */
    II(0x100c794e, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100c7950, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100c7952, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x100c7955, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100c7958, 0x5)   calld(0x100cae64, 0x3507);            /* call 0x100cae64 */
    II(0x100c795d, 0x3)   mov(esi, memd_a32(ss, ebp - 0x8));    /* mov esi, [ebp-0x8] */
    II(0x100c7960, 0x2)   mov(ebx, ecx);                        /* mov ebx, ecx */
    II(0x100c7962, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100c7964, 0x2)   mov(eax, esi);                        /* mov eax, esi */
    II(0x100c7966, 0x5)   calld(0x100c63af, -0x15bc);           /* call 0x100c63af */
    II(0x100c796b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c796d, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100c7970, 0x5)   calld(0x100ca6a0, 0x2d2b);            /* call 0x100ca6a0 */
    II(0x100c7975, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c7977, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100c797a, 0x5)   calld(0x100ca6a0, 0x2d21);            /* call 0x100ca6a0 */
    II(0x100c797f, 0x5)   jmpd(0x100c78ae, -0xd6);              /* jmp 0x100c78ae */
l_0x100c7984:
    II(0x100c7984, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c7986, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100c7989, 0x5)   calld(0x100ca6a0, 0x2d12);            /* call 0x100ca6a0 */
    II(0x100c798e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100c7990, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100c7993, 0x5)   calld(0x100ca6a0, 0x2d08);            /* call 0x100ca6a0 */
    II(0x100c7998, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100c799a, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100c799b, 0x1)   popd(edi);                            /* pop edi */
    II(0x100c799c, 0x1)   popd(esi);                            /* pop esi */
    II(0x100c799d, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100c799e, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100c799f, 0x1)   retd();                               /* ret */
FUNC_END

