FUNC_BEGIN(0x1008b6f4, 0xe6519c0a2e3ec377, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0x54, 0xa6, 0xd, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xfc, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x1f, 0xac, 0xfe, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xf4, 0xe8, 0x95, 0xad, 0xfe, 0xff, 0xb8, 0x80, 0x31, 0x1c, 0x10, 0xe8, 0x3b, 0xf0, 0xff, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x37, 0xf7, 0xff, 0xff, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xf4, 0xe8, 0xae, 0xb4, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0x1d, 0xf6, 0xa, 0, 0x84, 0xc0, 0x74, 0x2d, 0x8d, 0x45, 0xf4, 0xe8, 0x40, 0xac, 0xfe, 0xff, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0xf, 0xbf, 0x45, 0xfc, 0x39, 0xc2, 0x75, 0x16, 0x8d, 0x45, 0xf4, 0xe8, 0x2b, 0xac, 0xfe, 0xff, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0xe8, 0x75, 0x68, 0xfe, 0xff, 0x1, 0x45, 0xec, 0xeb, 0xbd, 0xf, 0xbf, 0x45, 0xec, 0x85, 0xc0, 0x7f, 0x1d, 0xc6, 0x45, 0xf8, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x21, 0xd4, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0xc7, 0xa7, 0xfe, 0xff, 0xe9, 0xbe, 0, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xf0, 0xe8, 0x44, 0xb4, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xb3, 0xf5, 0xa, 0, 0x84, 0xc0, 0x74, 0x64, 0x8d, 0x45, 0xf0, 0xe8, 0xfa, 0xf5, 0xff, 0xff, 0xe8, 0xc1, 0xf5, 0xff, 0xff, 0x66, 0x3b, 0x45, 0xfc, 0x75, 0x1b, 0x8d, 0x45, 0xf0, 0xe8, 0xe7, 0xf5, 0xff, 0xff, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xe8, 0x8b, 0x50, 0x2, 0x8b, 0x45, 0xe8, 0xff, 0x52, 0x20, 0x3c, 0x9, 0x74, 0x2, 0xeb, 0x32, 0x8d, 0x45, 0xf0, 0xe8, 0xfe, 0xf5, 0xff, 0xff, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xe4, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x8b, 0x50, 0x2, 0x8b, 0x45, 0xe0, 0xff, 0x52, 0x70, 0x84, 0xc0, 0x74, 0x11, 0x8b, 0x45, 0xe4, 0xe8, 0xa9, 0xc, 0x1, 0, 0x98, 0xe8, 0xd4, 0x67, 0xfe, 0xff, 0x1, 0x45, 0xec, 0xeb, 0x86, 0xf, 0xbf, 0x45, 0xec, 0x85, 0xc0, 0x7e, 0x6, 0xc6, 0x45, 0xdc, 0x1, 0xeb, 0x4, 0xc6, 0x45, 0xdc, 0, 0x8a, 0x45, 0xdc, 0x88, 0x45, 0xf8, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x74, 0xd3, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0x1a, 0xa7, 0xfe, 0xff, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x5e, 0xd3, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0x4, 0xa7, 0xfe, 0xff, 0x8a, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x1008b6f4, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x1008b6f9, 0x5)   calld(sys_check_available_stack_size, 0xda654); /* call 0x10165d52 */
    II(0x1008b6fe, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1008b6ff, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1008b700, 0x1)   pushd(edx);                           /* push edx */
    II(0x1008b701, 0x1)   pushd(esi);                           /* push esi */
    II(0x1008b702, 0x1)   pushd(edi);                           /* push edi */
    II(0x1008b703, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1008b704, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1008b706, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x1008b70c, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x1008b70f, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x1008b714, 0x5)   calld(0x10076338, -0x153e1);          /* call 0x10076338 */
    II(0x1008b719, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1008b71b, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b71e, 0x5)   calld(0x100764b8, -0x1526b);          /* call 0x100764b8 */
    II(0x1008b723, 0x5)   mov(eax, 0x101c3180);                 /* mov eax, 0x101c3180 */
    II(0x1008b728, 0x5)   calld(0x1008a768, -0xfc5);            /* call 0x1008a768 */
    II(0x1008b72d, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x1008b730, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1008b732, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x1008b734, 0x5)   calld(0x1008ae70, -0x8c9);            /* call 0x1008ae70 */
    II(0x1008b739, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x1008b740, 0x2)   jmpd(0x1008b74a, 0x8);                /* jmp 0x1008b74a */
l_0x1008b742:
    II(0x1008b742, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b745, 0x5)   calld(0x10076bf8, -0x14b52);          /* call 0x10076bf8 */
l_0x1008b74a:
    II(0x1008b74a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b74c, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b74f, 0x5)   calld(0x1013ad71, 0xaf61d);           /* call 0x1013ad71 */
    II(0x1008b754, 0x2)   test(al, al);                         /* test al, al */
    II(0x1008b756, 0x2)   jzd(0x1008b785, 0x2d);                /* jz 0x1008b785 */
    II(0x1008b758, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b75b, 0x5)   calld(0x100763a0, -0x153c0);          /* call 0x100763a0 */
    II(0x1008b760, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b762, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1008b765, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1008b769, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1008b76b, 0x2)   jnzd(0x1008b783, 0x16);               /* jnz 0x1008b783 */
    II(0x1008b76d, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b770, 0x5)   calld(0x100763a0, -0x153d5);          /* call 0x100763a0 */
    II(0x1008b775, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x1008b778, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1008b77b, 0x5)   calld(0x10071ff5, -0x1978b);          /* call 0x10071ff5 */
    II(0x1008b780, 0x3)   add(memd_a32(ss, ebp - 0x14), eax);   /* add [ebp-0x14], eax */
l_0x1008b783:
    II(0x1008b783, 0x2)   jmpd(0x1008b742, -0x43);              /* jmp 0x1008b742 */
l_0x1008b785:
    II(0x1008b785, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x1008b789, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1008b78b, 0x2)   jgd(0x1008b7aa, 0x1d);                /* jg 0x1008b7aa */
    II(0x1008b78d, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0);      /* mov byte [ebp-0x8], 0x0 */
    II(0x1008b791, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b793, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b796, 0x5)   calld(0x10088bbc, -0x2bdf);           /* call 0x10088bbc */
    II(0x1008b79b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b79d, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b7a0, 0x5)   calld(0x10075f6c, -0x15839);          /* call 0x10075f6c */
    II(0x1008b7a5, 0x5)   jmpd(0x1008b868, 0xbe);               /* jmp 0x1008b868 */
l_0x1008b7aa:
    II(0x1008b7aa, 0x2)   jmpd(0x1008b7b4, 0x8);                /* jmp 0x1008b7b4 */
l_0x1008b7ac:
    II(0x1008b7ac, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b7af, 0x5)   calld(0x10076bf8, -0x14bbc);          /* call 0x10076bf8 */
l_0x1008b7b4:
    II(0x1008b7b4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b7b6, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b7b9, 0x5)   calld(0x1013ad71, 0xaf5b3);           /* call 0x1013ad71 */
    II(0x1008b7be, 0x2)   test(al, al);                         /* test al, al */
    II(0x1008b7c0, 0x2)   jzd(0x1008b826, 0x64);                /* jz 0x1008b826 */
    II(0x1008b7c2, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b7c5, 0x5)   calld(0x1008adc4, -0xa06);            /* call 0x1008adc4 */
    II(0x1008b7ca, 0x5)   calld(0x1008ad90, -0xa3f);            /* call 0x1008ad90 */
    II(0x1008b7cf, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x1008b7d3, 0x2)   jnzd(0x1008b7f0, 0x1b);               /* jnz 0x1008b7f0 */
    II(0x1008b7d5, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b7d8, 0x5)   calld(0x1008adc4, -0xa19);            /* call 0x1008adc4 */
    II(0x1008b7dd, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
//    II(0x1008b7e0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x1008b7e3, 0x3)   mov(edx, memd_a32(ds, eax + 0x2));    /* mov edx, [eax+0x2] */
//    II(0x1008b7e6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x1008b7e9, 0x3)   calld_abs(memd_a32(ds, edx + 0x20));  /* call dword near [edx+0x20] */
    II(0x1008b7ec, 0x2)   cmp(al, 0x9);                         /* cmp al, 0x9 */
    II(0x1008b7ee, 0x2)   jzd(0x1008b7f2, 0x2);                 /* jz 0x1008b7f2 */
l_0x1008b7f0:
    II(0x1008b7f0, 0x2)   jmpd(0x1008b824, 0x32);               /* jmp 0x1008b824 */
l_0x1008b7f2:
    II(0x1008b7f2, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b7f5, 0x5)   calld(0x1008adf8, -0xa02);            /* call 0x1008adf8 */
    II(0x1008b7fa, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
//    II(0x1008b7fd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x1008b800, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
//    II(0x1008b803, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1008b806, 0x3)   mov(edx, memd_a32(ds, eax + 0x2));    /* mov edx, [eax+0x2] */
//    II(0x1008b809, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1008b80c, 0x3)   calld_abs(memd_a32(ds, edx + 0x70));  /* call dword near [edx+0x70] */
    II(0x1008b80f, 0x2)   test(al, al);                         /* test al, al */
    II(0x1008b811, 0x2)   jzd(0x1008b824, 0x11);                /* jz 0x1008b824 */
    II(0x1008b813, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x1008b816, 0x5)   calld(0x1009c4c4, 0x10ca9);           /* call 0x1009c4c4 */
    II(0x1008b81b, 0x1)   cwde();                               /* cwde */
    II(0x1008b81c, 0x5)   calld(0x10071ff5, -0x1982c);          /* call 0x10071ff5 */
    II(0x1008b821, 0x3)   add(memd_a32(ss, ebp - 0x14), eax);   /* add [ebp-0x14], eax */
l_0x1008b824:
    II(0x1008b824, 0x2)   jmpd(0x1008b7ac, -0x7a);              /* jmp 0x1008b7ac */
l_0x1008b826:
    II(0x1008b826, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x1008b82a, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1008b82c, 0x2)   jled(0x1008b834, 0x6);                /* jle 0x1008b834 */
    II(0x1008b82e, 0x4)   mov(memb_a32(ss, ebp - 0x24), 0x1);   /* mov byte [ebp-0x24], 0x1 */
    II(0x1008b832, 0x2)   jmpd(0x1008b838, 0x4);                /* jmp 0x1008b838 */
l_0x1008b834:
    II(0x1008b834, 0x4)   mov(memb_a32(ss, ebp - 0x24), 0);     /* mov byte [ebp-0x24], 0x0 */
l_0x1008b838:
    II(0x1008b838, 0x3)   mov(al, memb_a32(ss, ebp - 0x24));    /* mov al, [ebp-0x24] */
    II(0x1008b83b, 0x3)   mov(memb_a32(ss, ebp - 0x8), al);     /* mov [ebp-0x8], al */
    II(0x1008b83e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b840, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1008b843, 0x5)   calld(0x10088bbc, -0x2c8c);           /* call 0x10088bbc */
    II(0x1008b848, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008b84a, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1008b84d, 0x5)   calld(0x10075f6c, -0x158e6);          /* call 0x10075f6c */
    II(0x1008b852, 0x2)   jmpd(0x1008b868, 0x14);               /* jmp 0x1008b868 */
//  II(0x1008b854, 0x14)  /* Недостижимый код. */
l_0x1008b868:
    II(0x1008b868, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x1008b86b, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1008b86d, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1008b86e, 0x1)   popd(edi);                            /* pop edi */
    II(0x1008b86f, 0x1)   popd(esi);                            /* pop esi */
    II(0x1008b870, 0x1)   popd(edx);                            /* pop edx */
    II(0x1008b871, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1008b872, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1008b873, 0x1)   retd();                               /* ret */
FUNC_END

