FUNC_BEGIN(0x10103eba, 0x8631570c35a4bd6b, 0x20, ({0x68, 0x2c, 0, 0, 0, 0xe8, 0x8e, 0x1e, 0x6, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x14, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0xf, 0xbf, 0x18, 0x31, 0xd2, 0x66, 0x8b, 0x55, 0xfc, 0x89, 0xd0, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x89, 0x55, 0xf4, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xd8, 0xa, 0x8b, 0x55, 0xf8, 0x8b, 0x42, 0x2, 0x1, 0xd8, 0xe8, 0x37, 0x24, 0xf7, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xf0, 0xe8, 0xad, 0x25, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x5c, 0x6e, 0x3, 0, 0x84, 0xc0, 0x74, 0x34, 0x8d, 0x45, 0xf0, 0xe8, 0x7f, 0x24, 0xf7, 0xff, 0xe8, 0x2e, 0x22, 0xf7, 0xff, 0x66, 0x3b, 0x45, 0xfc, 0x75, 0x17, 0x8d, 0x45, 0xf0, 0xe8, 0xd4, 0x24, 0xf7, 0xff, 0x89, 0x45, 0xec, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x2b, 0x20, 0xf7, 0xff, 0xeb, 0x27, 0x8d, 0x45, 0xf0, 0xe8, 0xad, 0x2c, 0xf7, 0xff, 0xeb, 0xbe, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xe, 0x20, 0xf7, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x2, 0x20, 0xf7, 0xff, 0x8b, 0x45, 0xec, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x10103eba, 0x5)   pushd(0x2c);                          /* push dword 0x2c */
    II(0x10103ebf, 0x5)   calld(sys_check_available_stack_size, 0x61e8e); /* call 0x10165d52 */
    II(0x10103ec4, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10103ec5, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10103ec6, 0x1)   pushd(esi);                           /* push esi */
    II(0x10103ec7, 0x1)   pushd(edi);                           /* push edi */
    II(0x10103ec8, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10103ec9, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10103ecb, 0x6)   sub(esp, 0x14);                       /* sub esp, 0x14 */
    II(0x10103ed1, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10103ed4, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
//    II(0x10103ed7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10103eda, 0x3)   movsx(ebx, memw_a32(ds, eax));        /* movsx ebx, word [eax] */
    II(0x10103edd, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10103edf, 0x4)   mov(dx, memw_a32(ss, ebp - 0x4));     /* mov dx, [ebp-0x4] */
    II(0x10103ee3, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x10103ee5, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x10103ee8, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x10103eea, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x10103eed, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10103ef1, 0x3)   imul(ebx, eax, 0xa);                  /* imul ebx, eax, 0xa */
    II(0x10103ef4, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x10103ef7, 0x3)   mov(eax, memd_a32(ds, edx + 0x2));    /* mov eax, [edx+0x2] */
    II(0x10103efa, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x10103efc, 0x5)   calld(0x10076338, -0x8dbc9);          /* call 0x10076338 */
    II(0x10103f01, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10103f03, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f06, 0x5)   calld(0x100764b8, -0x8da53);          /* call 0x100764b8 */
l_0x10103f0b:
    II(0x10103f0b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10103f0d, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f10, 0x5)   calld(0x1013ad71, 0x36e5c);           /* call 0x1013ad71 */
    II(0x10103f15, 0x2)   test(al, al);                         /* test al, al */
    II(0x10103f17, 0x2)   jzd(0x10103f4d, 0x34);                /* jz 0x10103f4d */
    II(0x10103f19, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f1c, 0x5)   calld(0x100763a0, -0x8db81);          /* call 0x100763a0 */
    II(0x10103f21, 0x5)   calld(0x10076154, -0x8ddd2);          /* call 0x10076154 */
    II(0x10103f26, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x10103f2a, 0x2)   jnzd(0x10103f43, 0x17);               /* jnz 0x10103f43 */
    II(0x10103f2c, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f2f, 0x5)   calld(0x10076408, -0x8db2c);          /* call 0x10076408 */
    II(0x10103f34, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x10103f37, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10103f39, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f3c, 0x5)   calld(0x10075f6c, -0x8dfd5);          /* call 0x10075f6c */
    II(0x10103f41, 0x2)   jmpd(0x10103f6a, 0x27);               /* jmp 0x10103f6a */
l_0x10103f43:
    II(0x10103f43, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f46, 0x5)   calld(0x10076bf8, -0x8d353);          /* call 0x10076bf8 */
    II(0x10103f4b, 0x2)   jmpd(0x10103f0b, -0x42);              /* jmp 0x10103f0b */
l_0x10103f4d:
    II(0x10103f4d, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x10103f54, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10103f56, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x10103f59, 0x5)   calld(0x10075f6c, -0x8dff2);          /* call 0x10075f6c */
    II(0x10103f5e, 0x2)   jmpd(0x10103f6a, 0xa);                /* jmp 0x10103f6a */
//  II(0x10103f60, 0xa)   /* Недостижимый код. */
l_0x10103f6a:
    II(0x10103f6a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x10103f6d, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10103f6f, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10103f70, 0x1)   popd(edi);                            /* pop edi */
    II(0x10103f71, 0x1)   popd(esi);                            /* pop esi */
    II(0x10103f72, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10103f73, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10103f74, 0x1)   retd();                               /* ret */
FUNC_END

