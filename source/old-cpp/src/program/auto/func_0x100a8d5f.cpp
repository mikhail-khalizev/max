FUNC_BEGIN(0x100a8d5f, 0x632256dba866b5df, 0x20, ({0x68, 0x2c, 0, 0, 0, 0xe8, 0xe9, 0xcf, 0xb, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0xf6, 0x40, 0x13, 0x2, 0xf, 0x84, 0xad, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x8, 0x27, 0x75, 0x2d, 0xb9, 0x3, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xf8, 0xe8, 0xfc, 0xdc, 0xfc, 0xff, 0x89, 0xc2, 0xb8, 0xd8, 0x34, 0x1c, 0x10, 0x89, 0xcb, 0xe8, 0x6, 0x8, 0x2, 0, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x8, 0xc, 0x75, 0x2d, 0xb9, 0x1, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xf4, 0xe8, 0xc5, 0xdc, 0xfc, 0xff, 0x89, 0xc2, 0xb8, 0xd8, 0x34, 0x1c, 0x10, 0x89, 0xcb, 0xe8, 0xcf, 0x7, 0x2, 0, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x8, 0xc, 0x74, 0x9, 0x8b, 0x45, 0xfc, 0xf6, 0x40, 0x12, 0x1, 0x74, 0x2, 0xeb, 0x2a, 0x31, 0xc9, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0x86, 0xdc, 0xfc, 0xff, 0x89, 0xc2, 0xb8, 0xd8, 0x34, 0x1c, 0x10, 0x89, 0xcb, 0xe8, 0x90, 0x7, 0x2, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x26, 0x25, 0xff, 0, 0, 0, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8a, 0x80, 0x90, 0xa4, 0x1c, 0x10, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x2, 0x75, 0x12, 0x8b, 0x45, 0xfc, 0xe8, 0xdf, 0xd3, 0xfc, 0xff, 0x8b, 0x40, 0x19, 0xc1, 0xf8, 0x10, 0x85, 0xc0, 0x7f, 0x2, 0xeb, 0x20, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x26, 0x25, 0xff, 0, 0, 0, 0x69, 0xd8, 0xc5, 0, 0, 0, 0xb8, 0xc4, 0x31, 0x1c, 0x10, 0x1, 0xd8, 0xe8, 0x5, 0x13, 0x1, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100a8d5f, 0x5)   pushd(0x2c);                          /* push dword 0x2c */
    II(0x100a8d64, 0x5)   calld(sys_check_available_stack_size, 0xbcfe9); /* call 0x10165d52 */
    II(0x100a8d69, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100a8d6a, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a8d6b, 0x1)   pushd(edx);                           /* push edx */
    II(0x100a8d6c, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a8d6d, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a8d6e, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a8d6f, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a8d71, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x100a8d77, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x100a8d7a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8d7d, 0x4)   test(memb_a32(ds, eax + 0x13), 0x2);  /* test byte [eax+0x13], 0x2 */
    II(0x100a8d81, 0x6)   jzd(0x100a8e34, 0xad);                /* jz dword 0x100a8e34 */
    II(0x100a8d87, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8d8a, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x27);   /* cmp word [eax+0x8], 0x27 */
    II(0x100a8d8f, 0x2)   jnzd(0x100a8dbe, 0x2d);               /* jnz 0x100a8dbe */
    II(0x100a8d91, 0x5)   mov(ecx, 0x3);                        /* mov ecx, 0x3 */
    II(0x100a8d96, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8d99, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x100a8d9c, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100a8d9f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8da2, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x100a8da5, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100a8da8, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x100a8dab, 0x5)   calld(0x10076aac, -0x32304);          /* call 0x10076aac */
    II(0x100a8db0, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a8db2, 0x5)   mov(eax, 0x101c34d8);                 /* mov eax, 0x101c34d8 */
    II(0x100a8db7, 0x2)   mov(ebx, ecx);                        /* mov ebx, ecx */
    II(0x100a8db9, 0x5)   calld(0x100c95c4, 0x20806);           /* call 0x100c95c4 */
l_0x100a8dbe:
    II(0x100a8dbe, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8dc1, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0xc);    /* cmp word [eax+0x8], 0xc */
    II(0x100a8dc6, 0x2)   jnzd(0x100a8df5, 0x2d);               /* jnz 0x100a8df5 */
    II(0x100a8dc8, 0x5)   mov(ecx, 0x1);                        /* mov ecx, 0x1 */
    II(0x100a8dcd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8dd0, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x100a8dd3, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100a8dd6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8dd9, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x100a8ddc, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100a8ddf, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100a8de2, 0x5)   calld(0x10076aac, -0x3233b);          /* call 0x10076aac */
    II(0x100a8de7, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a8de9, 0x5)   mov(eax, 0x101c34d8);                 /* mov eax, 0x101c34d8 */
    II(0x100a8dee, 0x2)   mov(ebx, ecx);                        /* mov ebx, ecx */
    II(0x100a8df0, 0x5)   calld(0x100c95c4, 0x207cf);           /* call 0x100c95c4 */
l_0x100a8df5:
    II(0x100a8df5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8df8, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0xc);    /* cmp word [eax+0x8], 0xc */
    II(0x100a8dfd, 0x2)   jzd(0x100a8e08, 0x9);                 /* jz 0x100a8e08 */
    II(0x100a8dff, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e02, 0x4)   test(memb_a32(ds, eax + 0x12), 0x1);  /* test byte [eax+0x12], 0x1 */
    II(0x100a8e06, 0x2)   jzd(0x100a8e0a, 0x2);                 /* jz 0x100a8e0a */
l_0x100a8e08:
    II(0x100a8e08, 0x2)   jmpd(0x100a8e34, 0x2a);               /* jmp 0x100a8e34 */
l_0x100a8e0a:
    II(0x100a8e0a, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100a8e0c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e0f, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x100a8e12, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100a8e15, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e18, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x100a8e1b, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100a8e1e, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a8e21, 0x5)   calld(0x10076aac, -0x3237a);          /* call 0x10076aac */
    II(0x100a8e26, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a8e28, 0x5)   mov(eax, 0x101c34d8);                 /* mov eax, 0x101c34d8 */
    II(0x100a8e2d, 0x2)   mov(ebx, ecx);                        /* mov ebx, ecx */
    II(0x100a8e2f, 0x5)   calld(0x100c95c4, 0x20790);           /* call 0x100c95c4 */
l_0x100a8e34:
    II(0x100a8e34, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e37, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x100a8e3a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a8e3f, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100a8e45, 0x6)   mov(al, memb_a32(ds, eax + 0x101ca490)); /* mov al, [eax+0x101ca490] */
    II(0x100a8e4b, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a8e50, 0x3)   cmp(eax, 0x2);                        /* cmp eax, 0x2 */
    II(0x100a8e53, 0x2)   jnzd(0x100a8e67, 0x12);               /* jnz 0x100a8e67 */
    II(0x100a8e55, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e58, 0x5)   calld(0x1007623c, -0x32c21);          /* call 0x1007623c */
    II(0x100a8e5d, 0x3)   mov(eax, memd_a32(ds, eax + 0x19));   /* mov eax, [eax+0x19] */
    II(0x100a8e60, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100a8e63, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a8e65, 0x2)   jgd(0x100a8e69, 0x2);                 /* jg 0x100a8e69 */
l_0x100a8e67:
    II(0x100a8e67, 0x2)   jmpd(0x100a8e89, 0x20);               /* jmp 0x100a8e89 */
l_0x100a8e69:
    II(0x100a8e69, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100a8e6c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8e6f, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x100a8e72, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a8e77, 0x6)   imul(ebx, eax, 0xc5);                 /* imul ebx, eax, 0xc5 */
    II(0x100a8e7d, 0x5)   mov(eax, 0x101c31c4);                 /* mov eax, 0x101c31c4 */
    II(0x100a8e82, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x100a8e84, 0x5)   calld(0x100ba18e, 0x11305);           /* call 0x100ba18e */
l_0x100a8e89:
    II(0x100a8e89, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a8e8b, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a8e8c, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a8e8d, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a8e8e, 0x1)   popd(edx);                            /* pop edx */
    II(0x100a8e8f, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a8e90, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100a8e91, 0x1)   retd();                               /* ret */
FUNC_END

