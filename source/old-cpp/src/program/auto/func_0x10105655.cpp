FUNC_BEGIN(0x10105655, 0xb736a62e12f5126b, 0x20, ({0x68, 0x38, 0, 0, 0, 0xe8, 0xf3, 0x6, 0x6, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x83, 0x7d, 0xfc, 0, 0x7e, 0x9, 0x81, 0x7d, 0xfc, 0, 0x70, 0, 0, 0x7c, 0x2, 0xeb, 0xa, 0x8b, 0x45, 0xf8, 0xc6, 0x80, 0x61, 0x4, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf0, 0xe9, 0x98, 0x1, 0, 0, 0xe8, 0x9, 0x15, 0x1, 0, 0xe9, 0x41, 0x2, 0, 0, 0x8b, 0x45, 0xf8, 0xc6, 0x40, 0x32, 0x1, 0x8b, 0x45, 0xf8, 0xc6, 0x40, 0x31, 0x1, 0xe9, 0x2e, 0x2, 0, 0, 0x8b, 0x45, 0xf8, 0x80, 0xb0, 0x70, 0x4, 0, 0, 0x1, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x33, 0xe8, 0xf4, 0xa4, 0xfc, 0xff, 0x8b, 0x45, 0xf8, 0x66, 0xc7, 0x80, 0x6a, 0x4, 0, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x80, 0xb8, 0x70, 0x4, 0, 0, 0, 0x74, 0xf, 0xba, 0xf5, 0x32, 0x1a, 0x10, 0x8b, 0x45, 0xf8, 0xe8, 0xfa, 0xfc, 0xff, 0xff, 0xeb, 0x1c, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x41, 0xc1, 0xf8, 0x10, 0xc1, 0xe0, 0x2, 0x8b, 0x55, 0xf8, 0x1, 0xc2, 0x8b, 0x52, 0x47, 0x8b, 0x45, 0xf8, 0xe8, 0xdc, 0xfc, 0xff, 0xff, 0xe9, 0xd1, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x80, 0x68, 0x4, 0, 0, 0xc1, 0xf8, 0x10, 0x85, 0xc0, 0x74, 0x5f, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x80, 0x6a, 0x4, 0, 0, 0x8b, 0x55, 0xf8, 0x66, 0x2b, 0x82, 0x66, 0x4, 0, 0, 0x89, 0x45, 0xec, 0xf, 0xbf, 0x45, 0xec, 0x85, 0xc0, 0x7d, 0x7, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xe8, 0xa7, 0x2b, 0x4, 0, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xf8, 0x66, 0xff, 0x88, 0x6a, 0x4, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0x1f, 0xfb, 0xff, 0xff, 0xe8, 0x8d, 0x2b, 0x4, 0, 0x2b, 0x45, 0xe8, 0x3d, 0x8c, 0x30, 0, 0, 0x72, 0xf1, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x80, 0x6a, 0x4, 0, 0, 0x66, 0x3b, 0x45, 0xec, 0x75, 0xc7, 0xe9, 0x5d, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x90, 0x68, 0x4, 0, 0, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x80, 0x64, 0x4, 0, 0, 0xc1, 0xf8, 0x10, 0x1, 0xc2, 0x8b, 0x45, 0xf8, 0x8b, 0x80, 0x66, 0x4, 0, 0, 0xc1, 0xf8, 0x10, 0x39, 0xc2, 0x7d, 0x50, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x80, 0x6a, 0x4, 0, 0, 0x8b, 0x55, 0xf8, 0x66, 0x3, 0x82, 0x66, 0x4, 0, 0, 0x89, 0x45, 0xe4, 0xe8, 0x28, 0x2b, 0x4, 0, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xf8, 0x66, 0xff, 0x80, 0x6a, 0x4, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0xa0, 0xfa, 0xff, 0xff, 0xe8, 0xe, 0x2b, 0x4, 0, 0x2b, 0x45, 0xe0, 0x3d, 0x8c, 0x30, 0, 0, 0x72, 0xf1, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x80, 0x6a, 0x4, 0, 0, 0x66, 0x3b, 0x45, 0xe4, 0x75, 0xc7, 0xe9, 0xde, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x80, 0xb8, 0x61, 0x4, 0, 0, 0, 0x75, 0xb, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x33, 0xe8, 0xa2, 0xa3, 0xfc, 0xff, 0x8b, 0x45, 0xf8, 0xc6, 0x80, 0x61, 0x4, 0, 0, 0x1, 0xe9, 0xb8, 0, 0, 0, 0xe9, 0xb3, 0, 0, 0, 0x81, 0x7d, 0xf0, 0x49, 0x1, 0, 0, 0x72, 0x64, 0x81, 0x7d, 0xf0, 0x49, 0x1, 0, 0, 0xf, 0x86, 0xcc, 0xfe, 0xff, 0xff, 0x81, 0x7d, 0xf0, 0xe9, 0x3, 0, 0, 0x72, 0x27, 0x81, 0x7d, 0xf0, 0xe9, 0x3, 0, 0, 0xf, 0x86, 0xb6, 0xfe, 0xff, 0xff, 0x81, 0x7d, 0xf0, 0xea, 0x3, 0, 0, 0xf, 0x86, 0x1d, 0xff, 0xff, 0xff, 0x81, 0x7d, 0xf0, 0, 0x70, 0, 0, 0x74, 0x93, 0xeb, 0xb7, 0xeb, 0xb5, 0x81, 0x7d, 0xf0, 0x51, 0x1, 0, 0, 0x72, 0x1c, 0x81, 0x7d, 0xf0, 0x51, 0x1, 0, 0, 0xf, 0x86, 0xfa, 0xfe, 0xff, 0xff, 0x81, 0x7d, 0xf0, 0xe8, 0x3, 0, 0, 0xf, 0x84, 0x1c, 0xfe, 0xff, 0xff, 0xeb, 0x90, 0xeb, 0x8e, 0x83, 0x7d, 0xf0, 0x1b, 0x72, 0x31, 0x83, 0x7d, 0xf0, 0x1b, 0xf, 0x86, 0xfc, 0xfd, 0xff, 0xff, 0x83, 0x7d, 0xf0, 0x3f, 0x72, 0x1c, 0x83, 0x7d, 0xf0, 0x3f, 0xf, 0x86, 0xe5, 0xfd, 0xff, 0xff, 0x81, 0x7d, 0xf0, 0x19, 0x1, 0, 0, 0xf, 0x84, 0xce, 0xfd, 0xff, 0xff, 0xe9, 0x5c, 0xff, 0xff, 0xff, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x83, 0x7d, 0xf0, 0xd, 0xf, 0x84, 0xcb, 0xfd, 0xff, 0xff, 0xe9, 0x48, 0xff, 0xff, 0xff, 0xc6, 0x45, 0xf4, 0x1, 0x8a, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x10105655, 0x5)   pushd(0x38);                          /* push dword 0x38 */
    II(0x1010565a, 0x5)   calld(sys_check_available_stack_size, 0x606f3); /* call 0x10165d52 */
    II(0x1010565f, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10105660, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10105661, 0x1)   pushd(esi);                           /* push esi */
    II(0x10105662, 0x1)   pushd(edi);                           /* push edi */
    II(0x10105663, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10105664, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10105666, 0x6)   sub(esp, 0x20);                       /* sub esp, 0x20 */
    II(0x1010566c, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1010566f, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x10105672, 0x4)   cmp(memd_a32(ss, ebp - 0x4), 0);      /* cmp dword [ebp-0x4], 0x0 */
    II(0x10105676, 0x2)   jled(0x10105681, 0x9);                /* jle 0x10105681 */
    II(0x10105678, 0x7)   cmp(memd_a32(ss, ebp - 0x4), 0x7000); /* cmp dword [ebp-0x4], 0x7000 */
    II(0x1010567f, 0x2)   jld(0x10105683, 0x2);                 /* jl 0x10105683 */
l_0x10105681:
    II(0x10105681, 0x2)   jmpd(0x1010568d, 0xa);                /* jmp 0x1010568d */
l_0x10105683:
    II(0x10105683, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105686, 0x7)   mov(memb_a32(ds, eax + 0x461), 0);    /* mov byte [eax+0x461], 0x0 */
l_0x1010568d:
    II(0x1010568d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10105690, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10105693, 0x5)   jmpd(0x10105830, 0x198);              /* jmp 0x10105830 */
l_0x10105698:
    II(0x10105698, 0x5)   calld(0x10116ba6, 0x11509);           /* call 0x10116ba6 */
    II(0x1010569d, 0x5)   jmpd(0x101058e3, 0x241);              /* jmp 0x101058e3 */
l_0x101056a2:
    II(0x101056a2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056a5, 0x4)   mov(memb_a32(ds, eax + 0x32), 0x1);   /* mov byte [eax+0x32], 0x1 */
l_0x101056a9:
    II(0x101056a9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056ac, 0x4)   mov(memb_a32(ds, eax + 0x31), 0x1);   /* mov byte [eax+0x31], 0x1 */
    II(0x101056b0, 0x5)   jmpd(0x101058e3, 0x22e);              /* jmp 0x101058e3 */
l_0x101056b5:
    II(0x101056b5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056b8, 0x7)   xor_(memb_a32(ds, eax + 0x470), 0x1); /* xor byte [eax+0x470], 0x1 */
    II(0x101056bf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056c2, 0x3)   mov(eax, memd_a32(ds, eax + 0x33));   /* mov eax, [eax+0x33] */
    II(0x101056c5, 0x5)   calld(0x100cfbbe, -0x35b0c);          /* call 0x100cfbbe */
    II(0x101056ca, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056cd, 0x9)   mov(memw_a32(ds, eax + 0x46a), 0);    /* mov word [eax+0x46a], 0x0 */
    II(0x101056d6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056d9, 0x7)   cmp(memb_a32(ds, eax + 0x470), 0);    /* cmp byte [eax+0x470], 0x0 */
    II(0x101056e0, 0x2)   jzd(0x101056f1, 0xf);                 /* jz 0x101056f1 */
    II(0x101056e2, 0x5)   mov(edx, 0x101a32f5);                 /* mov edx, 0x101a32f5 */ /* "Enter: End Turn\n\nF: Find Selected Unit. Currently selected unit will be centered on screen.\n\n-,+: Zoom In, Out\n\nG: Turns on Grid Display\n\nF1: Centers on Tagged Unit\n\nArrow Keys: Scrolls the map\n\nALT-P: Pause the game\n\nALT-F: Opens the Load/Save Game Menu\n\nALT-L: Use to quick load a game\n\nALT-S: Use to quick save a game\n\nALT-X: Exits the Game to the Main Menu\n\nALT-F5, ALT-F6, ALT-F7, ALT-F8: Saves the current window position\n\nF5, F6, F7, F8: Jumps to a previously saved window position\n\n?: Initiates HELP mode.  The cursor changes to a question mark, clicking on screen items will display help text.\n\nALT-C: Saves a screen shot of the game in PCX format.\n\nShift: Hold the Shift key while selecting units to create groups.\n\nShift-Done: Holding the Shift key while clicking on the Done button will start in motion all units that are waiting to move along a path.\n\nHot keys for unit commands:\n\nPress 1 for these functions:\n...Activate\n...Allocate\n...Auto-Survey\n...Build\n...Buy Upgrade\n...Disable\n...Place Mines\n...Reload\n...Repair\n...Research\n\nPress 2 for these functions:\n...Load\n...Start\n...Steal\n\nPress 3 for these functions:\n...Attack\n...Transfer\n\nPress 4 for the Manual function.\n\nPress 5 for these functions:\n...Enter\n...Upgrade\n\nPress 6 for the Upgrade All function.\n\nPress 7 for the Stop function.\n\nPress 8 for the Sentry function.\n\nPress 9 for the Done function.\n\nPress 0 for the Remove function.\n" */
    II(0x101056e7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056ea, 0x5)   calld(0x101053e9, -0x306);            /* call 0x101053e9 */
    II(0x101056ef, 0x2)   jmpd(0x1010570d, 0x1c);               /* jmp 0x1010570d */
l_0x101056f1:
    II(0x101056f1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101056f4, 0x3)   mov(eax, memd_a32(ds, eax + 0x41));   /* mov eax, [eax+0x41] */
    II(0x101056f7, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x101056fa, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x101056fd, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x10105700, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10105702, 0x3)   mov(edx, memd_a32(ds, edx + 0x47));   /* mov edx, [edx+0x47] */
    II(0x10105705, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105708, 0x5)   calld(0x101053e9, -0x324);            /* call 0x101053e9 */
l_0x1010570d:
    II(0x1010570d, 0x5)   jmpd(0x101058e3, 0x1d1);              /* jmp 0x101058e3 */
l_0x10105712:
    II(0x10105712, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105715, 0x6)   mov(eax, memd_a32(ds, eax + 0x468));  /* mov eax, [eax+0x468] */
    II(0x1010571b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1010571e, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x10105720, 0x2)   jzd(0x10105781, 0x5f);                /* jz 0x10105781 */
    II(0x10105722, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105725, 0x7)   mov(ax, memw_a32(ds, eax + 0x46a));   /* mov ax, [eax+0x46a] */
    II(0x1010572c, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1010572f, 0x7)   sub(ax, memw_a32(ds, edx + 0x466));   /* sub ax, [edx+0x466] */
    II(0x10105736, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x10105739, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x1010573d, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1010573f, 0x2)   jged(0x10105748, 0x7);                /* jge 0x10105748 */
    II(0x10105741, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
l_0x10105748:
    II(0x10105748, 0x5)   calld(0x101482f4, 0x42ba7);           /* call 0x101482f4 */
    II(0x1010574d, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x10105750, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105753, 0x7)   dec(memw_a32(ds, eax + 0x46a));       /* dec word [eax+0x46a] */
    II(0x1010575a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1010575d, 0x5)   calld(0x10105281, -0x4e1);            /* call 0x10105281 */
l_0x10105762:
    II(0x10105762, 0x5)   calld(0x101482f4, 0x42b8d);           /* call 0x101482f4 */
    II(0x10105767, 0x3)   sub(eax, memd_a32(ss, ebp - 0x18));   /* sub eax, [ebp-0x18] */
    II(0x1010576a, 0x5)   cmp(eax, 0x308c);                     /* cmp eax, 0x308c */
    II(0x1010576f, 0x2)   jbd(0x10105762, -0xf);                /* jb 0x10105762 */
    II(0x10105771, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105774, 0x7)   mov(ax, memw_a32(ds, eax + 0x46a));   /* mov ax, [eax+0x46a] */
    II(0x1010577b, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x14));    /* cmp ax, [ebp-0x14] */
    II(0x1010577f, 0x2)   jnzd(0x10105748, -0x39);              /* jnz 0x10105748 */
l_0x10105781:
    II(0x10105781, 0x5)   jmpd(0x101058e3, 0x15d);              /* jmp 0x101058e3 */
l_0x10105786:
    II(0x10105786, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105789, 0x6)   mov(edx, memd_a32(ds, eax + 0x468));  /* mov edx, [eax+0x468] */
    II(0x1010578f, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x10105792, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105795, 0x6)   mov(eax, memd_a32(ds, eax + 0x464));  /* mov eax, [eax+0x464] */
    II(0x1010579b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1010579e, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x101057a0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101057a3, 0x6)   mov(eax, memd_a32(ds, eax + 0x466));  /* mov eax, [eax+0x466] */
    II(0x101057a9, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x101057ac, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x101057ae, 0x2)   jged(0x10105800, 0x50);               /* jge 0x10105800 */
    II(0x101057b0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101057b3, 0x7)   mov(ax, memw_a32(ds, eax + 0x46a));   /* mov ax, [eax+0x46a] */
    II(0x101057ba, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x101057bd, 0x7)   add(ax, memw_a32(ds, edx + 0x466));   /* add ax, [edx+0x466] */
    II(0x101057c4, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
l_0x101057c7:
    II(0x101057c7, 0x5)   calld(0x101482f4, 0x42b28);           /* call 0x101482f4 */
    II(0x101057cc, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x101057cf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101057d2, 0x7)   inc(memw_a32(ds, eax + 0x46a));       /* inc word [eax+0x46a] */
    II(0x101057d9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101057dc, 0x5)   calld(0x10105281, -0x560);            /* call 0x10105281 */
l_0x101057e1:
    II(0x101057e1, 0x5)   calld(0x101482f4, 0x42b0e);           /* call 0x101482f4 */
    II(0x101057e6, 0x3)   sub(eax, memd_a32(ss, ebp - 0x20));   /* sub eax, [ebp-0x20] */
    II(0x101057e9, 0x5)   cmp(eax, 0x308c);                     /* cmp eax, 0x308c */
    II(0x101057ee, 0x2)   jbd(0x101057e1, -0xf);                /* jb 0x101057e1 */
    II(0x101057f0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101057f3, 0x7)   mov(ax, memw_a32(ds, eax + 0x46a));   /* mov ax, [eax+0x46a] */
    II(0x101057fa, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x1c));    /* cmp ax, [ebp-0x1c] */
    II(0x101057fe, 0x2)   jnzd(0x101057c7, -0x39);              /* jnz 0x101057c7 */
l_0x10105800:
    II(0x10105800, 0x5)   jmpd(0x101058e3, 0xde);               /* jmp 0x101058e3 */
l_0x10105805:
    II(0x10105805, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105808, 0x7)   cmp(memb_a32(ds, eax + 0x461), 0);    /* cmp byte [eax+0x461], 0x0 */
    II(0x1010580f, 0x2)   jnzd(0x1010581c, 0xb);                /* jnz 0x1010581c */
    II(0x10105811, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10105814, 0x3)   mov(eax, memd_a32(ds, eax + 0x33));   /* mov eax, [eax+0x33] */
    II(0x10105817, 0x5)   calld(0x100cfbbe, -0x35c5e);          /* call 0x100cfbbe */
l_0x1010581c:
    II(0x1010581c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1010581f, 0x7)   mov(memb_a32(ds, eax + 0x461), 0x1);  /* mov byte [eax+0x461], 0x1 */
    II(0x10105826, 0x5)   jmpd(0x101058e3, 0xb8);               /* jmp 0x101058e3 */
l_0x1010582b:
    II(0x1010582b, 0x5)   jmpd(0x101058e3, 0xb3);               /* jmp 0x101058e3 */
l_0x10105830:
    II(0x10105830, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x149); /* cmp dword [ebp-0x10], 0x149 */
    II(0x10105837, 0x2)   jbd(0x1010589d, 0x64);                /* jb 0x1010589d */
    II(0x10105839, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x149); /* cmp dword [ebp-0x10], 0x149 */
    II(0x10105840, 0x6)   jbed(0x10105712, -0x134);             /* jbe dword 0x10105712 */
    II(0x10105846, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x3e9); /* cmp dword [ebp-0x10], 0x3e9 */
    II(0x1010584d, 0x2)   jbd(0x10105876, 0x27);                /* jb 0x10105876 */
    II(0x1010584f, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x3e9); /* cmp dword [ebp-0x10], 0x3e9 */
    II(0x10105856, 0x6)   jbed(0x10105712, -0x14a);             /* jbe dword 0x10105712 */
    II(0x1010585c, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x3ea); /* cmp dword [ebp-0x10], 0x3ea */
    II(0x10105863, 0x6)   jbed(0x10105786, -0xe3);              /* jbe dword 0x10105786 */
    II(0x10105869, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x7000); /* cmp dword [ebp-0x10], 0x7000 */
    II(0x10105870, 0x2)   jzd(0x10105805, -0x6d);               /* jz 0x10105805 */
    II(0x10105872, 0x2)   jmpd(0x1010582b, -0x49);              /* jmp 0x1010582b */
//  II(0x10105874, 0x2)   /* Недостижимый код. */
l_0x10105876:
    II(0x10105876, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x151); /* cmp dword [ebp-0x10], 0x151 */
    II(0x1010587d, 0x2)   jbd(0x1010589b, 0x1c);                /* jb 0x1010589b */
    II(0x1010587f, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x151); /* cmp dword [ebp-0x10], 0x151 */
    II(0x10105886, 0x6)   jbed(0x10105786, -0x106);             /* jbe dword 0x10105786 */
    II(0x1010588c, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x3e8); /* cmp dword [ebp-0x10], 0x3e8 */
    II(0x10105893, 0x6)   jzd(0x101056b5, -0x1e4);              /* jz dword 0x101056b5 */
    II(0x10105899, 0x2)   jmpd(0x1010582b, -0x70);              /* jmp 0x1010582b */
l_0x1010589b:
    II(0x1010589b, 0x2)   jmpd(0x1010582b, -0x72);              /* jmp 0x1010582b */
l_0x1010589d:
    II(0x1010589d, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0x1b);  /* cmp dword [ebp-0x10], 0x1b */
    II(0x101058a1, 0x2)   jbd(0x101058d4, 0x31);                /* jb 0x101058d4 */
    II(0x101058a3, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0x1b);  /* cmp dword [ebp-0x10], 0x1b */
    II(0x101058a7, 0x6)   jbed(0x101056a9, -0x204);             /* jbe dword 0x101056a9 */
    II(0x101058ad, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0x3f);  /* cmp dword [ebp-0x10], 0x3f */
    II(0x101058b1, 0x2)   jbd(0x101058cf, 0x1c);                /* jb 0x101058cf */
    II(0x101058b3, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0x3f);  /* cmp dword [ebp-0x10], 0x3f */
    II(0x101058b7, 0x6)   jbed(0x101056a2, -0x21b);             /* jbe dword 0x101056a2 */
    II(0x101058bd, 0x7)   cmp(memd_a32(ss, ebp - 0x10), 0x119); /* cmp dword [ebp-0x10], 0x119 */
    II(0x101058c4, 0x6)   jzd(0x10105698, -0x232);              /* jz dword 0x10105698 */
    II(0x101058ca, 0x5)   jmpd(0x1010582b, -0xa4);              /* jmp 0x1010582b */
l_0x101058cf:
    II(0x101058cf, 0x5)   jmpd(0x1010582b, -0xa9);              /* jmp 0x1010582b */
l_0x101058d4:
    II(0x101058d4, 0x4)   cmp(memd_a32(ss, ebp - 0x10), 0xd);   /* cmp dword [ebp-0x10], 0xd */
    II(0x101058d8, 0x6)   jzd(0x101056a9, -0x235);              /* jz dword 0x101056a9 */
    II(0x101058de, 0x5)   jmpd(0x1010582b, -0xb8);              /* jmp 0x1010582b */
l_0x101058e3:
    II(0x101058e3, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x101058e7, 0x3)   mov(al, memb_a32(ss, ebp - 0xc));     /* mov al, [ebp-0xc] */
    II(0x101058ea, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101058ec, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101058ed, 0x1)   popd(edi);                            /* pop edi */
    II(0x101058ee, 0x1)   popd(esi);                            /* pop esi */
    II(0x101058ef, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x101058f0, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x101058f1, 0x1)   retd();                               /* ret */
FUNC_END

