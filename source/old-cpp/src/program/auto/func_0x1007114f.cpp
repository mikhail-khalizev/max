FUNC_BEGIN(0x1007114f, 0x50eb1aeda448174b, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0xf9, 0x4b, 0xf, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x2c, 0, 0, 0, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x89, 0x5d, 0xfc, 0x80, 0x4d, 0xf0, 0x1, 0x8d, 0x45, 0xdc, 0xe8, 0x82, 0x53, 0, 0, 0x89, 0x45, 0xd8, 0x80, 0x65, 0xf0, 0xfe, 0x31, 0xc0, 0x8b, 0x55, 0xf4, 0x8a, 0x42, 0x26, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xfc, 0x66, 0xf, 0xaf, 0x5, 0x72, 0x81, 0x1c, 0x10, 0x8b, 0x55, 0xf8, 0x1, 0xc2, 0x89, 0x55, 0xec, 0xc7, 0x45, 0xe8, 0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0x83, 0x78, 0x8, 0x45, 0xf, 0x85, 0xa3, 0, 0, 0, 0xf, 0xbf, 0x45, 0xe0, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x55, 0xec, 0x8b, 0x80, 0xa7, 0xa6, 0x1c, 0x10, 0x1, 0xd0, 0xfe, 0, 0x8a, 0, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x1, 0xf, 0x85, 0x7b, 0, 0, 0, 0xf, 0xbf, 0x5d, 0xfc, 0xf, 0xbf, 0x55, 0xf8, 0xb8, 0xb8, 0x39, 0x1c, 0x10, 0xe8, 0x53, 0x23, 0x9, 0, 0x89, 0xc2, 0x8d, 0x45, 0xdc, 0xe8, 0x44, 0x52, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xdc, 0xe8, 0xf6, 0x59, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x65, 0x9b, 0xc, 0, 0x84, 0xc0, 0x74, 0x47, 0x8d, 0x45, 0xdc, 0xe8, 0xbc, 0x51, 0, 0, 0xe8, 0x1e, 0x31, 0xf, 0, 0x84, 0xc0, 0x74, 0x34, 0xf, 0xbf, 0x55, 0xe0, 0x8d, 0x45, 0xdc, 0xe8, 0x73, 0x51, 0, 0, 0xe8, 0x2, 0xe4, 0xd, 0, 0x8d, 0x45, 0xdc, 0xe8, 0x66, 0x51, 0, 0, 0x8a, 0x50, 0x26, 0x8b, 0x45, 0xf4, 0x3a, 0x50, 0x26, 0x74, 0x10, 0x8d, 0x45, 0xdc, 0xe8, 0x87, 0x51, 0, 0, 0xe8, 0xdf, 0xfd, 0xff, 0xff, 0x9, 0x45, 0xe8, 0xeb, 0xa3, 0x8b, 0x45, 0xf4, 0x66, 0x83, 0x78, 0x8, 0x42, 0x74, 0xe, 0x8b, 0x45, 0xf4, 0x66, 0x83, 0x78, 0x8, 0x43, 0xf, 0x85, 0xa1, 0, 0, 0, 0xf, 0xbf, 0x45, 0xe0, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x55, 0xec, 0x8b, 0x80, 0xab, 0xa6, 0x1c, 0x10, 0x1, 0xd0, 0xfe, 0, 0x8a, 0, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x1, 0xf, 0x85, 0x79, 0, 0, 0, 0xf, 0xbf, 0x5d, 0xfc, 0xf, 0xbf, 0x55, 0xf8, 0xb8, 0xb8, 0x39, 0x1c, 0x10, 0xe8, 0x98, 0x22, 0x9, 0, 0x89, 0xc2, 0x8d, 0x45, 0xdc, 0xe8, 0x89, 0x51, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xdc, 0xe8, 0x3b, 0x59, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xaa, 0x9a, 0xc, 0, 0x84, 0xc0, 0x74, 0x45, 0x8d, 0x45, 0xdc, 0xe8, 0xcd, 0x50, 0, 0, 0x66, 0x83, 0x78, 0x8, 0x42, 0x75, 0x34, 0xf, 0xbf, 0x55, 0xe0, 0x8d, 0x45, 0xdc, 0xe8, 0xba, 0x50, 0, 0, 0xe8, 0x49, 0xe3, 0xd, 0, 0x8d, 0x45, 0xdc, 0xe8, 0xad, 0x50, 0, 0, 0x8a, 0x50, 0x26, 0x8b, 0x45, 0xf4, 0x3a, 0x50, 0x26, 0x74, 0x10, 0x8d, 0x45, 0xdc, 0xe8, 0xce, 0x50, 0, 0, 0xe8, 0x26, 0xfd, 0xff, 0xff, 0x9, 0x45, 0xe8, 0xeb, 0xa5, 0xf, 0xbf, 0x45, 0xe0, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x55, 0xec, 0x8b, 0x80, 0xa3, 0xa6, 0x1c, 0x10, 0x1, 0xd0, 0xfe, 0, 0x8a, 0, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x1, 0xf, 0x85, 0xd8, 0, 0, 0, 0xf, 0xbf, 0x4d, 0xe0, 0xf, 0xbf, 0x5d, 0xfc, 0xf, 0xbf, 0x55, 0xf8, 0x8d, 0x45, 0xd4, 0xe8, 0x60, 0x57, 0, 0, 0x89, 0xca, 0xe8, 0x84, 0x7e, 0x3, 0, 0xf, 0xbf, 0x55, 0xe0, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x39, 0xc2, 0x75, 0x1a, 0xf, 0xbf, 0x55, 0xec, 0xa1, 0xe8, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0xf, 0xbf, 0x5d, 0xec, 0xa1, 0xe0, 0x70, 0x1c, 0x10, 0x1, 0xd8, 0x8a, 0x12, 0x88, 0x10, 0xf, 0xbf, 0x5d, 0xfc, 0xf, 0xbf, 0x55, 0xf8, 0xb8, 0xb8, 0x39, 0x1c, 0x10, 0xe8, 0xb3, 0x21, 0x9, 0, 0x89, 0xc2, 0x8d, 0x45, 0xdc, 0xe8, 0xa4, 0x50, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xdc, 0xe8, 0x56, 0x58, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xc5, 0x99, 0xc, 0, 0x84, 0xc0, 0x74, 0x60, 0xf, 0xbf, 0x55, 0xe0, 0x8d, 0x45, 0xdc, 0xe8, 0xe4, 0x4f, 0, 0, 0xe8, 0xb3, 0x4c, 0, 0, 0x84, 0xc0, 0x75, 0x49, 0xf, 0xbf, 0x55, 0xe0, 0x8d, 0x45, 0xdc, 0xe8, 0xcf, 0x4f, 0, 0, 0xe8, 0x5c, 0xe0, 0xd, 0, 0xf, 0xbf, 0x55, 0xe0, 0x8d, 0x45, 0xdc, 0xe8, 0xbe, 0x4f, 0, 0, 0xe8, 0x8d, 0x4c, 0, 0, 0x84, 0xc0, 0x74, 0x23, 0x8d, 0x45, 0xdc, 0xe8, 0xad, 0x4f, 0, 0, 0x8a, 0x50, 0x26, 0x8b, 0x45, 0xf4, 0x3a, 0x50, 0x26, 0x74, 0x10, 0x8d, 0x45, 0xdc, 0xe8, 0xce, 0x4f, 0, 0, 0xe8, 0x26, 0xfc, 0xff, 0xff, 0x9, 0x45, 0xe8, 0xeb, 0x8a, 0x8b, 0x45, 0xe8, 0x89, 0x45, 0xe4, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x4c, 0x4b, 0, 0, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x40, 0x4b, 0, 0, 0x8b, 0x45, 0xe4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x1007114f, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x10071154, 0x5)   calld(sys_check_available_stack_size, 0xf4bf9); /* call 0x10165d52 */
    II(0x10071159, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1007115a, 0x1)   pushd(esi);                           /* push esi */
    II(0x1007115b, 0x1)   pushd(edi);                           /* push edi */
    II(0x1007115c, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1007115d, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1007115f, 0x6)   sub(esp, 0x2c);                       /* sub esp, 0x2c */
    II(0x10071165, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10071168, 0x3)   mov(memd_a32(ss, ebp - 0x8), edx);    /* mov [ebp-0x8], edx */
    II(0x1007116b, 0x3)   mov(memd_a32(ss, ebp - 0x4), ebx);    /* mov [ebp-0x4], ebx */
    II(0x1007116e, 0x4)   or_(memb_a32(ss, ebp - 0x10), 0x1);   /* or byte [ebp-0x10], 0x1 */
    II(0x10071172, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071175, 0x5)   calld(0x100764fc, 0x5382);            /* call 0x100764fc */
    II(0x1007117a, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x1007117d, 0x4)   and_(memb_a32(ss, ebp - 0x10), -0x2 /* 0xfe */); /* and byte [ebp-0x10], 0xfe */
    II(0x10071181, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10071183, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x10071186, 0x3)   mov(al, memb_a32(ds, edx + 0x26));    /* mov al, [edx+0x26] */
    II(0x10071189, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x1007118c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1007118f, 0x8)   imul(ax, memw_a32(ds, 0x101c8172));   /* imul ax, [0x101c8172] */
    II(0x10071197, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1007119a, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x1007119c, 0x3)   mov(memd_a32(ss, ebp - 0x14), edx);   /* mov [ebp-0x14], edx */
    II(0x1007119f, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0);     /* mov dword [ebp-0x18], 0x0 */
    II(0x100711a6, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100711a9, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x45);   /* cmp word [eax+0x8], 0x45 */
    II(0x100711ae, 0x6)   jnzd(0x10071257, 0xa3);               /* jnz dword 0x10071257 */
    II(0x100711b4, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x100711b8, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100711be, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x100711c2, 0x6)   mov(eax, memd_a32(ds, eax + 0x101ca6a7)); /* mov eax, [eax+0x101ca6a7] */
    II(0x100711c8, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100711ca, 0x2)   inc(memb_a32(ds, eax));               /* inc byte [eax] */
    II(0x100711cc, 0x2)   mov(al, memb_a32(ds, eax));           /* mov al, [eax] */
    II(0x100711ce, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100711d3, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x100711d6, 0x6)   jnzd(0x10071257, 0x7b);               /* jnz dword 0x10071257 */
    II(0x100711dc, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x100711e0, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x100711e4, 0x5)   mov(eax, 0x101c39b8);                 /* mov eax, 0x101c39b8 */
    II(0x100711e9, 0x5)   calld(0x10103541, 0x92353);           /* call 0x10103541 */
    II(0x100711ee, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100711f0, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100711f3, 0x5)   calld(0x1007643c, 0x5244);            /* call 0x1007643c */
    II(0x100711f8, 0x2)   jmpd(0x10071202, 0x8);                /* jmp 0x10071202 */
l_0x100711fa:
    II(0x100711fa, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100711fd, 0x5)   calld(0x10076bf8, 0x59f6);            /* call 0x10076bf8 */
l_0x10071202:
    II(0x10071202, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10071204, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071207, 0x5)   calld(0x1013ad71, 0xc9b65);           /* call 0x1013ad71 */
    II(0x1007120c, 0x2)   test(al, al);                         /* test al, al */
    II(0x1007120e, 0x2)   jzd(0x10071257, 0x47);                /* jz 0x10071257 */
    II(0x10071210, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071213, 0x5)   calld(0x100763d4, 0x51bc);            /* call 0x100763d4 */
    II(0x10071218, 0x5)   calld(0x1016433b, 0xf311e);           /* call 0x1016433b */
    II(0x1007121d, 0x2)   test(al, al);                         /* test al, al */
    II(0x1007121f, 0x2)   jzd(0x10071255, 0x34);                /* jz 0x10071255 */
    II(0x10071221, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x10071225, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071228, 0x5)   calld(0x100763a0, 0x5173);            /* call 0x100763a0 */
    II(0x1007122d, 0x5)   calld(0x1014f634, 0xde402);           /* call 0x1014f634 */
    II(0x10071232, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071235, 0x5)   calld(0x100763a0, 0x5166);            /* call 0x100763a0 */
    II(0x1007123a, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1007123d, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10071240, 0x3)   cmp(dl, memb_a32(ds, eax + 0x26));    /* cmp dl, [eax+0x26] */
    II(0x10071243, 0x2)   jzd(0x10071255, 0x10);                /* jz 0x10071255 */
    II(0x10071245, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071248, 0x5)   calld(0x100763d4, 0x5187);            /* call 0x100763d4 */
    II(0x1007124d, 0x5)   calld(0x10071031, -0x221);            /* call 0x10071031 */
    II(0x10071252, 0x3)   or_(memd_a32(ss, ebp - 0x18), eax);   /* or [ebp-0x18], eax */
l_0x10071255:
    II(0x10071255, 0x2)   jmpd(0x100711fa, -0x5d);              /* jmp 0x100711fa */
l_0x10071257:
    II(0x10071257, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1007125a, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x42);   /* cmp word [eax+0x8], 0x42 */
    II(0x1007125f, 0x2)   jzd(0x1007126f, 0xe);                 /* jz 0x1007126f */
    II(0x10071261, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10071264, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x43);   /* cmp word [eax+0x8], 0x43 */
    II(0x10071269, 0x6)   jnzd(0x10071310, 0xa1);               /* jnz dword 0x10071310 */
l_0x1007126f:
    II(0x1007126f, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x10071273, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x10071279, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x1007127d, 0x6)   mov(eax, memd_a32(ds, eax + 0x101ca6ab)); /* mov eax, [eax+0x101ca6ab] */
    II(0x10071283, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x10071285, 0x2)   inc(memb_a32(ds, eax));               /* inc byte [eax] */
    II(0x10071287, 0x2)   mov(al, memb_a32(ds, eax));           /* mov al, [eax] */
    II(0x10071289, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1007128e, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x10071291, 0x6)   jnzd(0x10071310, 0x79);               /* jnz dword 0x10071310 */
    II(0x10071297, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x1007129b, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x1007129f, 0x5)   mov(eax, 0x101c39b8);                 /* mov eax, 0x101c39b8 */
    II(0x100712a4, 0x5)   calld(0x10103541, 0x92298);           /* call 0x10103541 */
    II(0x100712a9, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100712ab, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712ae, 0x5)   calld(0x1007643c, 0x5189);            /* call 0x1007643c */
    II(0x100712b3, 0x2)   jmpd(0x100712bd, 0x8);                /* jmp 0x100712bd */
l_0x100712b5:
    II(0x100712b5, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712b8, 0x5)   calld(0x10076bf8, 0x593b);            /* call 0x10076bf8 */
l_0x100712bd:
    II(0x100712bd, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100712bf, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712c2, 0x5)   calld(0x1013ad71, 0xc9aaa);           /* call 0x1013ad71 */
    II(0x100712c7, 0x2)   test(al, al);                         /* test al, al */
    II(0x100712c9, 0x2)   jzd(0x10071310, 0x45);                /* jz 0x10071310 */
    II(0x100712cb, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712ce, 0x5)   calld(0x100763a0, 0x50cd);            /* call 0x100763a0 */
    II(0x100712d3, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x42);   /* cmp word [eax+0x8], 0x42 */
    II(0x100712d8, 0x2)   jnzd(0x1007130e, 0x34);               /* jnz 0x1007130e */
    II(0x100712da, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x100712de, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712e1, 0x5)   calld(0x100763a0, 0x50ba);            /* call 0x100763a0 */
    II(0x100712e6, 0x5)   calld(0x1014f634, 0xde349);           /* call 0x1014f634 */
    II(0x100712eb, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100712ee, 0x5)   calld(0x100763a0, 0x50ad);            /* call 0x100763a0 */
    II(0x100712f3, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100712f6, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100712f9, 0x3)   cmp(dl, memb_a32(ds, eax + 0x26));    /* cmp dl, [eax+0x26] */
    II(0x100712fc, 0x2)   jzd(0x1007130e, 0x10);                /* jz 0x1007130e */
    II(0x100712fe, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071301, 0x5)   calld(0x100763d4, 0x50ce);            /* call 0x100763d4 */
    II(0x10071306, 0x5)   calld(0x10071031, -0x2da);            /* call 0x10071031 */
    II(0x1007130b, 0x3)   or_(memd_a32(ss, ebp - 0x18), eax);   /* or [ebp-0x18], eax */
l_0x1007130e:
    II(0x1007130e, 0x2)   jmpd(0x100712b5, -0x5b);              /* jmp 0x100712b5 */
l_0x10071310:
    II(0x10071310, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x10071314, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x1007131a, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x1007131e, 0x6)   mov(eax, memd_a32(ds, eax + 0x101ca6a3)); /* mov eax, [eax+0x101ca6a3] */
    II(0x10071324, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x10071326, 0x2)   inc(memb_a32(ds, eax));               /* inc byte [eax] */
    II(0x10071328, 0x2)   mov(al, memb_a32(ds, eax));           /* mov al, [eax] */
    II(0x1007132a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1007132f, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x10071332, 0x6)   jnzd(0x10071410, 0xd8);               /* jnz dword 0x10071410 */
    II(0x10071338, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x20)); /* movsx ecx, word [ebp-0x20] */
    II(0x1007133c, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10071340, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10071344, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x10071347, 0x5)   calld(0x10076aac, 0x5760);            /* call 0x10076aac */
    II(0x1007134c, 0x2)   mov(edx, ecx);                        /* mov edx, ecx */
    II(0x1007134e, 0x5)   calld(0x100a91d7, 0x37e84);           /* call 0x100a91d7 */
    II(0x10071353, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x10071357, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10071359, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1007135e, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x10071360, 0x2)   jnzd(0x1007137c, 0x1a);               /* jnz 0x1007137c */
    II(0x10071362, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x10071366, 0x5)   mov(eax, memd_a32(ds, 0x101c70e8));   /* mov eax, [0x101c70e8] */
    II(0x1007136b, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x1007136d, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x10071371, 0x5)   mov(eax, memd_a32(ds, 0x101c70e0));   /* mov eax, [0x101c70e0] */
    II(0x10071376, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x10071378, 0x2)   mov(dl, memb_a32(ds, edx));           /* mov dl, [edx] */
    II(0x1007137a, 0x2)   mov(memb_a32(ds, eax), dl);           /* mov [eax], dl */
l_0x1007137c:
    II(0x1007137c, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10071380, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10071384, 0x5)   mov(eax, 0x101c39b8);                 /* mov eax, 0x101c39b8 */
    II(0x10071389, 0x5)   calld(0x10103541, 0x921b3);           /* call 0x10103541 */
    II(0x1007138e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10071390, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071393, 0x5)   calld(0x1007643c, 0x50a4);            /* call 0x1007643c */
    II(0x10071398, 0x2)   jmpd(0x100713a2, 0x8);                /* jmp 0x100713a2 */
l_0x1007139a:
    II(0x1007139a, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1007139d, 0x5)   calld(0x10076bf8, 0x5856);            /* call 0x10076bf8 */
l_0x100713a2:
    II(0x100713a2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100713a4, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100713a7, 0x5)   calld(0x1013ad71, 0xc99c5);           /* call 0x1013ad71 */
    II(0x100713ac, 0x2)   test(al, al);                         /* test al, al */
    II(0x100713ae, 0x2)   jzd(0x10071410, 0x60);                /* jz 0x10071410 */
    II(0x100713b0, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x100713b4, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100713b7, 0x5)   calld(0x100763a0, 0x4fe4);            /* call 0x100763a0 */
    II(0x100713bc, 0x5)   calld(0x10076074, 0x4cb3);            /* call 0x10076074 */
    II(0x100713c1, 0x2)   test(al, al);                         /* test al, al */
    II(0x100713c3, 0x2)   jnzd(0x1007140e, 0x49);               /* jnz 0x1007140e */
    II(0x100713c5, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x100713c9, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100713cc, 0x5)   calld(0x100763a0, 0x4fcf);            /* call 0x100763a0 */
    II(0x100713d1, 0x5)   calld(0x1014f432, 0xde05c);           /* call 0x1014f432 */
    II(0x100713d6, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x100713da, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100713dd, 0x5)   calld(0x100763a0, 0x4fbe);            /* call 0x100763a0 */
    II(0x100713e2, 0x5)   calld(0x10076074, 0x4c8d);            /* call 0x10076074 */
    II(0x100713e7, 0x2)   test(al, al);                         /* test al, al */
    II(0x100713e9, 0x2)   jzd(0x1007140e, 0x23);                /* jz 0x1007140e */
    II(0x100713eb, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100713ee, 0x5)   calld(0x100763a0, 0x4fad);            /* call 0x100763a0 */
    II(0x100713f3, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100713f6, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100713f9, 0x3)   cmp(dl, memb_a32(ds, eax + 0x26));    /* cmp dl, [eax+0x26] */
    II(0x100713fc, 0x2)   jzd(0x1007140e, 0x10);                /* jz 0x1007140e */
    II(0x100713fe, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10071401, 0x5)   calld(0x100763d4, 0x4fce);            /* call 0x100763d4 */
    II(0x10071406, 0x5)   calld(0x10071031, -0x3da);            /* call 0x10071031 */
    II(0x1007140b, 0x3)   or_(memd_a32(ss, ebp - 0x18), eax);   /* or [ebp-0x18], eax */
l_0x1007140e:
    II(0x1007140e, 0x2)   jmpd(0x1007139a, -0x76);              /* jmp 0x1007139a */
l_0x10071410:
    II(0x10071410, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x10071413, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x10071416, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10071418, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1007141b, 0x5)   calld(0x10075f6c, 0x4b4c);            /* call 0x10075f6c */
    II(0x10071420, 0x2)   jmpd(0x1007142c, 0xa);                /* jmp 0x1007142c */
//  II(0x10071422, 0xa)   /* Недостижимый код. */
l_0x1007142c:
    II(0x1007142c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x1007142f, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10071431, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10071432, 0x1)   popd(edi);                            /* pop edi */
    II(0x10071433, 0x1)   popd(esi);                            /* pop esi */
    II(0x10071434, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10071435, 0x1)   retd();                               /* ret */
FUNC_END

