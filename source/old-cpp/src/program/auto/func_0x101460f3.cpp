FUNC_BEGIN(0x101460f3, 0xcf2fe4bcb2e7981c, 0x20, ({0x68, 0x38, 0, 0, 0, 0xe8, 0x55, 0xfc, 0x1, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x89, 0x5d, 0xfc, 0x80, 0x4d, 0xf0, 0x1, 0x8d, 0x45, 0xe4, 0xe8, 0xca, 0xb9, 0xff, 0xff, 0x89, 0x45, 0xe8, 0x80, 0x65, 0xf0, 0xfe, 0x8b, 0x5d, 0xfc, 0x8d, 0x55, 0xec, 0x8b, 0x45, 0xf4, 0xe8, 0xd7, 0x1, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x34, 0x4c, 0xff, 0xff, 0x84, 0xc0, 0x74, 0x2e, 0x8d, 0x45, 0xec, 0xe8, 0x17, 0xa6, 0xf9, 0xff, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xe0, 0x8b, 0x58, 0x2, 0x8d, 0x55, 0xdc, 0x8b, 0x45, 0xe0, 0xff, 0x53, 0x8, 0x89, 0xc2, 0x8d, 0x45, 0xe4, 0xe8, 0xe1, 0xc0, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xbb, 0xb9, 0xff, 0xff, 0x8d, 0x55, 0xe4, 0x8b, 0x45, 0xf8, 0xe8, 0x2c, 0xb9, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x38, 0xa2, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x9c, 0xb9, 0xff, 0xff, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x22, 0xa2, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x86, 0xb9, 0xff, 0xff, 0x8b, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x101460f3, 0x5)   pushd(0x38);                          /* push dword 0x38 */
    II(0x101460f8, 0x5)   calld(sys_check_available_stack_size, 0x1fc55); /* call 0x10165d52 */
    II(0x101460fd, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x101460fe, 0x1)   pushd(esi);                           /* push esi */
    II(0x101460ff, 0x1)   pushd(edi);                           /* push edi */
    II(0x10146100, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10146101, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10146103, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x10146109, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x1014610c, 0x3)   mov(memd_a32(ss, ebp - 0x8), edx);    /* mov [ebp-0x8], edx */
    II(0x1014610f, 0x3)   mov(memd_a32(ss, ebp - 0x4), ebx);    /* mov [ebp-0x4], ebx */
    II(0x10146112, 0x4)   or_(memb_a32(ss, ebp - 0x10), 0x1);   /* or byte [ebp-0x10], 0x1 */
    II(0x10146116, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x10146119, 0x5)   calld(my_string_ctor, -0x4636);       /* call 0x10141ae8 */
    II(0x1014611e, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x10146121, 0x4)   and_(memb_a32(ss, ebp - 0x10), -0x2 /* 0xfe */); /* and byte [ebp-0x10], 0xfe */
    II(0x10146125, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x10146128, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x1014612b, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1014612e, 0x5)   calld(0x1014630a, 0x1d7);             /* call 0x1014630a */
    II(0x10146133, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10146135, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146138, 0x5)   calld(0x1013ad71, -0xb3cc);           /* call 0x1013ad71 */
    II(0x1014613d, 0x2)   test(al, al);                         /* test al, al */
    II(0x1014613f, 0x2)   jzd(0x1014616f, 0x2e);                /* jz 0x1014616f */
    II(0x10146141, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146144, 0x5)   calld(0x100e0760, -0x659e9);          /* call 0x100e0760 */
    II(0x10146149, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
//    II(0x1014614c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1014614f, 0x3)   mov(ebx, memd_a32(ds, eax + 0x2));    /* mov ebx, [eax+0x2] */
    II(0x10146152, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x10146155, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x10146158, 0x3)   calld_abs(memd_a32(ds, ebx + 0x8));   /* call dword near [ebx+0x8] */
    II(0x1014615b, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1014615d, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x10146160, 0x5)   calld(0x10142246, -0x3f1f);           /* call 0x10142246 */
    II(0x10146165, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10146167, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1014616a, 0x5)   calld(my_string_dtor, -0x4645);       /* call 0x10141b2a */
l_0x1014616f:
    II(0x1014616f, 0x3)   lea(edx, ebp - 0x1c);                 /* lea edx, [ebp-0x1c] */
    II(0x10146172, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10146175, 0x5)   calld(my_string_ctor_string, -0x46d4); /* call 0x10141aa6 */
    II(0x1014617a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1014617c, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x1014617f, 0x5)   calld(0x100e03bc, -0x65dc8);          /* call 0x100e03bc */
    II(0x10146184, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10146186, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x10146189, 0x5)   calld(my_string_dtor, -0x4664);       /* call 0x10141b2a */
    II(0x1014618e, 0x2)   jmpd(0x101461a4, 0x14);               /* jmp 0x101461a4 */
//  II(0x10146190, 0x14)  /* Недостижимый код. */
l_0x101461a4:
    II(0x101461a4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101461a7, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101461a9, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101461aa, 0x1)   popd(edi);                            /* pop edi */
    II(0x101461ab, 0x1)   popd(esi);                            /* pop esi */
    II(0x101461ac, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x101461ad, 0x1)   retd();                               /* ret */
FUNC_END

