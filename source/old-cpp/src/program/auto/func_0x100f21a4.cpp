FUNC_BEGIN(0x100f21a4, 0x28a15bd9561145de, 0x20, ({0x68, 0x6c, 0, 0, 0, 0xe8, 0xa4, 0x3b, 0x7, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x3c, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xf0, 0xe8, 0x1d, 0xf9, 0x4, 0, 0x89, 0x45, 0xf4, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0x66, 0x83, 0x78, 0x8, 0x3e, 0x75, 0x29, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x45, 0x25, 0xff, 0, 0, 0, 0x50, 0xb8, 0xd, 0x23, 0x1a, 0x10, 0x50, 0xb8, 0x50, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0x3a, 0xfe, 0x4, 0, 0x83, 0xc4, 0x10, 0xe9, 0xa8, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3e, 0x1f, 0xf, 0x85, 0xb3, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xd0, 0x33, 0xb8, 0xc0, 0x81, 0x1c, 0x10, 0x1, 0xd0, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xfc, 0xe8, 0xec, 0x3e, 0xf8, 0xff, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xba, 0xc0, 0x81, 0x1c, 0x10, 0x1, 0xc2, 0x89, 0x55, 0xe8, 0x8b, 0x45, 0xfc, 0xf6, 0x40, 0x13, 0x2, 0x74, 0x3b, 0x8d, 0x7d, 0xdc, 0xbe, 0x88, 0x8a, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x8b, 0x45, 0xe8, 0xff, 0x70, 0x17, 0x8b, 0x45, 0xe8, 0xff, 0x70, 0x17, 0x8b, 0x45, 0xe8, 0x8b, 0x40, 0x13, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xdc, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0xb5, 0xfd, 0x4, 0, 0x83, 0xc4, 0x14, 0xeb, 0x39, 0x8d, 0x7d, 0xd0, 0xbe, 0x94, 0x8a, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x8b, 0x45, 0xec, 0xff, 0x70, 0x17, 0x8b, 0x45, 0xe8, 0xff, 0x70, 0x17, 0x8b, 0x45, 0xec, 0x8b, 0x40, 0x13, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xd0, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0x7a, 0xfd, 0x4, 0, 0x83, 0xc4, 0x14, 0xe9, 0xe8, 0, 0, 0, 0x8d, 0x55, 0xcc, 0x8b, 0x45, 0xfc, 0xe8, 0x8f, 0xe7, 0x5, 0, 0x8d, 0x45, 0xcc, 0xe8, 0x90, 0x90, 0xf9, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0x9, 0xc7, 0x45, 0xc8, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x88, 0x4, 0, 0, 0xbb, 0x30, 0x23, 0x1a, 0x10, 0xba, 0x3c, 0x23, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0x96, 0x3a, 0x7, 0, 0x89, 0x45, 0xc8, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x15, 0x74, 0x9, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x1f, 0x75, 0x3c, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x45, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x1, 0x8f, 0xf9, 0xff, 0xf, 0xbf, 0, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0x56, 0x23, 0x1a, 0x10, 0x50, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0xef, 0xfc, 0x4, 0, 0x83, 0xc4, 0x14, 0xeb, 0x56, 0x8d, 0x4d, 0xc4, 0x8b, 0x45, 0xfc, 0xe8, 0x48, 0xa6, 0xfa, 0xff, 0xf, 0xbf, 0xd8, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xc3, 0x8e, 0xf9, 0xff, 0xf, 0xbf, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0x18, 0x2c, 0x6, 0, 0xf, 0xbf, 0x45, 0xc4, 0x50, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0xa9, 0x8e, 0xf9, 0xff, 0xf, 0xbf, 0, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0x84, 0x23, 0x1a, 0x10, 0x50, 0xb8, 0xc8, 0, 0, 0, 0x50, 0x8d, 0x45, 0xf0, 0x50, 0xe8, 0x97, 0xfc, 0x4, 0, 0x83, 0xc4, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x57, 0x67, 0xf9, 0xff, 0xe8, 0x4e, 0x86, 0xfd, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x63, 0x86, 0xfd, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xfd, 0x73, 0xf9, 0xff, 0xe8, 0x53, 0x39, 0x2, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x50, 0xf7, 0x4, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100f21a4, 0x5)   pushd(0x6c);                          /* push dword 0x6c */
    II(0x100f21a9, 0x5)   calld(sys_check_available_stack_size, 0x73ba4); /* call 0x10165d52 */
    II(0x100f21ae, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100f21af, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100f21b0, 0x1)   pushd(edx);                           /* push edx */
    II(0x100f21b1, 0x1)   pushd(esi);                           /* push esi */
    II(0x100f21b2, 0x1)   pushd(edi);                           /* push edi */
    II(0x100f21b3, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100f21b4, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100f21b6, 0x6)   sub(esp, 0x3c);                       /* sub esp, 0x3c */
    II(0x100f21bc, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100f21bf, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100f21c3, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f21c6, 0x5)   calld(my_string_ctor, 0x4f91d);       /* call 0x10141ae8 */
    II(0x100f21cb, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100f21ce, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100f21d2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f21d5, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x3e);   /* cmp word [eax+0x8], 0x3e */
    II(0x100f21da, 0x2)   jnzd(0x100f2205, 0x29);               /* jnz 0x100f2205 */
    II(0x100f21dc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f21df, 0x3)   mov(al, memb_a32(ds, eax + 0x45));    /* mov al, [eax+0x45] */
    II(0x100f21e2, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100f21e7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f21e8, 0x5)   mov(eax, 0x101a230d);                 /* mov eax, 0x101a230d */ /* "Number of turns to clear site: %i." */
    II(0x100f21ed, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f21ee, 0x5)   mov(eax, 0x50);                       /* mov eax, 0x50 */
    II(0x100f21f3, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f21f4, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f21f7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f21f8, 0x5)   calld(0x10142037, 0x4fe3a);           /* call 0x10142037 */
    II(0x100f21fd, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x100f2200, 0x5)   jmpd(0x100f23ad, 0x1a8);              /* jmp 0x100f23ad */
l_0x100f2205:
    II(0x100f2205, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2208, 0x4)   cmp(memb_a32(ds, eax + 0x3e), 0x1f);  /* cmp byte [eax+0x3e], 0x1f */
    II(0x100f220c, 0x6)   jnzd(0x100f22c5, 0xb3);               /* jnz dword 0x100f22c5 */
    II(0x100f2212, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2215, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f2218, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f221b, 0x3)   imul(edx, eax, 0x33);                 /* imul edx, eax, 0x33 */
    II(0x100f221e, 0x5)   mov(eax, 0x101c81c0);                 /* mov eax, 0x101c81c0 */
    II(0x100f2223, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100f2225, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100f2228, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f222b, 0x5)   calld(0x1007611c, -0x7c114);          /* call 0x1007611c */
    II(0x100f2230, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f2233, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f2236, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f2239, 0x5)   mov(edx, 0x101c81c0);                 /* mov edx, 0x101c81c0 */
    II(0x100f223e, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100f2240, 0x3)   mov(memd_a32(ss, ebp - 0x18), edx);   /* mov [ebp-0x18], edx */
    II(0x100f2243, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2246, 0x4)   test(memb_a32(ds, eax + 0x13), 0x2);  /* test byte [eax+0x13], 0x2 */
    II(0x100f224a, 0x2)   jzd(0x100f2287, 0x3b);                /* jz 0x100f2287 */
    II(0x100f224c, 0x3)   lea(edi, ebp - 0x24);                 /* lea edi, [ebp-0x24] */
    II(0x100f224f, 0x5)   mov(esi, 0x101b8a88);                 /* mov esi, 0x101b8a88 */
    II(0x100f2254, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2255, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2256, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2257, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100f225a, 0x3)   pushd(memd_a32(ds, eax + 0x17));      /* push dword [eax+0x17] */
    II(0x100f225d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100f2260, 0x3)   pushd(memd_a32(ds, eax + 0x17));      /* push dword [eax+0x17] */
    II(0x100f2263, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100f2266, 0x3)   mov(eax, memd_a32(ds, eax + 0x13));   /* mov eax, [eax+0x13] */
    II(0x100f2269, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x100f226c, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100f226f, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x24)); /* push dword [eax+ebp-0x24] */
    II(0x100f2273, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x100f2278, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2279, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f227c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f227d, 0x5)   calld(0x10142037, 0x4fdb5);           /* call 0x10142037 */
    II(0x100f2282, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x100f2285, 0x2)   jmpd(0x100f22c0, 0x39);               /* jmp 0x100f22c0 */
l_0x100f2287:
    II(0x100f2287, 0x3)   lea(edi, ebp - 0x30);                 /* lea edi, [ebp-0x30] */
    II(0x100f228a, 0x5)   mov(esi, 0x101b8a94);                 /* mov esi, 0x101b8a94 */
    II(0x100f228f, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2290, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2291, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f2292, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100f2295, 0x3)   pushd(memd_a32(ds, eax + 0x17));      /* push dword [eax+0x17] */
    II(0x100f2298, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100f229b, 0x3)   pushd(memd_a32(ds, eax + 0x17));      /* push dword [eax+0x17] */
    II(0x100f229e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100f22a1, 0x3)   mov(eax, memd_a32(ds, eax + 0x13));   /* mov eax, [eax+0x13] */
    II(0x100f22a4, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x100f22a7, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100f22aa, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x30)); /* push dword [eax+ebp-0x30] */
    II(0x100f22ae, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x100f22b3, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f22b4, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f22b7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f22b8, 0x5)   calld(0x10142037, 0x4fd7a);           /* call 0x10142037 */
    II(0x100f22bd, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
l_0x100f22c0:
    II(0x100f22c0, 0x5)   jmpd(0x100f23ad, 0xe8);               /* jmp 0x100f23ad */
l_0x100f22c5:
    II(0x100f22c5, 0x3)   lea(edx, ebp - 0x34);                 /* lea edx, [ebp-0x34] */
    II(0x100f22c8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f22cb, 0x5)   calld(0x10150a5f, 0x5e78f);           /* call 0x10150a5f */
    II(0x100f22d0, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100f22d3, 0x5)   calld(my_2_get_count, -0x66f70);      /* call 0x1008b368 */
    II(0x100f22d8, 0x1)   cwde();                               /* cwde */
    II(0x100f22d9, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100f22db, 0x2)   jled(0x100f22e6, 0x9);                /* jle 0x100f22e6 */
    II(0x100f22dd, 0x7)   mov(memd_a32(ss, ebp - 0x38), 0);     /* mov dword [ebp-0x38], 0x0 */
    II(0x100f22e4, 0x2)   jmpd(0x100f22ff, 0x19);               /* jmp 0x100f22ff */
l_0x100f22e6:
    II(0x100f22e6, 0x5)   mov(ecx, 0x488);                      /* mov ecx, 0x488 */
    II(0x100f22eb, 0x5)   mov(ebx, 0x101a2330);                 /* mov ebx, 0x101a2330 */ /* "gamemgr.cpp" */
    II(0x100f22f0, 0x5)   mov(edx, 0x101a233c);                 /* mov edx, 0x101a233c */ /* "build_list.GetCount() > 0" */
    II(0x100f22f5, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100f22f7, 0x5)   calld(sys_assert, 0x73a96);           /* call 0x10165d92 */
    II(0x100f22fc, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
l_0x100f22ff:
    II(0x100f22ff, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2302, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x15);  /* cmp byte [eax+0x3d], 0x15 */
    II(0x100f2306, 0x2)   jzd(0x100f2311, 0x9);                 /* jz 0x100f2311 */
    II(0x100f2308, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f230b, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1f);  /* cmp byte [eax+0x3d], 0x1f */
    II(0x100f230f, 0x2)   jnzd(0x100f234d, 0x3c);               /* jnz 0x100f234d */
l_0x100f2311:
    II(0x100f2311, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2314, 0x3)   mov(al, memb_a32(ds, eax + 0x45));    /* mov al, [eax+0x45] */
    II(0x100f2317, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100f231c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f231d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f231f, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100f2322, 0x5)   calld(0x1008b228, -0x670ff);          /* call 0x1008b228 */
    II(0x100f2327, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100f232a, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f232d, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f2333, 0x5)   mov(eax, 0x101a2356);                 /* mov eax, 0x101a2356 */ /* "Was building %s, with %i turns to completion." */
    II(0x100f2338, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2339, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x100f233e, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f233f, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f2342, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2343, 0x5)   calld(0x10142037, 0x4fcef);           /* call 0x10142037 */
    II(0x100f2348, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x100f234b, 0x2)   jmpd(0x100f23a3, 0x56);               /* jmp 0x100f23a3 */
l_0x100f234d:
    II(0x100f234d, 0x3)   lea(ecx, ebp - 0x3c);                 /* lea ecx, [ebp-0x3c] */
    II(0x100f2350, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f2353, 0x5)   calld(0x1009c9a0, -0x559b8);          /* call 0x1009c9a0 */
    II(0x100f2358, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x100f235b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f235d, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100f2360, 0x5)   calld(0x1008b228, -0x6713d);          /* call 0x1008b228 */
    II(0x100f2365, 0x3)   movsx(edx, memw_a32(ds, eax));        /* movsx edx, word [eax] */
    II(0x100f2368, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f236b, 0x5)   calld(0x10154f88, 0x62c18);           /* call 0x10154f88 */
    II(0x100f2370, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x3c)); /* movsx eax, word [ebp-0x3c] */
    II(0x100f2374, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2375, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f2377, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100f237a, 0x5)   calld(0x1008b228, -0x67157);          /* call 0x1008b228 */
    II(0x100f237f, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100f2382, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f2385, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f238b, 0x5)   mov(eax, 0x101a2384);                 /* mov eax, 0x101a2384 */ /* "Currently building: %s.\nTurns to completion: %i." */
    II(0x100f2390, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2391, 0x5)   mov(eax, 0xc8);                       /* mov eax, 0xc8 */
    II(0x100f2396, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f2397, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f239a, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f239b, 0x5)   calld(0x10142037, 0x4fc97);           /* call 0x10142037 */
    II(0x100f23a0, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
l_0x100f23a3:
    II(0x100f23a3, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f23a5, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x100f23a8, 0x5)   calld(0x10088b04, -0x698a9);          /* call 0x10088b04 */
l_0x100f23ad:
    II(0x100f23ad, 0x5)   calld(0x100caa00, -0x279b2);          /* call 0x100caa00 */
    II(0x100f23b2, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100f23b7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f23b8, 0x5)   calld(0x100caa20, -0x2799d);          /* call 0x100caa20 */
    II(0x100f23bd, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100f23bf, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100f23c1, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f23c3, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f23c6, 0x5)   calld(my_strobj_c_str_v2, -0x68c03);  /* call 0x100897c8 */
    II(0x100f23cb, 0x5)   calld(0x10115d23, 0x23953);           /* call 0x10115d23 */
    II(0x100f23d0, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f23d2, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100f23d5, 0x5)   calld(my_string_dtor, 0x4f750);       /* call 0x10141b2a */
    II(0x100f23da, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100f23dc, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100f23dd, 0x1)   popd(edi);                            /* pop edi */
    II(0x100f23de, 0x1)   popd(esi);                            /* pop esi */
    II(0x100f23df, 0x1)   popd(edx);                            /* pop edx */
    II(0x100f23e0, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100f23e1, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100f23e2, 0x1)   retd();                               /* ret */
FUNC_END

