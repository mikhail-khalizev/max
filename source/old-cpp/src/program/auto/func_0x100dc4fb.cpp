FUNC_BEGIN(0x100dc4fb, 0x5c85b333e772e1f9, 0x20, ({0x68, 0x50, 0, 0, 0, 0xe8, 0x4d, 0x98, 0x8, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x34, 0, 0, 0, 0x89, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0x66, 0xc7, 0x80, 0xc4, 0x35, 0x1c, 0x10, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x66, 0xc7, 0x80, 0x83, 0xa5, 0x1c, 0x10, 0, 0, 0xe8, 0x36, 0x6, 0xfc, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x13, 0xb8, 0xb4, 0x35, 0x1c, 0x10, 0x1, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0x58, 0x5, 0xfc, 0xff, 0xe8, 0xa3, 0x44, 0, 0, 0x31, 0xdb, 0x88, 0xc3, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x13, 0xb8, 0xb4, 0x35, 0x1c, 0x10, 0x1, 0xd0, 0x8d, 0x50, 0x4, 0x8d, 0x45, 0xd4, 0xe8, 0xf6, 0x43, 0, 0, 0x8d, 0x45, 0xd8, 0xe8, 0x76, 0x5, 0xfc, 0xff, 0xc7, 0x45, 0xf4, 0x31, 0, 0, 0, 0x8d, 0x55, 0xf4, 0x8d, 0x45, 0xd8, 0xe8, 0x14, 0xed, 0xfa, 0xff, 0xc7, 0x45, 0xe0, 0x3d, 0, 0, 0, 0x8d, 0x55, 0xe0, 0x8d, 0x45, 0xd8, 0xe8, 0x2, 0xed, 0xfa, 0xff, 0xc7, 0x45, 0xdc, 0x39, 0, 0, 0, 0x8d, 0x55, 0xdc, 0x8d, 0x45, 0xd8, 0xe8, 0xf0, 0xec, 0xfa, 0xff, 0xe8, 0xb7, 0x5, 0xfc, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0xd0, 0xe8, 0xe4, 0x4, 0xfc, 0xff, 0x89, 0xc2, 0xf, 0xbf, 0x45, 0xfc, 0xe8, 0x2e, 0xfe, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x23, 0xc5, 0xfa, 0xff, 0x8d, 0x45, 0xd8, 0xe8, 0x7f, 0xed, 0xfa, 0xff, 0x89, 0x45, 0xf0, 0x8d, 0x45, 0xd4, 0xe8, 0xd4, 0xe4, 0xfe, 0xff, 0xc7, 0x45, 0xf8, 0x28, 0, 0, 0, 0x8d, 0x55, 0xf8, 0x8d, 0x45, 0xd4, 0xe8, 0x3e, 0xe4, 0xfe, 0xff, 0xc7, 0x45, 0xe4, 0x14, 0, 0, 0, 0x8d, 0x55, 0xe4, 0x8d, 0x45, 0xd4, 0xe8, 0x2c, 0xe4, 0xfe, 0xff, 0xc7, 0x45, 0xe8, 0x2, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xe8, 0xff, 0x45, 0xe8, 0x8b, 0x45, 0xe8, 0x66, 0x3b, 0x45, 0xf0, 0x7d, 0x14, 0xc7, 0x45, 0xcc, 0, 0, 0, 0, 0x8d, 0x55, 0xcc, 0x8d, 0x45, 0xd4, 0xe8, 0x2, 0xe4, 0xfe, 0xff, 0xeb, 0xdd, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xec, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xf0, 0x3b, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0xa6, 0xc4, 0xfa, 0xff, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0xda, 0x3b, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x90, 0xc4, 0xfa, 0xff, 0x8b, 0x45, 0xec, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100dc4fb, 0x5)   pushd(0x50);                          /* push dword 0x50 */
    II(0x100dc500, 0x5)   calld(sys_check_available_stack_size, 0x8984d); /* call 0x10165d52 */
    II(0x100dc505, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100dc506, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100dc507, 0x1)   pushd(edx);                           /* push edx */
    II(0x100dc508, 0x1)   pushd(esi);                           /* push esi */
    II(0x100dc509, 0x1)   pushd(edi);                           /* push edi */
    II(0x100dc50a, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100dc50b, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100dc50d, 0x6)   sub(esp, 0x34);                       /* sub esp, 0x34 */
    II(0x100dc513, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100dc516, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100dc51a, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x100dc51d, 0x9)   mov(memw_a32(ds, eax + 0x101c35c4), 0); /* mov word [eax+0x101c35c4], 0x0 */
    II(0x100dc526, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100dc52a, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100dc530, 0x9)   mov(memw_a32(ds, eax + 0x101ca583), 0); /* mov word [eax+0x101ca583], 0x0 */
    II(0x100dc539, 0x5)   calld(0x1009cb74, -0x3f9ca);          /* call 0x1009cb74 */
    II(0x100dc53e, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100dc540, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100dc542, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100dc546, 0x3)   imul(edx, edx, 0x13);                 /* imul edx, edx, 0x13 */
    II(0x100dc549, 0x5)   mov(eax, 0x101c35b4);                 /* mov eax, 0x101c35b4 */
    II(0x100dc54e, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100dc550, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc553, 0x5)   calld(0x1009cab0, -0x3faa8);          /* call 0x1009cab0 */
    II(0x100dc558, 0x5)   calld(0x100e0a00, 0x44a3);            /* call 0x100e0a00 */
    II(0x100dc55d, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100dc55f, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100dc561, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100dc565, 0x3)   imul(edx, edx, 0x13);                 /* imul edx, edx, 0x13 */
    II(0x100dc568, 0x5)   mov(eax, 0x101c35b4);                 /* mov eax, 0x101c35b4 */
    II(0x100dc56d, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100dc56f, 0x3)   lea(edx, eax + 0x4);                  /* lea edx, [eax+0x4] */
    II(0x100dc572, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc575, 0x5)   calld(0x100e0970, 0x43f6);            /* call 0x100e0970 */
    II(0x100dc57a, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc57d, 0x5)   calld(0x1009caf8, -0x3fa8a);          /* call 0x1009caf8 */
    II(0x100dc582, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x31);   /* mov dword [ebp-0xc], 0x31 */
    II(0x100dc589, 0x3)   lea(edx, ebp - 0xc);                  /* lea edx, [ebp-0xc] */
    II(0x100dc58c, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc58f, 0x5)   calld(0x1008b2a8, -0x512ec);          /* call 0x1008b2a8 */
    II(0x100dc594, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x3d);  /* mov dword [ebp-0x20], 0x3d */
    II(0x100dc59b, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x100dc59e, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc5a1, 0x5)   calld(0x1008b2a8, -0x512fe);          /* call 0x1008b2a8 */
    II(0x100dc5a6, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0x39);  /* mov dword [ebp-0x24], 0x39 */
    II(0x100dc5ad, 0x3)   lea(edx, ebp - 0x24);                 /* lea edx, [ebp-0x24] */
    II(0x100dc5b0, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc5b3, 0x5)   calld(0x1008b2a8, -0x51310);          /* call 0x1008b2a8 */
    II(0x100dc5b8, 0x5)   calld(0x1009cb74, -0x3fa49);          /* call 0x1009cb74 */
    II(0x100dc5bd, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100dc5bf, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100dc5c1, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100dc5c4, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100dc5c7, 0x5)   calld(0x1009cab0, -0x3fb1c);          /* call 0x1009cab0 */
    II(0x100dc5cc, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100dc5ce, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100dc5d2, 0x5)   calld(0x100dc405, -0x1d2);            /* call 0x100dc405 */
    II(0x100dc5d7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100dc5d9, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100dc5dc, 0x5)   calld(0x10088b04, -0x53add);          /* call 0x10088b04 */
    II(0x100dc5e1, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc5e4, 0x5)   calld(my_2_get_count, -0x51281);      /* call 0x1008b368 */
    II(0x100dc5e9, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100dc5ec, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc5ef, 0x5)   calld(0x100caac8, -0x11b2c);          /* call 0x100caac8 */
    II(0x100dc5f4, 0x7)   mov(memd_a32(ss, ebp - 0x8), 0x28);   /* mov dword [ebp-0x8], 0x28 */
    II(0x100dc5fb, 0x3)   lea(edx, ebp - 0x8);                  /* lea edx, [ebp-0x8] */
    II(0x100dc5fe, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc601, 0x5)   calld(0x100caa44, -0x11bc2);          /* call 0x100caa44 */
    II(0x100dc606, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0x14);  /* mov dword [ebp-0x1c], 0x14 */
    II(0x100dc60d, 0x3)   lea(edx, ebp - 0x1c);                 /* lea edx, [ebp-0x1c] */
    II(0x100dc610, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc613, 0x5)   calld(0x100caa44, -0x11bd4);          /* call 0x100caa44 */
    II(0x100dc618, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0x2);   /* mov dword [ebp-0x18], 0x2 */
    II(0x100dc61f, 0x2)   jmpd(0x100dc627, 0x6);                /* jmp 0x100dc627 */
l_0x100dc621:
    II(0x100dc621, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100dc624, 0x3)   inc(memd_a32(ss, ebp - 0x18));        /* inc dword [ebp-0x18] */
l_0x100dc627:
    II(0x100dc627, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100dc62a, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x10));    /* cmp ax, [ebp-0x10] */
    II(0x100dc62e, 0x2)   jged(0x100dc644, 0x14);               /* jge 0x100dc644 */
    II(0x100dc630, 0x7)   mov(memd_a32(ss, ebp - 0x34), 0);     /* mov dword [ebp-0x34], 0x0 */
    II(0x100dc637, 0x3)   lea(edx, ebp - 0x34);                 /* lea edx, [ebp-0x34] */
    II(0x100dc63a, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc63d, 0x5)   calld(0x100caa44, -0x11bfe);          /* call 0x100caa44 */
    II(0x100dc642, 0x2)   jmpd(0x100dc621, -0x23);              /* jmp 0x100dc621 */
l_0x100dc644:
    II(0x100dc644, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100dc647, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100dc64a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100dc64c, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100dc64f, 0x5)   calld(0x100e0244, 0x3bf0);            /* call 0x100e0244 */
    II(0x100dc654, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100dc656, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100dc659, 0x5)   calld(0x10088b04, -0x53b5a);          /* call 0x10088b04 */
    II(0x100dc65e, 0x2)   jmpd(0x100dc674, 0x14);               /* jmp 0x100dc674 */
//  II(0x100dc660, 0x14)  /* Недостижимый код. */
l_0x100dc674:
    II(0x100dc674, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100dc677, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100dc679, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100dc67a, 0x1)   popd(edi);                            /* pop edi */
    II(0x100dc67b, 0x1)   popd(esi);                            /* pop esi */
    II(0x100dc67c, 0x1)   popd(edx);                            /* pop edx */
    II(0x100dc67d, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100dc67e, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100dc67f, 0x1)   retd();                               /* ret */
FUNC_END

