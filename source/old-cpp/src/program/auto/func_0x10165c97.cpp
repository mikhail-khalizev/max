FUNC_BEGIN(0x10165c97, 0x119681fa8985338e, 0x20, ({0x68, 0xa0, 0, 0, 0, 0xe8, 0xb1, 0, 0, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x84, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8b, 0x55, 0xfc, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0xe8, 0x9f, 0xef, 0xff, 0xff, 0x89, 0x45, 0xf0, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0xe8, 0x4, 0xff, 0xff, 0xff, 0x8b, 0x45, 0x93, 0x89, 0x45, 0xf4, 0x31, 0xd2, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0xe8, 0x63, 0xf9, 0xff, 0xff, 0xeb, 0xd, 0x31, 0xd2, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0xe8, 0x54, 0xf9, 0xff, 0xff, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10165c97, 0x5)   pushd(0xa0);                          /* push dword 0xa0 */
    II(0x10165c9c, 0x5)   calld(sys_check_available_stack_size, 0xb1); /* call 0x10165d52 */
    II(0x10165ca1, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10165ca2, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10165ca3, 0x1)   pushd(edx);                           /* push edx */
    II(0x10165ca4, 0x1)   pushd(esi);                           /* push esi */
    II(0x10165ca5, 0x1)   pushd(edi);                           /* push edi */
    II(0x10165ca6, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10165ca7, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10165ca9, 0x6)   sub(esp, 0x84);                       /* sub esp, 0x84 */
    II(0x10165caf, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10165cb2, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x10165cb6, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10165cb9, 0x6)   lea(eax, ebp - 0x84);                 /* lea eax, [ebp+0xffffff7c] */
    II(0x10165cbf, 0x5)   calld(0x10164c63, -0x1061);           /* call 0x10164c63 */
    II(0x10165cc4, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10165cc7, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x10165ccb, 0x6)   lea(eax, ebp - 0x84);                 /* lea eax, [ebp+0xffffff7c] */
    II(0x10165cd1, 0x5)   calld(0x10165bda, -0xfc);             /* call 0x10165bda */
    II(0x10165cd6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x6d));   /* mov eax, [ebp-0x6d] */
    II(0x10165cd9, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10165cdc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10165cde, 0x6)   lea(eax, ebp - 0x84);                 /* lea eax, [ebp+0xffffff7c] */
    II(0x10165ce4, 0x5)   calld(0x1016564c, -0x69d);            /* call 0x1016564c */
    II(0x10165ce9, 0x2)   jmpd(0x10165cf8, 0xd);                /* jmp 0x10165cf8 */
//  II(0x10165ceb, 0xd)   /* Недостижимый код. */
l_0x10165cf8:
    II(0x10165cf8, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10165cfb, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10165cfd, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10165cfe, 0x1)   popd(edi);                            /* pop edi */
    II(0x10165cff, 0x1)   popd(esi);                            /* pop esi */
    II(0x10165d00, 0x1)   popd(edx);                            /* pop edx */
    II(0x10165d01, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10165d02, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10165d03, 0x1)   retd();                               /* ret */
FUNC_END

