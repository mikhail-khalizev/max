FUNC_BEGIN(0x100a8e92, 0xe5e49025eb062713, 0x20, ({0x68, 0x4c, 0, 0, 0, 0xe8, 0xb6, 0xce, 0xb, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x30, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8d, 0x45, 0xf0, 0xe8, 0x3b, 0xdc, 0xfc, 0xff, 0x8b, 0x45, 0xfc, 0xf6, 0x40, 0x13, 0x2, 0xf, 0x84, 0x3b, 0x1, 0, 0, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0x2e, 0xd6, 0xfc, 0xff, 0x89, 0x45, 0xe8, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x55, 0xd8, 0x8b, 0x45, 0xfc, 0xe8, 0x52, 0x96, 0xa, 0, 0x8b, 0x45, 0xd8, 0x66, 0x89, 0x45, 0xf0, 0xeb, 0x7, 0x8b, 0x45, 0xf0, 0x66, 0xff, 0x45, 0xf0, 0xf, 0xbf, 0x45, 0xf0, 0x3b, 0x45, 0xe0, 0xf, 0x8d, 0xf6, 0, 0, 0, 0x8b, 0x45, 0xdc, 0x66, 0x89, 0x45, 0xf2, 0xeb, 0x7, 0x8b, 0x45, 0xf2, 0x66, 0xff, 0x45, 0xf2, 0xf, 0xbf, 0x45, 0xf2, 0x3b, 0x45, 0xe4, 0xf, 0x8d, 0xd4, 0, 0, 0, 0xf, 0xbf, 0x55, 0xf2, 0xa1, 0x70, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0xf, 0xaf, 0xd0, 0xf, 0xbf, 0x45, 0xf0, 0x1, 0xd0, 0x8b, 0x15, 0x54, 0x94, 0x1c, 0x10, 0x1, 0xc2, 0x31, 0xc0, 0x8a, 0x2, 0x89, 0x45, 0xd4, 0xf, 0xbf, 0x5d, 0xf2, 0xf, 0xbf, 0x55, 0xf0, 0xb8, 0xb8, 0x39, 0x1c, 0x10, 0xe8, 0xf1, 0xa5, 0x5, 0, 0x89, 0xc2, 0x8d, 0x45, 0xec, 0xe8, 0xe2, 0xd4, 0xfc, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xec, 0xe8, 0x94, 0xdc, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x3, 0x1e, 0x9, 0, 0x84, 0xc0, 0x74, 0x5c, 0x8d, 0x45, 0xec, 0xe8, 0x26, 0xd4, 0xfc, 0xff, 0x66, 0x83, 0x78, 0x8, 0x27, 0x75, 0x4, 0x83, 0x4d, 0xd4, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0x13, 0xd4, 0xfc, 0xff, 0x66, 0x83, 0x78, 0x8, 0x21, 0x75, 0x7, 0xc7, 0x45, 0xd4, 0x1, 0, 0, 0, 0x8d, 0x45, 0xec, 0xe8, 0xfd, 0xd3, 0xfc, 0xff, 0x66, 0x83, 0x78, 0x8, 0xc, 0x74, 0x17, 0x8d, 0x45, 0xec, 0xe8, 0xee, 0xd3, 0xfc, 0xff, 0x8b, 0x40, 0x12, 0x25, 0x1, 0x2, 0, 0, 0x3d, 0, 0x2, 0, 0, 0x74, 0x2, 0xeb, 0x9, 0xc7, 0x45, 0xd4, 0, 0, 0, 0, 0xeb, 0x2, 0xeb, 0x8e, 0xf, 0xbf, 0x5d, 0xd4, 0x8d, 0x55, 0xf0, 0x8d, 0x45, 0xd0, 0xe8, 0x87, 0xce, 0xfc, 0xff, 0x89, 0xc2, 0xb8, 0xd8, 0x34, 0x1c, 0x10, 0xe8, 0xdb, 0x5, 0x2, 0, 0xe9, 0x18, 0xff, 0xff, 0xff, 0xe9, 0xf6, 0xfe, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x6f, 0xcf, 0xfc, 0xff, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf4, 0xff, 0x45, 0xf4, 0xf, 0xbf, 0x45, 0xf4, 0x83, 0xf8, 0x4, 0x7d, 0x35, 0xf, 0xbf, 0x45, 0xf4, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8a, 0x80, 0x90, 0xa4, 0x1c, 0x10, 0x25, 0xff, 0, 0, 0, 0x83, 0xf8, 0x2, 0x75, 0x19, 0x8b, 0x55, 0xfc, 0xf, 0xbf, 0x45, 0xf4, 0x69, 0xc0, 0xc5, 0, 0, 0, 0xbb, 0xc4, 0x31, 0x1c, 0x10, 0x1, 0xd8, 0xe8, 0x9d, 0xa5, 0x1, 0, 0xeb, 0xbc, 0x8b, 0x55, 0xfc, 0xb8, 0x80, 0x31, 0x1c, 0x10, 0xe8, 0x24, 0xce, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100a8e92, 0x5)   pushd(0x4c);                          /* push dword 0x4c */
    II(0x100a8e97, 0x5)   calld(sys_check_available_stack_size, 0xbceb6); /* call 0x10165d52 */
    II(0x100a8e9c, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100a8e9d, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a8e9e, 0x1)   pushd(edx);                           /* push edx */
    II(0x100a8e9f, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a8ea0, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a8ea1, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a8ea2, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a8ea4, 0x6)   sub(esp, 0x30);                       /* sub esp, 0x30 */
    II(0x100a8eaa, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100a8ead, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100a8eb0, 0x5)   calld(my_ctor_0x101b4184, -0x323c5);  /* call 0x10076af0 */
    II(0x100a8eb5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8eb8, 0x4)   test(memb_a32(ds, eax + 0x13), 0x2);  /* test byte [eax+0x13], 0x2 */
    II(0x100a8ebc, 0x6)   jzd(0x100a8ffd, 0x13b);               /* jz dword 0x100a8ffd */
    II(0x100a8ec2, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100a8ec6, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8ec9, 0x5)   calld(0x100764fc, -0x329d2);          /* call 0x100764fc */
    II(0x100a8ece, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100a8ed1, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100a8ed5, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100a8ed8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a8edb, 0x5)   calld(0x10152532, 0xa9652);           /* call 0x10152532 */
    II(0x100a8ee0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100a8ee3, 0x4)   mov(memw_a32(ss, ebp - 0x10), ax);    /* mov [ebp-0x10], ax */
    II(0x100a8ee7, 0x2)   jmpd(0x100a8ef0, 0x7);                /* jmp 0x100a8ef0 */
l_0x100a8ee9:
    II(0x100a8ee9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100a8eec, 0x4)   inc(memw_a32(ss, ebp - 0x10));        /* inc word [ebp-0x10] */
l_0x100a8ef0:
    II(0x100a8ef0, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x100a8ef4, 0x3)   cmp(eax, memd_a32(ss, ebp - 0x20));   /* cmp eax, [ebp-0x20] */
    II(0x100a8ef7, 0x6)   jged(0x100a8ff3, 0xf6);               /* jge dword 0x100a8ff3 */
    II(0x100a8efd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100a8f00, 0x4)   mov(memw_a32(ss, ebp - 0xe), ax);     /* mov [ebp-0xe], ax */
    II(0x100a8f04, 0x2)   jmpd(0x100a8f0d, 0x7);                /* jmp 0x100a8f0d */
l_0x100a8f06:
    II(0x100a8f06, 0x3)   mov(eax, memd_a32(ss, ebp - 0xe));    /* mov eax, [ebp-0xe] */
    II(0x100a8f09, 0x4)   inc(memw_a32(ss, ebp - 0xe));         /* inc word [ebp-0xe] */
l_0x100a8f0d:
    II(0x100a8f0d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xe));  /* movsx eax, word [ebp-0xe] */
    II(0x100a8f11, 0x3)   cmp(eax, memd_a32(ss, ebp - 0x1c));   /* cmp eax, [ebp-0x1c] */
    II(0x100a8f14, 0x6)   jged(0x100a8fee, 0xd4);               /* jge dword 0x100a8fee */
    II(0x100a8f1a, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xe));  /* movsx edx, word [ebp-0xe] */
    II(0x100a8f1e, 0x5)   mov(eax, memd_a32(ds, 0x101c8170));   /* mov eax, [0x101c8170] */
    II(0x100a8f23, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100a8f26, 0x3)   imul(edx, eax);                       /* imul edx, eax */
    II(0x100a8f29, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x100a8f2d, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100a8f2f, 0x6)   mov(edx, memd_a32(ds, 0x101c9454));   /* mov edx, [0x101c9454] */
    II(0x100a8f35, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100a8f37, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100a8f39, 0x2)   mov(al, memb_a32(ds, edx));           /* mov al, [edx] */
    II(0x100a8f3b, 0x3)   mov(memd_a32(ss, ebp - 0x2c), eax);   /* mov [ebp-0x2c], eax */
    II(0x100a8f3e, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0xe));  /* movsx ebx, word [ebp-0xe] */
    II(0x100a8f42, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x100a8f46, 0x5)   mov(eax, 0x101c39b8);                 /* mov eax, 0x101c39b8 */
    II(0x100a8f4b, 0x5)   calld(0x10103541, 0x5a5f1);           /* call 0x10103541 */
    II(0x100a8f50, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a8f52, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f55, 0x5)   calld(0x1007643c, -0x32b1e);          /* call 0x1007643c */
    II(0x100a8f5a, 0x2)   jmpd(0x100a8f64, 0x8);                /* jmp 0x100a8f64 */
l_0x100a8f5c:
    II(0x100a8f5c, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f5f, 0x5)   calld(0x10076bf8, -0x3236c);          /* call 0x10076bf8 */
l_0x100a8f64:
    II(0x100a8f64, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a8f66, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f69, 0x5)   calld(0x1013ad71, 0x91e03);           /* call 0x1013ad71 */
    II(0x100a8f6e, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a8f70, 0x2)   jzd(0x100a8fce, 0x5c);                /* jz 0x100a8fce */
    II(0x100a8f72, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f75, 0x5)   calld(0x100763a0, -0x32bda);          /* call 0x100763a0 */
    II(0x100a8f7a, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x27);   /* cmp word [eax+0x8], 0x27 */
    II(0x100a8f7f, 0x2)   jnzd(0x100a8f85, 0x4);                /* jnz 0x100a8f85 */
    II(0x100a8f81, 0x4)   or_(memd_a32(ss, ebp - 0x2c), 0x1);   /* or dword [ebp-0x2c], 0x1 */
l_0x100a8f85:
    II(0x100a8f85, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f88, 0x5)   calld(0x100763a0, -0x32bed);          /* call 0x100763a0 */
    II(0x100a8f8d, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x21);   /* cmp word [eax+0x8], 0x21 */
    II(0x100a8f92, 0x2)   jnzd(0x100a8f9b, 0x7);                /* jnz 0x100a8f9b */
    II(0x100a8f94, 0x7)   mov(memd_a32(ss, ebp - 0x2c), 0x1);   /* mov dword [ebp-0x2c], 0x1 */
l_0x100a8f9b:
    II(0x100a8f9b, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8f9e, 0x5)   calld(0x100763a0, -0x32c03);          /* call 0x100763a0 */
    II(0x100a8fa3, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0xc);    /* cmp word [eax+0x8], 0xc */
    II(0x100a8fa8, 0x2)   jzd(0x100a8fc1, 0x17);                /* jz 0x100a8fc1 */
    II(0x100a8faa, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8fad, 0x5)   calld(0x100763a0, -0x32c12);          /* call 0x100763a0 */
    II(0x100a8fb2, 0x3)   mov(eax, memd_a32(ds, eax + 0x12));   /* mov eax, [eax+0x12] */
    II(0x100a8fb5, 0x5)   and_(eax, 0x201);                     /* and eax, 0x201 */
    II(0x100a8fba, 0x5)   cmp(eax, 0x200);                      /* cmp eax, 0x200 */
    II(0x100a8fbf, 0x2)   jzd(0x100a8fc3, 0x2);                 /* jz 0x100a8fc3 */
l_0x100a8fc1:
    II(0x100a8fc1, 0x2)   jmpd(0x100a8fcc, 0x9);                /* jmp 0x100a8fcc */
l_0x100a8fc3:
    II(0x100a8fc3, 0x7)   mov(memd_a32(ss, ebp - 0x2c), 0);     /* mov dword [ebp-0x2c], 0x0 */
    II(0x100a8fca, 0x2)   jmpd(0x100a8fce, 0x2);                /* jmp 0x100a8fce */
l_0x100a8fcc:
    II(0x100a8fcc, 0x2)   jmpd(0x100a8f5c, -0x72);              /* jmp 0x100a8f5c */
l_0x100a8fce:
    II(0x100a8fce, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x2c)); /* movsx ebx, word [ebp-0x2c] */
    II(0x100a8fd2, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x100a8fd5, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a8fd8, 0x5)   calld(0x10075e64, -0x33179);          /* call 0x10075e64 */
    II(0x100a8fdd, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a8fdf, 0x5)   mov(eax, 0x101c34d8);                 /* mov eax, 0x101c34d8 */
    II(0x100a8fe4, 0x5)   calld(0x100c95c4, 0x205db);           /* call 0x100c95c4 */
    II(0x100a8fe9, 0x5)   jmpd(0x100a8f06, -0xe8);              /* jmp 0x100a8f06 */
l_0x100a8fee:
    II(0x100a8fee, 0x5)   jmpd(0x100a8ee9, -0x10a);             /* jmp 0x100a8ee9 */
l_0x100a8ff3:
    II(0x100a8ff3, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a8ff5, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a8ff8, 0x5)   calld(0x10075f6c, -0x33091);          /* call 0x10075f6c */
l_0x100a8ffd:
    II(0x100a8ffd, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0);      /* mov dword [ebp-0xc], 0x0 */
    II(0x100a9004, 0x2)   jmpd(0x100a900c, 0x6);                /* jmp 0x100a900c */
l_0x100a9006:
    II(0x100a9006, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a9009, 0x3)   inc(memd_a32(ss, ebp - 0xc));         /* inc dword [ebp-0xc] */
l_0x100a900c:
    II(0x100a900c, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100a9010, 0x3)   cmp(eax, 0x4);                        /* cmp eax, 0x4 */
    II(0x100a9013, 0x2)   jged(0x100a904a, 0x35);               /* jge 0x100a904a */
    II(0x100a9015, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100a9019, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100a901f, 0x6)   mov(al, memb_a32(ds, eax + 0x101ca490)); /* mov al, [eax+0x101ca490] */
    II(0x100a9025, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a902a, 0x3)   cmp(eax, 0x2);                        /* cmp eax, 0x2 */
    II(0x100a902d, 0x2)   jnzd(0x100a9048, 0x19);               /* jnz 0x100a9048 */
    II(0x100a902f, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100a9032, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100a9036, 0x6)   imul(eax, eax, 0xc5);                 /* imul eax, eax, 0xc5 */
    II(0x100a903c, 0x5)   mov(ebx, 0x101c31c4);                 /* mov ebx, 0x101c31c4 */
    II(0x100a9041, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x100a9043, 0x5)   calld(0x100c35e5, 0x1a59d);           /* call 0x100c35e5 */
l_0x100a9048:
    II(0x100a9048, 0x2)   jmpd(0x100a9006, -0x44);              /* jmp 0x100a9006 */
l_0x100a904a:
    II(0x100a904a, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100a904d, 0x5)   mov(eax, 0x101c3180);                 /* mov eax, 0x101c3180 */
    II(0x100a9052, 0x5)   calld(0x100a5e7b, -0x31dc);           /* call 0x100a5e7b */
    II(0x100a9057, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a9059, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a905a, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a905b, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a905c, 0x1)   popd(edx);                            /* pop edx */
    II(0x100a905d, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a905e, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100a905f, 0x1)   retd();                               /* ret */
FUNC_END

