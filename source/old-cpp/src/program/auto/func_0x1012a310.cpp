FUNC_BEGIN(0x1012a310, 0x1087540e6f56021b, 0x20, ({0x68, 0x8, 0x4, 0, 0, 0xe8, 0x38, 0xba, 0x3, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xdc, 0x3, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x8d, 0x7d, 0xe4, 0xbe, 0x7c, 0xb4, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0xa5, 0xc6, 0x45, 0xf4, 0, 0xb8, 0xe4, 0x83, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0x50, 0xe8, 0xb2, 0xbb, 0x3, 0, 0x83, 0xc4, 0x8, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x50, 0x15, 0x8b, 0x45, 0xf8, 0x66, 0x3b, 0x50, 0x8, 0x75, 0x18, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x15, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x27, 0x25, 0xff, 0, 0, 0, 0x39, 0xc2, 0x74, 0x5a, 0x8d, 0x9d, 0x9c, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x15, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x13, 0xc1, 0xf8, 0x10, 0xe8, 0x71, 0xfd, 0xff, 0xff, 0x50, 0x8d, 0x95, 0x74, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0xf8, 0xe8, 0xb5, 0xfd, 0xff, 0xff, 0x50, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x26, 0x25, 0xff, 0, 0, 0, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xe4, 0xb8, 0, 0x84, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x24, 0xfc, 0xff, 0xff, 0x50, 0xe8, 0x36, 0xbb, 0x3, 0, 0x83, 0xc4, 0x14, 0xc6, 0x45, 0xf4, 0x1, 0xeb, 0x36, 0x8d, 0x95, 0x74, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0xf8, 0xe8, 0x79, 0xfd, 0xff, 0xff, 0x50, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x26, 0x25, 0xff, 0, 0, 0, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xe4, 0xb8, 0x1a, 0x84, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x24, 0xfc, 0xff, 0xff, 0x50, 0xe8, 0xfa, 0xba, 0x3, 0, 0x83, 0xc4, 0x10, 0x8d, 0x95, 0x24, 0xfc, 0xff, 0xff, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x16, 0xbb, 0x3, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x3a, 0xc1, 0xf8, 0x18, 0x85, 0xc0, 0x7c, 0x9, 0x8b, 0x45, 0xf8, 0x80, 0x78, 0x3d, 0x20, 0x7c, 0x2, 0xeb, 0xa, 0x8b, 0x45, 0xfc, 0xf, 0xbe, 0, 0x85, 0xc0, 0x7d, 0x2, 0xeb, 0x8, 0x8b, 0x45, 0xfc, 0x80, 0x38, 0x20, 0x7c, 0x2a, 0xb9, 0x29, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x66, 0xf, 0xbe, 0, 0xf, 0xbf, 0xd8, 0x8b, 0x45, 0xf8, 0x66, 0xf, 0xbe, 0x40, 0x3d, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x42, 0xfe, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xeb, 0x58, 0x8b, 0x45, 0xf8, 0x8a, 0x50, 0x3d, 0x8b, 0x45, 0xfc, 0x3a, 0x10, 0x74, 0x4b, 0x8b, 0x45, 0xfc, 0xf, 0xbe, 0, 0xc1, 0xe0, 0x2, 0xff, 0xb0, 0x78, 0x89, 0x1b, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x3a, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0xb0, 0x78, 0x89, 0x1b, 0x10, 0xb8, 0x42, 0x84, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x24, 0xfc, 0xff, 0xff, 0x50, 0xe8, 0x50, 0xba, 0x3, 0, 0x83, 0xc4, 0x10, 0x8d, 0x95, 0x24, 0xfc, 0xff, 0xff, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x6c, 0xba, 0x3, 0, 0xc6, 0x45, 0xf4, 0x1, 0xb9, 0x5b, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x66, 0xf, 0xbe, 0x40, 0x1, 0xf, 0xbf, 0xd8, 0x8b, 0x45, 0xf8, 0x66, 0xf, 0xbe, 0x40, 0x3e, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xbf, 0xfd, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x74, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x17, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x9a, 0xfd, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x8d, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x19, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x1a, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x75, 0xfd, 0xff, 0xff, 0x8, 0x45, 0xf4, 0x8b, 0x45, 0xf8, 0x80, 0x78, 0x3d, 0x4, 0x75, 0x4e, 0xb9, 0xa6, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0xf, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x45, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x45, 0xfd, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xbf, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x11, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0xe8, 0x1e, 0x24, 0xf7, 0xff, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x1e, 0xfd, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xd8, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x66, 0xf, 0xbe, 0x40, 0x2, 0xf, 0xbf, 0xd8, 0x8b, 0x45, 0xf8, 0x66, 0xf, 0xbe, 0x40, 0x3f, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xf5, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xf1, 0x84, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x3, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0xe8, 0x4a, 0xbb, 0xf4, 0xff, 0x89, 0xc2, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xdb, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xa, 0x85, 0x1a, 0x10, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x5, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xf8, 0x8b, 0x52, 0x3f, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xaa, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x23, 0x85, 0x1a, 0x10, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x7, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xf8, 0x8b, 0x52, 0x41, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x85, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x3c, 0x85, 0x1a, 0x10, 0x8b, 0x55, 0xfc, 0x31, 0xc0, 0x8a, 0x42, 0xd, 0xf, 0xbf, 0xd8, 0x8b, 0x55, 0xf8, 0x31, 0xc0, 0x8a, 0x42, 0x46, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x5c, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x55, 0x85, 0x1a, 0x10, 0x8b, 0x55, 0xfc, 0x31, 0xc0, 0x8a, 0x42, 0xe, 0xf, 0xbf, 0xd8, 0x8b, 0x55, 0xf8, 0x31, 0xc0, 0x8a, 0x42, 0x47, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x33, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x6e, 0x85, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0xf, 0x30, 0xe4, 0xf, 0xbf, 0xd8, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x48, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xa, 0xfc, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x87, 0x85, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x10, 0x30, 0xe4, 0xf, 0xbf, 0xd8, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x49, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xe1, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xa0, 0x85, 0x1a, 0x10, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x1d, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xf8, 0x31, 0xc0, 0x8a, 0x42, 0x4d, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xba, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xb9, 0x85, 0x1a, 0x10, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x1f, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xf8, 0x31, 0xc0, 0x8a, 0x42, 0x4e, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x93, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0xd2, 0x85, 0x1a, 0x10, 0x8b, 0x5d, 0xfc, 0x8b, 0x5b, 0x21, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xf8, 0x31, 0xc0, 0x8a, 0x42, 0x50, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x6c, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0x80, 0xb8, 0xd5, 0x81, 0x1c, 0x10, 0, 0x74, 0x25, 0xb9, 0xeb, 0x85, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x23, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x50, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x32, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x4, 0x86, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x25, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x54, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xb, 0xfb, 0xff, 0xff, 0x8, 0x45, 0xf4, 0xb9, 0x1d, 0x86, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1b, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x26, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0xe4, 0xfa, 0xff, 0xff, 0x8, 0x45, 0xf4, 0x80, 0x7d, 0xf4, 0, 0x74, 0x27, 0xe8, 0x28, 0x2, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x3d, 0x2, 0xfa, 0xff, 0x89, 0xc1, 0xbb, 0x1, 0, 0, 0, 0xba, 0x2, 0, 0, 0, 0x8d, 0x85, 0xc4, 0xfc, 0xff, 0xff, 0xe8, 0x29, 0xb5, 0xfe, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x1012a310, 0x5)   pushd(0x408);                         /* push dword 0x408 */
    II(0x1012a315, 0x5)   calld(sys_check_available_stack_size, 0x3ba38); /* call 0x10165d52 */
    II(0x1012a31a, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1012a31b, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1012a31c, 0x1)   pushd(esi);                           /* push esi */
    II(0x1012a31d, 0x1)   pushd(edi);                           /* push edi */
    II(0x1012a31e, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1012a31f, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1012a321, 0x6)   sub(esp, 0x3dc);                      /* sub esp, 0x3dc */
    II(0x1012a327, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1012a32a, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x1012a32d, 0x3)   lea(edi, ebp - 0x1c);                 /* lea edi, [ebp-0x1c] */
    II(0x1012a330, 0x5)   mov(esi, 0x101bb47c);                 /* mov esi, 0x101bb47c */
    II(0x1012a335, 0x1)   movsd_a32();                          /* movsd */
    II(0x1012a336, 0x1)   movsd_a32();                          /* movsd */
    II(0x1012a337, 0x1)   movsd_a32();                          /* movsd */
    II(0x1012a338, 0x1)   movsd_a32();                          /* movsd */
    II(0x1012a339, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x1012a33d, 0x5)   mov(eax, 0x101a83e4);                 /* mov eax, 0x101a83e4 */ /* "out of sync:  local , host\n" */
    II(0x1012a342, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a343, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a349, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a34a, 0x5)   calld(sys_sprintf, 0x3bbb2);          /* call 0x10165f01 */
    II(0x1012a34f, 0x3)   add(esp, 0x8);                        /* add esp, 0x8 */
    II(0x1012a352, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a355, 0x4)   mov(dx, memw_a32(ds, eax + 0x15));    /* mov dx, [eax+0x15] */
    II(0x1012a359, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a35c, 0x4)   cmp(dx, memw_a32(ds, eax + 0x8));     /* cmp dx, [eax+0x8] */
    II(0x1012a360, 0x2)   jnzd(0x1012a37a, 0x18);               /* jnz 0x1012a37a */
    II(0x1012a362, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a365, 0x3)   mov(edx, memd_a32(ds, eax + 0x15));   /* mov edx, [eax+0x15] */
    II(0x1012a368, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a36b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a36e, 0x3)   mov(al, memb_a32(ds, eax + 0x27));    /* mov al, [eax+0x27] */
    II(0x1012a371, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012a376, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1012a378, 0x2)   jzd(0x1012a3d4, 0x5a);                /* jz 0x1012a3d4 */
l_0x1012a37a:
    II(0x1012a37a, 0x6)   lea(ebx, ebp - 0x364);                /* lea ebx, [ebp+0xfffffc9c] */
    II(0x1012a380, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a383, 0x3)   mov(edx, memd_a32(ds, eax + 0x15));   /* mov edx, [eax+0x15] */
    II(0x1012a386, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a389, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a38c, 0x3)   mov(eax, memd_a32(ds, eax + 0x13));   /* mov eax, [eax+0x13] */
    II(0x1012a38f, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1012a392, 0x5)   calld(0x1012a108, -0x28f);            /* call 0x1012a108 */
    II(0x1012a397, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a398, 0x6)   lea(edx, ebp - 0x38c);                /* lea edx, [ebp+0xfffffc74] */
    II(0x1012a39e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a3a1, 0x5)   calld(0x1012a15b, -0x24b);            /* call 0x1012a15b */
    II(0x1012a3a6, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a3a7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a3aa, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x1012a3ad, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012a3b2, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1012a3b5, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x1c)); /* push dword [eax+ebp-0x1c] */
    II(0x1012a3b9, 0x5)   mov(eax, 0x101a8400);                 /* mov eax, 0x101a8400 */ /* "    %s team       %s, %s\n" */
    II(0x1012a3be, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a3bf, 0x6)   lea(eax, ebp - 0x3dc);                /* lea eax, [ebp+0xfffffc24] */
    II(0x1012a3c5, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a3c6, 0x5)   calld(sys_sprintf, 0x3bb36);          /* call 0x10165f01 */
    II(0x1012a3cb, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x1012a3ce, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x1012a3d2, 0x2)   jmpd(0x1012a40a, 0x36);               /* jmp 0x1012a40a */
l_0x1012a3d4:
    II(0x1012a3d4, 0x6)   lea(edx, ebp - 0x38c);                /* lea edx, [ebp+0xfffffc74] */
    II(0x1012a3da, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a3dd, 0x5)   calld(0x1012a15b, -0x287);            /* call 0x1012a15b */
    II(0x1012a3e2, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a3e3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a3e6, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x1012a3e9, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012a3ee, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1012a3f1, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x1c)); /* push dword [eax+ebp-0x1c] */
    II(0x1012a3f5, 0x5)   mov(eax, 0x101a841a);                 /* mov eax, 0x101a841a */ /* "   %s team %s\n" */
    II(0x1012a3fa, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a3fb, 0x6)   lea(eax, ebp - 0x3dc);                /* lea eax, [ebp+0xfffffc24] */
    II(0x1012a401, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a402, 0x5)   calld(sys_sprintf, 0x3bafa);          /* call 0x10165f01 */
    II(0x1012a407, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
l_0x1012a40a:
    II(0x1012a40a, 0x6)   lea(edx, ebp - 0x3dc);                /* lea edx, [ebp+0xfffffc24] */
    II(0x1012a410, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a416, 0x5)   calld(sys_strcat, 0x3bb16);           /* call 0x10165f31 */
    II(0x1012a41b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a41e, 0x3)   mov(eax, memd_a32(ds, eax + 0x3a));   /* mov eax, [eax+0x3a] */
    II(0x1012a421, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x1012a424, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1012a426, 0x2)   jld(0x1012a431, 0x9);                 /* jl 0x1012a431 */
    II(0x1012a428, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a42b, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x20);  /* cmp byte [eax+0x3d], 0x20 */
    II(0x1012a42f, 0x2)   jld(0x1012a433, 0x2);                 /* jl 0x1012a433 */
l_0x1012a431:
    II(0x1012a431, 0x2)   jmpd(0x1012a43d, 0xa);                /* jmp 0x1012a43d */
l_0x1012a433:
    II(0x1012a433, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a436, 0x3)   movsx(eax, memb_a32(ds, eax));        /* movsx eax, byte [eax] */
    II(0x1012a439, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1012a43b, 0x2)   jged(0x1012a43f, 0x2);                /* jge 0x1012a43f */
l_0x1012a43d:
    II(0x1012a43d, 0x2)   jmpd(0x1012a447, 0x8);                /* jmp 0x1012a447 */
l_0x1012a43f:
    II(0x1012a43f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a442, 0x3)   cmp(memb_a32(ds, eax), 0x20);         /* cmp byte [eax], 0x20 */
    II(0x1012a445, 0x2)   jld(0x1012a471, 0x2a);                /* jl 0x1012a471 */
l_0x1012a447:
    II(0x1012a447, 0x5)   mov(ecx, 0x101a8429);                 /* mov ecx, 0x101a8429 */ /* " unitOrders      %i, %i\n" */
    II(0x1012a44c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a44f, 0x4)   movsx(ax, memb_a32(ds, eax));         /* movsx ax, byte [eax] */
    II(0x1012a453, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a456, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a459, 0x5)   movsx(ax, memb_a32(ds, eax + 0x3d));  /* movsx ax, byte [eax+0x3d] */
    II(0x1012a45e, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a461, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a467, 0x5)   calld(0x1012a2ae, -0x1be);            /* call 0x1012a2ae */
    II(0x1012a46c, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a46f, 0x2)   jmpd(0x1012a4c9, 0x58);               /* jmp 0x1012a4c9 */
l_0x1012a471:
    II(0x1012a471, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a474, 0x3)   mov(dl, memb_a32(ds, eax + 0x3d));    /* mov dl, [eax+0x3d] */
    II(0x1012a477, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a47a, 0x2)   cmp(dl, memb_a32(ds, eax));           /* cmp dl, [eax] */
    II(0x1012a47c, 0x2)   jzd(0x1012a4c9, 0x4b);                /* jz 0x1012a4c9 */
    II(0x1012a47e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a481, 0x3)   movsx(eax, memb_a32(ds, eax));        /* movsx eax, byte [eax] */
    II(0x1012a484, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1012a487, 0x6)   pushd(memd_a32(ds, eax + 0x101b8978)); /* push dword [eax+0x101b8978] */
    II(0x1012a48d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a490, 0x3)   mov(eax, memd_a32(ds, eax + 0x3a));   /* mov eax, [eax+0x3a] */
    II(0x1012a493, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x1012a496, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1012a499, 0x6)   pushd(memd_a32(ds, eax + 0x101b8978)); /* push dword [eax+0x101b8978] */
    II(0x1012a49f, 0x5)   mov(eax, 0x101a8442);                 /* mov eax, 0x101a8442 */ /* " unitOrders      %s, %s\n" */
    II(0x1012a4a4, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a4a5, 0x6)   lea(eax, ebp - 0x3dc);                /* lea eax, [ebp+0xfffffc24] */
    II(0x1012a4ab, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a4ac, 0x5)   calld(sys_sprintf, 0x3ba50);          /* call 0x10165f01 */
    II(0x1012a4b1, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x1012a4b4, 0x6)   lea(edx, ebp - 0x3dc);                /* lea edx, [ebp+0xfffffc24] */
    II(0x1012a4ba, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a4c0, 0x5)   calld(sys_strcat, 0x3ba6c);           /* call 0x10165f31 */
    II(0x1012a4c5, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
l_0x1012a4c9:
    II(0x1012a4c9, 0x5)   mov(ecx, 0x101a845b);                 /* mov ecx, 0x101a845b */ /* " unitState       %i, %i\n" */
    II(0x1012a4ce, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a4d1, 0x5)   movsx(ax, memb_a32(ds, eax + 0x1));   /* movsx ax, byte [eax+0x1] */
    II(0x1012a4d6, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a4d9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a4dc, 0x5)   movsx(ax, memb_a32(ds, eax + 0x3e));  /* movsx ax, byte [eax+0x3e] */
    II(0x1012a4e1, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a4e4, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a4ea, 0x5)   calld(0x1012a2ae, -0x241);            /* call 0x1012a2ae */
    II(0x1012a4ef, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a4f2, 0x5)   mov(ecx, 0x101a8474);                 /* mov ecx, 0x101a8474 */ /* " Map X           %i, %i\n" */
    II(0x1012a4f7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a4fa, 0x3)   mov(ebx, memd_a32(ds, eax + 0x17));   /* mov ebx, [eax+0x17] */
    II(0x1012a4fd, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a500, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a503, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x1012a506, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a509, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a50f, 0x5)   calld(0x1012a2ae, -0x266);            /* call 0x1012a2ae */
    II(0x1012a514, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a517, 0x5)   mov(ecx, 0x101a848d);                 /* mov ecx, 0x101a848d */ /* " Map Y           %i, %i\n" */
    II(0x1012a51c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a51f, 0x3)   mov(ebx, memd_a32(ds, eax + 0x19));   /* mov ebx, [eax+0x19] */
    II(0x1012a522, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a525, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a528, 0x3)   mov(edx, memd_a32(ds, eax + 0x1a));   /* mov edx, [eax+0x1a] */
    II(0x1012a52b, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a52e, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a534, 0x5)   calld(0x1012a2ae, -0x28b);            /* call 0x1012a2ae */
    II(0x1012a539, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a53c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a53f, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x4);   /* cmp byte [eax+0x3d], 0x4 */
    II(0x1012a543, 0x2)   jnzd(0x1012a593, 0x4e);               /* jnz 0x1012a593 */
    II(0x1012a545, 0x5)   mov(ecx, 0x101a84a6);                 /* mov ecx, 0x101a84a6 */ /* " Build turns     %i, %i\n" */
    II(0x1012a54a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a54d, 0x3)   mov(ebx, memd_a32(ds, eax + 0xf));    /* mov ebx, [eax+0xf] */
    II(0x1012a550, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a553, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a556, 0x3)   mov(al, memb_a32(ds, eax + 0x45));    /* mov al, [eax+0x45] */
    II(0x1012a559, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a55b, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a55e, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a564, 0x5)   calld(0x1012a2ae, -0x2bb);            /* call 0x1012a2ae */
    II(0x1012a569, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a56c, 0x5)   mov(ecx, 0x101a84bf);                 /* mov ecx, 0x101a84bf */ /* " Build rate      %i, %i\n" */
    II(0x1012a571, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a574, 0x3)   mov(ebx, memd_a32(ds, eax + 0x11));   /* mov ebx, [eax+0x11] */
    II(0x1012a577, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a57a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a57d, 0x5)   calld(0x1009c9a0, -0x8dbe2);          /* call 0x1009c9a0 */
    II(0x1012a582, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a585, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a58b, 0x5)   calld(0x1012a2ae, -0x2e2);            /* call 0x1012a2ae */
    II(0x1012a590, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
l_0x1012a593:
    II(0x1012a593, 0x5)   mov(ecx, 0x101a84d8);                 /* mov ecx, 0x101a84d8 */ /* " priorOrders     %i, %i\n" */
    II(0x1012a598, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a59b, 0x5)   movsx(ax, memb_a32(ds, eax + 0x2));   /* movsx ax, byte [eax+0x2] */
    II(0x1012a5a0, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a5a3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a5a6, 0x5)   movsx(ax, memb_a32(ds, eax + 0x3f));  /* movsx ax, byte [eax+0x3f] */
    II(0x1012a5ab, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a5ae, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a5b4, 0x5)   calld(0x1012a2ae, -0x30b);            /* call 0x1012a2ae */
    II(0x1012a5b9, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a5bc, 0x5)   mov(ecx, 0x101a84f1);                 /* mov ecx, 0x101a84f1 */ /* " parent unit     %s, %s\n" */
    II(0x1012a5c1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a5c4, 0x3)   mov(ebx, memd_a32(ds, eax + 0x3));    /* mov ebx, [eax+0x3] */
    II(0x1012a5c7, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a5ca, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a5cd, 0x5)   calld(0x1007611c, -0xb44b6);          /* call 0x1007611c */
    II(0x1012a5d2, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1012a5d4, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a5da, 0x5)   calld(0x1012a1ba, -0x425);            /* call 0x1012a1ba */
    II(0x1012a5df, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a5e2, 0x5)   mov(ecx, 0x101a850a);                 /* mov ecx, 0x101a850a */ /* " targetGridX     %i, %i\n" */
    II(0x1012a5e7, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1012a5ea, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x5));    /* mov ebx, [ebx+0x5] */
    II(0x1012a5ed, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a5f0, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a5f3, 0x3)   mov(edx, memd_a32(ds, edx + 0x3f));   /* mov edx, [edx+0x3f] */
    II(0x1012a5f6, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a5f9, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a5ff, 0x5)   calld(0x1012a2ae, -0x356);            /* call 0x1012a2ae */
    II(0x1012a604, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a607, 0x5)   mov(ecx, 0x101a8523);                 /* mov ecx, 0x101a8523 */ /* " targetGridY,    %i, %i\n" */
    II(0x1012a60c, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1012a60f, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x7));    /* mov ebx, [ebx+0x7] */
    II(0x1012a612, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a615, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a618, 0x3)   mov(edx, memd_a32(ds, edx + 0x41));   /* mov edx, [edx+0x41] */
    II(0x1012a61b, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a61e, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a624, 0x5)   calld(0x1012a2ae, -0x37b);            /* call 0x1012a2ae */
    II(0x1012a629, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a62c, 0x5)   mov(ecx, 0x101a853c);                 /* mov ecx, 0x101a853c */ /* " production tot  %i, %i\n" */
    II(0x1012a631, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1012a634, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a636, 0x3)   mov(al, memb_a32(ds, edx + 0xd));     /* mov al, [edx+0xd] */
    II(0x1012a639, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a63c, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a63f, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a641, 0x3)   mov(al, memb_a32(ds, edx + 0x46));    /* mov al, [edx+0x46] */
    II(0x1012a644, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a647, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a64d, 0x5)   calld(0x1012a2ae, -0x3a4);            /* call 0x1012a2ae */
    II(0x1012a652, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a655, 0x5)   mov(ecx, 0x101a8555);                 /* mov ecx, 0x101a8555 */ /* " material alloc  %i, %i\n" */
    II(0x1012a65a, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1012a65d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a65f, 0x3)   mov(al, memb_a32(ds, edx + 0xe));     /* mov al, [edx+0xe] */
    II(0x1012a662, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a665, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a668, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a66a, 0x3)   mov(al, memb_a32(ds, edx + 0x47));    /* mov al, [edx+0x47] */
    II(0x1012a66d, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a670, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a676, 0x5)   calld(0x1012a2ae, -0x3cd);            /* call 0x1012a2ae */
    II(0x1012a67b, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a67e, 0x5)   mov(ecx, 0x101a856e);                 /* mov ecx, 0x101a856e */ /* " fuel alloc      %i, %i\n" */
    II(0x1012a683, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a686, 0x3)   mov(al, memb_a32(ds, eax + 0xf));     /* mov al, [eax+0xf] */
    II(0x1012a689, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a68b, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a68e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a691, 0x3)   mov(al, memb_a32(ds, eax + 0x48));    /* mov al, [eax+0x48] */
    II(0x1012a694, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a696, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a699, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a69f, 0x5)   calld(0x1012a2ae, -0x3f6);            /* call 0x1012a2ae */
    II(0x1012a6a4, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a6a7, 0x5)   mov(ecx, 0x101a8587);                 /* mov ecx, 0x101a8587 */ /* " gold alloc      %i, %i\n" */
    II(0x1012a6ac, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a6af, 0x3)   mov(al, memb_a32(ds, eax + 0x10));    /* mov al, [eax+0x10] */
    II(0x1012a6b2, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a6b4, 0x3)   movsx(ebx, ax);                       /* movsx ebx, ax */
    II(0x1012a6b7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a6ba, 0x3)   mov(al, memb_a32(ds, eax + 0x49));    /* mov al, [eax+0x49] */
    II(0x1012a6bd, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a6bf, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a6c2, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a6c8, 0x5)   calld(0x1012a2ae, -0x41f);            /* call 0x1012a2ae */
    II(0x1012a6cd, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a6d0, 0x5)   mov(ecx, 0x101a85a0);                 /* mov ecx, 0x101a85a0 */ /* " Hits            %i, %i\n" */
    II(0x1012a6d5, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1012a6d8, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x1d));   /* mov ebx, [ebx+0x1d] */
    II(0x1012a6db, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a6de, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a6e1, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a6e3, 0x3)   mov(al, memb_a32(ds, edx + 0x4d));    /* mov al, [edx+0x4d] */
    II(0x1012a6e6, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a6e9, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a6ef, 0x5)   calld(0x1012a2ae, -0x446);            /* call 0x1012a2ae */
    II(0x1012a6f4, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a6f7, 0x5)   mov(ecx, 0x101a85b9);                 /* mov ecx, 0x101a85b9 */ /* " Speed           %i, %i\n" */
    II(0x1012a6fc, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1012a6ff, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x1f));   /* mov ebx, [ebx+0x1f] */
    II(0x1012a702, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a705, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a708, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a70a, 0x3)   mov(al, memb_a32(ds, edx + 0x4e));    /* mov al, [edx+0x4e] */
    II(0x1012a70d, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a710, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a716, 0x5)   calld(0x1012a2ae, -0x46d);            /* call 0x1012a2ae */
    II(0x1012a71b, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a71e, 0x5)   mov(ecx, 0x101a85d2);                 /* mov ecx, 0x101a85d2 */ /* " Rounds          %i, %i\n" */
    II(0x1012a723, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1012a726, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x21));   /* mov ebx, [ebx+0x21] */
    II(0x1012a729, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a72c, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x1012a72f, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1012a731, 0x3)   mov(al, memb_a32(ds, edx + 0x50));    /* mov al, [edx+0x50] */
    II(0x1012a734, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a737, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a73d, 0x5)   calld(0x1012a2ae, -0x494);            /* call 0x1012a2ae */
    II(0x1012a742, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a745, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a748, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x1012a74b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1012a74e, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x1012a751, 0x7)   cmp(memb_a32(ds, eax + 0x101c81d5), 0); /* cmp byte [eax+0x101c81d5], 0x0 */
    II(0x1012a758, 0x2)   jzd(0x1012a77f, 0x25);                /* jz 0x1012a77f */
    II(0x1012a75a, 0x5)   mov(ecx, 0x101a85eb);                 /* mov ecx, 0x101a85eb */ /* " Storage         %i, %i\n" */
    II(0x1012a75f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a762, 0x3)   mov(ebx, memd_a32(ds, eax + 0x23));   /* mov ebx, [eax+0x23] */
    II(0x1012a765, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a768, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a76b, 0x3)   mov(edx, memd_a32(ds, eax + 0x50));   /* mov edx, [eax+0x50] */
    II(0x1012a76e, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1012a771, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a777, 0x5)   calld(0x1012a2ae, -0x4ce);            /* call 0x1012a2ae */
    II(0x1012a77c, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
l_0x1012a77f:
    II(0x1012a77f, 0x5)   mov(ecx, 0x101a8604);                 /* mov ecx, 0x101a8604 */ /* " Ammo            %i, %i\n" */
    II(0x1012a784, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a787, 0x3)   mov(ebx, memd_a32(ds, eax + 0x25));   /* mov ebx, [eax+0x25] */
    II(0x1012a78a, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a78d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a790, 0x3)   mov(al, memb_a32(ds, eax + 0x54));    /* mov al, [eax+0x54] */
    II(0x1012a793, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a795, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a798, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a79e, 0x5)   calld(0x1012a2ae, -0x4f5);            /* call 0x1012a2ae */
    II(0x1012a7a3, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a7a6, 0x5)   mov(ecx, 0x101a861d);                 /* mov ecx, 0x101a861d */ /* " Team ID         %i, %i\n" */
    II(0x1012a7ab, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1012a7ae, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1b));   /* mov ebx, [eax+0x1b] */
    II(0x1012a7b1, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1012a7b4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012a7b7, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x1012a7ba, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1012a7bc, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1012a7bf, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a7c5, 0x5)   calld(0x1012a2ae, -0x51c);            /* call 0x1012a2ae */
    II(0x1012a7ca, 0x3)   or_(memb_a32(ss, ebp - 0xc), al);     /* or [ebp-0xc], al */
    II(0x1012a7cd, 0x4)   cmp(memb_a32(ss, ebp - 0xc), 0);      /* cmp byte [ebp-0xc], 0x0 */
    II(0x1012a7d1, 0x2)   jzd(0x1012a7fa, 0x27);                /* jz 0x1012a7fa */
    II(0x1012a7d3, 0x5)   calld(0x100caa00, -0x5fdd8);          /* call 0x100caa00 */
    II(0x1012a7d8, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1012a7dd, 0x1)   pushd(eax);                           /* push eax */
    II(0x1012a7de, 0x5)   calld(0x100caa20, -0x5fdc3);          /* call 0x100caa20 */
    II(0x1012a7e3, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x1012a7e5, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x1012a7ea, 0x5)   mov(edx, 0x2);                        /* mov edx, 0x2 */
    II(0x1012a7ef, 0x6)   lea(eax, ebp - 0x33c);                /* lea eax, [ebp+0xfffffcc4] */
    II(0x1012a7f5, 0x5)   calld(0x10115d23, -0x14ad7);          /* call 0x10115d23 */
l_0x1012a7fa:
    II(0x1012a7fa, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1012a7fc, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1012a7fd, 0x1)   popd(edi);                            /* pop edi */
    II(0x1012a7fe, 0x1)   popd(esi);                            /* pop esi */
    II(0x1012a7ff, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1012a800, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1012a801, 0x1)   retd();                               /* ret */
FUNC_END

