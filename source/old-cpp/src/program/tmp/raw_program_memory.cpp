#include "dos/dma.hpp"
#include "x86/instructions.hpp"
#include "program/raw_program.hpp"


namespace raw_program {

using namespace x86;
using namespace dos;

FUNC_INFO_V3(sys_malloc, 0x4e2518601f9ee0d0, 0x20, {0x53, 0x51, 0x52, 0x56, 0x57, 0x6, 0xf, 0xa0, 0xf, 0xa8, 0x55, 0x83, 0xec, 0x4, 0x89, 0xc6, 0x85, 0xc0, 0x74, 0x5, 0x83, 0xf8, 0xd4, 0x76, 0x7, 0x31, 0xc0, 0xe9, 0xb4, 0, 0, 0, 0xbd, 0xc, 0xde, 0x1b, 0x10, 0x8d, 0x7e, 0x3, 0x30, 0xe4, 0x31, 0xd2, 0x88, 0x24, 0x24, 0x66, 0x83, 0xe7, 0xfc, 0x89, 0xf8, 0x83, 0xff, 0xc, 0x73, 0x5, 0xb8, 0xc, 0, 0, 0, 0x3b, 0x5, 0x14, 0xde, 0x1b, 0x10, 0x76, 0x18, 0x8b, 0xd, 0x10, 0xde, 0x1b, 0x10, 0x85, 0xc9, 0x75, 0x46, 0x89, 0xd, 0x14, 0xde, 0x1b, 0x10, 0x8b, 0xd, 0xc, 0xde, 0x1b, 0x10, 0xeb, 0x38, 0x31, 0xc9, 0xeb, 0xee, 0x8c, 0xda, 0x89, 0xe8, 0x89, 0xd, 0x10, 0xde, 0x1b, 0x10, 0x81, 0xe2, 0xff, 0xff, 0, 0, 0x89, 0xcb, 0x89, 0xf0, 0xe8, 0x1e, 0xb9, 0x1, 0, 0x89, 0xc2, 0x85, 0xc0, 0x75, 0x48, 0x8b, 0x1d, 0x14, 0xde, 0x1b, 0x10, 0x8b, 0x41, 0x14, 0x39, 0xd8, 0x76, 0x5, 0xa3, 0x14, 0xde, 0x1b, 0x10, 0x8b, 0x49, 0x8, 0x85, 0xc9, 0x75, 0xc8, 0x80, 0x3c, 0x24, 0, 0x75, 0xb, 0x89, 0xf0, 0xe8, 0x96, 0xbe, 0x1, 0, 0x85, 0xc0, 0x75, 0x15, 0x89, 0xf0, 0xe8, 0x54, 0xc0, 0x1, 0, 0x85, 0xc0, 0x74, 0x13, 0x30, 0xc9, 0x88, 0xc, 0x24, 0xe9, 0x72, 0xff, 0xff, 0xff, 0xc6, 0x4, 0x24, 0x1, 0xe9, 0x69, 0xff, 0xff, 0xff, 0x30, 0xed, 0x89, 0xd0, 0x88, 0x2d, 0xd4, 0xa2, 0x20, 0x10, 0x83, 0xc4, 0x4, 0x5d, 0xf, 0xa9, 0xf, 0xa1, 0x7, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(sys_malloc, 0x20);   // in eax - size. out eax - ptr?
    II(sys_malloc, 0x1)        pushd(ebx);                         /* push ebx */
    II(0x1016afdf, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x1016afe0, 0x1)     pushd(edx);                         /* push edx */
    II(0x1016afe1, 0x1)     pushd(esi);                         /* push esi */
    II(0x1016afe2, 0x1)     pushd(edi);                         /* push edi */
    II(0x1016afe3, 0x1)     pushd(es);                          /* push es */
    II(0x1016afe4, 0x2)     pushd(fs);                          /* push fs */
    II(0x1016afe6, 0x2)     pushd(gs);                          /* push gs */
    II(0x1016afe8, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x1016afe9, 0x3)     sub(esp, 0x4);                      /* sub esp, 0x4 */
    II(0x1016afec, 0x2)     mov(esi, eax);                      /* mov esi, eax */
    II(0x1016afee, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1016aff0, 0x2)     jzd(0x1016aff7, 0x5);               /* jz 0x1016aff7 */
    II(0x1016aff2, 0x3)     cmp(eax, -0x2c /* 0xd4 */);         /* cmp eax, 0xd4 */
    II(0x1016aff5, 0x2)     jbed(0x1016affe, 0x7);              /* jbe 0x1016affe */
l_0x1016aff7:
    II(0x1016aff7, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1016aff9, 0x5)     jmpd(0x1016b0b2, 0xb4);             /* jmp 0x1016b0b2 */
l_0x1016affe:
    II(0x1016affe, 0x5)     mov(ebp, 0x101bde0c);               /* mov ebp, 0x101bde0c */
    II(0x1016b003, 0x3)     lea(edi, esi + 0x3);                /* lea edi, [esi+0x3] */      // edi = size + 3;
    II(0x1016b006, 0x2)     xor_(ah, ah);                       /* xor ah, ah */
    II(0x1016b008, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1016b00a, 0x3)     mov(memb_a32(ss, esp), ah);         /* mov [esp], ah */
    II(0x1016b00d, 0x4)     and_(di, -0x4 /* 0xfc */);          /* and di, 0xfc */            // edi = round_up(size, 4);
l_0x1016b011:
    II(0x1016b011, 0x2)     mov(eax, edi);                      /* mov eax, edi */            // eax = edi;
    II(0x1016b013, 0x3)     cmp(edi, 0xc);                      /* cmp edi, 0xc */
    II(0x1016b016, 0x2)     jaed(0x1016b01d, 0x5);              /* jae 0x1016b01d */
    II(0x1016b018, 0x5)     mov(eax, 0xc);                      /* mov eax, 0xc */            // if (eax < 0xc) eax = 0xc;
l_0x1016b01d:
    II(0x1016b01d, 0x6)     cmp(eax, memd_a32(ds, 0x101bde14)); /* cmp eax, [0x101bde14] */   // 0
    II(0x1016b023, 0x2)     jbed(0x1016b03d, 0x18);             /* jbe 0x1016b03d */
    II(0x1016b025, 0x6)     mov(ecx, memd_a32(ds, 0x101bde10)); /* mov ecx, [0x101bde10] */   // 0x10210008
    II(0x1016b02b, 0x2)     test(ecx, ecx);                     /* test ecx, ecx */
    II(0x1016b02d, 0x2)     jnzd(0x1016b075, 0x46);             /* jnz 0x1016b075 */
l_0x1016b02f:
    II(0x1016b02f, 0x6)     mov(memd_a32(ds, 0x101bde14), ecx); /* mov [0x101bde14], ecx */
    II(0x1016b035, 0x6)     mov(ecx, memd_a32(ds, 0x101bde0c)); /* mov ecx, [0x101bde0c] */   // 0x10210008
    II(0x1016b03b, 0x2)     jmpd(0x1016b075, 0x38);             /* jmp 0x1016b075 */
l_0x1016b03d:
    II(0x1016b03d, 0x2)     xor_(ecx, ecx);                     /* xor ecx, ecx */
    II(0x1016b03f, 0x2)     jmpd(0x1016b02f, -0x12);            /* jmp 0x1016b02f */
l_0x1016b041:
    II(0x1016b041, 0x2)     mov(edx, ds);                       /* mov edx, ds */
    II(0x1016b043, 0x2)     mov(eax, ebp);                      /* mov eax, ebp */
    II(0x1016b045, 0x6)     mov(memd_a32(ds, 0x101bde10), ecx); /* mov [0x101bde10], ecx */
    II(0x1016b04b, 0x6)     and_(edx, 0xffff);                  /* and edx, 0xffff */         // original ds selector
    II(0x1016b051, 0x2)     mov(ebx, ecx);                      /* mov ebx, ecx */            // 0x10210008
    II(0x1016b053, 0x2)     mov(eax, esi);                      /* mov eax, esi */            // original size.
    II(0x1016b055, 0x5)     calld(0x10186978, 0x1b91e);         /* call 0x10186978 */         // internal malloc?
    II(0x1016b05a, 0x2)     mov(edx, eax);                      /* mov edx, eax */
    II(0x1016b05c, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1016b05e, 0x2)     jnzd(0x1016b0a8, 0x48);             /* jnz 0x1016b0a8 */
    II(0x1016b060, 0x6)     mov(ebx, memd_a32(ds, 0x101bde14)); /* mov ebx, [0x101bde14] */
    II(0x1016b066, 0x3)     mov(eax, memd_a32(ds, ecx + 0x14)); /* mov eax, [ecx+0x14] */
    II(0x1016b069, 0x2)     cmp(eax, ebx);                      /* cmp eax, ebx */
    II(0x1016b06b, 0x2)     jbed(0x1016b072, 0x5);              /* jbe 0x1016b072 */
    II(0x1016b06d, 0x5)     mov(memd_a32(ds, 0x101bde14), eax); /* mov [0x101bde14], eax */
l_0x1016b072:
    II(0x1016b072, 0x3)     mov(ecx, memd_a32(ds, ecx + 0x8));  /* mov ecx, [ecx+0x8] */
l_0x1016b075:
    II(0x1016b075, 0x2)     test(ecx, ecx);                     /* test ecx, ecx */
    II(0x1016b077, 0x2)     jnzd(0x1016b041, -0x38);            /* jnz 0x1016b041 */
    II(0x1016b079, 0x4)     cmp(memb_a32(ss, esp), 0);          /* cmp byte [esp], 0x0 */
    II(0x1016b07d, 0x2)     jnzd(0x1016b08a, 0xb);              /* jnz 0x1016b08a */
    II(0x1016b07f, 0x2)     mov(eax, esi);                      /* mov eax, esi */
    II(0x1016b081, 0x5)     calld(0x10186f1c, 0x1be96);         /* call 0x10186f1c */
    II(0x1016b086, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1016b088, 0x2)     jnzd(0x1016b09f, 0x15);             /* jnz 0x1016b09f */
l_0x1016b08a:
    II(0x1016b08a, 0x2)     mov(eax, esi);                      /* mov eax, esi */
    II(0x1016b08c, 0x5)     calld(0x101870e5, 0x1c054);         /* call 0x101870e5 */
    II(0x1016b091, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1016b093, 0x2)     jzd(0x1016b0a8, 0x13);              /* jz 0x1016b0a8 */
    II(0x1016b095, 0x2)     xor_(cl, cl);                       /* xor cl, cl */
    II(0x1016b097, 0x3)     mov(memb_a32(ss, esp), cl);         /* mov [esp], cl */
    II(0x1016b09a, 0x5)     jmpd(0x1016b011, -0x8e);            /* jmp 0x1016b011 */
l_0x1016b09f:
    II(0x1016b09f, 0x4)     mov(memb_a32(ss, esp), 0x1);        /* mov byte [esp], 0x1 */
    II(0x1016b0a3, 0x5)     jmpd(0x1016b011, -0x97);            /* jmp 0x1016b011 */
l_0x1016b0a8:
    II(0x1016b0a8, 0x2)     xor_(ch, ch);                       /* xor ch, ch */
    II(0x1016b0aa, 0x2)     mov(eax, edx);                      /* mov eax, edx */
    II(0x1016b0ac, 0x6)     mov(memb_a32(ds, 0x1020a2d4), ch);  /* mov [0x1020a2d4], ch */
l_0x1016b0b2:
    II(0x1016b0b2, 0x3)     add(esp, 0x4);                      /* add esp, 0x4 */
    II(0x1016b0b5, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x1016b0b6, 0x2)     popd(gs);                           /* pop gs */
    II(0x1016b0b8, 0x2)     popd(fs);                           /* pop fs */
    II(0x1016b0ba, 0x1)     popd(es);                           /* pop es */
    II(0x1016b0bb, 0x1)     popd(edi);                          /* pop edi */
    II(0x1016b0bc, 0x1)     popd(esi);                          /* pop esi */
    II(0x1016b0bd, 0x1)     popd(edx);                          /* pop edx */
    II(0x1016b0be, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x1016b0bf, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x1016b0c0, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x10186978, 0xad775190d894070e, 0x20, {0x56, 0x57, 0x51, 0x1e, 0x8e, 0xda, 0x9, 0xc0, 0x74, 0x45, 0x83, 0xc0, 0xb, 0x72, 0x40, 0x24, 0xf8, 0xba, 0x10, 0, 0, 0, 0x29, 0xd0, 0xf5, 0x19, 0xc9, 0x21, 0xc8, 0x1, 0xd0, 0x3b, 0x43, 0x14, 0x77, 0x2b, 0x8b, 0x73, 0xc, 0x8b, 0x7b, 0x10, 0x39, 0xf8, 0x77, 0x5, 0x8b, 0x73, 0x28, 0x29, 0xff, 0x8b, 0x16, 0x39, 0xd0, 0x76, 0x1a, 0x29, 0xd7, 0xf5, 0x19, 0xc9, 0x21, 0xcf, 0x1, 0xd7, 0x8d, 0x53, 0x20, 0x8b, 0x76, 0x8, 0x39, 0xd6, 0x75, 0xe7, 0x89, 0x7b, 0x14, 0x29, 0xc0, 0xeb, 0x4b, 0x29, 0xc2, 0x89, 0x7b, 0x10, 0xff, 0x43, 0x18, 0x8b, 0x4e, 0x8, 0x83, 0xfa, 0x10, 0x72, 0x1e, 0x89, 0xf7, 0x1, 0xc7, 0x89, 0x7b, 0xc, 0x89, 0x17, 0x89, 0x6, 0x8b, 0x5e, 0x4, 0x89, 0x5f, 0x4, 0x89, 0x4f, 0x8, 0x89, 0x7b, 0x8, 0x89, 0xcb, 0x89, 0x7b, 0x4, 0xeb, 0x15, 0xff, 0x4b, 0x1c, 0x89, 0xf0, 0x89, 0xcf, 0x8b, 0x76, 0x4, 0x89, 0x7e, 0x8, 0x89, 0x77, 0x4, 0x89, 0x73, 0xc, 0x89, 0xc6, 0x83, 0xe, 0x1, 0x89, 0xf0, 0x83, 0xc0, 0x4, 0x1f, 0x59, 0x5f, 0x5e, 0xc3})
{
    FUNC_START_V2(0x10186978, 0x20);   // internal malloc        eax - size, ebx = 0x10210008
    II(0x10186978, 0x1)     pushd(esi);                         /* push esi */
    II(0x10186979, 0x1)     pushd(edi);                         /* push edi */
    II(0x1018697a, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x1018697b, 0x1)     pushd(ds);                          /* push ds */
    II(0x1018697c, 0x2)     mov(ds, edx);                       /* mov ds, edx */
    II(0x1018697e, 0x2)     or_(eax, eax);                      /* or eax, eax */
    II(0x10186980, 0x2)     jzd(0x101869c7, 0x45);              /* jz 0x101869c7 */
    II(0x10186982, 0x3)     add(eax, 0xb);                      /* add eax, 0xb */       // 0xb = 11 = 7 + 4
    II(0x10186985, 0x2)     jbd(0x101869c7, 0x40);              /* jb 0x101869c7 */
    II(0x10186987, 0x2)     and_(al, 0xf8);                     /* and al, 0xf8 */       // eax = round_up(size + 4, 8)
    II(0x10186989, 0x5)     mov(edx, 0x10);                     /* mov edx, 0x10 */
    II(0x1018698e, 0x2)     sub(eax, edx);                      /* sub eax, edx */       // - 0x10
    II(0x10186990, 0x1)     cmc();                              /* cmc  */
    II(0x10186991, 0x2)     sbb(ecx, ecx);                      /* sbb ecx, ecx */
    II(0x10186993, 0x2)     and_(eax, ecx);                     /* and eax, ecx */
    II(0x10186995, 0x2)     add(eax, edx);                      /* add eax, edx */          // + 0x10.  Итого: if (eax < 0x10) eax = 0x10;
    II(0x10186997, 0x3)     cmp(eax, memd_a32(ds, ebx + 0x14)); /* cmp eax, [ebx+0x14] */   // 0xffffffff
    II(0x1018699a, 0x2)     jad(0x101869c7, 0x2b);              /* ja 0x101869c7 */
    II(0x1018699c, 0x3)     mov(esi, memd_a32(ds, ebx + 0xc));  /* mov esi, [ebx+0xc] */    // 0x1021008c
    II(0x1018699f, 0x3)     mov(edi, memd_a32(ds, ebx + 0x10)); /* mov edi, [ebx+0x10] */   // 0
    II(0x101869a2, 0x2)     cmp(eax, edi);                      /* cmp eax, edi */
    II(0x101869a4, 0x2)     jad(0x101869ab, 0x5);               /* ja 0x101869ab */
    II(0x101869a6, 0x3)     mov(esi, memd_a32(ds, ebx + 0x28)); /* mov esi, [ebx+0x28] */
    II(0x101869a9, 0x2)     sub(edi, edi);                      /* sub edi, edi */
l_0x101869ab:
    II(0x101869ab, 0x2)     mov(edx, memd_a32(ds, esi));        /* mov edx, [esi] */
    II(0x101869ad, 0x2)     cmp(eax, edx);                      /* cmp eax, edx */
    II(0x101869af, 0x2)     jbed(0x101869cb, 0x1a);             /* jbe 0x101869cb */
    II(0x101869b1, 0x2)     sub(edi, edx);                      /* sub edi, edx */
    II(0x101869b3, 0x1)     cmc();                              /* cmc  */
    II(0x101869b4, 0x2)     sbb(ecx, ecx);                      /* sbb ecx, ecx */
    II(0x101869b6, 0x2)     and_(edi, ecx);                     /* and edi, ecx */
    II(0x101869b8, 0x2)     add(edi, edx);                      /* add edi, edx */
    II(0x101869ba, 0x3)     lea(edx, ebx + 0x20);               /* lea edx, [ebx+0x20] */
    II(0x101869bd, 0x3)     mov(esi, memd_a32(ds, esi + 0x8));  /* mov esi, [esi+0x8] */
    II(0x101869c0, 0x2)     cmp(esi, edx);                      /* cmp esi, edx */
    II(0x101869c2, 0x2)     jnzd(0x101869ab, -0x19);            /* jnz 0x101869ab */
    II(0x101869c4, 0x3)     mov(memd_a32(ds, ebx + 0x14), edi); /* mov [ebx+0x14], edi */
l_0x101869c7:
    II(0x101869c7, 0x2)     sub(eax, eax);                      /* sub eax, eax */
    II(0x101869c9, 0x2)     jmpd(0x10186a16, 0x4b);             /* jmp 0x10186a16 */
l_0x101869cb:
    II(0x101869cb, 0x2)     sub(edx, eax);                      /* sub edx, eax */
    II(0x101869cd, 0x3)     mov(memd_a32(ds, ebx + 0x10), edi); /* mov [ebx+0x10], edi */
    II(0x101869d0, 0x3)     inc(memd_a32(ds, ebx + 0x18));      /* inc dword [ebx+0x18] */
    II(0x101869d3, 0x3)     mov(ecx, memd_a32(ds, esi + 0x8));  /* mov ecx, [esi+0x8] */
    II(0x101869d6, 0x3)     cmp(edx, 0x10);                     /* cmp edx, 0x10 */
    II(0x101869d9, 0x2)     jbd(0x101869f9, 0x1e);              /* jb 0x101869f9 */
    II(0x101869db, 0x2)     mov(edi, esi);                      /* mov edi, esi */
    II(0x101869dd, 0x2)     add(edi, eax);                      /* add edi, eax */
    II(0x101869df, 0x3)     mov(memd_a32(ds, ebx + 0xc), edi);  /* mov [ebx+0xc], edi */
    II(0x101869e2, 0x2)     mov(memd_a32(ds, edi), edx);        /* mov [edi], edx */
    II(0x101869e4, 0x2)     mov(memd_a32(ds, esi), eax);        /* mov [esi], eax */
    II(0x101869e6, 0x3)     mov(ebx, memd_a32(ds, esi + 0x4));  /* mov ebx, [esi+0x4] */
    II(0x101869e9, 0x3)     mov(memd_a32(ds, edi + 0x4), ebx);  /* mov [edi+0x4], ebx */
    II(0x101869ec, 0x3)     mov(memd_a32(ds, edi + 0x8), ecx);  /* mov [edi+0x8], ecx */
    II(0x101869ef, 0x3)     mov(memd_a32(ds, ebx + 0x8), edi);  /* mov [ebx+0x8], edi */
    II(0x101869f2, 0x2)     mov(ebx, ecx);                      /* mov ebx, ecx */
    II(0x101869f4, 0x3)     mov(memd_a32(ds, ebx + 0x4), edi);  /* mov [ebx+0x4], edi */
    II(0x101869f7, 0x2)     jmpd(0x10186a0e, 0x15);             /* jmp 0x10186a0e */
l_0x101869f9:
    II(0x101869f9, 0x3)     dec(memd_a32(ds, ebx + 0x1c));      /* dec dword [ebx+0x1c] */
    II(0x101869fc, 0x2)     mov(eax, esi);                      /* mov eax, esi */
    II(0x101869fe, 0x2)     mov(edi, ecx);                      /* mov edi, ecx */
    II(0x10186a00, 0x3)     mov(esi, memd_a32(ds, esi + 0x4));  /* mov esi, [esi+0x4] */
    II(0x10186a03, 0x3)     mov(memd_a32(ds, esi + 0x8), edi);  /* mov [esi+0x8], edi */
    II(0x10186a06, 0x3)     mov(memd_a32(ds, edi + 0x4), esi);  /* mov [edi+0x4], esi */
    II(0x10186a09, 0x3)     mov(memd_a32(ds, ebx + 0xc), esi);  /* mov [ebx+0xc], esi */
    II(0x10186a0c, 0x2)     mov(esi, eax);                      /* mov esi, eax */
l_0x10186a0e:
    II(0x10186a0e, 0x3)     or_(memd_a32(ds, esi), 0x1);        /* or dword [esi], 0x1 */
    II(0x10186a11, 0x2)     mov(eax, esi);                      /* mov eax, esi */
    II(0x10186a13, 0x3)     add(eax, 0x4);                      /* add eax, 0x4 */
l_0x10186a16:
    II(0x10186a16, 0x1)     popd(ds);                           /* pop ds */
    II(0x10186a17, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10186a18, 0x1)     popd(edi);                          /* pop edi */
    II(0x10186a19, 0x1)     popd(esi);                          /* pop esi */
    II(0x10186a1a, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x10186a20, 0x332b3f1194f4c78e, 0x20, {0x56, 0x57, 0x51, 0x1e, 0x8e, 0xda, 0x9, 0xc0, 0x74, 0xf1, 0x89, 0xc6, 0x83, 0xee, 0x4, 0x8b, 0x6, 0xa8, 0x1, 0x74, 0xe6, 0x24, 0xfe, 0x89, 0xf7, 0x1, 0xc7, 0xf7, 0x7, 0x1, 0, 0, 0, 0x75, 0x1f, 0x3b, 0x7b, 0xc, 0x75, 0x3, 0x89, 0x73, 0xc, 0x3, 0x7, 0x89, 0x6, 0x53, 0x8b, 0x5f, 0x4, 0x8b, 0x7f, 0x8, 0x89, 0x7b, 0x8, 0x89, 0x5f, 0x4, 0x5b, 0xff, 0x4b, 0x1c, 0xeb, 0x7c, 0x89, 0x6, 0x8b, 0x7b, 0xc, 0x39, 0xfe, 0x73, 0xe, 0x3b, 0x77, 0x4, 0x77, 0x6e, 0x8b, 0x7b, 0x28, 0x39, 0xfe, 0x72, 0x67, 0xeb, 0xf, 0x8b, 0x7f, 0x8, 0x39, 0xfe, 0x72, 0x5e, 0x8d, 0x7b, 0x20, 0x3b, 0x73, 0x24, 0x77, 0x56, 0x29, 0xd2, 0x8b, 0x43, 0x18, 0x8b, 0x4b, 0x1c, 0x41, 0xf7, 0xf1, 0x49, 0x39, 0xc8, 0x73, 0x25, 0x8b, 0x53, 0x18, 0x29, 0xca, 0x1, 0xc0, 0x39, 0xca, 0x77, 0x2, 0x29, 0xc0, 0x89, 0xf7, 0x3, 0x3e, 0x8b, 0x17, 0xf6, 0xc2, 0x1, 0x74, 0x2e, 0x83, 0xfa, 0xff, 0x74, 0x8, 0x80, 0xe2, 0xfe, 0x1, 0xd7, 0x48, 0x75, 0xec, 0x8b, 0x7b, 0xc, 0x39, 0xfe, 0x73, 0x3, 0x8b, 0x7b, 0x28, 0x39, 0xfe, 0x72, 0x13, 0x8b, 0x7f, 0x8, 0x39, 0xfe, 0x72, 0xc, 0x8b, 0x7f, 0x8, 0x39, 0xfe, 0x72, 0x5, 0x8b, 0x7f, 0x8, 0xeb, 0xe9, 0x8b, 0x57, 0x4, 0x8b, 0xe, 0x87, 0xfa, 0x89, 0xf8, 0x3, 0x7, 0x39, 0xf0, 0x75, 0x10, 0x3, 0xf, 0x89, 0xf, 0x3b, 0x73, 0xc, 0x75, 0x3, 0x89, 0x7b, 0xc, 0x89, 0xfe, 0xeb, 0x11, 0xff, 0x43, 0x1c, 0x89, 0x56, 0x8, 0x89, 0x7e, 0x4, 0x89, 0x77, 0x8, 0x89, 0xd7, 0x89, 0x77, 0x4, 0xff, 0x4b, 0x18, 0x3b, 0x73, 0xc, 0x73, 0x8, 0x3b, 0x4b, 0x10, 0x76, 0x3, 0x89, 0x4b, 0x10, 0x3b, 0x4b, 0x14, 0x76, 0x3, 0x89, 0x4b, 0x14})
{
    FUNC_START_V2(0x10186a20, 0x20);   // internal free
    II(0x10186a20, 0x1)     pushd(esi);                         /* push esi */
    II(0x10186a21, 0x1)     pushd(edi);                         /* push edi */
    II(0x10186a22, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x10186a23, 0x1)     pushd(ds);                          /* push ds */
    II(0x10186a24, 0x2)     mov(ds, edx);                       /* mov ds, edx */
    II(0x10186a26, 0x2)     or_(eax, eax);                      /* or eax, eax */
    II(0x10186a28, 0x2)     jzd_func(0x10186a1b, -0xf);         /* jz 0x10186a1b */
    II(0x10186a2a, 0x2)     mov(esi, eax);                      /* mov esi, eax */
    II(0x10186a2c, 0x3)     sub(esi, 0x4);                      /* sub esi, 0x4 */             // size
    II(0x10186a2f, 0x2)     mov(eax, memd_a32(ds, esi));        /* mov eax, [esi] */
    II(0x10186a31, 0x2)     test(al, 0x1);                      /* test al, 0x1 */
    II(0x10186a33, 0x2)     jzd_func(0x10186a1b, -0x1a);        /* jz 0x10186a1b */            // is used continue, else goto
    II(0x10186a35, 0x2)     and_(al, 0xfe);                     /* and al, 0xfe */
    II(0x10186a37, 0x2)     mov(edi, esi);                      /* mov edi, esi */
    II(0x10186a39, 0x2)     add(edi, eax);                      /* add edi, eax */             // addr of next block
    II(0x10186a3b, 0x6)     test(memd_a32(ds, edi), 0x1);       /* test dword [edi], 0x1 */
    II(0x10186a41, 0x2)     jnzd(0x10186a62, 0x1f);             /* jnz 0x10186a62 */           // if it used, goto
    II(0x10186a43, 0x3)     cmp(edi, memd_a32(ds, ebx + 0xc));  /* cmp edi, [ebx+0xc] */
    II(0x10186a46, 0x2)     jnzd(0x10186a4b, 0x3);              /* jnz 0x10186a4b */
    II(0x10186a48, 0x3)     mov(memd_a32(ds, ebx + 0xc), esi);  /* mov [ebx+0xc], esi */
l_0x10186a4b:
    II(0x10186a4b, 0x2)     add(eax, memd_a32(ds, edi));        /* add eax, [edi] */
    II(0x10186a4d, 0x2)     mov(memd_a32(ds, esi), eax);        /* mov [esi], eax */
    II(0x10186a4f, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x10186a50, 0x3)     mov(ebx, memd_a32(ds, edi + 0x4));  /* mov ebx, [edi+0x4] */
    II(0x10186a53, 0x3)     mov(edi, memd_a32(ds, edi + 0x8));  /* mov edi, [edi+0x8] */
    II(0x10186a56, 0x3)     mov(memd_a32(ds, ebx + 0x8), edi);  /* mov [ebx+0x8], edi */
    II(0x10186a59, 0x3)     mov(memd_a32(ds, edi + 0x4), ebx);  /* mov [edi+0x4], ebx */
    II(0x10186a5c, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x10186a5d, 0x3)     dec(memd_a32(ds, ebx + 0x1c));      /* dec dword [ebx+0x1c] */
    II(0x10186a60, 0x2)     jmpd(0x10186ade, 0x7c);             /* jmp 0x10186ade */
l_0x10186a62:
    II(0x10186a62, 0x2)     mov(memd_a32(ds, esi), eax);        /* mov [esi], eax */
    II(0x10186a64, 0x3)     mov(edi, memd_a32(ds, ebx + 0xc));  /* mov edi, [ebx+0xc] */
    II(0x10186a67, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186a69, 0x2)     jaed(0x10186a79, 0xe);              /* jae 0x10186a79 */
    II(0x10186a6b, 0x3)     cmp(esi, memd_a32(ds, edi + 0x4));  /* cmp esi, [edi+0x4] */
    II(0x10186a6e, 0x2)     jad(0x10186ade, 0x6e);              /* ja 0x10186ade */
    II(0x10186a70, 0x3)     mov(edi, memd_a32(ds, ebx + 0x28)); /* mov edi, [ebx+0x28] */
    II(0x10186a73, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186a75, 0x2)     jbd(0x10186ade, 0x67);              /* jb 0x10186ade */
    II(0x10186a77, 0x2)     jmpd(0x10186a88, 0xf);              /* jmp 0x10186a88 */
l_0x10186a79:
    II(0x10186a79, 0x3)     mov(edi, memd_a32(ds, edi + 0x8));  /* mov edi, [edi+0x8] */
    II(0x10186a7c, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186a7e, 0x2)     jbd(0x10186ade, 0x5e);              /* jb 0x10186ade */
    II(0x10186a80, 0x3)     lea(edi, ebx + 0x20);               /* lea edi, [ebx+0x20] */
    II(0x10186a83, 0x3)     cmp(esi, memd_a32(ds, ebx + 0x24)); /* cmp esi, [ebx+0x24] */
    II(0x10186a86, 0x2)     jad(0x10186ade, 0x56);              /* ja 0x10186ade */
l_0x10186a88:
    II(0x10186a88, 0x2)     sub(edx, edx);                      /* sub edx, edx */
    II(0x10186a8a, 0x3)     mov(eax, memd_a32(ds, ebx + 0x18)); /* mov eax, [ebx+0x18] */
    II(0x10186a8d, 0x3)     mov(ecx, memd_a32(ds, ebx + 0x1c)); /* mov ecx, [ebx+0x1c] */
    II(0x10186a90, 0x1)     inc(ecx);                           /* inc ecx */
    II(0x10186a91, 0x2)     div(ecx);                           /* div ecx */
    II(0x10186a93, 0x1)     dec(ecx);                           /* dec ecx */
    II(0x10186a94, 0x2)     cmp(eax, ecx);                      /* cmp eax, ecx */
    II(0x10186a96, 0x2)     jaed(0x10186abd, 0x25);             /* jae 0x10186abd */
    II(0x10186a98, 0x3)     mov(edx, memd_a32(ds, ebx + 0x18)); /* mov edx, [ebx+0x18] */
    II(0x10186a9b, 0x2)     sub(edx, ecx);                      /* sub edx, ecx */
    II(0x10186a9d, 0x2)     add(eax, eax);                      /* add eax, eax */
    II(0x10186a9f, 0x2)     cmp(edx, ecx);                      /* cmp edx, ecx */
    II(0x10186aa1, 0x2)     jad(0x10186aa5, 0x2);               /* ja 0x10186aa5 */
    II(0x10186aa3, 0x2)     sub(eax, eax);                      /* sub eax, eax */
l_0x10186aa5:
    II(0x10186aa5, 0x2)     mov(edi, esi);                      /* mov edi, esi */
    II(0x10186aa7, 0x2)     add(edi, memd_a32(ds, esi));        /* add edi, [esi] */
l_0x10186aa9:
    II(0x10186aa9, 0x2)     mov(edx, memd_a32(ds, edi));        /* mov edx, [edi] */
    II(0x10186aab, 0x3)     test(dl, 0x1);                      /* test dl, 0x1 */
    II(0x10186aae, 0x2)     jzd(0x10186ade, 0x2e);              /* jz 0x10186ade */
    II(0x10186ab0, 0x3)     cmp(edx, -0x1 /* 0xff */);          /* cmp edx, 0xff */
    II(0x10186ab3, 0x2)     jzd(0x10186abd, 0x8);               /* jz 0x10186abd */
    II(0x10186ab5, 0x3)     and_(dl, 0xfe);                     /* and dl, 0xfe */
    II(0x10186ab8, 0x2)     add(edi, edx);                      /* add edi, edx */
    II(0x10186aba, 0x1)     dec(eax);                           /* dec eax */
    II(0x10186abb, 0x2)     jnzd(0x10186aa9, -0x14);            /* jnz 0x10186aa9 */
l_0x10186abd:
    II(0x10186abd, 0x3)     mov(edi, memd_a32(ds, ebx + 0xc));  /* mov edi, [ebx+0xc] */
    II(0x10186ac0, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186ac2, 0x2)     jaed(0x10186ac7, 0x3);              /* jae 0x10186ac7 */
    II(0x10186ac4, 0x3)     mov(edi, memd_a32(ds, ebx + 0x28)); /* mov edi, [ebx+0x28] */
l_0x10186ac7:
    II(0x10186ac7, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186ac9, 0x2)     jbd(0x10186ade, 0x13);              /* jb 0x10186ade */
    II(0x10186acb, 0x3)     mov(edi, memd_a32(ds, edi + 0x8));  /* mov edi, [edi+0x8] */
    II(0x10186ace, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186ad0, 0x2)     jbd(0x10186ade, 0xc);               /* jb 0x10186ade */
    II(0x10186ad2, 0x3)     mov(edi, memd_a32(ds, edi + 0x8));  /* mov edi, [edi+0x8] */
    II(0x10186ad5, 0x2)     cmp(esi, edi);                      /* cmp esi, edi */
    II(0x10186ad7, 0x2)     jbd(0x10186ade, 0x5);               /* jb 0x10186ade */
    II(0x10186ad9, 0x3)     mov(edi, memd_a32(ds, edi + 0x8));  /* mov edi, [edi+0x8] */
    II(0x10186adc, 0x2)     jmpd(0x10186ac7, -0x17);            /* jmp 0x10186ac7 */
l_0x10186ade:
    II(0x10186ade, 0x3)     mov(edx, memd_a32(ds, edi + 0x4));  /* mov edx, [edi+0x4] */
    II(0x10186ae1, 0x2)     mov(ecx, memd_a32(ds, esi));        /* mov ecx, [esi] */
    II(0x10186ae3, 0x2)     xchg(edx, edi);                     /* xchg edx, edi */
    II(0x10186ae5, 0x2)     mov(eax, edi);                      /* mov eax, edi */
    II(0x10186ae7, 0x2)     add(eax, memd_a32(ds, edi));        /* add eax, [edi] */
    II(0x10186ae9, 0x2)     cmp(eax, esi);                      /* cmp eax, esi */
    II(0x10186aeb, 0x2)     jnzd(0x10186afd, 0x10);             /* jnz 0x10186afd */
    II(0x10186aed, 0x2)     add(ecx, memd_a32(ds, edi));        /* add ecx, [edi] */
    II(0x10186aef, 0x2)     mov(memd_a32(ds, edi), ecx);        /* mov [edi], ecx */
    II(0x10186af1, 0x3)     cmp(esi, memd_a32(ds, ebx + 0xc));  /* cmp esi, [ebx+0xc] */
    II(0x10186af4, 0x2)     jnzd(0x10186af9, 0x3);              /* jnz 0x10186af9 */
    II(0x10186af6, 0x3)     mov(memd_a32(ds, ebx + 0xc), edi);  /* mov [ebx+0xc], edi */
l_0x10186af9:
    II(0x10186af9, 0x2)     mov(esi, edi);                      /* mov esi, edi */
    II(0x10186afb, 0x2)     jmpd(0x10186b0e, 0x11);             /* jmp 0x10186b0e */
l_0x10186afd:
    II(0x10186afd, 0x3)     inc(memd_a32(ds, ebx + 0x1c));      /* inc dword [ebx+0x1c] */    // count free block?
    II(0x10186b00, 0x3)     mov(memd_a32(ds, esi + 0x8), edx);  /* mov [esi+0x8], edx */
    II(0x10186b03, 0x3)     mov(memd_a32(ds, esi + 0x4), edi);  /* mov [esi+0x4], edi */
    II(0x10186b06, 0x3)     mov(memd_a32(ds, edi + 0x8), esi);  /* mov [edi+0x8], esi */
    II(0x10186b09, 0x2)     mov(edi, edx);                      /* mov edi, edx */
    II(0x10186b0b, 0x3)     mov(memd_a32(ds, edi + 0x4), esi);  /* mov [edi+0x4], esi */
l_0x10186b0e:
    II(0x10186b0e, 0x3)     dec(memd_a32(ds, ebx + 0x18));      /* dec dword [ebx+0x18] */     // count alloc block?
    II(0x10186b11, 0x3)     cmp(esi, memd_a32(ds, ebx + 0xc));  /* cmp esi, [ebx+0xc] */
    II(0x10186b14, 0x2)     jaed(0x10186b1e, 0x8);              /* jae 0x10186b1e */
    II(0x10186b16, 0x3)     cmp(ecx, memd_a32(ds, ebx + 0x10)); /* cmp ecx, [ebx+0x10] */
    II(0x10186b19, 0x2)     jbed(0x10186b1e, 0x3);              /* jbe 0x10186b1e */
    II(0x10186b1b, 0x3)     mov(memd_a32(ds, ebx + 0x10), ecx); /* mov [ebx+0x10], ecx */
l_0x10186b1e:
    II(0x10186b1e, 0x3)     cmp(ecx, memd_a32(ds, ebx + 0x14)); /* cmp ecx, [ebx+0x14] */
    II(0x10186b21, 0x2)     jbed_func(0x10186b26, 0x3);         /* jbe 0x10186b26 */
    II(0x10186b23, 0x3)     mov(memd_a32(ds, ebx + 0x14), ecx); /* mov [ebx+0x14], ecx */
    II(0x10186b26, 0)       jmpd_func(0x10186b26, 0);           /* Принудительное завершение функции из-за пересечения с другой функцией. */
}

FUNC_INFO_V3(0x10186b26, 0xce56f9f92ebc67da, 0x20, {0x1f, 0x59, 0x5f, 0x5e, 0xc3})
{
    FUNC_START_V2(0x10186b26, 0x20);
    II(0x10186b26, 0x1)     popd(ds);                           /* pop ds */
    II(0x10186b27, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10186b28, 0x1)     popd(edi);                          /* pop edi */
    II(0x10186b29, 0x1)     popd(esi);                          /* pop esi */
    II(0x10186b2a, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(sys_malloc_internal, 0x846dfba8cfdf958, 0x20, {0xff, 0x15, 0x18, 0xe8, 0x1b, 0x10, 0xc3})
{
    FUNC_START_V2(sys_malloc_internal, 0x20);  // memd_a32(ds, 0x101be818) - ptr of used malloc func
    II(sys_malloc_internal, 0x6)      calld_abs(memd_a32(ds, 0x101be818)); /* call dword near [0x101be818] */
    II(0x101822f6, 0x1)     retd();                             /* ret  */
}

//FUNC_INFO_V2(0x101822f8, func_0x101822f8, 0x20, {0x53, 0x51, 0x52, 0x56, 0x57, 0x89, 0xc6, 0x85, 0xc0, 0x74, 0x6b, 0x8d, 0x70, 0xc, 0x89, 0xf0, 0xe8, 0xd1, 0x8c, 0xfe, 0xff, 0x89, 0xc7, 0x85, 0xc0, 0x74, 0x5b, 0x68, 0xcc, 0, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x89, 0xf1, 0x89, 0xf2, 0xe8, 0x52, 0x8a, 0xfe, 0xff, 0x89, 0xf2, 0x89, 0xf8, 0xe8, 0x91, 0x2, 0, 0, 0x8b, 0x15, 0x24, 0xe8, 0x1b, 0x10, 0x8b, 0x1d, 0x28, 0xe8, 0x1b, 0x10, 0x42, 0x89, 0xc7, 0x89, 0x15, 0x24, 0xe8, 0x1b, 0x10, 0x39, 0xda, 0x7e, 0x6, 0x89, 0x15, 0x28, 0xe8, 0x1b, 0x10, 0x8b, 0xd, 0x2c, 0xe8, 0x1b, 0x10, 0x1, 0xf1, 0x8b, 0x35, 0x30, 0xe8, 0x1b, 0x10, 0x89, 0xd, 0x2c, 0xe8, 0x1b, 0x10, 0x39, 0xf1, 0x76, 0x6, 0x89, 0xd, 0x30, 0xe8, 0x1b, 0x10, 0x89, 0xf8, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
//void func_0x101822f8()
//{
//    FUNC_START_V2(0x101822f8, 0x20);    // malloc_with_check
//    II(0x101822f8, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x101822f9, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x101822fa, 0x1)    pushd(edx);                            /* push edx */
//    II(0x101822fb, 0x1)    pushd(esi);                            /* push esi */
//    II(0x101822fc, 0x1)    pushd(edi);                            /* push edi */
//    II(0x101822fd, 0x2)    mov(esi, eax);                         /* mov esi, eax */
//    II(0x101822ff, 0x2)    test(eax, eax);                        /* test eax, eax */
//    II(0x10182301, 0x2)    jzd(0x1018236e, 0x6b);                 /* jz 0x1018236e */
//    II(0x10182303, 0x3)    lea(esi, eax + 0xc);                   /* lea esi, [eax+0xc] */
//    II(0x10182306, 0x2)    mov(eax, esi);                         /* mov eax, esi */
//    II(0x10182308, 0x5)    calld(call_malloc, -0x1732f);           /* call call_malloc */
//    II(0x1018230d, 0x2)    mov(edi, eax);                         /* mov edi, eax */
//    II(0x1018230f, 0x2)    test(eax, eax);                        /* test eax, eax */
//    II(0x10182311, 0x2)    jzd(0x1018236e, 0x5b);                 /* jz 0x1018236e */
//    II(0x10182313, 0x5)    pushd(0xcc);                           /* push dword 0xcc */
//    II(0x10182318, 0x5)    mov(ebx, 0x1);                         /* mov ebx, 0x1 */
//    II(0x1018231d, 0x2)    mov(ecx, esi);                         /* mov ecx, esi */
//    II(0x1018231f, 0x2)    mov(edx, esi);                         /* mov edx, esi */
//    II(0x10182321, 0x5)    calld(0x1016ad78, -0x175ae);           /* call 0x1016ad78 */    // memset with 0xcc ?
//    II(0x10182326, 0x2)    mov(edx, esi);                         /* mov edx, esi */
//    II(0x10182328, 0x2)    mov(eax, edi);                         /* mov eax, edi */
//    II(0x1018232a, 0x5)    calld(0x101825c0, 0x291);              /* call 0x101825c0 */    // set at begin {size, magic1} and at end {magic2}.
//    II(0x1018232f, 0x6)    mov(edx, memd_a32(ds, 0x101be824));    /* mov edx, [0x101be824] */
//    II(0x10182335, 0x6)    mov(ebx, memd_a32(ds, 0x101be828));    /* mov ebx, [0x101be828] */
//    II(0x1018233b, 0x1)    inc(edx);                              /* inc edx */
//    II(0x1018233c, 0x2)    mov(edi, eax);                         /* mov edi, eax */
//    II(0x1018233e, 0x6)    mov(memd_a32(ds, 0x101be824), edx);    /* mov [0x101be824], edx */    // Кол-во malloc_with_check?
//    II(0x10182344, 0x2)    cmp(edx, ebx);                         /* cmp edx, ebx */
//    II(0x10182346, 0x2)    jled(0x1018234e, 0x6);                 /* jle 0x1018234e */
//    II(0x10182348, 0x6)    mov(memd_a32(ds, 0x101be828), edx);    /* mov [0x101be828], edx */    // Кол-во malloc_with_check?
//l_0x1018234e:
//    II(0x1018234e, 0x6)    mov(ecx, memd_a32(ds, 0x101be82c));    /* mov ecx, [0x101be82c] */
//    II(0x10182354, 0x2)    add(ecx, esi);                         /* add ecx, esi */
//    II(0x10182356, 0x6)    mov(esi, memd_a32(ds, 0x101be830));    /* mov esi, [0x101be830] */
//    II(0x1018235c, 0x6)    mov(memd_a32(ds, 0x101be82c), ecx);    /* mov [0x101be82c], ecx */    // Кол-во выделенной памяти?
//    II(0x10182362, 0x2)    cmp(ecx, esi);                         /* cmp ecx, esi */
//    II(0x10182364, 0x2)    jbed(0x1018236c, 0x6);                 /* jbe 0x1018236c */
//    II(0x10182366, 0x6)    mov(memd_a32(ds, 0x101be830), ecx);    /* mov [0x101be830], ecx */    // Кол-во выделенной памяти?
//l_0x1018236c:
//    II(0x1018236c, 0x2)    mov(eax, edi);                         /* mov eax, edi */
//l_0x1018236e:
//    II(0x1018236e, 0x1)    popd(edi);                             /* pop edi */
//    II(0x1018236f, 0x1)    popd(esi);                             /* pop esi */
//    II(0x10182370, 0x1)    popd(edx);                             /* pop edx */
//    II(0x10182371, 0x1)    popd(ecx);                             /* pop ecx */
//    II(0x10182372, 0x1)    popd(ebx);                             /* pop ebx */
//    II(0x10182373, 0x1)    retd();                                /* ret  */
//}

FUNC_INFO_V3(sys_free_internal, 0xe8cfdf96fa0b60ff, 0x20, {0xff, 0x15, 0x20, 0xe8, 0x1b, 0x10, 0xc3})
{
    FUNC_START_V2(sys_free_internal, 0x20);   //  memd_a32(ds, 0x101be820) - used func of free.
    II(sys_free_internal, 0x6)        calld_abs(memd_a32(ds, 0x101be820)); /* call dword near [0x101be820] */
    II(0x1018245a, 0x1)     retd();                             /* ret  */
}

//FUNC_INFO_V2(0x1018245c, func_0x1018245c, 0x20, {0x53, 0x51, 0x52, 0x56, 0x89, 0xc6, 0x85, 0xc0, 0x74, 0x3a, 0x8d, 0x70, 0xf8, 0x89, 0xf0, 0xe8, 0x70, 0x1, 0, 0, 0x68, 0xcc, 0, 0, 0, 0x8b, 0x1d, 0x2c, 0xe8, 0x1b, 0x10, 0x8b, 0x16, 0x89, 0xf0, 0x29, 0xd3, 0x89, 0xd1, 0x89, 0x1d, 0x2c, 0xe8, 0x1b, 0x10, 0xbb, 0x1, 0, 0, 0, 0xe8, 0xe5, 0x88, 0xfe, 0xff, 0x89, 0xf0, 0xe8, 0x27, 0x8c, 0xfe, 0xff, 0xff, 0xd, 0x24, 0xe8, 0x1b, 0x10, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
//void func_0x1018245c()
//{
//    FUNC_START_V2(0x1018245c, 0x20);    // free_with_check?
//    II(0x1018245c, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1018245d, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1018245e, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1018245f, 0x1)    pushd(esi);                            /* push esi */
//    II(0x10182460, 0x2)    mov(esi, eax);                         /* mov esi, eax */
//    II(0x10182462, 0x2)    test(eax, eax);                        /* test eax, eax */
//    II(0x10182464, 0x2)    jzd(0x101824a0, 0x3a);                 /* jz 0x101824a0 */
//    II(0x10182466, 0x3)    lea(esi, eax - 0x8);                   /* lea esi, [eax-0x8] */
//    II(0x10182469, 0x2)    mov(eax, esi);                         /* mov eax, esi */
//    II(0x1018246b, 0x5)    calld(0x101825e0, 0x170);              /* call 0x101825e0 */
//    II(0x10182470, 0x5)    pushd(0xcc);                           /* push dword 0xcc */
//    II(0x10182475, 0x6)    mov(ebx, memd_a32(ds, 0x101be82c));    /* mov ebx, [0x101be82c] */
//    II(0x1018247b, 0x2)    mov(edx, memd_a32(ds, esi));           /* mov edx, [esi] */
//    II(0x1018247d, 0x2)    mov(eax, esi);                         /* mov eax, esi */
//    II(0x1018247f, 0x2)    sub(ebx, edx);                         /* sub ebx, edx */
//    II(0x10182481, 0x2)    mov(ecx, edx);                         /* mov ecx, edx */
//    II(0x10182483, 0x6)    mov(memd_a32(ds, 0x101be82c), ebx);    /* mov [0x101be82c], ebx */
//    II(0x10182489, 0x5)    mov(ebx, 0x1);                         /* mov ebx, 0x1 */
//    II(0x1018248e, 0x5)    calld(0x1016ad78, -0x1771b);           /* call 0x1016ad78 */
//    II(0x10182493, 0x2)    mov(eax, esi);                         /* mov eax, esi */
//    II(0x10182495, 0x5)    calld(call_free, -0x173d9);           /* call call_free */
//    II(0x1018249a, 0x6)    dec(memd_a32(ds, 0x101be824));         /* dec dword [0x101be824] */
//l_0x101824a0:
//    II(0x101824a0, 0x1)    popd(esi);                             /* pop esi */
//    II(0x101824a1, 0x1)    popd(edx);                             /* pop edx */
//    II(0x101824a2, 0x1)    popd(ecx);                             /* pop ecx */
//    II(0x101824a3, 0x1)    popd(ebx);                             /* pop ebx */
//    II(0x101824a4, 0x1)    retd();                                /* ret  */
//}

} /* namespace raw_program */
