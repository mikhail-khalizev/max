FUNC_BEGIN(0x00149f9c, 0x69bfee87ed74fbda, 0x10, ({0x8e, 0x5e, 0x2, 0x66, 0x50, 0x66, 0x53, 0x66, 0xf, 0x2, 0x5e, 0x2, 0x66, 0xf, 0xba, 0xe3, 0x16, 0x66, 0xbb, 0, 0, 0, 0, 0x73, 0x1, 0x66, 0x8b, 0x5e, 0x2a, 0x67, 0x66, 0x8f, 0x43, 0xfc, 0x66, 0x8b, 0x46, 0x1e, 0x67, 0x66, 0x89, 0x3, 0x8b, 0x46, 0x22, 0x67, 0x89, 0x43, 0x4, 0x8b, 0x46, 0x28, 0x67, 0x89, 0x43, 0xa, 0x66, 0x58, 0x3b, 0x56, 0x6, 0x75, 0x3b, 0x8e, 0xc2, 0x5a, 0x3b, 0x56, 0x4, 0x75, 0x2f, 0x67, 0x89, 0x53, 0xf8, 0x67, 0x8f, 0x43, 0xfa, 0x67, 0x66, 0x8f, 0x43, 0xfc, 0x67, 0x8f, 0x43, 0xf6, 0x5a, 0x80, 0xe6, 0xe, 0x67, 0x89, 0x53, 0x8, 0x36, 0x81, 0x6, 0x96, 0x9, 0x80, 0x1, 0x8e, 0x56, 0x2, 0x66, 0x67, 0x8d, 0x63, 0xf6, 0x5a, 0x1f, 0x5d, 0x66, 0x5b, 0x66, 0xcf, 0x33, 0xd2, 0xeb, 0xcd, 0x33, 0xd2, 0xeb, 0xc1}))
    II(0x00149f9c, 0x3)   mov(ds, memw_a16(ss, bp + 0x2));      /* mov ds, [bp+0x2] */
    II(0x00149f9f, 0x2)   pushd(eax);                           /* push eax */
    II(0x00149fa1, 0x2)   pushd(ebx);                           /* push ebx */
    II(0x00149fa3, 0x5)   lar(ebx, memw_a16(ss, bp + 0x2));     /* lar ebx, [bp+0x2] */
    II(0x00149fa8, 0x5)   bt(ebx, 0x16);                        /* bt ebx, 0x16 */
    II(0x00149fad, 0x6)   mov(ebx, 0);                          /* mov ebx, 0x0 */
    II(0x00149fb3, 0x2)   jaew_func(0x00149fb6, 0x1);           /* jae 0x149fb6 */ /* Адрес перехода делит инструкцию в этой функции пополам. */
    II(0x00149fb5, 0x4)   mov(ebx, memd_a16(ss, bp + 0x2a));    /* mov ebx, [bp+0x2a] */
    II(0x00149fb9, 0x5)   popd(memd_a32(ds, ebx - 0x4));        /* pop dword [ebx-0x4] */
    II(0x00149fbe, 0x4)   mov(eax, memd_a16(ss, bp + 0x1e));    /* mov eax, [bp+0x1e] */
    II(0x00149fc2, 0x4)   mov(memd_a32(ds, ebx), eax);          /* mov [ebx], eax */
    II(0x00149fc6, 0x3)   mov(ax, memw_a16(ss, bp + 0x22));     /* mov ax, [bp+0x22] */
    II(0x00149fc9, 0x4)   mov(memw_a32(ds, ebx + 0x4), ax);     /* mov [ebx+0x4], ax */
    II(0x00149fcd, 0x3)   mov(ax, memw_a16(ss, bp + 0x28));     /* mov ax, [bp+0x28] */
    II(0x00149fd0, 0x4)   mov(memw_a32(ds, ebx + 0xa), ax);     /* mov [ebx+0xa], ax */
    II(0x00149fd4, 0x2)   popd(eax);                            /* pop eax */
    II(0x00149fd6, 0x3)   cmp(dx, memw_a16(ss, bp + 0x6));      /* cmp dx, [bp+0x6] */
    II(0x00149fd9, 0x2)   jnzw(0x0014a016, 0x3b);               /* jnz 0x14a016 */
l_0x00149fdb:
    II(0x00149fdb, 0x2)   mov(es, dx);                          /* mov es, dx */
    II(0x00149fdd, 0x1)   popw(dx);                             /* pop dx */
    II(0x00149fde, 0x3)   cmp(dx, memw_a16(ss, bp + 0x4));      /* cmp dx, [bp+0x4] */
    II(0x00149fe1, 0x2)   jnzw(0x0014a012, 0x2f);               /* jnz 0x14a012 */
l_0x00149fe3:
    II(0x00149fe3, 0x4)   mov(memw_a32(ds, ebx - 0x8), dx);     /* mov [ebx-0x8], dx */
    II(0x00149fe7, 0x4)   popw(memw_a32(ds, ebx - 0x6));        /* pop word [ebx-0x6] */
    II(0x00149feb, 0x5)   popd(memd_a32(ds, ebx - 0x4));        /* pop dword [ebx-0x4] */
    II(0x00149ff0, 0x4)   popw(memw_a32(ds, ebx - 0xa));        /* pop word [ebx-0xa] */
    II(0x00149ff4, 0x1)   popw(dx);                             /* pop dx */
    II(0x00149ff5, 0x3)   and_(dh, 0xe);                        /* and dh, 0xe */
    II(0x00149ff8, 0x4)   mov(memw_a32(ds, ebx + 0x8), dx);     /* mov [ebx+0x8], dx */
    II(0x00149ffc, 0x7)   add(memw_a16(ss, 0x996), 0x180);      /* add word [ss:0x996], 0x180 */
    II(0x0014a003, 0x3)   mov(ss, memw_a16(ss, bp + 0x2));      /* mov ss, [bp+0x2] */
    II(0x0014a006, 0x5)   lea(esp, ebx - 0xa);                  /* lea esp, [ebx-0xa] */
    II(0x0014a00b, 0x1)   popw(dx);                             /* pop dx */
    II(0x0014a00c, 0x1)   popw(ds);                             /* pop ds */
    II(0x0014a00d, 0x1)   popw(bp);                             /* pop bp */
    II(0x0014a00e, 0x2)   popd(ebx);                            /* pop ebx */
    II(0x0014a010, 0x2)   iretd();                              /* iretd  */
l_0x0014a012:
    II(0x0014a012, 0x2)   xor_(dx, dx);                         /* xor dx, dx */
    II(0x0014a014, 0x2)   jmpw(0x00149fe3, -0x33);              /* jmp 0x149fe3 */
l_0x0014a016:
    II(0x0014a016, 0x2)   xor_(dx, dx);                         /* xor dx, dx */
    II(0x0014a018, 0x2)   jmpw(0x00149fdb, -0x3f);              /* jmp 0x149fdb */
FUNC_END

