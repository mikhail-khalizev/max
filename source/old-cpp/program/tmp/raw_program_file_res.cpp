#include "x86/instructions.hpp"
#include "program/raw_program.hpp"


namespace raw_program {

using namespace x86;
using namespace dos;


/*
 *  struct of *.res file
 *  {
 *      u32 - "RES0",
 *      u32 offset,
 *      u32 size,
 *      ???? ,
 *      <offset position> size bytes - its array of 16 byte item - placed in ptr_arr_meta   /. this array copied in  ptr_arr_meta ./,
 *      ????
 *  }
 */

FUNC_INFO_V3(load_res_file, 0xeca810d152f677c3, 0x20, {0x68, 0x3c, 0, 0, 0, 0xe8, 0xd5, 0x13, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xfc, 0xba, 0xf9, 0x89, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0xdf, 0xd9, 0x3, 0, 0x31, 0xd2, 0x8a, 0x15, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xe2, 0x2, 0x89, 0x82, 0xd0, 0x70, 0x1c, 0x10, 0x31, 0xc0, 0xa0, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xe0, 0x2, 0x83, 0xb8, 0xd0, 0x70, 0x1c, 0x10, 0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x6, 0xe9, 0x8b, 0x1, 0, 0, 0x31, 0xdb, 0x8a, 0x1d, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xe3, 0x2, 0x8b, 0x8b, 0xd0, 0x70, 0x1c, 0x10, 0xbb, 0x1, 0, 0, 0, 0xba, 0xc, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x81, 0xdb, 0x3, 0, 0x85, 0xc0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x7, 0xe9, 0x5b, 0x1, 0, 0, 0xbb, 0x4, 0, 0, 0, 0x8d, 0x55, 0xe4, 0xb8, 0x18, 0xb5, 0x1b, 0x10, 0xe8, 0x52, 0x47, 0x4, 0, 0x85, 0xc0, 0x74, 0x9, 0xc6, 0x45, 0xf8, 0x8, 0xe9, 0x3c, 0x1, 0, 0, 0x83, 0x3d, 0xf0, 0x70, 0x1c, 0x10, 0, 0x75, 0xf, 0x8b, 0x45, 0xec, 0xe8, 0xe8, 0x15, 0x3, 0, 0xa3, 0xf0, 0x70, 0x1c, 0x10, 0xeb, 0x1e, 0x8b, 0x15, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xfa, 0x10, 0xc1, 0xe2, 0x4, 0x3, 0x55, 0xec, 0xa1, 0xf0, 0x70, 0x1c, 0x10, 0xe8, 0x2e, 0x8d, 0x4, 0, 0xa3, 0xf0, 0x70, 0x1c, 0x10, 0x83, 0x3d, 0xf0, 0x70, 0x1c, 0x10, 0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x3, 0xe9, 0xf4, 0, 0, 0, 0x31, 0xdb, 0x8b, 0x55, 0xe8, 0x31, 0xc0, 0xa0, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xe0, 0x2, 0x8b, 0x80, 0xd0, 0x70, 0x1c, 0x10, 0xe8, 0xf7, 0xd9, 0x3, 0, 0x31, 0xc0, 0xa0, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xe0, 0x2, 0x8b, 0x88, 0xd0, 0x70, 0x1c, 0x10, 0xbb, 0x1, 0, 0, 0, 0x8b, 0x55, 0xec, 0xa1, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0xc1, 0xe0, 0x4, 0x8b, 0x35, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xf0, 0xe8, 0xc3, 0xda, 0x3, 0, 0x85, 0xc0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x7, 0xe9, 0x9d, 0, 0, 0, 0x66, 0xa1, 0xda, 0x70, 0x1c, 0x10, 0x89, 0x45, 0xf0, 0x8b, 0x55, 0xec, 0xc1, 0xea, 0x4, 0xa1, 0xd8, 0x70, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x1, 0xd0, 0x66, 0xa3, 0xda, 0x70, 0x1c, 0x10, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xf4, 0xeb, 0x6, 0x8b, 0x45, 0xf4, 0xff, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x66, 0x3b, 0x5, 0xda, 0x70, 0x1c, 0x10, 0x7d, 0x5a, 0xf, 0xbf, 0x45, 0xf4, 0xe8, 0xcd, 0xf0, 0xff, 0xff, 0x89, 0x45, 0xe0, 0xf, 0xbf, 0x45, 0xe0, 0x83, 0xf8, 0xff, 0x74, 0x16, 0xf, 0xbf, 0x45, 0xe0, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0xf, 0xbf, 0, 0x83, 0xf8, 0xff, 0x74, 0x2, 0xeb, 0x2b, 0xf, 0xbf, 0x55, 0xe0, 0x6b, 0xd2, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8b, 0x45, 0xf4, 0x66, 0x89, 0x2, 0xf, 0xbf, 0x45, 0xe0, 0x6b, 0xc0, 0x7, 0x8b, 0x15, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0xa0, 0xd8, 0x70, 0x1c, 0x10, 0x88, 0x42, 0x6, 0xeb, 0x94, 0xfe, 0x5, 0xd8, 0x70, 0x1c, 0x10, 0xc6, 0x45, 0xf8, 0, 0x8a, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(load_res_file, 0x20);  // eax - char * path
    II(load_res_file, 0x5)  pushd(0x3c);                        /* push dword 0x3c */
    II(0x10134978, 0x5)     calld(sys_check_available_stack_size, 0x313d5); /* call 0x10165d52 */
    II(0x1013497d, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x1013497e, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x1013497f, 0x1)     pushd(edx);                         /* push edx */
    II(0x10134980, 0x1)     pushd(esi);                         /* push esi */
    II(0x10134981, 0x1)     pushd(edi);                         /* push edi */
    II(0x10134982, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x10134983, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x10134985, 0x6)     sub(esp, 0x20);                     /* sub esp, 0x20 */
    II(0x1013498b, 0x3)     mov(memd_a32(ss, ebp - 0x4), eax);  /* mov [ebp-0x4], eax */
    II(0x1013498e, 0x5)     mov(edx, 0x101a89f9);               /* mov edx, 0x101a89f9 */ /* "rb" */
//    II(0x10134993, 0x3)     mov(eax, memd_a32(ss, ebp - 0x4));  /* mov eax, [ebp-0x4] */
    II(0x10134996, 0x5)     calld(sys_fopen, 0x3d9df);             /* call 0x1017237a */          // see &memb_a32(ds, eax)
    II(0x1013499b, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1013499d, 0x6)     mov(dl, memb_a32(ds, ptr_end_arr_res_file)); /* mov dl, [0x101c70d8] */
    II(0x101349a3, 0x3)     shl(edx, 0x2);                      /* shl edx, 0x2 */
    II(0x101349a6, 0x6)     mov(memd_a32(ds, edx + arr_res_file), eax); /* mov [edx+0x101c70d0], eax */
    II(0x101349ac, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x101349ae, 0x5)     mov(al, memb_a32(ds, ptr_end_arr_res_file)); /* mov al, [0x101c70d8] */
    II(0x101349b3, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x101349b6, 0x7)     cmp(memd_a32(ds, eax + arr_res_file), 0); /* cmp dword [eax+0x101c70d0], 0x0 */    // Успешно открыли или нет?
    II(0x101349bd, 0x2)     jnzd(0x101349c8, 0x9);              /* jnz 0x101349c8 */
       II(0x101349bf, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x6);  /* mov byte [ebp-0x8], 0x6 */               // errcode ~ file not found
       II(0x101349c3, 0x5)     jmpd(0x10134b53, 0x18b);            /* jmp 0x10134b53 */
    
    // Успешно открыли.
l_0x101349c8:
    II(0x101349c8, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */
    II(0x101349ca, 0x6)     mov(bl, memb_a32(ds, ptr_end_arr_res_file)); /* mov bl, [0x101c70d8] */
    II(0x101349d0, 0x3)     shl(ebx, 0x2);                      /* shl ebx, 0x2 */
    II(0x101349d3, 0x6)     mov(ecx, memd_a32(ds, ebx + arr_res_file)); /* mov ecx, [ebx+0x101c70d0] */
    II(0x101349d9, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x101349de, 0x5)     mov(edx, 0xc);                      /* mov edx, 0xc */
    II(0x101349e3, 0x3)     lea(eax, ebp - 0x1c);               /* lea eax, [ebp-0x1c] */
    II(0x101349e6, 0x5)     calld(sys_fread, 0x3db81);             /* call 0x1017256c */                           // read 12 bytes
    II(0x101349eb, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x101349ed, 0x2)     jnzd(0x101349f8, 0x9);              /* jnz 0x101349f8 */
       II(0x101349ef, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x7);  /* mov byte [ebp-0x8], 0x7 */
       II(0x101349f3, 0x5)     jmpd(0x10134b53, 0x15b);            /* jmp 0x10134b53 */
l_0x101349f8:
    II(0x101349f8, 0x5)     mov(ebx, 0x4);                      /* mov ebx, 0x4 */
    II(0x101349fd, 0x3)     lea(edx, ebp - 0x1c);               /* lea edx, [ebp-0x1c] */
    II(0x10134a00, 0x5)     mov(eax, 0x101bb518);               /* mov eax, 0x101bb518 */                       // "RES0"
    II(0x10134a05, 0x5)     calld(sys_strncmp, 0x44752);           /* call 0x1017915c */
    II(0x10134a0a, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10134a0c, 0x2)     jzd(0x10134a17, 0x9);               /* jz 0x10134a17 */
       II(0x10134a0e, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x8);  /* mov byte [ebp-0x8], 0x8 */
       II(0x10134a12, 0x5)     jmpd(0x10134b53, 0x13c);            /* jmp 0x10134b53 */
l_0x10134a17:
    II(0x10134a17, 0x7)     cmp(memd_a32(ds, ptr_arr_meta), 0); /* cmp dword [0x101c70f0], 0x0 */
    II(0x10134a1e, 0x2)     jnzd(0x10134a2f, 0xf);              /* jnz 0x10134a2f */
    II(0x10134a20, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */
    II(0x10134a23, 0x5)     calld(sys_malloc_v2_ref, 0x315e8);    /* call 0x10166010 */
    II(0x10134a28, 0x5)     mov(memd_a32(ds, ptr_arr_meta), eax); /* mov [0x101c70f0], eax */                   // malloc   FILE +0x8 u32   example 0x7240 bytes
    II(0x10134a2d, 0x2)     jmpd(0x10134a4d, 0x1e);             /* jmp 0x10134a4d */
l_0x10134a2f:
    II(0x10134a2f, 0x6)     mov(edx, memd_a32(ds, ptr_end_arr_res_file)); /* mov edx, [0x101c70d8] */           // second word - count items in ptr_arr_meta ?
    II(0x10134a35, 0x3)     sar(edx, 0x10);                     /* sar edx, 0x10 */
    II(0x10134a38, 0x3)     shl(edx, 0x4);                      /* shl edx, 0x4 */
    II(0x10134a3b, 0x3)     add(edx, memd_a32(ss, ebp - 0x14)); /* add edx, [ebp-0x14] */
    II(0x10134a3e, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta)); /* mov eax, [0x101c70f0] */
    II(0x10134a43, 0x5)     calld(0x1017d776, 0x48d2e);         /* call 0x1017d776 */                           // realloc? eax - ptr, edx - size
    II(0x10134a48, 0x5)     mov(memd_a32(ds, ptr_arr_meta), eax); /* mov [0x101c70f0], eax */
l_0x10134a4d:
    II(0x10134a4d, 0x7)     cmp(memd_a32(ds, ptr_arr_meta), 0); /* cmp dword [0x101c70f0], 0x0 */
    II(0x10134a54, 0x2)     jnzd(0x10134a5f, 0x9);              /* jnz 0x10134a5f */
       II(0x10134a56, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134a5a, 0x5)     jmpd(0x10134b53, 0xf4);             /* jmp 0x10134b53 */
l_0x10134a5f:
    II(0x10134a5f, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */                              // SEEK_SET
    II(0x10134a61, 0x3)     mov(edx, memd_a32(ss, ebp - 0x18)); /* mov edx, [ebp-0x18] */                       // FILE +0x4 u32
    II(0x10134a64, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x10134a66, 0x5)     mov(al, memb_a32(ds, ptr_end_arr_res_file)); /* mov al, [0x101c70d8] */
    II(0x10134a6b, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x10134a6e, 0x6)     mov(eax, memd_a32(ds, eax + arr_res_file)); /* mov eax, [eax+0x101c70d0] */
    II(0x10134a74, 0x5)     calld(sys_fseek, 0x3d9f7);            /* call 0x10172470 */
    II(0x10134a79, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x10134a7b, 0x5)     mov(al, memb_a32(ds, ptr_end_arr_res_file)); /* mov al, [0x101c70d8] */
    II(0x10134a80, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x10134a83, 0x6)     mov(ecx, memd_a32(ds, eax + arr_res_file)); /* mov ecx, [eax+0x101c70d0] */
    II(0x10134a89, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x10134a8e, 0x3)     mov(edx, memd_a32(ss, ebp - 0x14)); /* mov edx, [ebp-0x14] */
    II(0x10134a91, 0x5)     mov(eax, memd_a32(ds, ptr_end_arr_res_file)); /* mov eax, [0x101c70d8] */
    II(0x10134a96, 0x3)     sar(eax, 0x10);                     /* sar eax, 0x10 */
    II(0x10134a99, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x10134a9c, 0x6)     mov(esi, memd_a32(ds, ptr_arr_meta)); /* mov esi, [0x101c70f0] */
    II(0x10134aa2, 0x2)     add(eax, esi);                      /* add eax, esi */
    II(0x10134aa4, 0x5)     calld(sys_fread, 0x3dac3);             /* call 0x1017256c */                            // read in ptr_arr_meta  size FILE +0x8 u32
    II(0x10134aa9, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10134aab, 0x2)     jnzd(0x10134ab6, 0x9);              /* jnz 0x10134ab6 */
       II(0x10134aad, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x7);  /* mov byte [ebp-0x8], 0x7 */
       II(0x10134ab1, 0x5)     jmpd(0x10134b53, 0x9d);             /* jmp 0x10134b53 */
l_0x10134ab6:
    II(0x10134ab6, 0x6)     mov(ax, memw_a32(ds, ptr_end_arr_meta)); /* mov ax, [0x101c70da] */
    II(0x10134abc, 0x3)     mov(memd_a32(ss, ebp - 0x10), eax); /* mov [ebp-0x10], eax */
    II(0x10134abf, 0x3)     mov(edx, memd_a32(ss, ebp - 0x14)); /* mov edx, [ebp-0x14] */
    II(0x10134ac2, 0x3)     shr(edx, 0x4);                      /* shr edx, 0x4 */                               // count of new (added) items in ptr_arr_meta
    II(0x10134ac5, 0x5)     mov(eax, memd_a32(ds, ptr_end_arr_res_file)); /* mov eax, [0x101c70d8] */
    II(0x10134aca, 0x3)     sar(eax, 0x10);                     /* sar eax, 0x10 */                              // eax  prev count items in ptr_arr_meta ?
    II(0x10134acd, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134acf, 0x6)     mov(memw_a32(ds, ptr_end_arr_meta), ax); /* mov [0x101c70da], ax */                  // save new total count items.
    II(0x10134ad5, 0x3)     mov(eax, memd_a32(ss, ebp - 0x10)); /* mov eax, [ebp-0x10] */
    II(0x10134ad8, 0x3)     mov(memd_a32(ss, ebp - 0xc), eax);  /* mov [ebp-0xc], eax */                         // count of old total items
    II(0x10134adb, 0x2)     jmpd(0x10134ae3, 0x6);              /* jmp 0x10134ae3 */
l_0x10134add:
    II(0x10134add, 0x3)     mov(eax, memd_a32(ss, ebp - 0xc));  /* mov eax, [ebp-0xc] */                         // cycle:  for (i = old_total, i < new_total; i++)   where 'i' is 'memd_a32(ss, ebp - 0xc)'.
    II(0x10134ae0, 0x3)     inc(memd_a32(ss, ebp - 0xc));       /* inc dword [ebp-0xc] */
l_0x10134ae3:
    II(0x10134ae3, 0x3)     mov(eax, memd_a32(ss, ebp - 0xc));  /* mov eax, [ebp-0xc] */
    II(0x10134ae6, 0x7)     cmp(ax, memw_a32(ds, ptr_end_arr_meta)); /* cmp ax, [0x101c70da] */
    II(0x10134aed, 0x2)     jged(0x10134b49, 0x5a);             /* jge 0x10134b49 */
    II(0x10134aef, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134af3, 0x5)     calld(0x10133bc5, -0xf33);          /* call 0x10133bc5 */
    II(0x10134af8, 0x3)     mov(memd_a32(ss, ebp - 0x20), eax); /* mov [ebp-0x20], eax */
    II(0x10134afb, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x10134aff, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x10134b02, 0x2)     jzd(0x10134b1a, 0x16);              /* jz 0x10134b1a */
    II(0x10134b04, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x10134b08, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x10134b0b, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134b10, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134b12, 0x3)     movsx(eax, memw_a32(ds, eax));      /* movsx eax, word [eax] */
    II(0x10134b15, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x10134b18, 0x2)     jzd(0x10134b1c, 0x2);               /* jz 0x10134b1c */                              // if first s16 from  ptr_arr_meta_by_id item  is not -1  continue;
l_0x10134b1a:
    II(0x10134b1a, 0x2)     jmpd(0x10134b47, 0x2b);             /* jmp 0x10134b47 */                             // continue;
l_0x10134b1c:
    II(0x10134b1c, 0x4)     movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x10134b20, 0x3)     imul(edx, edx, 0x7);                /* imul edx, edx, 0x7 */
    II(0x10134b23, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134b28, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134b2a, 0x3)     mov(eax, memd_a32(ss, ebp - 0xc));  /* mov eax, [ebp-0xc] */
    II(0x10134b2d, 0x3)     mov(memw_a32(ds, edx), ax);         /* mov [edx], ax */                              // write at first s16 at  id array ptr_arr_meta_by_id  index of item  ptr_arr_meta
    II(0x10134b30, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x10134b34, 0x3)     imul(eax, eax, 0x7);                /* imul eax, eax, 0x7 */
    II(0x10134b37, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta_by_id)); /* mov edx, [0x101c70ec] */
    II(0x10134b3d, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134b3f, 0x5)     mov(al, memb_a32(ds, ptr_end_arr_res_file)); /* mov al, [0x101c70d8] */
    II(0x10134b44, 0x3)     mov(memb_a32(ds, edx + 0x6), al);   /* mov [edx+0x6], al */                          // at last u8    of  id array ptr_arr_meta_by_id   index of  FILE * in arr_res_file.
l_0x10134b47:
    II(0x10134b47, 0x2)     jmpd(0x10134add, -0x6c);            /* jmp 0x10134add */                             // cycle end
l_0x10134b49:
    II(0x10134b49, 0x6)     inc(memb_a32(ds, ptr_end_arr_res_file)); /* inc byte [0x101c70d8] */
    II(0x10134b4f, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0);    /* mov byte [ebp-0x8], 0x0 */
l_0x10134b53:
    II(0x10134b53, 0x3)     mov(al, memb_a32(ss, ebp - 0x8));   /* mov al, [ebp-0x8] */
    II(0x10134b56, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10134b58, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10134b59, 0x1)     popd(edi);                          /* pop edi */
    II(0x10134b5a, 0x1)     popd(esi);                          /* pop esi */
    II(0x10134b5b, 0x1)     popd(edx);                          /* pop edx */
    II(0x10134b5c, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10134b5d, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x10134b5e, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x10134b5f, 0xc11d5c82bdc566b5, 0x20, {0x68, 0x8c, 0, 0, 0, 0xe8, 0xe9, 0x11, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x70, 0, 0, 0, 0xb8, 0xb1, 0x34, 0, 0, 0xe8, 0x8f, 0x14, 0x3, 0, 0xa3, 0xec, 0x70, 0x1c, 0x10, 0x83, 0x3d, 0xec, 0x70, 0x1c, 0x10, 0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x3, 0xe9, 0x6c, 0x1, 0, 0, 0xc7, 0x45, 0xf4, 0x87, 0x7, 0, 0, 0xff, 0x4d, 0xf4, 0x66, 0x83, 0x7d, 0xf4, 0xff, 0x74, 0x2b, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x66, 0xc7, 0, 0xff, 0xff, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x7, 0x8b, 0x15, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0xc7, 0x40, 0x2, 0, 0, 0, 0, 0xeb, 0xcb, 0x66, 0xc7, 0x5, 0xda, 0x70, 0x1c, 0x10, 0, 0, 0xba, 0x70, 0x3d, 0x1c, 0x10, 0x8d, 0x45, 0x90, 0xe8, 0xe5, 0x12, 0x3, 0, 0xba, 0xfc, 0x89, 0x1a, 0x10, 0x8d, 0x45, 0x90, 0xe8, 0x3a, 0x13, 0x3, 0, 0x8d, 0x45, 0x90, 0xe8, 0x74, 0xfd, 0xff, 0xff, 0x88, 0x45, 0xfc, 0x80, 0x7d, 0xfc, 0x6, 0x74, 0x6, 0x80, 0x7d, 0xfc, 0, 0x75, 0x2, 0xeb, 0xb, 0x8a, 0x45, 0xfc, 0x88, 0x45, 0xf8, 0xe9, 0xe9, 0, 0, 0, 0xba, 0xd4, 0x3d, 0x1c, 0x10, 0x8d, 0x45, 0x90, 0xe8, 0xa7, 0x12, 0x3, 0, 0xba, 0x8, 0x8a, 0x1a, 0x10, 0x8d, 0x45, 0x90, 0xe8, 0xfc, 0x12, 0x3, 0, 0x8d, 0x45, 0x90, 0xe8, 0x36, 0xfd, 0xff, 0xff, 0x88, 0x45, 0xfc, 0x80, 0x7d, 0xfc, 0, 0x74, 0xb, 0x8a, 0x45, 0xfc, 0x88, 0x45, 0xf8, 0xe9, 0xb3, 0, 0, 0, 0xb8, 0, 0x31, 0, 0, 0xe8, 0xb5, 0x13, 0x3, 0, 0xa3, 0xe8, 0x70, 0x1c, 0x10, 0x83, 0x3d, 0xe8, 0x70, 0x1c, 0x10, 0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x3, 0xe9, 0x92, 0, 0, 0, 0xb8, 0, 0x31, 0, 0, 0xe8, 0x94, 0x13, 0x3, 0, 0xa3, 0xe0, 0x70, 0x1c, 0x10, 0x83, 0x3d, 0xe0, 0x70, 0x1c, 0x10, 0, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x3, 0xe9, 0x71, 0, 0, 0, 0xb8, 0, 0x31, 0, 0, 0xe8, 0x73, 0x13, 0x3, 0, 0xa3, 0xe4, 0x70, 0x1c, 0x10, 0x83, 0x3d, 0xe4, 0x70, 0x1c, 0x10, 0, 0x75, 0x6, 0xc6, 0x45, 0xf8, 0x3, 0xeb, 0x53, 0xe8, 0xd6, 0xf9, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x6, 0xc6, 0x45, 0xf8, 0x3, 0xeb, 0x44, 0xe8, 0x85, 0xc5, 0xfe, 0xff, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf4, 0xff, 0x45, 0xf4, 0xf, 0xbf, 0x45, 0xf4, 0x83, 0xf8, 0x5d, 0x7d, 0x23, 0xf, 0xbf, 0x55, 0xf4, 0x6b, 0xd2, 0x2b, 0xb8, 0xc8, 0x94, 0x1c, 0x10, 0x1, 0xc2, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x33, 0xbb, 0xc0, 0x81, 0x1c, 0x10, 0x1, 0xd8, 0xe8, 0xe3, 0x43, 0xfb, 0xff, 0xeb, 0xce, 0xc6, 0x45, 0xf8, 0, 0x8a, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(0x10134b5f, 0x20);  // init_res ?
    II(0x10134b5f, 0x5)     pushd(0x8c);                        /* push dword 0x8c */
    II(0x10134b64, 0x5)     calld(sys_check_available_stack_size, 0x311e9); /* call 0x10165d52 */
    II(0x10134b69, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x10134b6a, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x10134b6b, 0x1)     pushd(edx);                         /* push edx */
    II(0x10134b6c, 0x1)     pushd(esi);                         /* push esi */
    II(0x10134b6d, 0x1)     pushd(edi);                         /* push edi */
    II(0x10134b6e, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x10134b6f, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x10134b71, 0x6)     sub(esp, 0x70);                     /* sub esp, 0x70 */
    II(0x10134b77, 0x5)     mov(eax, 0x34b1);                   /* mov eax, 0x34b1 */
    II(0x10134b7c, 0x5)     calld(sys_malloc_v2_ref, 0x3148f);    /* call 0x10166010 */
    II(0x10134b81, 0x5)     mov(memd_a32(ds, ptr_arr_meta_by_id), eax); /* mov [0x101c70ec], eax */             // malloc  const (0x787 * 7) bytes
    II(0x10134b86, 0x7)     cmp(memd_a32(ds, ptr_arr_meta_by_id), 0); /* cmp dword [0x101c70ec], 0x0 */
    II(0x10134b8d, 0x2)     jnzd(0x10134b98, 0x9);              /* jnz 0x10134b98 */
       II(0x10134b8f, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134b93, 0x5)     jmpd(0x10134d04, 0x16c);            /* jmp 0x10134d04 */
l_0x10134b98:
    II(0x10134b98, 0x7)     mov(memd_a32(ss, ebp - 0xc), 0x787); /* mov dword [ebp-0xc], 0x787 */               // cycle:  fill items : { 0xffff, 0x00000000, 0x?? }
l_0x10134b9f:
    II(0x10134b9f, 0x3)     dec(memd_a32(ss, ebp - 0xc));       /* dec dword [ebp-0xc] */
    II(0x10134ba2, 0x5)     cmp(memw_a32(ss, ebp - 0xc), -0x1 /* 0xff */); /* cmp word [ebp-0xc], 0xff */
    II(0x10134ba7, 0x2)     jzd(0x10134bd4, 0x2b);              /* jz 0x10134bd4 */
    II(0x10134ba9, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134bad, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x10134bb0, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134bb5, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134bb7, 0x5)     mov(memw_a32(ds, eax), 0xffff);     /* mov word [eax], 0xffff */
    II(0x10134bbc, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134bc0, 0x3)     imul(eax, eax, 0x7);                /* imul eax, eax, 0x7 */
    II(0x10134bc3, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta_by_id)); /* mov edx, [0x101c70ec] */
    II(0x10134bc9, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134bcb, 0x7)     mov(memd_a32(ds, eax + 0x2), 0);    /* mov dword [eax+0x2], 0x0 */
    II(0x10134bd2, 0x2)     jmpd(0x10134b9f, -0x35);            /* jmp 0x10134b9f */                            // cycle end
l_0x10134bd4:
    II(0x10134bd4, 0x9)     mov(memw_a32(ds, ptr_end_arr_meta), 0); /* mov word [0x101c70da], 0x0 */
    II(0x10134bdd, 0x5)     mov(edx, 0x101c3d70);               /* mov edx, 0x101c3d70 */                       // ""
    II(0x10134be2, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134be5, 0x5)     calld(sys_strcpy, 0x312e5);            /* call 0x10165ecf */
    II(0x10134bea, 0x5)     mov(edx, 0x101a89fc);               /* mov edx, 0x101a89fc */ /* "patches.res" */
    II(0x10134bef, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134bf2, 0x5)     calld(sys_strcat, 0x3133a);            /* call 0x10165f31 */
    II(0x10134bf7, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134bfa, 0x5)     calld(load_res_file, -0x28c);       /* call 0x10134973 */
    II(0x10134bff, 0x3)     mov(memb_a32(ss, ebp - 0x4), al);   /* mov [ebp-0x4], al */
    II(0x10134c02, 0x4)     cmp(memb_a32(ss, ebp - 0x4), 0x6);  /* cmp byte [ebp-0x4], 0x6 */
    II(0x10134c06, 0x2)     jzd(0x10134c0e, 0x6);               /* jz 0x10134c0e */                             // if not not found
    II(0x10134c08, 0x4)     cmp(memb_a32(ss, ebp - 0x4), 0);    /* cmp byte [ebp-0x4], 0x0 */
    II(0x10134c0c, 0x2)     jnzd(0x10134c10, 0x2);              /* jnz 0x10134c10 */                            // if fail ...
l_0x10134c0e:
    II(0x10134c0e, 0x2)     jmpd(0x10134c1b, 0xb);              /* jmp 0x10134c1b */
l_0x10134c10:
       II(0x10134c10, 0x3)     mov(al, memb_a32(ss, ebp - 0x4));   /* mov al, [ebp-0x4] */
       II(0x10134c13, 0x3)     mov(memb_a32(ss, ebp - 0x8), al);   /* mov [ebp-0x8], al */
       II(0x10134c16, 0x5)     jmpd(0x10134d04, 0xe9);             /* jmp 0x10134d04 */                         // ... return errcode;
l_0x10134c1b:
    II(0x10134c1b, 0x5)     mov(edx, 0x101c3dd4);               /* mov edx, 0x101c3dd4 */                       // ""
    II(0x10134c20, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134c23, 0x5)     calld(sys_strcpy, 0x312a7);            /* call 0x10165ecf */
    II(0x10134c28, 0x5)     mov(edx, 0x101a8a08);               /* mov edx, 0x101a8a08 */ /* "max.res" */
    II(0x10134c2d, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134c30, 0x5)     calld(sys_strcat, 0x312fc);            /* call 0x10165f31 */
    II(0x10134c35, 0x3)     lea(eax, ebp - 0x70);               /* lea eax, [ebp-0x70] */
    II(0x10134c38, 0x5)     calld(load_res_file, -0x2ca);       /* call 0x10134973 */
    II(0x10134c3d, 0x3)     mov(memb_a32(ss, ebp - 0x4), al);   /* mov [ebp-0x4], al */
    II(0x10134c40, 0x4)     cmp(memb_a32(ss, ebp - 0x4), 0);    /* cmp byte [ebp-0x4], 0x0 */
    II(0x10134c44, 0x2)     jzd(0x10134c51, 0xb);               /* jz 0x10134c51 */                             // succesful?
       II(0x10134c46, 0x3)     mov(al, memb_a32(ss, ebp - 0x4));   /* mov al, [ebp-0x4] */
       II(0x10134c49, 0x3)     mov(memb_a32(ss, ebp - 0x8), al);   /* mov [ebp-0x8], al */
       II(0x10134c4c, 0x5)     jmpd(0x10134d04, 0xb3);             /* jmp 0x10134d04 */
l_0x10134c51:
    II(0x10134c51, 0x5)     mov(eax, 0x3100);                   /* mov eax, 0x3100 */
    II(0x10134c56, 0x5)     calld(sys_malloc_v2_ref, 0x313b5);    /* call 0x10166010 */
    II(0x10134c5b, 0x5)     mov(memd_a32(ds, 0x101c70e8), eax); /* mov [0x101c70e8], eax */                     // malloc 0x3100
    II(0x10134c60, 0x7)     cmp(memd_a32(ds, 0x101c70e8), 0);   /* cmp dword [0x101c70e8], 0x0 */
    II(0x10134c67, 0x2)     jnzd(0x10134c72, 0x9);              /* jnz 0x10134c72 */
       II(0x10134c69, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134c6d, 0x5)     jmpd(0x10134d04, 0x92);             /* jmp 0x10134d04 */
l_0x10134c72:
    II(0x10134c72, 0x5)     mov(eax, 0x3100);                   /* mov eax, 0x3100 */
    II(0x10134c77, 0x5)     calld(sys_malloc_v2_ref, 0x31394);    /* call 0x10166010 */
    II(0x10134c7c, 0x5)     mov(memd_a32(ds, 0x101c70e0), eax); /* mov [0x101c70e0], eax */                     // malloc 0x3100
    II(0x10134c81, 0x7)     cmp(memd_a32(ds, 0x101c70e0), 0);   /* cmp dword [0x101c70e0], 0x0 */
    II(0x10134c88, 0x2)     jnzd(0x10134c93, 0x9);              /* jnz 0x10134c93 */
       II(0x10134c8a, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134c8e, 0x5)     jmpd(0x10134d04, 0x71);             /* jmp 0x10134d04 */
l_0x10134c93:
    II(0x10134c93, 0x5)     mov(eax, 0x3100);                   /* mov eax, 0x3100 */
    II(0x10134c98, 0x5)     calld(sys_malloc_v2_ref, 0x31373);    /* call 0x10166010 */
    II(0x10134c9d, 0x5)     mov(memd_a32(ds, 0x101c70e4), eax); /* mov [0x101c70e4], eax */                      // malloc 0x3100
    II(0x10134ca2, 0x7)     cmp(memd_a32(ds, 0x101c70e4), 0);   /* cmp dword [0x101c70e4], 0x0 */
    II(0x10134ca9, 0x2)     jnzd(0x10134cb1, 0x6);              /* jnz 0x10134cb1 */
       II(0x10134cab, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134caf, 0x2)     jmpd(0x10134d04, 0x53);             /* jmp 0x10134d04 */
l_0x10134cb1:
    II(0x10134cb1, 0x5)     calld(0x1013468c, -0x62a);          /* call 0x1013468c */
    II(0x10134cb6, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10134cb8, 0x2)     jnzd(0x10134cc0, 0x6);              /* jnz 0x10134cc0 */
       II(0x10134cba, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0x3);  /* mov byte [ebp-0x8], 0x3 */
       II(0x10134cbe, 0x2)     jmpd(0x10134d04, 0x44);             /* jmp 0x10134d04 */
l_0x10134cc0:
    II(0x10134cc0, 0x5)     calld(0x1012124a, -0x13a7b);        /* call 0x1012124a */
    II(0x10134cc5, 0x7)     mov(memd_a32(ss, ebp - 0xc), 0);    /* mov dword [ebp-0xc], 0x0 */                   // for (i = 0; i < 0x5d; i++)
    II(0x10134ccc, 0x2)     jmpd(0x10134cd4, 0x6);              /* jmp 0x10134cd4 */
l_0x10134cce:
    II(0x10134cce, 0x3)     mov(eax, memd_a32(ss, ebp - 0xc));  /* mov eax, [ebp-0xc] */
    II(0x10134cd1, 0x3)     inc(memd_a32(ss, ebp - 0xc));       /* inc dword [ebp-0xc] */
l_0x10134cd4:
    II(0x10134cd4, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134cd8, 0x3)     cmp(eax, 0x5d);                     /* cmp eax, 0x5d */
    II(0x10134cdb, 0x2)     jged(0x10134d00, 0x23);             /* jge 0x10134d00 */
    II(0x10134cdd, 0x4)     movsx(edx, memw_a32(ss, ebp - 0xc)); /* movsx edx, word [ebp-0xc] */
    II(0x10134ce1, 0x3)     imul(edx, edx, 0x2b);               /* imul edx, edx, 0x2b */
    II(0x10134ce4, 0x5)     mov(eax, 0x101c94c8);               /* mov eax, 0x101c94c8 */                        // arr, item size 0x2b ?   count 0x5d ?
    II(0x10134ce9, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134ceb, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134cef, 0x3)     imul(eax, eax, 0x33);               /* imul eax, eax, 0x33 */
    II(0x10134cf2, 0x5)     mov(ebx, 0x101c81c0);               /* mov ebx, 0x101c81c0 */                        // arr, item size 0x33 ?   count 0x5d ?
    II(0x10134cf7, 0x2)     add(eax, ebx);                      /* add eax, ebx */
    II(0x10134cf9, 0x5)     calld(0x100e90e1, -0x4bc1d);        /* call 0x100e90e1 */
    II(0x10134cfe, 0x2)     jmpd(0x10134cce, -0x32);            /* jmp 0x10134cce */                             // } /. for ./
l_0x10134d00:
    II(0x10134d00, 0x4)     mov(memb_a32(ss, ebp - 0x8), 0);    /* mov byte [ebp-0x8], 0x0 */
l_0x10134d04:
    II(0x10134d04, 0x3)     mov(al, memb_a32(ss, ebp - 0x8));   /* mov al, [ebp-0x8] */
    II(0x10134d07, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10134d09, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10134d0a, 0x1)     popd(edi);                          /* pop edi */
    II(0x10134d0b, 0x1)     popd(esi);                          /* pop esi */
    II(0x10134d0c, 0x1)     popd(edx);                          /* pop edx */
    II(0x10134d0d, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10134d0e, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x10134d0f, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x10133bc5, 0x37bb6912783127e3, 0x20, {0x68, 0x34, 0, 0, 0, 0xe8, 0x83, 0x21, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xfc, 0xbb, 0x9, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xf1, 0x21, 0x3, 0, 0xbb, 0x8, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8d, 0x45, 0xf0, 0xe8, 0xd5, 0xe2, 0x3, 0, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xec, 0xff, 0x45, 0xec, 0xf, 0xbf, 0x45, 0xec, 0x3d, 0x87, 0x7, 0, 0, 0x7d, 0x23, 0xf, 0xbf, 0x55, 0xec, 0xc1, 0xe2, 0x2, 0x8b, 0x92, 0x20, 0xb5, 0x1b, 0x10, 0x8d, 0x45, 0xf0, 0xe8, 0xf6, 0x24, 0x3, 0, 0x85, 0xc0, 0x75, 0x8, 0x8b, 0x45, 0xec, 0x89, 0x45, 0xe8, 0xeb, 0x9, 0xeb, 0xcc, 0xc7, 0x45, 0xe8, 0xff, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xe8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(0x10133bc5, 0x20);  // eax - index in ptr_arr_meta,  return str_id - index in 0x101bb520, else -1.
    II(0x10133bc5, 0x5)     pushd(0x34);                        /* push dword 0x34 */
    II(0x10133bca, 0x5)     calld(sys_check_available_stack_size, 0x32183); /* call 0x10165d52 */
    II(0x10133bcf, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x10133bd0, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x10133bd1, 0x1)     pushd(edx);                         /* push edx */
    II(0x10133bd2, 0x1)     pushd(esi);                         /* push esi */
    II(0x10133bd3, 0x1)     pushd(edi);                         /* push edi */
    II(0x10133bd4, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x10133bd5, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x10133bd7, 0x6)     sub(esp, 0x18);                     /* sub esp, 0x18 */
    II(0x10133bdd, 0x3)     mov(memd_a32(ss, ebp - 0x4), eax);  /* mov [ebp-0x4], eax */

    // prepare 9 bytes space for 8 byte string.
    II(0x10133be0, 0x5)     mov(ebx, 0x9);                      /* mov ebx, 0x9 */
    II(0x10133be5, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x10133be7, 0x3)     lea(eax, ebp - 0x10);               /* lea eax, [ebp-0x10] */
    II(0x10133bea, 0x5)     calld(sys_memset, 0x321f1);            /* call 0x10165de0 */

    // copy txt from item to it.
    II(0x10133bef, 0x5)     mov(ebx, 0x8);                      /* mov ebx, 0x8 */
    II(0x10133bf4, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10133bf8, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x10133bfb, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x10133c01, 0x2)     add(edx, eax);                      /* add edx, eax */                          // edx - ptr of item
    II(0x10133c03, 0x3)     lea(eax, ebp - 0x10);               /* lea eax, [ebp-0x10] */
    II(0x10133c06, 0x5)     calld(sys_strncpy, 0x3e2d5);           /* call 0x10171ee0 */

    // for (i = 0; i < 0x787; i++)   // search equal txt from 0x101bb520 array of 0x787 char *.
    II(0x10133c0b, 0x7)     mov(memd_a32(ss, ebp - 0x14), 0);   /* mov dword [ebp-0x14], 0x0 */
    II(0x10133c12, 0x2)     jmpd(0x10133c1a, 0x6);              /* jmp 0x10133c1a */
l_0x10133c14:
    II(0x10133c14, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */
    II(0x10133c17, 0x3)     inc(memd_a32(ss, ebp - 0x14));      /* inc dword [ebp-0x14] */
l_0x10133c1a:
    II(0x10133c1a, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x10133c1e, 0x5)     cmp(eax, 0x787);                    /* cmp eax, 0x787 */
    II(0x10133c23, 0x2)     jged(0x10133c48, 0x23);             /* jge 0x10133c48 */

    II(0x10133c25, 0x4)     movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x10133c29, 0x3)     shl(edx, 0x2);                      /* shl edx, 0x2 */
    II(0x10133c2c, 0x6)     mov(edx, memd_a32(ds, edx + 0x101bb520)); /* mov edx, [edx+0x101bb520] */        // 0x101bb520 - array of char *.
    II(0x10133c32, 0x3)     lea(eax, ebp - 0x10);               /* lea eax, [ebp-0x10] */
    II(0x10133c35, 0x5)     calld(sys_strcasecmp, 0x324f6);        /* call 0x10166130 */
    II(0x10133c3a, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10133c3c, 0x2)     jnzd(0x10133c46, 0x8);              /* jnz 0x10133c46 */
    II(0x10133c3e, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */                    // found
    II(0x10133c41, 0x3)     mov(memd_a32(ss, ebp - 0x18), eax); /* mov [ebp-0x18], eax */
    II(0x10133c44, 0x2)     jmpd(0x10133c4f, 0x9);              /* jmp 0x10133c4f */
l_0x10133c46:
    II(0x10133c46, 0x2)     jmpd(0x10133c14, -0x34);            /* jmp 0x10133c14 */
l_0x10133c48:
    II(0x10133c48, 0x7)     mov(memd_a32(ss, ebp - 0x18), 0xffffffff); /* mov dword [ebp-0x18], 0xffffffff */
l_0x10133c4f:
    II(0x10133c4f, 0x3)     mov(eax, memd_a32(ss, ebp - 0x18)); /* mov eax, [ebp-0x18] */
    II(0x10133c52, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10133c54, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10133c55, 0x1)     popd(edi);                          /* pop edi */
    II(0x10133c56, 0x1)     popd(esi);                          /* pop esi */
    II(0x10133c57, 0x1)     popd(edx);                          /* pop edx */
    II(0x10133c58, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10133c59, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x10133c5a, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(get_res_data_by_id, 0xe738b8e3e6c69e20, 0x20, {0x68, 0x34, 0, 0, 0, 0xe8, 0x70, 0x1d, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x83, 0xf8, 0xff, 0x75, 0xc, 0xc7, 0x45, 0xf8, 0, 0, 0, 0, 0xe9, 0x43, 0x1, 0, 0, 0x66, 0x81, 0x7d, 0xfc, 0x8e, 0x3, 0x7d, 0x9, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x6e, 0xb, 0, 0, 0xbb, 0xa4, 0x89, 0x1a, 0x10, 0xba, 0xb1, 0x89, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0x63, 0x1d, 0x3, 0, 0x89, 0x45, 0xf4, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x66, 0x8b, 0, 0x89, 0x45, 0xf0, 0xf, 0xbf, 0x45, 0xf0, 0x83, 0xf8, 0xff, 0x75, 0xc, 0xc7, 0x45, 0xf8, 0, 0, 0, 0, 0xe9, 0xf0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x40, 0x2, 0x89, 0x45, 0xec, 0x83, 0x7d, 0xec, 0, 0xf, 0x85, 0xcc, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x7, 0x8b, 0x15, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8a, 0x40, 0x6, 0x88, 0x45, 0xe8, 0x31, 0xdb, 0xf, 0xbf, 0x55, 0xf0, 0xc1, 0xe2, 0x4, 0xa1, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8b, 0x52, 0x8, 0x31, 0xc0, 0x8a, 0x45, 0xe8, 0xc1, 0xe0, 0x2, 0x8b, 0x80, 0xd0, 0x70, 0x1c, 0x10, 0xe8, 0xa1, 0xb3, 0xfb, 0xff, 0xf, 0xbf, 0x45, 0xf0, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x40, 0xc, 0xe8, 0x45, 0x1f, 0x3, 0, 0x89, 0x45, 0xec, 0x83, 0x7d, 0xec, 0, 0x75, 0xa, 0xb8, 0x3, 0, 0, 0, 0xe8, 0xc2, 0xb2, 0xfb, 0xff, 0x31, 0xc0, 0x8a, 0x45, 0xe8, 0xc1, 0xe0, 0x2, 0x8b, 0x88, 0xd0, 0x70, 0x1c, 0x10, 0xbb, 0x1, 0, 0, 0, 0xf, 0xbf, 0x45, 0xf0, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x50, 0xc, 0x8b, 0x45, 0xec, 0xe8, 0x84, 0xb3, 0xfb, 0xff, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0x7, 0, 0, 0, 0xe8, 0x87, 0xb2, 0xfb, 0xff, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8b, 0x45, 0xec, 0x89, 0x42, 0x2, 0xf, 0xbf, 0x45, 0xf0, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x40, 0xc, 0x1, 0x5, 0xdc, 0x70, 0x1c, 0x10, 0x8b, 0x45, 0xec, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(get_res_data_by_id, 0x20);  // get_res_data_by_id   input  eax - s16 - meta_id,  return eax - ptr data associated with meta
    II(get_res_data_by_id, 0x5) pushd(0x34);                    /* push dword 0x34 */
    II(0x10133fdd, 0x5)     calld(sys_check_available_stack_size, 0x31d70); /* call 0x10165d52 */
    II(0x10133fe2, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x10133fe3, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x10133fe4, 0x1)     pushd(edx);                         /* push edx */
    II(0x10133fe5, 0x1)     pushd(esi);                         /* push esi */
    II(0x10133fe6, 0x1)     pushd(edi);                         /* push edi */
    II(0x10133fe7, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x10133fe8, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x10133fea, 0x6)     sub(esp, 0x18);                     /* sub esp, 0x18 */
    II(0x10133ff0, 0x3)     mov(memd_a32(ss, ebp - 0x4), eax);  /* mov [ebp-0x4], eax */
    II(0x10133ff3, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10133ff7, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x10133ffa, 0x2)     jnzd(0x10134008, 0xc);              /* jnz 0x10134008 */
    II(0x10133ffc, 0x7)     mov(memd_a32(ss, ebp - 0x8), 0);    /* mov dword [ebp-0x8], 0x0 */
    II(0x10134003, 0x5)     jmpd(0x1013414b, 0x143);            /* jmp 0x1013414b */                             // return 0; - fail
l_0x10134008:
    II(0x10134008, 0x6)     cmp(memw_a32(ss, ebp - 0x4), 0x38e); /* cmp word [ebp-0x4], 0x38e */
    II(0x1013400e, 0x2)     jged(0x10134019, 0x9);              /* jge 0x10134019 */
    II(0x10134010, 0x7)     mov(memd_a32(ss, ebp - 0xc), 0);    /* mov dword [ebp-0xc], 0x0 */
    II(0x10134017, 0x2)     jmpd(0x10134032, 0x19);             /* jmp 0x10134032 */
l_0x10134019:
    II(0x10134019, 0x5)     mov(ecx, 0xb6e);                    /* mov ecx, 0xb6e */                             // __LINE__ ?
    II(0x1013401e, 0x5)     mov(ebx, 0x101a89a4);               /* mov ebx, 0x101a89a4 */ /* "resrcmgr.cpp" */
    II(0x10134023, 0x5)     mov(edx, 0x101a89b1);               /* mov edx, 0x101a89b1 */ /* "DIRnameID < END_MEMORY_RESOURCES" */
    II(0x10134028, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1013402a, 0x5)     calld(sys_assert, 0x31d63);            /* call 0x10165d92 */
    II(0x1013402f, 0x3)     mov(memd_a32(ss, ebp - 0xc), eax);  /* mov [ebp-0xc], eax */
l_0x10134032:
    II(0x10134032, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134036, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x10134039, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x1013403e, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134040, 0x3)     mov(ax, memw_a32(ds, eax));         /* mov ax, [eax] */
    II(0x10134043, 0x3)     mov(memd_a32(ss, ebp - 0x10), eax); /* mov [ebp-0x10], eax */                         // index in ptr_arr_meta
    II(0x10134046, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x1013404a, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x1013404d, 0x2)     jnzd(0x1013405b, 0xc);              /* jnz 0x1013405b */
    II(0x1013404f, 0x7)     mov(memd_a32(ss, ebp - 0x8), 0);    /* mov dword [ebp-0x8], 0x0 */
    II(0x10134056, 0x5)     jmpd(0x1013414b, 0xf0);             /* jmp 0x1013414b */                              // return 0; - fail
l_0x1013405b:
    II(0x1013405b, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013405f, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x10134062, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134067, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134069, 0x3)     mov(eax, memd_a32(ds, eax + 0x2));  /* mov eax, [eax+0x2] */
    II(0x1013406c, 0x3)     mov(memd_a32(ss, ebp - 0x14), eax); /* mov [ebp-0x14], eax */
    II(0x1013406f, 0x4)     cmp(memd_a32(ss, ebp - 0x14), 0);   /* cmp dword [ebp-0x14], 0x0 */
    II(0x10134073, 0x6)     jnzd(0x10134145, 0xcc);             /* jnz dword 0x10134145 */                        // if already readed - return it,
    II(0x10134079, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013407d, 0x3)     imul(eax, eax, 0x7);                /* imul eax, eax, 0x7 */
    II(0x10134080, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta_by_id)); /* mov edx, [0x101c70ec] */
    II(0x10134086, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134088, 0x3)     mov(al, memb_a32(ds, eax + 0x6));   /* mov al, [eax+0x6] */
    II(0x1013408b, 0x3)     mov(memb_a32(ss, ebp - 0x18), al);  /* mov [ebp-0x18], al */                          // index in arr_res_file
    II(0x1013408e, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */
    II(0x10134090, 0x4)     movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x10134094, 0x3)     shl(edx, 0x4);                      /* shl edx, 0x4 */
    II(0x10134097, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta)); /* mov eax, [0x101c70f0] */
    II(0x1013409c, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x1013409e, 0x3)     mov(edx, memd_a32(ds, edx + 0x8));  /* mov edx, [edx+0x8] */
    II(0x101340a1, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x101340a3, 0x3)     mov(al, memb_a32(ss, ebp - 0x18));  /* mov al, [ebp-0x18] */
    II(0x101340a6, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x101340a9, 0x6)     mov(eax, memd_a32(ds, eax + arr_res_file)); /* mov eax, [eax+0x101c70d0] */
    II(0x101340af, 0x5)     calld(my_fseek, -0x44c5f);            /* call 0x100ef455 */
    II(0x101340b4, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x101340b8, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x101340bb, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x101340c1, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x101340c3, 0x3)     mov(eax, memd_a32(ds, eax + 0xc));  /* mov eax, [eax+0xc] */
    II(0x101340c6, 0x5)     calld(sys_malloc_v2_ref, 0x31f45);    /* call 0x10166010 */
    II(0x101340cb, 0x3)     mov(memd_a32(ss, ebp - 0x14), eax); /* mov [ebp-0x14], eax */
    II(0x101340ce, 0x4)     cmp(memd_a32(ss, ebp - 0x14), 0);   /* cmp dword [ebp-0x14], 0x0 */
    II(0x101340d2, 0x2)     jnzd(0x101340de, 0xa);              /* jnz 0x101340de */
       II(0x101340d4, 0x5)     mov(eax, 0x3);                      /* mov eax, 0x3 */
       II(0x101340d9, 0x5)     calld(0x100ef3a0, -0x44d3e);        /* call 0x100ef3a0 */
l_0x101340de:
    II(0x101340de, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x101340e0, 0x3)     mov(al, memb_a32(ss, ebp - 0x18));  /* mov al, [ebp-0x18] */
    II(0x101340e3, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x101340e6, 0x6)     mov(ecx, memd_a32(ds, eax + arr_res_file)); /* mov ecx, [eax+0x101c70d0] */
    II(0x101340ec, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x101340f1, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x101340f5, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x101340f8, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x101340fe, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134100, 0x3)     mov(edx, memd_a32(ds, eax + 0xc));  /* mov edx, [eax+0xc] */
    II(0x10134103, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */
    II(0x10134106, 0x5)     calld(my_fread, -0x44c7c);           /* call 0x100ef48f */
    II(0x1013410b, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1013410d, 0x2)     jnzd(0x10134119, 0xa);              /* jnz 0x10134119 */
       II(0x1013410f, 0x5)     mov(eax, 0x7);                      /* mov eax, 0x7 */
       II(0x10134114, 0x5)     calld(0x100ef3a0, -0x44d79);        /* call 0x100ef3a0 */
l_0x10134119:
    II(0x10134119, 0x4)     movsx(edx, memw_a32(ss, ebp - 0x4)); /* movsx edx, word [ebp-0x4] */
    II(0x1013411d, 0x3)     imul(edx, edx, 0x7);                /* imul edx, edx, 0x7 */
    II(0x10134120, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134125, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134127, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */
    II(0x1013412a, 0x3)     mov(memd_a32(ds, edx + 0x2), eax);  /* mov [edx+0x2], eax */
    II(0x1013412d, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x10134131, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x10134134, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x1013413a, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x1013413c, 0x3)     mov(eax, memd_a32(ds, eax + 0xc));  /* mov eax, [eax+0xc] */
    II(0x1013413f, 0x6)     add(memd_a32(ds, 0x101c70dc), eax); /* add [0x101c70dc], eax */                         // total bytes allocated with malloc of  data  associated with meta?
l_0x10134145:
    II(0x10134145, 0x3)     mov(eax, memd_a32(ss, ebp - 0x14)); /* mov eax, [ebp-0x14] */
    II(0x10134148, 0x3)     mov(memd_a32(ss, ebp - 0x8), eax);  /* mov [ebp-0x8], eax */
l_0x1013414b:
    II(0x1013414b, 0x3)     mov(eax, memd_a32(ss, ebp - 0x8));  /* mov eax, [ebp-0x8] */
    II(0x1013414e, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10134150, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10134151, 0x1)     popd(edi);                          /* pop edi */
    II(0x10134152, 0x1)     popd(esi);                          /* pop esi */
    II(0x10134153, 0x1)     popd(edx);                          /* pop edx */
    II(0x10134154, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x10134155, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x10134156, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(get_res_data_by_id_malloc, 0x68a2bba9f3387985, 0x20, {0x68, 0x34, 0, 0, 0, 0xe8, 0x5d, 0x1b, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x83, 0xf8, 0xff, 0x75, 0xc, 0xc7, 0x45, 0xf0, 0, 0, 0, 0, 0xe9, 0x17, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x3d, 0x8e, 0x3, 0, 0, 0x7e, 0x9, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0xac, 0xb, 0, 0, 0xbb, 0xd2, 0x89, 0x1a, 0x10, 0xba, 0xdf, 0x89, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0x4d, 0x1b, 0x3, 0, 0x89, 0x45, 0xec, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x66, 0x8b, 0, 0x89, 0x45, 0xf4, 0xf, 0xbf, 0x45, 0xf4, 0x83, 0xf8, 0xff, 0x75, 0xc, 0xc7, 0x45, 0xf0, 0, 0, 0, 0, 0xe9, 0xc1, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x7, 0x8b, 0x15, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8a, 0x40, 0x6, 0x88, 0x45, 0xf8, 0x31, 0xdb, 0xf, 0xbf, 0x55, 0xf4, 0xc1, 0xe2, 0x4, 0xa1, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8b, 0x52, 0x8, 0x31, 0xc0, 0x8a, 0x45, 0xf8, 0xc1, 0xe0, 0x2, 0x8b, 0x80, 0xd0, 0x70, 0x1c, 0x10, 0xe8, 0xa9, 0xb1, 0xfb, 0xff, 0xf, 0xbf, 0x45, 0xf4, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x40, 0xc, 0x40, 0xe8, 0x4c, 0x1d, 0x3, 0, 0x89, 0x45, 0xe8, 0x83, 0x7d, 0xe8, 0, 0x75, 0xa, 0xb8, 0x3, 0, 0, 0, 0xe8, 0xc9, 0xb0, 0xfb, 0xff, 0x31, 0xc0, 0x8a, 0x45, 0xf8, 0xc1, 0xe0, 0x2, 0x8b, 0x88, 0xd0, 0x70, 0x1c, 0x10, 0xbb, 0x1, 0, 0, 0, 0xf, 0xbf, 0x45, 0xf4, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x50, 0xc, 0x8b, 0x45, 0xe8, 0xe8, 0x8b, 0xb1, 0xfb, 0xff, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0x7, 0, 0, 0, 0xe8, 0x8e, 0xb0, 0xfb, 0xff, 0xf, 0xbf, 0x45, 0xf4, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x55, 0xe8, 0x3, 0x50, 0xc, 0x89, 0xd0, 0xc6, 0, 0, 0x8b, 0x45, 0xe8, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(get_res_data_by_id_malloc, 0x20);  // как get_res_data_by_id, только возвращает результат в malloc, который потом надо free.    input  eax - s16 - id    output  eax - ptr of string placed in malloc.
    II(get_res_data_by_id_malloc, 0x5) pushd(0x34);             /* push dword 0x34 */
    II(0x101341f0, 0x5)     calld(sys_check_available_stack_size, 0x31b5d); /* call 0x10165d52 */
    II(0x101341f5, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x101341f6, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x101341f7, 0x1)     pushd(edx);                         /* push edx */
    II(0x101341f8, 0x1)     pushd(esi);                         /* push esi */
    II(0x101341f9, 0x1)     pushd(edi);                         /* push edi */
    II(0x101341fa, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x101341fb, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x101341fd, 0x6)     sub(esp, 0x18);                     /* sub esp, 0x18 */
    II(0x10134203, 0x3)     mov(memd_a32(ss, ebp - 0x4), eax);  /* mov [ebp-0x4], eax */
    II(0x10134206, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013420a, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x1013420d, 0x2)     jnzd(0x1013421b, 0xc);              /* jnz 0x1013421b */
       II(0x1013420f, 0x7)     mov(memd_a32(ss, ebp - 0x10), 0);   /* mov dword [ebp-0x10], 0x0 */            // return NULL;
       II(0x10134216, 0x5)     jmpd(0x10134332, 0x117);            /* jmp 0x10134332 */
l_0x1013421b:
    II(0x1013421b, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013421f, 0x5)     cmp(eax, 0x38e);                    /* cmp eax, 0x38e */
    II(0x10134224, 0x2)     jled(0x1013422f, 0x9);              /* jle 0x1013422f */
    II(0x10134226, 0x7)     mov(memd_a32(ss, ebp - 0x14), 0);   /* mov dword [ebp-0x14], 0x0 */
    II(0x1013422d, 0x2)     jmpd(0x10134248, 0x19);             /* jmp 0x10134248 */
l_0x1013422f:
    II(0x1013422f, 0x5)     mov(ecx, 0xbac);                    /* mov ecx, 0xbac */
    II(0x10134234, 0x5)     mov(ebx, 0x101a89d2);               /* mov ebx, 0x101a89d2 */ /* "resrcmgr.cpp" */
    II(0x10134239, 0x5)     mov(edx, 0x101a89df);               /* mov edx, 0x101a89df */ /* "id > END_MEMORY_RESOURCES" */
    II(0x1013423e, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x10134240, 0x5)     calld(sys_assert, 0x31b4d);            /* call 0x10165d92 */
    II(0x10134245, 0x3)     mov(memd_a32(ss, ebp - 0x14), eax); /* mov [ebp-0x14], eax */
l_0x10134248:
    II(0x10134248, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013424c, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x1013424f, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134254, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134256, 0x3)     mov(ax, memw_a32(ds, eax));         /* mov ax, [eax] */
    II(0x10134259, 0x3)     mov(memd_a32(ss, ebp - 0xc), eax);  /* mov [ebp-0xc], eax */                       // index in (*ptr_arr_meta)
    II(0x1013425c, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134260, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x10134263, 0x2)     jnzd(0x10134271, 0xc);              /* jnz 0x10134271 */
       II(0x10134265, 0x7)     mov(memd_a32(ss, ebp - 0x10), 0);   /* mov dword [ebp-0x10], 0x0 */
       II(0x1013426c, 0x5)     jmpd(0x10134332, 0xc1);             /* jmp 0x10134332 */
l_0x10134271:
    II(0x10134271, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134275, 0x3)     imul(eax, eax, 0x7);                /* imul eax, eax, 0x7 */
    II(0x10134278, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta_by_id)); /* mov edx, [0x101c70ec] */
    II(0x1013427e, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134280, 0x3)     mov(al, memb_a32(ds, eax + 0x6));   /* mov al, [eax+0x6] */
    II(0x10134283, 0x3)     mov(memb_a32(ss, ebp - 0x8), al);   /* mov [ebp-0x8], al */                      // index of FILE* in array start at arr_res_file.
    II(0x10134286, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */                           // SEEK_SET
    II(0x10134288, 0x4)     movsx(edx, memw_a32(ss, ebp - 0xc)); /* movsx edx, word [ebp-0xc] */
    II(0x1013428c, 0x3)     shl(edx, 0x4);                      /* shl edx, 0x4 */
    II(0x1013428f, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta)); /* mov eax, [0x101c70f0] */
    II(0x10134294, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134296, 0x3)     mov(edx, memd_a32(ds, edx + 0x8));  /* mov edx, [edx+0x8] */                     // offset from arr_meta
    II(0x10134299, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1013429b, 0x3)     mov(al, memb_a32(ss, ebp - 0x8));   /* mov al, [ebp-0x8] */
    II(0x1013429e, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x101342a1, 0x6)     mov(eax, memd_a32(ds, eax + arr_res_file)); /* mov eax, [eax+0x101c70d0] */      // FILE *
    II(0x101342a7, 0x5)     calld(my_fseek, -0x44e57);            /* call 0x100ef455 */
    II(0x101342ac, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x101342b0, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x101342b3, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x101342b9, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x101342bb, 0x3)     mov(eax, memd_a32(ds, eax + 0xc));  /* mov eax, [eax+0xc] */                     // size of data  (которые на самом деле являются строкой)
    II(0x101342be, 0x1)     inc(eax);                           /* inc eax */                                // space for term sym '\0'
    II(0x101342bf, 0x5)     calld(sys_malloc_v2_ref, 0x31d4c);    /* call 0x10166010 */
    II(0x101342c4, 0x3)     mov(memd_a32(ss, ebp - 0x18), eax); /* mov [ebp-0x18], eax */
    II(0x101342c7, 0x4)     cmp(memd_a32(ss, ebp - 0x18), 0);   /* cmp dword [ebp-0x18], 0x0 */
    II(0x101342cb, 0x2)     jnzd(0x101342d7, 0xa);              /* jnz 0x101342d7 */
    II(0x101342cd, 0x5)     mov(eax, 0x3);                      /* mov eax, 0x3 */
    II(0x101342d2, 0x5)     calld(0x100ef3a0, -0x44f37);        /* call 0x100ef3a0 */
l_0x101342d7:
    II(0x101342d7, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x101342d9, 0x3)     mov(al, memb_a32(ss, ebp - 0x8));   /* mov al, [ebp-0x8] */
    II(0x101342dc, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x101342df, 0x6)     mov(ecx, memd_a32(ds, eax + arr_res_file)); /* mov ecx, [eax+0x101c70d0] */
    II(0x101342e5, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x101342ea, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x101342ee, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x101342f1, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x101342f7, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x101342f9, 0x3)     mov(edx, memd_a32(ds, eax + 0xc));  /* mov edx, [eax+0xc] */
    II(0x101342fc, 0x3)     mov(eax, memd_a32(ss, ebp - 0x18)); /* mov eax, [ebp-0x18] */
    II(0x101342ff, 0x5)     calld(my_fread, -0x44e75);           /* call 0x100ef48f */
    II(0x10134304, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10134306, 0x2)     jnzd(0x10134312, 0xa);              /* jnz 0x10134312 */
    II(0x10134308, 0x5)     mov(eax, 0x7);                      /* mov eax, 0x7 */
    II(0x1013430d, 0x5)     calld(0x100ef3a0, -0x44f72);        /* call 0x100ef3a0 */
l_0x10134312:
    II(0x10134312, 0x4)     movsx(eax, memw_a32(ss, ebp - 0xc)); /* movsx eax, word [ebp-0xc] */
    II(0x10134316, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x10134319, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x1013431f, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134321, 0x3)     mov(edx, memd_a32(ss, ebp - 0x18)); /* mov edx, [ebp-0x18] */
    II(0x10134324, 0x3)     add(edx, memd_a32(ds, eax + 0xc));  /* add edx, [eax+0xc] */
    II(0x10134327, 0x2)     mov(eax, edx);                      /* mov eax, edx */                         // eax - at end '\0 in malloc.
    II(0x10134329, 0x3)     mov(memb_a32(ds, eax), 0);          /* mov byte [eax], 0x0 */                  // force terminate string.
    II(0x1013432c, 0x3)     mov(eax, memd_a32(ss, ebp - 0x18)); /* mov eax, [ebp-0x18] */
    II(0x1013432f, 0x3)     mov(memd_a32(ss, ebp - 0x10), eax); /* mov [ebp-0x10], eax */
l_0x10134332:
    II(0x10134332, 0x3)     mov(eax, memd_a32(ss, ebp - 0x10)); /* mov eax, [ebp-0x10] */
    II(0x10134335, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10134337, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10134338, 0x1)     popd(edi);                          /* pop edi */
    II(0x10134339, 0x1)     popd(esi);                          /* pop esi */
    II(0x1013433a, 0x1)     popd(edx);                          /* pop edx */
    II(0x1013433b, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x1013433c, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x1013433d, 0x1)     retd();                             /* ret  */                                  // see &memb_a32(ds,eax)
}

FUNC_INFO_V3(0x101345c2, 0x7d3fe57bb78eb890, 0x20, {0x68, 0x2c, 0, 0, 0, 0xe8, 0x86, 0x17, 0x3, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x14, 0, 0, 0, 0x89, 0x45, 0xfc, 0x89, 0x55, 0xf8, 0xf, 0xbf, 0x45, 0xfc, 0x83, 0xf8, 0xff, 0x75, 0x9, 0xc6, 0x45, 0xf0, 0, 0xe9, 0x90, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x66, 0x8b, 0, 0x89, 0x45, 0xec, 0xf, 0xbf, 0x45, 0xec, 0x83, 0xf8, 0xff, 0x75, 0x6, 0xc6, 0x45, 0xf0, 0, 0xeb, 0x6d, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8a, 0x40, 0x6, 0x88, 0x45, 0xf4, 0x31, 0xdb, 0xf, 0xbf, 0x45, 0xec, 0xc1, 0xe0, 0x4, 0x8b, 0x15, 0xf0, 0x70, 0x1c, 0x10, 0x1, 0xc2, 0x8b, 0x52, 0x8, 0x31, 0xc0, 0x8a, 0x45, 0xf4, 0xc1, 0xe0, 0x2, 0x8b, 0x80, 0xd0, 0x70, 0x1c, 0x10, 0xe8, 0x6, 0xae, 0xfb, 0xff, 0x31, 0xc0, 0x8a, 0x45, 0xf4, 0xc1, 0xe0, 0x2, 0x8b, 0x88, 0xd0, 0x70, 0x1c, 0x10, 0xbb, 0x1, 0, 0, 0, 0xba, 0x9, 0x3, 0, 0, 0x8b, 0x45, 0xf8, 0xe8, 0x20, 0xae, 0xfb, 0xff, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0x7, 0, 0, 0, 0xe8, 0x23, 0xad, 0xfb, 0xff, 0xc6, 0x45, 0xf0, 0x1, 0x8a, 0x45, 0xf0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(0x101345c2, 0x20);
    II(0x101345c2, 0x5)     pushd(0x2c);                        /* push dword 0x2c */
    II(0x101345c7, 0x5)     calld(sys_check_available_stack_size, 0x31786); /* call 0x10165d52 */
    II(0x101345cc, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x101345cd, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x101345ce, 0x1)     pushd(esi);                         /* push esi */
    II(0x101345cf, 0x1)     pushd(edi);                         /* push edi */
    II(0x101345d0, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x101345d1, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x101345d3, 0x6)     sub(esp, 0x14);                     /* sub esp, 0x14 */
    II(0x101345d9, 0x3)     mov(memd_a32(ss, ebp - 0x4), eax);  /* mov [ebp-0x4], eax */
    II(0x101345dc, 0x3)     mov(memd_a32(ss, ebp - 0x8), edx);  /* mov [ebp-0x8], edx */                  // ptr of buf to read size 0x309
    II(0x101345df, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x101345e3, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x101345e6, 0x2)     jnzd(0x101345f1, 0x9);              /* jnz 0x101345f1 */
    II(0x101345e8, 0x4)     mov(memb_a32(ss, ebp - 0x10), 0);   /* mov byte [ebp-0x10], 0x0 */
    II(0x101345ec, 0x5)     jmpd(0x10134681, 0x90);             /* jmp 0x10134681 */
l_0x101345f1:
    II(0x101345f1, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x101345f5, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x101345f8, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x101345fd, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x101345ff, 0x3)     mov(ax, memw_a32(ds, eax));         /* mov ax, [eax] */
    II(0x10134602, 0x3)     mov(memd_a32(ss, ebp - 0x14), eax); /* mov [ebp-0x14], eax */
    II(0x10134605, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x10134609, 0x3)     cmp(eax, -0x1 /* 0xff */);          /* cmp eax, 0xff */
    II(0x1013460c, 0x2)     jnzd(0x10134614, 0x6);              /* jnz 0x10134614 */
    II(0x1013460e, 0x4)     mov(memb_a32(ss, ebp - 0x10), 0);   /* mov byte [ebp-0x10], 0x0 */
    II(0x10134612, 0x2)     jmpd(0x10134681, 0x6d);             /* jmp 0x10134681 */
l_0x10134614:
    II(0x10134614, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134618, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x1013461b, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */          // array of  7 byte item
    II(0x10134620, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134622, 0x3)     mov(al, memb_a32(ds, eax + 0x6));   /* mov al, [eax+0x6] */
    II(0x10134625, 0x3)     mov(memb_a32(ss, ebp - 0xc), al);   /* mov [ebp-0xc], al */                      // index in FILE * arr[];
    II(0x10134628, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */
    II(0x1013462a, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x1013462e, 0x3)     shl(eax, 0x4);                      /* shl eax, 0x4 */
    II(0x10134631, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta)); /* mov edx, [0x101c70f0] */
    II(0x10134637, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x10134639, 0x3)     mov(edx, memd_a32(ds, edx + 0x8));  /* mov edx, [edx+0x8] */
    II(0x1013463c, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1013463e, 0x3)     mov(al, memb_a32(ss, ebp - 0xc));   /* mov al, [ebp-0xc] */                       // index in FILE * arr[];
    II(0x10134641, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x10134644, 0x6)     mov(eax, memd_a32(ds, eax + arr_res_file)); /* mov eax, [eax+0x101c70d0] */
    II(0x1013464a, 0x5)     calld(my_fseek, -0x451fa);            /* call 0x100ef455 */
    II(0x1013464f, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x10134651, 0x3)     mov(al, memb_a32(ss, ebp - 0xc));   /* mov al, [ebp-0xc] */                       // index in FILE * arr[];
    II(0x10134654, 0x3)     shl(eax, 0x2);                      /* shl eax, 0x2 */
    II(0x10134657, 0x6)     mov(ecx, memd_a32(ds, eax + arr_res_file)); /* mov ecx, [eax+0x101c70d0] */       // FILE *     MAX.RES for example
    II(0x1013465d, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x10134662, 0x5)     mov(edx, 0x309);                    /* mov edx, 0x309 */
    II(0x10134667, 0x3)     mov(eax, memd_a32(ss, ebp - 0x8));  /* mov eax, [ebp-0x8] */
    II(0x1013466a, 0x5)     calld(my_fread, -0x451e0);           /* call 0x100ef48f */
    II(0x1013466f, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x10134671, 0x2)     jnzd(0x1013467d, 0xa);              /* jnz 0x1013467d */
    II(0x10134673, 0x5)     mov(eax, 0x7);                      /* mov eax, 0x7 */
    II(0x10134678, 0x5)     calld(0x100ef3a0, -0x452dd);        /* call 0x100ef3a0 */
l_0x1013467d:
    II(0x1013467d, 0x4)     mov(memb_a32(ss, ebp - 0x10), 0x1); /* mov byte [ebp-0x10], 0x1 */
l_0x10134681:
    II(0x10134681, 0x3)     mov(al, memb_a32(ss, ebp - 0x10));  /* mov al, [ebp-0x10] */
    II(0x10134684, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x10134686, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x10134687, 0x1)     popd(edi);                          /* pop edi */
    II(0x10134688, 0x1)     popd(esi);                          /* pop esi */
    II(0x10134689, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x1013468a, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x1013468b, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x101344d5, 0x39d4aba27b08f3be, 0x20, {0x68, 0x20, 0, 0, 0, 0xe8, 0x73, 0x18, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x4, 0, 0, 0, 0xe8, 0x42, 0x79, 0x3, 0, 0xc7, 0x45, 0xfc, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xfc, 0xff, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x3d, 0x8e, 0x3, 0, 0, 0x7d, 0x42, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xd0, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x83, 0x78, 0x2, 0, 0x74, 0x2c, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x7, 0xa1, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0x8b, 0x40, 0x2, 0xe8, 0x2e, 0x1a, 0x3, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x7, 0x8b, 0x15, 0xec, 0x70, 0x1c, 0x10, 0x1, 0xd0, 0xc7, 0x40, 0x2, 0, 0, 0, 0, 0xeb, 0xad, 0xc7, 0x45, 0xfc, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xfc, 0xff, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x83, 0xf8, 0x5d, 0x7d, 0x35, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x33, 0xc7, 0x80, 0xe7, 0x81, 0x1c, 0x10, 0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x33, 0xc7, 0x80, 0xeb, 0x81, 0x1c, 0x10, 0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x33, 0xc7, 0x80, 0xef, 0x81, 0x1c, 0x10, 0, 0, 0, 0, 0xeb, 0xbc, 0xc7, 0x5, 0xdc, 0x70, 0x1c, 0x10, 0, 0, 0, 0, 0xe8, 0xa0, 0xcc, 0xfe, 0xff, 0xb8, 0x1, 0, 0, 0, 0xe8, 0xe0, 0xc7, 0xfe, 0xff, 0xe8, 0xb, 0x77, 0x3, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3})
{
    FUNC_START_V2(0x101344d5, 0x20);
    II(0x101344d5, 0x5)     pushd(0x20);                        /* push dword 0x20 */
    II(0x101344da, 0x5)     calld(sys_check_available_stack_size, 0x31873); /* call 0x10165d52 */
    II(0x101344df, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x101344e0, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x101344e1, 0x1)     pushd(edx);                         /* push edx */
    II(0x101344e2, 0x1)     pushd(esi);                         /* push esi */
    II(0x101344e3, 0x1)     pushd(edi);                         /* push edi */
    II(0x101344e4, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x101344e5, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x101344e7, 0x6)     sub(esp, 0x4);                      /* sub esp, 0x4 */
    II(0x101344ed, 0x5)     calld(0x1016be34, 0x37942);         /* call 0x1016be34 */
    II(0x101344f2, 0x7)     mov(memd_a32(ss, ebp - 0x4), 0);    /* mov dword [ebp-0x4], 0x0 */          // for (i = 0; i < 0x38e; i++)
    II(0x101344f9, 0x2)     jmpd(0x10134501, 0x6);              /* jmp 0x10134501 */
l_0x101344fb:
    II(0x101344fb, 0x3)     mov(eax, memd_a32(ss, ebp - 0x4));  /* mov eax, [ebp-0x4] */
    II(0x101344fe, 0x3)     inc(memd_a32(ss, ebp - 0x4));       /* inc dword [ebp-0x4] */
l_0x10134501:
    II(0x10134501, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134505, 0x5)     cmp(eax, 0x38e);                    /* cmp eax, 0x38e */
    II(0x1013450a, 0x2)     jged(0x1013454e, 0x42);             /* jge 0x1013454e */
    II(0x1013450c, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134510, 0x3)     imul(edx, eax, 0x7);                /* imul edx, eax, 0x7 */
    II(0x10134513, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x10134518, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x1013451a, 0x4)     cmp(memd_a32(ds, eax + 0x2), 0);    /* cmp dword [eax+0x2], 0x0 */
    II(0x1013451e, 0x2)     jzd(0x1013454c, 0x2c);              /* jz 0x1013454c */
    II(0x10134520, 0x4)     movsx(edx, memw_a32(ss, ebp - 0x4)); /* movsx edx, word [ebp-0x4] */
    II(0x10134524, 0x3)     imul(edx, edx, 0x7);                /* imul edx, edx, 0x7 */
    II(0x10134527, 0x5)     mov(eax, memd_a32(ds, ptr_arr_meta_by_id)); /* mov eax, [0x101c70ec] */
    II(0x1013452c, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x1013452e, 0x3)     mov(eax, memd_a32(ds, eax + 0x2));  /* mov eax, [eax+0x2] */
    II(0x10134531, 0x5)     calld(sys_free_v2, 0x31a2e);             /* call 0x10165f64 */
    II(0x10134536, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013453a, 0x3)     imul(eax, eax, 0x7);                /* imul eax, eax, 0x7 */
    II(0x1013453d, 0x6)     mov(edx, memd_a32(ds, ptr_arr_meta_by_id)); /* mov edx, [0x101c70ec] */
    II(0x10134543, 0x2)     add(eax, edx);                      /* add eax, edx */
    II(0x10134545, 0x7)     mov(memd_a32(ds, eax + 0x2), 0);    /* mov dword [eax+0x2], 0x0 */
l_0x1013454c:
    II(0x1013454c, 0x2)     jmpd(0x101344fb, -0x53);            /* jmp 0x101344fb */                          // } /. for ./

l_0x1013454e:
    II(0x1013454e, 0x7)     mov(memd_a32(ss, ebp - 0x4), 0);    /* mov dword [ebp-0x4], 0x0 */                // for (i = 0; i < 0x5d; i++)
    II(0x10134555, 0x2)     jmpd(0x1013455d, 0x6);              /* jmp 0x1013455d */
l_0x10134557:
    II(0x10134557, 0x3)     mov(eax, memd_a32(ss, ebp - 0x4));  /* mov eax, [ebp-0x4] */
    II(0x1013455a, 0x3)     inc(memd_a32(ss, ebp - 0x4));       /* inc dword [ebp-0x4] */
l_0x1013455d:
    II(0x1013455d, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x10134561, 0x3)     cmp(eax, 0x5d);                     /* cmp eax, 0x5d */
    II(0x10134564, 0x2)     jged(0x1013459b, 0x35);             /* jge 0x1013459b */
    II(0x10134566, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013456a, 0x3)     imul(eax, eax, 0x33);               /* imul eax, eax, 0x33 */
    II(0x1013456d, 0xa)     mov(memd_a32(ds, eax + 0x101c81e7), 0); /* mov dword [eax+0x101c81e7], 0x0 */
    II(0x10134577, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013457b, 0x3)     imul(eax, eax, 0x33);               /* imul eax, eax, 0x33 */
    II(0x1013457e, 0xa)     mov(memd_a32(ds, eax + 0x101c81eb), 0); /* mov dword [eax+0x101c81eb], 0x0 */
    II(0x10134588, 0x4)     movsx(eax, memw_a32(ss, ebp - 0x4)); /* movsx eax, word [ebp-0x4] */
    II(0x1013458c, 0x3)     imul(eax, eax, 0x33);               /* imul eax, eax, 0x33 */
    II(0x1013458f, 0xa)     mov(memd_a32(ds, eax + 0x101c81ef), 0); /* mov dword [eax+0x101c81ef], 0x0 */
    II(0x10134599, 0x2)     jmpd(0x10134557, -0x44);            /* jmp 0x10134557 */                            // } /. for ./
l_0x1013459b:
    II(0x1013459b, 0xa)     mov(memd_a32(ds, 0x101c70dc), 0);   /* mov dword [0x101c70dc], 0x0 */
    II(0x101345a5, 0x5)     calld(0x1012124a, -0x13360);        /* call 0x1012124a */
    II(0x101345aa, 0x5)     mov(eax, 0x1);                      /* mov eax, 0x1 */
    II(0x101345af, 0x5)     calld(0x10120d94, -0x13820);        /* call 0x10120d94 */
    II(0x101345b4, 0x5)     calld(0x1016bcc4, 0x3770b);         /* call 0x1016bcc4 */
    II(0x101345b9, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x101345bb, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x101345bc, 0x1)     popd(edi);                          /* pop edi */
    II(0x101345bd, 0x1)     popd(esi);                          /* pop esi */
    II(0x101345be, 0x1)     popd(edx);                          /* pop edx */
    II(0x101345bf, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x101345c0, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x101345c1, 0x1)     retd();                             /* ret  */
}

} /* namespace raw_program */
