#include "dos/dma.hpp"
#include "x86/instructions.hpp"
#include "program/raw_program.hpp"


namespace raw_program {

using namespace x86;
using namespace dos;

FUNC_INFO_V3(0x1017b2b0, 0xa31f804034505486, 0x20, {0x55, 0x89, 0xe5, 0x53, 0x51, 0x52, 0x56, 0x57, 0x81, 0xec, 0x18, 0x1, 0, 0, 0x89, 0x45, 0xdc, 0x8a, 0x65, 0xdd, 0x31, 0xd2, 0x31, 0xf6, 0x89, 0x55, 0xe4, 0xf6, 0xc4, 0x80, 0x74, 0x14, 0x8b, 0x4d, 0xdc, 0xbb, 0x1, 0, 0, 0, 0x81, 0xe1, 0xff, 0x7f, 0, 0, 0x89, 0x5d, 0xe4, 0x89, 0x4d, 0xdc, 0x8b, 0x7d, 0xdc, 0x81, 0xff, 0x1, 0xf, 0, 0, 0x75, 0x34, 0xb8, 0x1, 0x1, 0, 0, 0xe8, 0xf7, 0x13, 0x1, 0, 0x85, 0xc0, 0xf, 0x84, 0x5b, 0x2, 0, 0, 0xba, 0xd4, 0x3, 0, 0, 0xb0, 0x9, 0xee, 0xba, 0xd5, 0x3, 0, 0, 0xb0, 0x2, 0xee, 0xb8, 0x1, 0x1, 0, 0, 0xbe, 0xa0, 0, 0, 0, 0x89, 0x45, 0xdc, 0xe9, 0xb8, 0, 0, 0, 0x81, 0xff, 0, 0xf, 0, 0, 0x75, 0x42, 0xb8, 0x1, 0x1, 0, 0, 0xe8, 0xbb, 0x13, 0x1, 0, 0x85, 0xc0, 0xf, 0x84, 0x1f, 0x2, 0, 0, 0x6a, 0, 0x6a, 0, 0xb8, 0xa7, 0, 0, 0, 0xba, 0xa4, 0x1, 0, 0, 0x6a, 0, 0xbb, 0x5e, 0x1, 0, 0, 0xb9, 0x72, 0x1, 0, 0, 0x6a, 0, 0xbe, 0x5e, 0x1, 0, 0, 0xbf, 0x1, 0x1, 0, 0, 0xe8, 0xd8, 0xfd, 0xff, 0xff, 0x89, 0x7d, 0xdc, 0xeb, 0x6e, 0x85, 0xff, 0x74, 0x5a, 0x89, 0xf8, 0xe8, 0x78, 0x13, 0x1, 0, 0x85, 0xc0, 0x75, 0x5f, 0x81, 0x7d, 0xdc, 0, 0x1, 0, 0, 0xf, 0x85, 0xd3, 0x1, 0, 0, 0xb8, 0x1, 0x1, 0, 0, 0xe8, 0x5d, 0x13, 0x1, 0, 0x85, 0xc0, 0xf, 0x84, 0xc1, 0x1, 0, 0, 0x6a, 0, 0x6a, 0, 0x6a, 0, 0xb8, 0x63, 0, 0, 0, 0xba, 0xb0, 0x1, 0, 0, 0x6a, 0, 0xbb, 0x90, 0x1, 0, 0, 0xb9, 0x98, 0x1, 0, 0, 0xe8, 0x84, 0xfd, 0xff, 0xff, 0xb9, 0x1, 0x1, 0, 0, 0xbe, 0x90, 0x1, 0, 0, 0x89, 0x4d, 0xdc, 0xeb, 0x10, 0x8d, 0x45, 0xdc, 0xe8, 0x8d, 0x13, 0x1, 0, 0x85, 0xc0, 0xf, 0x84, 0x81, 0x1, 0, 0, 0x8b, 0x45, 0xdc, 0x8d, 0x95, 0xd4, 0xfe, 0xff, 0xff, 0x8d, 0x5d, 0xd8, 0x8d, 0x4d, 0xd4, 0xe8, 0x71, 0x11, 0x1, 0, 0x85, 0xc0, 0xf, 0x84, 0x65, 0x1, 0, 0, 0x8a, 0x85, 0xd6, 0xfe, 0xff, 0xff, 0x24, 0x5, 0x3c, 0x5, 0x75, 0xa, 0x31, 0xc9, 0x8b, 0x7d, 0xd8, 0x89, 0x4d, 0xe8, 0xeb, 0x2a, 0x8a, 0x85, 0xd7, 0xfe, 0xff, 0xff, 0x24, 0x5, 0x3c, 0x5, 0x75, 0xd, 0xbb, 0x1, 0, 0, 0, 0x8b, 0x7d, 0xd4, 0x89, 0x5d, 0xe8, 0xeb, 0x11, 0xb8, 0, 0, 0, 0xa0, 0x31, 0xd2, 0xe8, 0x9e, 0x8f, 0x1, 0, 0x89, 0x55, 0xe8, 0x89, 0xc7, 0xf6, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x2, 0x74, 0x14, 0x31, 0xc9, 0x31, 0xdb, 0x66, 0x8b, 0x8d, 0xe6, 0xfe, 0xff, 0xff, 0x66, 0x8b, 0x9d, 0xe8, 0xfe, 0xff, 0xff, 0xeb, 0x53, 0x8b, 0x45, 0xdc, 0x2d, 0, 0x1, 0, 0, 0x83, 0xf8, 0x7, 0xf, 0x87, 0xf7, 0, 0, 0, 0x2e, 0xff, 0x24, 0x85, 0x90, 0xb2, 0x17, 0x10})
{
    FUNC_START_V2(0x1017b2b0, 0x20);
    II(0x1017b2b0, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x1017b2b1, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x1017b2b3, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x1017b2b4, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x1017b2b5, 0x1)     pushd(edx);                         /* push edx */
    II(0x1017b2b6, 0x1)     pushd(esi);                         /* push esi */
    II(0x1017b2b7, 0x1)     pushd(edi);                         /* push edi */
    II(0x1017b2b8, 0x6)     sub(esp, 0x118);                    /* sub esp, 0x118 */
    II(0x1017b2be, 0x3)     mov(memd_a32(ss, ebp - 0x24), eax); /* mov [ebp-0x24], eax */
    II(0x1017b2c1, 0x3)     mov(ah, memb_a32(ss, ebp - 0x23));  /* mov ah, [ebp-0x23] */
    II(0x1017b2c4, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1017b2c6, 0x2)     xor_(esi, esi);                     /* xor esi, esi */
    II(0x1017b2c8, 0x3)     mov(memd_a32(ss, ebp - 0x1c), edx); /* mov [ebp-0x1c], edx */
    II(0x1017b2cb, 0x3)     test(ah, 0x80);                     /* test ah, 0x80 */
    II(0x1017b2ce, 0x2)     jzd(0x1017b2e4, 0x14);              /* jz 0x1017b2e4 */
    II(0x1017b2d0, 0x3)     mov(ecx, memd_a32(ss, ebp - 0x24)); /* mov ecx, [ebp-0x24] */
    II(0x1017b2d3, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x1017b2d8, 0x6)     and_(ecx, 0x7fff);                  /* and ecx, 0x7fff */
    II(0x1017b2de, 0x3)     mov(memd_a32(ss, ebp - 0x1c), ebx); /* mov [ebp-0x1c], ebx */
    II(0x1017b2e1, 0x3)     mov(memd_a32(ss, ebp - 0x24), ecx); /* mov [ebp-0x24], ecx */
l_0x1017b2e4:
    II(0x1017b2e4, 0x3)     mov(edi, memd_a32(ss, ebp - 0x24)); /* mov edi, [ebp-0x24] */
    II(0x1017b2e7, 0x6)     cmp(edi, 0xf01);                    /* cmp edi, 0xf01 */
    II(0x1017b2ed, 0x2)     jnzd(0x1017b323, 0x34);             /* jnz 0x1017b323 */
    II(0x1017b2ef, 0x5)     mov(eax, 0x101);                    /* mov eax, 0x101 */
    II(0x1017b2f4, 0x5)     calld(0x1018c6f0, 0x113f7);         /* call 0x1018c6f0 */
    II(0x1017b2f9, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b2fb, 0x6)     jzd_func(0x1017b55c, 0x25b);        /* jz dword 0x1017b55c */
    II(0x1017b301, 0x5)     mov(edx, 0x3d4);                    /* mov edx, 0x3d4 */
    II(0x1017b306, 0x2)     mov(al, 0x9);                       /* mov al, 0x9 */
    II(0x1017b308, 0x1)     outb(dx, al);                       /* out dx, al */
    II(0x1017b309, 0x5)     mov(edx, 0x3d5);                    /* mov edx, 0x3d5 */
    II(0x1017b30e, 0x2)     mov(al, 0x2);                       /* mov al, 0x2 */
    II(0x1017b310, 0x1)     outb(dx, al);                       /* out dx, al */
    II(0x1017b311, 0x5)     mov(eax, 0x101);                    /* mov eax, 0x101 */
    II(0x1017b316, 0x5)     mov(esi, 0xa0);                     /* mov esi, 0xa0 */
    II(0x1017b31b, 0x3)     mov(memd_a32(ss, ebp - 0x24), eax); /* mov [ebp-0x24], eax */
    II(0x1017b31e, 0x5)     jmpd(0x1017b3db, 0xb8);             /* jmp 0x1017b3db */
l_0x1017b323:
    II(0x1017b323, 0x6)     cmp(edi, 0xf00);                    /* cmp edi, 0xf00 */
    II(0x1017b329, 0x2)     jnzd(0x1017b36d, 0x42);             /* jnz 0x1017b36d */
    II(0x1017b32b, 0x5)     mov(eax, 0x101);                    /* mov eax, 0x101 */
    II(0x1017b330, 0x5)     calld(0x1018c6f0, 0x113bb);         /* call 0x1018c6f0 */
    II(0x1017b335, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b337, 0x6)     jzd_func(0x1017b55c, 0x21f);        /* jz dword 0x1017b55c */
    II(0x1017b33d, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b33f, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b341, 0x5)     mov(eax, 0xa7);                     /* mov eax, 0xa7 */
    II(0x1017b346, 0x5)     mov(edx, 0x1a4);                    /* mov edx, 0x1a4 */
    II(0x1017b34b, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b34d, 0x5)     mov(ebx, 0x15e);                    /* mov ebx, 0x15e */
    II(0x1017b352, 0x5)     mov(ecx, 0x172);                    /* mov ecx, 0x172 */
    II(0x1017b357, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b359, 0x5)     mov(esi, 0x15e);                    /* mov esi, 0x15e */
    II(0x1017b35e, 0x5)     mov(edi, 0x101);                    /* mov edi, 0x101 */
    II(0x1017b363, 0x5)     calld(0x1017b140, -0x228);          /* call 0x1017b140 */
    II(0x1017b368, 0x3)     mov(memd_a32(ss, ebp - 0x24), edi); /* mov [ebp-0x24], edi */
    II(0x1017b36b, 0x2)     jmpd(0x1017b3db, 0x6e);             /* jmp 0x1017b3db */
l_0x1017b36d:
    II(0x1017b36d, 0x2)     test(edi, edi);                     /* test edi, edi */
    II(0x1017b36f, 0x2)     jzd(0x1017b3cb, 0x5a);              /* jz 0x1017b3cb */
    II(0x1017b371, 0x2)     mov(eax, edi);                      /* mov eax, edi */
    II(0x1017b373, 0x5)     calld(0x1018c6f0, 0x11378);         /* call 0x1018c6f0 */
    II(0x1017b378, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b37a, 0x2)     jnzd(0x1017b3db, 0x5f);             /* jnz 0x1017b3db */
    II(0x1017b37c, 0x7)     cmp(memd_a32(ss, ebp - 0x24), 0x100); /* cmp dword [ebp-0x24], 0x100 */
    II(0x1017b383, 0x6)     jnzd_func(0x1017b55c, 0x1d3);       /* jnz dword 0x1017b55c */
    II(0x1017b389, 0x5)     mov(eax, 0x101);                    /* mov eax, 0x101 */
    II(0x1017b38e, 0x5)     calld(0x1018c6f0, 0x1135d);         /* call 0x1018c6f0 */
    II(0x1017b393, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b395, 0x6)     jzd_func(0x1017b55c, 0x1c1);        /* jz dword 0x1017b55c */
    II(0x1017b39b, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b39d, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b39f, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b3a1, 0x5)     mov(eax, 0x63);                     /* mov eax, 0x63 */
    II(0x1017b3a6, 0x5)     mov(edx, 0x1b0);                    /* mov edx, 0x1b0 */
    II(0x1017b3ab, 0x2)     pushd(0);                           /* push 0x0 */
    II(0x1017b3ad, 0x5)     mov(ebx, 0x190);                    /* mov ebx, 0x190 */
    II(0x1017b3b2, 0x5)     mov(ecx, 0x198);                    /* mov ecx, 0x198 */
    II(0x1017b3b7, 0x5)     calld(0x1017b140, -0x27c);          /* call 0x1017b140 */
    II(0x1017b3bc, 0x5)     mov(ecx, 0x101);                    /* mov ecx, 0x101 */
    II(0x1017b3c1, 0x5)     mov(esi, 0x190);                    /* mov esi, 0x190 */
    II(0x1017b3c6, 0x3)     mov(memd_a32(ss, ebp - 0x24), ecx); /* mov [ebp-0x24], ecx */
    II(0x1017b3c9, 0x2)     jmpd(0x1017b3db, 0x10);             /* jmp 0x1017b3db */
l_0x1017b3cb:
    II(0x1017b3cb, 0x3)     lea(eax, ebp - 0x24);               /* lea eax, [ebp-0x24] */
    II(0x1017b3ce, 0x5)     calld(0x1018c760, 0x1138d);         /* call 0x1018c760 */
    II(0x1017b3d3, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b3d5, 0x6)     jzd_func(0x1017b55c, 0x181);        /* jz dword 0x1017b55c */
l_0x1017b3db:
    II(0x1017b3db, 0x3)     mov(eax, memd_a32(ss, ebp - 0x24)); /* mov eax, [ebp-0x24] */
    II(0x1017b3de, 0x6)     lea(edx, ebp - 0x12c);              /* lea edx, [ebp+0xfffffed4] */
    II(0x1017b3e4, 0x3)     lea(ebx, ebp - 0x28);               /* lea ebx, [ebp-0x28] */
    II(0x1017b3e7, 0x3)     lea(ecx, ebp - 0x2c);               /* lea ecx, [ebp-0x2c] */
    II(0x1017b3ea, 0x5)     calld(0x1018c560, 0x11171);         /* call 0x1018c560 */     // Уход в прерывание в конечном случае.
    II(0x1017b3ef, 0x2)     test(eax, eax);                     /* test eax, eax */
    II(0x1017b3f1, 0x6)     jzd_func(0x1017b55c, 0x165);        /* jz dword 0x1017b55c */
    II(0x1017b3f7, 0x6)     mov(al, memb_a32(ss, ebp - 0x12a)); /* mov al, [ebp+0xfffffed6] */
    II(0x1017b3fd, 0x2)     and_(al, 0x5);                      /* and al, 0x5 */
    II(0x1017b3ff, 0x2)     cmp(al, 0x5);                       /* cmp al, 0x5 */
    II(0x1017b401, 0x2)     jnzd(0x1017b40d, 0xa);              /* jnz 0x1017b40d */
    II(0x1017b403, 0x2)     xor_(ecx, ecx);                     /* xor ecx, ecx */
    II(0x1017b405, 0x3)     mov(edi, memd_a32(ss, ebp - 0x28)); /* mov edi, [ebp-0x28] */
    II(0x1017b408, 0x3)     mov(memd_a32(ss, ebp - 0x18), ecx); /* mov [ebp-0x18], ecx */
    II(0x1017b40b, 0x2)     jmpd(0x1017b437, 0x2a);             /* jmp 0x1017b437 */
l_0x1017b40d:
    II(0x1017b40d, 0x6)     mov(al, memb_a32(ss, ebp - 0x129)); /* mov al, [ebp+0xfffffed7] */
    II(0x1017b413, 0x2)     and_(al, 0x5);                      /* and al, 0x5 */
    II(0x1017b415, 0x2)     cmp(al, 0x5);                       /* cmp al, 0x5 */
    II(0x1017b417, 0x2)     jnzd(0x1017b426, 0xd);              /* jnz 0x1017b426 */
    II(0x1017b419, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
    II(0x1017b41e, 0x3)     mov(edi, memd_a32(ss, ebp - 0x2c)); /* mov edi, [ebp-0x2c] */
    II(0x1017b421, 0x3)     mov(memd_a32(ss, ebp - 0x18), ebx); /* mov [ebp-0x18], ebx */
    II(0x1017b424, 0x2)     jmpd(0x1017b437, 0x11);             /* jmp 0x1017b437 */
l_0x1017b426:
    II(0x1017b426, 0x5)     mov(eax, 0xa0000000);               /* mov eax, 0xa0000000 */
    II(0x1017b42b, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1017b42d, 0x5)     calld(0x101943d0, 0x18f9e);         /* call 0x101943d0 */
    II(0x1017b432, 0x3)     mov(memd_a32(ss, ebp - 0x18), edx); /* mov [ebp-0x18], edx */
    II(0x1017b435, 0x2)     mov(edi, eax);                      /* mov edi, eax */
l_0x1017b437:
    II(0x1017b437, 0x7)     test(memb_a32(ss, ebp - 0x12c), 0x2); /* test byte [ebp+0xfffffed4], 0x2 */
    II(0x1017b43e, 0x2)     jzd(0x1017b454, 0x14);              /* jz 0x1017b454 */
    II(0x1017b440, 0x2)     xor_(ecx, ecx);                     /* xor ecx, ecx */
    II(0x1017b442, 0x2)     xor_(ebx, ebx);                     /* xor ebx, ebx */
    II(0x1017b444, 0x7)     mov(cx, memw_a32(ss, ebp - 0x11a)); /* mov cx, [ebp+0xfffffee6] */
    II(0x1017b44b, 0x7)     mov(bx, memw_a32(ss, ebp - 0x118)); /* mov bx, [ebp+0xfffffee8] */
    II(0x1017b452, 0x2)     jmpd_func(0x1017b4a7, 0x53);        /* jmp 0x1017b4a7 */
l_0x1017b454:
    II(0x1017b454, 0x3)     mov(eax, memd_a32(ss, ebp - 0x24)); /* mov eax, [ebp-0x24] */      // Возможно, video_mode = 0x101.
    II(0x1017b457, 0x5)     sub(eax, 0x100);                    /* sub eax, 0x100 */
    II(0x1017b45c, 0x3)     cmp(eax, 0x7);                      /* cmp eax, 0x7 */
    II(0x1017b45f, 0x6)     jad_func(0x1017b55c, 0xf7);         /* ja dword 0x1017b55c */
    II(0x1017b465, 0x8)     jmpd_abs(memd_a32(cs, eax * 0x4 + 0x1017b290)); /* jmp dword near [cs:eax*4+0x1017b290] */
}

FUNC_INFO_V3(0x1017b4a7, 0x306c29eec3aadcc3, 0x20, {0x85, 0xf6, 0x74, 0x2, 0x89, 0xf3, 0x83, 0x7d, 0xe4, 0, 0x74, 0x33, 0xba, 0xd4, 0x3, 0, 0, 0xb0, 0x9, 0xee, 0xba, 0xd5, 0x3, 0, 0, 0x29, 0xc0, 0xec, 0x89, 0x45, 0xe0, 0xf6, 0x45, 0xe0, 0x80, 0x75, 0x1a, 0xba, 0xd4, 0x3, 0, 0, 0xb0, 0x9, 0xee, 0x8a, 0x45, 0xe0, 0xc, 0x80, 0xba, 0xd5, 0x3, 0, 0, 0x25, 0xff, 0, 0, 0, 0xee, 0xd1, 0xeb, 0xc7, 0x85, 0xe0, 0xfe, 0xff, 0xff, 0xa8, 0xcd, 0x18, 0x10, 0xf6, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x2, 0x74, 0x17, 0x8a, 0xa5, 0xed, 0xfe, 0xff, 0xff, 0x80, 0xfc, 0xf, 0x74, 0x5, 0x80, 0xfc, 0x10, 0x75, 0x7, 0xb8, 0x1, 0, 0, 0, 0xeb, 0x2, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x8b, 0x95, 0xe0, 0xfe, 0xff, 0xff, 0x66, 0x8b, 0x85, 0xd8, 0xfe, 0xff, 0xff, 0x52, 0xc1, 0xe0, 0xa, 0x50, 0x31, 0xc0, 0x66, 0x8b, 0x85, 0xda, 0xfe, 0xff, 0xff, 0xc1, 0xe0, 0xa, 0x50, 0x57, 0x8b, 0x75, 0xe8, 0x31, 0xc0, 0x56, 0x66, 0x8b, 0x85, 0xe4, 0xfe, 0xff, 0xff, 0x50, 0x53, 0x51, 0xe8, 0xd6, 0xf0, 0xff, 0xff, 0xb8, 0x1, 0, 0, 0, 0x83, 0xc4, 0x24, 0x8d, 0x65, 0xec, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0x5d, 0xc3})
{
    FUNC_START_V2(0x1017b4a7, 0x20);
    II(0x1017b4a7, 0x2)     test(esi, esi);                     /* test esi, esi */
    II(0x1017b4a9, 0x2)     jzd(0x1017b4ad, 0x2);               /* jz 0x1017b4ad */
    II(0x1017b4ab, 0x2)     mov(ebx, esi);                      /* mov ebx, esi */
l_0x1017b4ad:
    II(0x1017b4ad, 0x4)     cmp(memd_a32(ss, ebp - 0x1c), 0);   /* cmp dword [ebp-0x1c], 0x0 */
    II(0x1017b4b1, 0x2)     jzd(0x1017b4e6, 0x33);              /* jz 0x1017b4e6 */
    II(0x1017b4b3, 0x5)     mov(edx, 0x3d4);                    /* mov edx, 0x3d4 */
    II(0x1017b4b8, 0x2)     mov(al, 0x9);                       /* mov al, 0x9 */
    II(0x1017b4ba, 0x1)     outb(dx, al);                       /* out dx, al */
    II(0x1017b4bb, 0x5)     mov(edx, 0x3d5);                    /* mov edx, 0x3d5 */
    II(0x1017b4c0, 0x2)     sub(eax, eax);                      /* sub eax, eax */
    II(0x1017b4c2, 0x1)     inb(al, dx);                        /* in al, dx */
    II(0x1017b4c3, 0x3)     mov(memd_a32(ss, ebp - 0x20), eax); /* mov [ebp-0x20], eax */
    II(0x1017b4c6, 0x4)     test(memb_a32(ss, ebp - 0x20), 0x80); /* test byte [ebp-0x20], 0x80 */
    II(0x1017b4ca, 0x2)     jnzd(0x1017b4e6, 0x1a);             /* jnz 0x1017b4e6 */
    II(0x1017b4cc, 0x5)     mov(edx, 0x3d4);                    /* mov edx, 0x3d4 */
    II(0x1017b4d1, 0x2)     mov(al, 0x9);                       /* mov al, 0x9 */
    II(0x1017b4d3, 0x1)     outb(dx, al);                       /* out dx, al */
    II(0x1017b4d4, 0x3)     mov(al, memb_a32(ss, ebp - 0x20));  /* mov al, [ebp-0x20] */
    II(0x1017b4d7, 0x2)     or_(al, 0x80);                      /* or al, 0x80 */
    II(0x1017b4d9, 0x5)     mov(edx, 0x3d5);                    /* mov edx, 0x3d5 */
    II(0x1017b4de, 0x5)     and_(eax, 0xff);                    /* and eax, 0xff */
    II(0x1017b4e3, 0x1)     outb(dx, al);                       /* out dx, al */
    II(0x1017b4e4, 0x2)     shr(ebx, 0x1);                      /* shr ebx, 1 */
l_0x1017b4e6:
    II(0x1017b4e6, 0xa)     mov(memd_a32(ss, ebp - 0x120), 0x1018cda8); /* mov dword [ebp+0xfffffee0], 0x1018cda8 */
    II(0x1017b4f0, 0x7)     test(memb_a32(ss, ebp - 0x12c), 0x2); /* test byte [ebp+0xfffffed4], 0x2 */
    II(0x1017b4f7, 0x2)     jzd(0x1017b510, 0x17);              /* jz 0x1017b510 */
    II(0x1017b4f9, 0x6)     mov(ah, memb_a32(ss, ebp - 0x113)); /* mov ah, [ebp+0xfffffeed] */
    II(0x1017b4ff, 0x3)     cmp(ah, 0xf);                       /* cmp ah, 0xf */
    II(0x1017b502, 0x2)     jzd(0x1017b509, 0x5);               /* jz 0x1017b509 */
    II(0x1017b504, 0x3)     cmp(ah, 0x10);                      /* cmp ah, 0x10 */
    II(0x1017b507, 0x2)     jnzd(0x1017b510, 0x7);              /* jnz 0x1017b510 */
l_0x1017b509:
    II(0x1017b509, 0x5)     mov(eax, 0x1);                      /* mov eax, 0x1 */
    II(0x1017b50e, 0x2)     jmpd(0x1017b512, 0x2);              /* jmp 0x1017b512 */
l_0x1017b510:
    II(0x1017b510, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
l_0x1017b512:
    II(0x1017b512, 0x1)     pushd(eax);                         /* push eax */
    II(0x1017b513, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1017b515, 0x6)     mov(edx, memd_a32(ss, ebp - 0x120)); /* mov edx, [ebp+0xfffffee0] */
    II(0x1017b51b, 0x7)     mov(ax, memw_a32(ss, ebp - 0x128)); /* mov ax, [ebp+0xfffffed8] */      // 64 - granularity or size
    II(0x1017b522, 0x1)     pushd(edx);                         /* push edx */                      // addr of func switch bank?
    II(0x1017b523, 0x3)     shl(eax, 0xa);                      /* shl eax, 0xa */
    II(0x1017b526, 0x1)     pushd(eax);                         /* push eax */
    II(0x1017b527, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1017b529, 0x7)     mov(ax, memw_a32(ss, ebp - 0x126)); /* mov ax, [ebp+0xfffffeda] */      // 64 - size of granularity
    II(0x1017b530, 0x3)     shl(eax, 0xa);                      /* shl eax, 0xa */                  // 0x10000
    II(0x1017b533, 0x1)     pushd(eax);                         /* push eax */
    II(0x1017b534, 0x1)     pushd(edi);                         /* push edi */
    II(0x1017b535, 0x3)     mov(esi, memd_a32(ss, ebp - 0x18)); /* mov esi, [ebp-0x18] */
    II(0x1017b538, 0x2)     xor_(eax, eax);                     /* xor eax, eax */
    II(0x1017b53a, 0x1)     pushd(esi);                         /* push esi */
    II(0x1017b53b, 0x7)     mov(ax, memw_a32(ss, ebp - 0x11c)); /* mov ax, [ebp+0xfffffee4] */      //  BytesPerScanLine = 640.
    II(0x1017b542, 0x1)     pushd(eax);                         /* push eax */
    II(0x1017b543, 0x1)     pushd(ebx);                         /* push ebx */
    II(0x1017b544, 0x1)     pushd(ecx);                         /* push ecx */
    II(0x1017b545, 0x5)     calld(0x1017a620, -0xf2a);          /* call 0x1017a620 */
    II(0x1017b54a, 0x5)     mov(eax, 0x1);                      /* mov eax, 0x1 */
    II(0x1017b54f, 0x3)     add(esp, 0x24);                     /* add esp, 0x24 */
    II(0x1017b552, 0x3)     lea(esp, ebp - 0x14);               /* lea esp, [ebp-0x14] */
    II(0x1017b555, 0x1)     popd(edi);                          /* pop edi */
    II(0x1017b556, 0x1)     popd(esi);                          /* pop esi */
    II(0x1017b557, 0x1)     popd(edx);                          /* pop edx */
    II(0x1017b558, 0x1)     popd(ecx);                          /* pop ecx */
    II(0x1017b559, 0x1)     popd(ebx);                          /* pop ebx */
    II(0x1017b55a, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x1017b55b, 0x1)     retd();                             /* ret  */
}

FUNC_INFO_V3(0x1017a620, 0x7869a22c99bf6633, 0x20, {0x55, 0x89, 0xe5, 0x8b, 0x4d, 0x8, 0x8b, 0x55, 0xc, 0x8b, 0x45, 0x1c, 0x8b, 0x5d, 0x20, 0x89, 0xd, 0xb4, 0x9c, 0x20, 0x10, 0x89, 0x15, 0xbc, 0x9c, 0x20, 0x10, 0x89, 0xd, 0xb8, 0x9c, 0x20, 0x10, 0x89, 0x15, 0xc0, 0x9c, 0x20, 0x10, 0x8a, 0x15, 0, 0xe2, 0x1b, 0x10, 0x8b, 0x4d, 0x10, 0xf6, 0xc2, 0x4, 0x74, 0x2, 0x1, 0xc9, 0x8b, 0x55, 0x14, 0x89, 0x15, 0xb0, 0x9c, 0x20, 0x10, 0x8b, 0x55, 0x18, 0x89, 0x15, 0xa8, 0x9c, 0x20, 0x10, 0x1, 0xc2, 0xa3, 0xa0, 0x9c, 0x20, 0x10, 0x89, 0x15, 0xac, 0x9c, 0x20, 0x10, 0x8b, 0x55, 0x24, 0x89, 0x1d, 0xa4, 0x9c, 0x20, 0x10, 0x89, 0x15, 0x90, 0x9c, 0x20, 0x10, 0x85, 0xdb, 0x74, 0x8, 0x31, 0xd2, 0xf7, 0xf3, 0x89, 0xc3, 0xeb, 0x5, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8b, 0x45, 0x28, 0x89, 0x15, 0x48, 0xe4, 0x1b, 0x10, 0xa3, 0x94, 0x9c, 0x20, 0x10, 0x89, 0xd, 0x98, 0x9c, 0x20, 0x10, 0x89, 0x1d, 0x9c, 0x9c, 0x20, 0x10, 0x89, 0xec, 0x5d, 0xc3})
{
    FUNC_START_V2(0x1017a620, 0x20);
    II(0x1017a620, 0x1)     pushd(ebp);                         /* push ebp */
    II(0x1017a621, 0x2)     mov(ebp, esp);                      /* mov ebp, esp */
    II(0x1017a623, 0x3)     mov(ecx, memd_a32(ss, ebp + 0x8));  /* mov ecx, [ebp+0x8] */
    II(0x1017a626, 0x3)     mov(edx, memd_a32(ss, ebp + 0xc));  /* mov edx, [ebp+0xc] */
    II(0x1017a629, 0x3)     mov(eax, memd_a32(ss, ebp + 0x1c)); /* mov eax, [ebp+0x1c] */          // 0x10000
    II(0x1017a62c, 0x3)     mov(ebx, memd_a32(ss, ebp + 0x20)); /* mov ebx, [ebp+0x20] */          // 0x10000
    II(0x1017a62f, 0x6)     mov(memd_a32(ds, 0x10209cb4), ecx); /* mov [0x10209cb4], ecx */        // video_width - 640
    II(0x1017a635, 0x6)     mov(memd_a32(ds, 0x10209cbc), edx); /* mov [0x10209cbc], edx */        // 350
    II(0x1017a63b, 0x6)     mov(memd_a32(ds, 0x10209cb8), ecx); /* mov [0x10209cb8], ecx */        // video_width - 640
    II(0x1017a641, 0x6)     mov(memd_a32(ds, 0x10209cc0), edx); /* mov [0x10209cc0], edx */        // 350
    II(0x1017a647, 0x6)     mov(dl, memb_a32(ds, 0x101be200));  /* mov dl, [0x101be200] */
    II(0x1017a64d, 0x3)     mov(ecx, memd_a32(ss, ebp + 0x10)); /* mov ecx, [ebp+0x10] */
    II(0x1017a650, 0x3)     test(dl, 0x4);                      /* test dl, 0x4 */
    II(0x1017a653, 0x2)     jzd(0x1017a657, 0x2);               /* jz 0x1017a657 */
    II(0x1017a655, 0x2)     add(ecx, ecx);                      /* add ecx, ecx */
l_0x1017a657:
    II(0x1017a657, 0x3)     mov(edx, memd_a32(ss, ebp + 0x14)); /* mov edx, [ebp+0x14] */
    II(0x1017a65a, 0x6)     mov(memd_a32(ds, 0x10209cb0), edx); /* mov [0x10209cb0], edx */
    II(0x1017a660, 0x3)     mov(edx, memd_a32(ss, ebp + 0x18)); /* mov edx, [ebp+0x18] */
    II(0x1017a663, 0x6)     mov(memd_a32(ds, video_win_start), edx); /* mov [0x10209ca8], edx */
    II(0x1017a669, 0x2)     add(edx, eax);                      /* add edx, eax */
    II(0x1017a66b, 0x5)     mov(memd_a32(ds, video_win_len), eax); /* mov [0x10209ca0], eax */
    II(0x1017a670, 0x6)     mov(memd_a32(ds, video_win_end), edx); /* mov [0x10209cac], edx */
    II(0x1017a676, 0x3)     mov(edx, memd_a32(ss, ebp + 0x24)); /* mov edx, [ebp+0x24] */
    II(0x1017a679, 0x6)     mov(memd_a32(ds, video_win_granularity), ebx); /* mov [0x10209ca4], ebx */
    II(0x1017a67f, 0x6)     mov(memd_a32(ds, 0x10209c90), edx); /* mov [0x10209c90], edx */              // 0x1018cda8 - addr of func switch bank?
    II(0x1017a685, 0x2)     test(ebx, ebx);                     /* test ebx, ebx */
    II(0x1017a687, 0x2)     jzd(0x1017a691, 0x8);               /* jz 0x1017a691 */
    II(0x1017a689, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1017a68b, 0x2)     div(ebx);                           /* div ebx */
    II(0x1017a68d, 0x2)     mov(ebx, eax);                      /* mov ebx, eax */
    II(0x1017a68f, 0x2)     jmpd(0x1017a696, 0x5);              /* jmp 0x1017a696 */
l_0x1017a691:
    II(0x1017a691, 0x5)     mov(ebx, 0x1);                      /* mov ebx, 0x1 */
l_0x1017a696:
    II(0x1017a696, 0x2)     xor_(edx, edx);                     /* xor edx, edx */
    II(0x1017a698, 0x3)     mov(eax, memd_a32(ss, ebp + 0x28)); /* mov eax, [ebp+0x28] */
    II(0x1017a69b, 0x6)     mov(memd_a32(ds, 0x101be448), edx); /* mov [0x101be448], edx */              // 0
    II(0x1017a6a1, 0x5)     mov(memd_a32(ds, 0x10209c94), eax); /* mov [0x10209c94], eax */              // 0
    II(0x1017a6a6, 0x6)     mov(memd_a32(ds, video_bytes_per_line), ecx); /* mov [0x10209c98], ecx */
    II(0x1017a6ac, 0x6)     mov(memd_a32(ds, video_bank_count_in_win), ebx); /* mov [0x10209c9c], ebx */
    II(0x1017a6b2, 0x2)     mov(esp, ebp);                      /* mov esp, ebp */
    II(0x1017a6b4, 0x1)     popd(ebp);                          /* pop ebp */
    II(0x1017a6b5, 0x1)     retd();                             /* ret  */
}

//FUNC_INFO_V2(0x1017a6c0, func_0x1017a6c0, 0x20, {0x55, 0x89, 0xe5, 0x51, 0x56, 0x57, 0x89, 0xc1, 0x89, 0xd6, 0xa1, 0xd0, 0x9c, 0x20, 0x10, 0x8b, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x31, 0xd2, 0x8d, 0x4, 0x85, 0, 0, 0, 0, 0xf7, 0xf7, 0x83, 0xe8, 0xc, 0x24, 0xf0, 0x83, 0xc0, 0xc, 0x89, 0xc2, 0xc1, 0xea, 0x2, 0xf, 0xaf, 0xfa, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0x29, 0xfa, 0x89, 0x15, 0xc8, 0x9d, 0x20, 0x10, 0x85, 0xc9, 0x7d, 0x21, 0x83, 0x3d, 0xcc, 0x9c, 0x20, 0x10, 0, 0x74, 0xe, 0x89, 0xc2, 0x8b, 0xd, 0xb4, 0x9c, 0x20, 0x10, 0xd1, 0xea, 0x29, 0xd1, 0xeb, 0x8, 0x8b, 0xd, 0xb4, 0x9c, 0x20, 0x10, 0x29, 0xc1, 0xd1, 0xe9, 0x83, 0x3d, 0xcc, 0x9c, 0x20, 0x10, 0, 0x74, 0x2, 0x1, 0xc9, 0x85, 0xf6, 0x7d, 0x29, 0xf6, 0x5, 0, 0xe2, 0x1b, 0x10, 0x4, 0x74, 0x12, 0x8b, 0x15, 0xf0, 0x9c, 0x20, 0x10, 0x8b, 0x35, 0xbc, 0x9c, 0x20, 0x10, 0x1, 0xd2, 0x29, 0xd6, 0xeb, 0xc, 0x8b, 0x35, 0xbc, 0x9c, 0x20, 0x10, 0x2b, 0x35, 0xf0, 0x9c, 0x20, 0x10, 0xd1, 0xee, 0x80, 0x35, 0x8, 0xe2, 0x1b, 0x10, 0x1, 0x8b, 0x15, 0x8, 0xe2, 0x1b, 0x10, 0x80, 0xe1, 0xfc, 0x8b, 0x3c, 0x95, 0xc, 0xe2, 0x1b, 0x10, 0x8a, 0x15, 0, 0xe2, 0x1b, 0x10, 0x1, 0xfe, 0xf6, 0xc2, 0x4, 0x74, 0x2, 0xd1, 0xfe, 0x85, 0xdb, 0x74, 0x3d, 0x53, 0x56, 0x51, 0x8b, 0x1d, 0xd4, 0x9c, 0x20, 0x10, 0x53, 0x8b, 0xd, 0xdc, 0x9c, 0x20, 0x10, 0x51, 0x8b, 0x35, 0xe4, 0x9c, 0x20, 0x10, 0x56, 0x8b, 0x3d, 0xe0, 0x9c, 0x20, 0x10, 0x57, 0xa1, 0xf0, 0x9c, 0x20, 0x10, 0x50, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0x52, 0x8b, 0x1d, 0xc8, 0x9c, 0x20, 0x10, 0x53, 0xe8, 0x10, 0x8c, 0x1, 0, 0x83, 0xc4, 0x28, 0xeb, 0x6c, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x4, 0x74, 0x28, 0x56, 0x51, 0x8b, 0xd, 0xd4, 0x9c, 0x20, 0x10, 0x51, 0x50, 0x8b, 0x35, 0xe4, 0x9c, 0x20, 0x10, 0x56, 0x53, 0x8b, 0x3d, 0xf0, 0x9c, 0x20, 0x10, 0x57, 0xa1, 0xd0, 0x9c, 0x20, 0x10, 0x50, 0x8b, 0x15, 0xc8, 0x9c, 0x20, 0x10, 0x52, 0xeb, 0x32, 0x56, 0x51, 0x8b, 0x1d, 0xd4, 0x9c, 0x20, 0x10, 0x53, 0x8b, 0xd, 0xdc, 0x9c, 0x20, 0x10, 0x51, 0x8b, 0x35, 0xe4, 0x9c, 0x20, 0x10, 0x56, 0x8b, 0x3d, 0xe0, 0x9c, 0x20, 0x10, 0x57, 0xa1, 0xf0, 0x9c, 0x20, 0x10, 0x50, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0x52, 0x8b, 0x1d, 0xc8, 0x9c, 0x20, 0x10, 0x53, 0xff, 0x15, 0x44, 0xe4, 0x1b, 0x10, 0x83, 0xc4, 0x24, 0x8d, 0x65, 0xf4, 0x5f, 0x5e, 0x59, 0x5d, 0xc3})
//void func_0x1017a6c0()
//{
//    FUNC_START_V2(0x1017a6c0, 0x20);
//    II(0x1017a6c0, 0x1)    pushd(ebp);                            /* push ebp */
//    II(0x1017a6c1, 0x2)    mov(ebp, esp);                         /* mov ebp, esp */
//    II(0x1017a6c3, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a6c4, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a6c5, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a6c6, 0x2)    mov(ecx, eax);                         /* mov ecx, eax */
//    II(0x1017a6c8, 0x2)    mov(esi, edx);                         /* mov esi, edx */
//    II(0x1017a6ca, 0x5)    mov(eax, memd_a32(ds, 0x10209cd0));    /* mov eax, [0x10209cd0] */    // 432
//    II(0x1017a6cf, 0x6)    mov(edi, memd_a32(ds, 0x101be204));    /* mov edi, [0x101be204] */    // 3
//    II(0x1017a6d5, 0x2)    xor_(edx, edx);                        /* xor edx, edx */
//    II(0x1017a6d7, 0x7)    lea(eax, eax * 0x4 + 0);               /* lea eax, [eax*4+0x0] */
//    II(0x1017a6de, 0x2)    div(edi);                              /* div edi */                // eax = 576 = (432 * 4) / 3
//    II(0x1017a6e0, 0x3)    sub(eax, 0xc);                         /* sub eax, 0xc */
//    II(0x1017a6e3, 0x2)    and_(al, 0xf0);                        /* and al, 0xf0 */
//    II(0x1017a6e5, 0x3)    add(eax, 0xc);                         /* add eax, 0xc */            // eax = 572
//    II(0x1017a6e8, 0x2)    mov(edx, eax);                         /* mov edx, eax */
//    II(0x1017a6ea, 0x3)    shr(edx, 0x2);                         /* shr edx, 0x2 */
//    II(0x1017a6ed, 0x3)    imul(edi, edx);                        /* imul edi, edx */            // edi = 3 * (572 / 4) = 429
//    II(0x1017a6f0, 0x6)    mov(edx, memd_a32(ds, 0x10209cd0));    /* mov edx, [0x10209cd0] */    // 432
//    II(0x1017a6f6, 0x2)    sub(edx, edi);                         /* sub edx, edi */
//    II(0x1017a6f8, 0x6)    mov(memd_a32(ds, 0x10209dc8), edx);    /* mov [0x10209dc8], edx */  // 3 - кол-во точек которые придётся исключить из линии.
//    II(0x1017a6fe, 0x2)    test(ecx, ecx);                        /* test ecx, ecx */
//    II(0x1017a700, 0x2)    jged(0x1017a723, 0x21);                /* jge 0x1017a723 */
//    II(0x1017a702, 0x7)    cmp(memd_a32(ds, 0x10209ccc), 0);      /* cmp dword [0x10209ccc], 0x0 */
//    II(0x1017a709, 0x2)    jzd(0x1017a719, 0xe);                  /* jz 0x1017a719 */
//    II(0x1017a70b, 0x2)    mov(edx, eax);                         /* mov edx, eax */
//    II(0x1017a70d, 0x6)    mov(ecx, memd_a32(ds, 0x10209cb4));    /* mov ecx, [0x10209cb4] */
//    II(0x1017a713, 0x2)    shr(edx, 0x1);                         /* shr edx, 1 */
//    II(0x1017a715, 0x2)    sub(ecx, edx);                         /* sub ecx, edx */
//    II(0x1017a717, 0x2)    jmpd(0x1017a721, 0x8);                 /* jmp 0x1017a721 */
//l_0x1017a719:
//    II(0x1017a719, 0x6)    mov(ecx, memd_a32(ds, 0x10209cb4));    /* mov ecx, [0x10209cb4] */
//    II(0x1017a71f, 0x2)    sub(ecx, eax);                         /* sub ecx, eax */
//l_0x1017a721:
//    II(0x1017a721, 0x2)    shr(ecx, 0x1);                         /* shr ecx, 1 */
//l_0x1017a723:
//    II(0x1017a723, 0x7)    cmp(memd_a32(ds, 0x10209ccc), 0);      /* cmp dword [0x10209ccc], 0x0 */
//    II(0x1017a72a, 0x2)    jzd(0x1017a72e, 0x2);                  /* jz 0x1017a72e */
//    II(0x1017a72c, 0x2)    add(ecx, ecx);                         /* add ecx, ecx */
//l_0x1017a72e:
//    II(0x1017a72e, 0x2)    test(esi, esi);                        /* test esi, esi */
//    II(0x1017a730, 0x2)    jged(0x1017a75b, 0x29);                /* jge 0x1017a75b */
//    II(0x1017a732, 0x7)    test(memb_a32(ds, 0x101be200), 0x4);   /* test byte [0x101be200], 0x4 */
//    II(0x1017a739, 0x2)    jzd(0x1017a74d, 0x12);                 /* jz 0x1017a74d */
//    II(0x1017a73b, 0x6)    mov(edx, memd_a32(ds, 0x10209cf0));    /* mov edx, [0x10209cf0] */
//    II(0x1017a741, 0x6)    mov(esi, memd_a32(ds, 0x10209cbc));    /* mov esi, [0x10209cbc] */
//    II(0x1017a747, 0x2)    add(edx, edx);                         /* add edx, edx */
//    II(0x1017a749, 0x2)    sub(esi, edx);                         /* sub esi, edx */
//    II(0x1017a74b, 0x2)    jmpd(0x1017a759, 0xc);                 /* jmp 0x1017a759 */
//l_0x1017a74d:
//    II(0x1017a74d, 0x6)    mov(esi, memd_a32(ds, 0x10209cbc));    /* mov esi, [0x10209cbc] */
//    II(0x1017a753, 0x6)    sub(esi, memd_a32(ds, 0x10209cf0));    /* sub esi, [0x10209cf0] */
//l_0x1017a759:
//    II(0x1017a759, 0x2)    shr(esi, 0x1);                         /* shr esi, 1 */
//l_0x1017a75b:
//    II(0x1017a75b, 0x7)    xor_(memb_a32(ds, 0x101be208), 0x1);   /* xor byte [0x101be208], 0x1 */
//    II(0x1017a762, 0x6)    mov(edx, memd_a32(ds, 0x101be208));    /* mov edx, [0x101be208] */
//    II(0x1017a768, 0x3)    and_(cl, 0xfc);                        /* and cl, 0xfc */
//    II(0x1017a76b, 0x7)    mov(edi, memd_a32(ds, edx * 0x4 + 0x101be20c)); /* mov edi, [edx*4+0x101be20c] */
//    II(0x1017a772, 0x6)    mov(dl, memb_a32(ds, 0x101be200));     /* mov dl, [0x101be200] */
//    II(0x1017a778, 0x2)    add(esi, edi);                         /* add esi, edi */
//    II(0x1017a77a, 0x3)    test(dl, 0x4);                         /* test dl, 0x4 */
//    II(0x1017a77d, 0x2)    jzd(0x1017a781, 0x2);                  /* jz 0x1017a781 */
//    II(0x1017a77f, 0x2)    sar(esi, 0x1);                         /* sar esi, 1 */
//l_0x1017a781:
//    II(0x1017a781, 0x2)    test(ebx, ebx);                        /* test ebx, ebx */
//    II(0x1017a783, 0x2)    jzd(0x1017a7c2, 0x3d);                 /* jz 0x1017a7c2 */
//    II(0x1017a785, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a786, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a787, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a788, 0x6)    mov(ebx, memd_a32(ds, 0x10209cd4));    /* mov ebx, [0x10209cd4] */
//    II(0x1017a78e, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a78f, 0x6)    mov(ecx, memd_a32(ds, 0x10209cdc));    /* mov ecx, [0x10209cdc] */
//    II(0x1017a795, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a796, 0x6)    mov(esi, memd_a32(ds, 0x10209ce4));    /* mov esi, [0x10209ce4] */
//    II(0x1017a79c, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a79d, 0x6)    mov(edi, memd_a32(ds, 0x10209ce0));    /* mov edi, [0x10209ce0] */
//    II(0x1017a7a3, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a7a4, 0x5)    mov(eax, memd_a32(ds, 0x10209cf0));    /* mov eax, [0x10209cf0] */
//    II(0x1017a7a9, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a7aa, 0x6)    mov(edx, memd_a32(ds, 0x10209cd0));    /* mov edx, [0x10209cd0] */
//    II(0x1017a7b0, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1017a7b1, 0x6)    mov(ebx, memd_a32(ds, 0x10209cc8));    /* mov ebx, [0x10209cc8] */
//    II(0x1017a7b7, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a7b8, 0x5)    calld(0x101933cd, 0x18c10);            /* call 0x101933cd */
//    II(0x1017a7bd, 0x3)    add(esp, 0x28);                        /* add esp, 0x28 */
//    II(0x1017a7c0, 0x2)    jmpd(0x1017a82e, 0x6c);                /* jmp 0x1017a82e */
//l_0x1017a7c2:
//    II(0x1017a7c2, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x4);    /* cmp dword [0x101be204], 0x4 */
//    II(0x1017a7c9, 0x2)    jzd(0x1017a7f3, 0x28);                 /* jz 0x1017a7f3 */
//    II(0x1017a7cb, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a7cc, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a7cd, 0x6)    mov(ecx, memd_a32(ds, 0x10209cd4));    /* mov ecx, [0x10209cd4] */
//    II(0x1017a7d3, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a7d4, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a7d5, 0x6)    mov(esi, memd_a32(ds, 0x10209ce4));    /* mov esi, [0x10209ce4] */
//    II(0x1017a7db, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a7dc, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a7dd, 0x6)    mov(edi, memd_a32(ds, 0x10209cf0));    /* mov edi, [0x10209cf0] */
//    II(0x1017a7e3, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a7e4, 0x5)    mov(eax, memd_a32(ds, 0x10209cd0));    /* mov eax, [0x10209cd0] */
//    II(0x1017a7e9, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a7ea, 0x6)    mov(edx, memd_a32(ds, 0x10209cc8));    /* mov edx, [0x10209cc8] */
//    II(0x1017a7f0, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1017a7f1, 0x2)    jmpd(0x1017a825, 0x32);                /* jmp 0x1017a825 */
//l_0x1017a7f3:
//    II(0x1017a7f3, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a7f4, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a7f5, 0x6)    mov(ebx, memd_a32(ds, 0x10209cd4));    /* mov ebx, [0x10209cd4] */
//    II(0x1017a7fb, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a7fc, 0x6)    mov(ecx, memd_a32(ds, 0x10209cdc));    /* mov ecx, [0x10209cdc] */
//    II(0x1017a802, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a803, 0x6)    mov(esi, memd_a32(ds, 0x10209ce4));    /* mov esi, [0x10209ce4] */
//    II(0x1017a809, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a80a, 0x6)    mov(edi, memd_a32(ds, 0x10209ce0));    /* mov edi, [0x10209ce0] */
//    II(0x1017a810, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a811, 0x5)    mov(eax, memd_a32(ds, 0x10209cf0));    /* mov eax, [0x10209cf0] */
//    II(0x1017a816, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a817, 0x6)    mov(edx, memd_a32(ds, 0x10209cd0));    /* mov edx, [0x10209cd0] */
//    II(0x1017a81d, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1017a81e, 0x6)    mov(ebx, memd_a32(ds, 0x10209cc8));    /* mov ebx, [0x10209cc8] */
//    II(0x1017a824, 0x1)    pushd(ebx);                            /* push ebx */
//l_0x1017a825:
//    II(0x1017a825, 0x6)    calld_abs(memd_a32(ds, 0x101be444));   /* call dword near [0x101be444] */    // Копирование в видео память.
//    II(0x1017a82b, 0x3)    add(esp, 0x24);                        /* add esp, 0x24 */
//l_0x1017a82e:
//    II(0x1017a82e, 0x3)    lea(esp, ebp - 0xc);                   /* lea esp, [ebp-0xc] */
//    II(0x1017a831, 0x1)    popd(edi);                             /* pop edi */
//    II(0x1017a832, 0x1)    popd(esi);                             /* pop esi */
//    II(0x1017a833, 0x1)    popd(ecx);                             /* pop ecx */
//    II(0x1017a834, 0x1)    popd(ebp);                             /* pop ebp */
//    II(0x1017a835, 0x1)    retd();                                /* ret  */
//}
//
//FUNC_INFO_V2(0x101933cd, func_0x101933cd, 0x20, {0x55, 0x8b, 0xec, 0x83, 0xc4, 0xec, 0x56, 0x57, 0x53, 0x66, 0x8c, 0xd8, 0x66, 0x8e, 0xc0, 0x8b, 0x45, 0x1c, 0xc1, 0xe8, 0x2, 0x89, 0x45, 0xf8, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x4, 0x75, 0xb, 0x8b, 0x45, 0xc, 0x2b, 0x45, 0x1c, 0x89, 0x45, 0xf4, 0xeb, 0x8, 0xa1, 0xc8, 0x9d, 0x20, 0x10, 0x89, 0x45, 0xf4, 0xa1, 0x98, 0x9c, 0x20, 0x10, 0x83, 0x7d, 0x2c, 0, 0x74, 0x2, 0x3, 0xc0, 0x89, 0x45, 0xf0, 0x2b, 0x45, 0x1c, 0x89, 0x45, 0xec, 0x8b, 0x45, 0x18, 0xf7, 0x65, 0xc, 0x3, 0x45, 0x14, 0x1, 0x45, 0x8, 0x8b, 0x45, 0x14, 0x1, 0x45, 0x24, 0x8b, 0x45, 0xc, 0xd1, 0xe8, 0x83, 0x7d, 0x2c, 0, 0x74, 0x8, 0x39, 0x45, 0x14, 0x72, 0x3, 0x29, 0x45, 0x24, 0x8b, 0x45, 0x18, 0x1, 0x45, 0x28, 0x83, 0x3d, 0x90, 0x9c, 0x20, 0x10, 0, 0xf, 0x85, 0x98, 0, 0, 0, 0x8b, 0x3d, 0xa8, 0x9c, 0x20, 0x10, 0x8b, 0x45, 0x28, 0xf7, 0x65, 0xf0, 0x3, 0x45, 0x24, 0x3, 0xf8, 0xf7, 0x45, 0x2c, 0x1, 0, 0, 0, 0x74, 0x6, 0x3, 0x3d, 0x98, 0x9c, 0x20, 0x10, 0x8b, 0x45, 0xf4, 0x8b, 0x55, 0xec, 0x8b, 0x75, 0x8, 0x8b, 0x5d, 0x20, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x3, 0x75, 0x52, 0x83, 0xef, 0x8, 0x8b, 0x4d, 0xf8, 0xc1, 0xe9, 0x2, 0x2e, 0x8b, 0xc0, 0x8b, 0x6, 0x89, 0x47, 0x8, 0x8b, 0x46, 0x3, 0x89, 0x47, 0xc, 0x83, 0xc7, 0x10, 0x8b, 0x46, 0x6, 0x89, 0x7, 0x8b, 0x46, 0x9, 0x89, 0x47, 0x4, 0x83, 0xc6, 0xc, 0x49, 0x75, 0xe1, 0x8b, 0x6, 0x89, 0x47, 0x8, 0x8b, 0x46, 0x3, 0x89, 0x47, 0xc, 0x83, 0xc7, 0xc, 0x8b, 0x46, 0x6, 0x89, 0x47, 0x4, 0x83, 0xc6, 0x9, 0x3, 0x75, 0xf4, 0x3, 0xfa, 0x4b, 0x75, 0xb9, 0x83, 0xc7, 0x8, 0xe9, 0x6e, 0x1, 0, 0, 0x8b, 0x4d, 0xf8, 0xf3, 0xa5, 0x3, 0xf0, 0x3, 0xfa, 0x4b, 0x75, 0xf4, 0xe9, 0x5d, 0x1, 0, 0, 0x8b, 0x75, 0x8, 0x8b, 0x45, 0xf0, 0xf7, 0x65, 0x28, 0xf7, 0x45, 0x2c, 0x1, 0, 0, 0, 0x74, 0x6, 0x3, 0x5, 0x98, 0x9c, 0x20, 0x10, 0x3, 0x45, 0x24, 0xba, 0, 0, 0, 0, 0xf7, 0x35, 0xa4, 0x9c, 0x20, 0x10, 0x89, 0x45, 0xfc, 0x8b, 0xfa, 0x3, 0x3d, 0xa8, 0x9c, 0x20, 0x10, 0xb7, 0, 0x8a, 0x1d, 0xb0, 0x9c, 0x20, 0x10, 0x8b, 0x55, 0xfc, 0xff, 0x15, 0x90, 0x9c, 0x20, 0x10, 0xa1, 0xac, 0x9c, 0x20, 0x10, 0x2b, 0xc7, 0x3, 0x45, 0xf0, 0x2b, 0x45, 0x1c, 0xba, 0, 0, 0, 0, 0xf7, 0x75, 0xf0, 0x39, 0x45, 0x20, 0x73, 0x3, 0x8b, 0x45, 0x20, 0xb, 0xc0, 0x74, 0x6d, 0x29, 0x45, 0x20, 0x8b, 0x5d, 0xf4, 0x8b, 0x55, 0xec, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x3, 0x75, 0x4f, 0x83, 0xef, 0x8, 0x8b, 0x4d, 0xf8, 0xc1, 0xe9, 0x2, 0x2e, 0x8b, 0xc0, 0x8b, 0x1e, 0x89, 0x5f, 0x8, 0x8b, 0x5e, 0x3, 0x89, 0x5f, 0xc, 0x83, 0xc7, 0x10, 0x8b, 0x5e, 0x6, 0x89, 0x1f, 0x8b, 0x5e, 0x9, 0x89, 0x5f, 0x4, 0x83, 0xc6, 0xc, 0x49, 0x75, 0xe1, 0x8b, 0x1e, 0x89, 0x5f, 0x8, 0x8b, 0x5e, 0x3, 0x89, 0x5f, 0xc, 0x83, 0xc7, 0xc, 0x8b, 0x5e, 0x6, 0x89, 0x5f, 0x4, 0x83, 0xc6, 0x9, 0x3, 0x75, 0xf4, 0x3, 0xfa, 0x48, 0x75, 0xb9, 0x83, 0xc7, 0x8, 0xeb, 0xc, 0x8b, 0x4d, 0xf8, 0xf3, 0xa5, 0x3, 0xf3, 0x3, 0xfa, 0x48, 0x75, 0xf4, 0xb, 0x45, 0x20, 0xf, 0x84, 0x84, 0, 0, 0, 0x8b, 0xd, 0xac, 0x9c, 0x20, 0x10, 0x2b, 0xcf, 0xc1, 0xf9, 0x2, 0x79, 0x5, 0xb9, 0, 0, 0, 0, 0x51, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x3, 0x75, 0x13, 0xb, 0xc9, 0x74, 0xd, 0x8b, 0x6, 0x89, 0x7, 0x83, 0xc6, 0x3, 0x83, 0xc7, 0x4, 0x49, 0x75, 0xf3, 0xeb, 0x2, 0xf3, 0xa5, 0xa1, 0x9c, 0x9c, 0x20, 0x10, 0x1, 0x45, 0xfc, 0x2b, 0x3d, 0xa0, 0x9c, 0x20, 0x10, 0xb7, 0, 0x8a, 0x1d, 0xb0, 0x9c, 0x20, 0x10, 0x8b, 0x55, 0xfc, 0xff, 0x15, 0x90, 0x9c, 0x20, 0x10, 0x58, 0x8b, 0x4d, 0xf8, 0x2b, 0xc8, 0x83, 0x3d, 0x4, 0xe2, 0x1b, 0x10, 0x3, 0x75, 0x14, 0x90, 0xb, 0xc9, 0x74, 0xd, 0x8b, 0x6, 0x89, 0x7, 0x83, 0xc6, 0x3, 0x83, 0xc7, 0x4, 0x49, 0x75, 0xf3, 0xeb, 0x2, 0xf3, 0xa5, 0x3, 0x75, 0xf4, 0x3, 0x7d, 0xec, 0xff, 0x4d, 0x20, 0xf, 0x85, 0xe5, 0xfe, 0xff, 0xff, 0x5b, 0x5f, 0x5e, 0xc9, 0xc3})
//void func_0x101933cd()
//{
//    FUNC_START_V2(0x101933cd, 0x20);        // Вывод кадра видеозаписи в видео память.
//    II(0x101933cd, 0x1)    pushd(ebp);                            /* push ebp */
//    II(0x101933ce, 0x2)    mov(ebp, esp);                         /* mov ebp, esp */
//    II(0x101933d0, 0x3)    add(esp, -0x14 /* 0xec */);            /* add esp, 0xec */
//    II(0x101933d3, 0x1)    pushd(esi);                            /* push esi */
//    II(0x101933d4, 0x1)    pushd(edi);                            /* push edi */
//    II(0x101933d5, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x101933d6, 0x3)    mov(ax, ds);                           /* mov ax, ds */
//    II(0x101933d9, 0x3)    mov(es, ax);                           /* mov es, ax */
//    II(0x101933dc, 0x3)    mov(eax, memd_a32(ss, ebp + 0x1c));    /* mov eax, [ebp+0x1c] */    // 572
//    II(0x101933df, 0x3)    shr(eax, 0x2);                         /* shr eax, 0x2 */
//    II(0x101933e2, 0x3)    mov(memd_a32(ss, ebp - 0x8), eax);     /* mov [ebp-0x8], eax */        // Кол-во байт в линии / 4.
//    II(0x101933e5, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x4);    /* cmp dword [0x101be204], 0x4 */
//    II(0x101933ec, 0x2)    jnzd(0x101933f9, 0xb);                 /* jnz 0x101933f9 */
//    II(0x101933ee, 0x3)    mov(eax, memd_a32(ss, ebp + 0xc));     /* mov eax, [ebp+0xc] */
//    II(0x101933f1, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */
//    II(0x101933f4, 0x3)    mov(memd_a32(ss, ebp - 0xc), eax);     /* mov [ebp-0xc], eax */
//    II(0x101933f7, 0x2)    jmpd(0x10193401, 0x8);                 /* jmp 0x10193401 */
//l_0x101933f9:
//    II(0x101933f9, 0x5)    mov(eax, memd_a32(ds, 0x10209dc8));    /* mov eax, [0x10209dc8] */    // 0x3
//    II(0x101933fe, 0x3)    mov(memd_a32(ss, ebp - 0xc), eax);     /* mov [ebp-0xc], eax */
//l_0x10193401:
//    II(0x10193401, 0x5)    mov(eax, video_bytes_per_line);        /* mov eax, [0x10209c98] */        // 640
//    II(0x10193406, 0x4)    cmp(memd_a32(ss, ebp + 0x2c), 0);      /* cmp dword [ebp+0x2c], 0x0 */
//    II(0x1019340a, 0x2)    jzd(0x1019340e, 0x2);                  /* jz 0x1019340e */
//    II(0x1019340c, 0x2)    add(eax, eax);                         /* add eax, eax */
//l_0x1019340e:
//    II(0x1019340e, 0x3)    mov(memd_a32(ss, ebp - 0x10), eax);    /* mov [ebp-0x10], eax */
//    II(0x10193411, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */    // 572
//    II(0x10193414, 0x3)    mov(memd_a32(ss, ebp - 0x14), eax);    /* mov [ebp-0x14], eax */    // Unused pixels in line - 0x44.
//    II(0x10193417, 0x3)    mov(eax, memd_a32(ss, ebp + 0x18));    /* mov eax, [ebp+0x18] */
//    II(0x1019341a, 0x3)    mul(memd_a32(ss, ebp + 0xc));          /* mul dword [ebp+0xc] */
//    II(0x1019341d, 0x3)    add(eax, memd_a32(ss, ebp + 0x14));    /* add eax, [ebp+0x14] */
//    II(0x10193420, 0x3)    add(memd_a32(ss, ebp + 0x8), eax);     /* add [ebp+0x8], eax */        // img_ptr += 0
//    II(0x10193423, 0x3)    mov(eax, memd_a32(ss, ebp + 0x14));    /* mov eax, [ebp+0x14] */
//    II(0x10193426, 0x3)    add(memd_a32(ss, ebp + 0x24), eax);    /* add [ebp+0x24], eax */
//    II(0x10193429, 0x3)    mov(eax, memd_a32(ss, ebp + 0xc));     /* mov eax, [ebp+0xc] */        // 432
//    II(0x1019342c, 0x2)    shr(eax, 0x1);                         /* shr eax, 1 */
//    II(0x1019342e, 0x4)    cmp(memd_a32(ss, ebp + 0x2c), 0);      /* cmp dword [ebp+0x2c], 0x0 */
//    II(0x10193432, 0x2)    jzd(0x1019343c, 0x8);                  /* jz 0x1019343c */
//    II(0x10193434, 0x3)    cmp(memd_a32(ss, ebp + 0x14), eax);    /* cmp [ebp+0x14], eax */
//    II(0x10193437, 0x2)    jbd(0x1019343c, 0x3);                  /* jb 0x1019343c */
//    II(0x10193439, 0x3)    sub(memd_a32(ss, ebp + 0x24), eax);    /* sub [ebp+0x24], eax */
//l_0x1019343c:
//    II(0x1019343c, 0x3)    mov(eax, memd_a32(ss, ebp + 0x18));    /* mov eax, [ebp+0x18] */
//    II(0x1019343f, 0x3)    add(memd_a32(ss, ebp + 0x28), eax);    /* add [ebp+0x28], eax */    // video_y_offset += 0
//    II(0x10193442, 0x7)    cmp(memd_a32(ds, 0x10209c90), 0);      /* cmp dword [0x10209c90], 0x0 */
//    II(0x10193449, 0x6)    jnzd(0x101934e7, 0x98);                /* jnz dword 0x101934e7 */
//    II(0x1019344f, 0x6)    mov(edi, video_win_start);             /* mov edi, [0x10209ca8] */
//    II(0x10193455, 0x3)    mov(eax, memd_a32(ss, ebp + 0x28));    /* mov eax, [ebp+0x28] */
//    II(0x10193458, 0x3)    mul(memd_a32(ss, ebp - 0x10));         /* mul dword [ebp-0x10] */
//    II(0x1019345b, 0x3)    add(eax, memd_a32(ss, ebp + 0x24));    /* add eax, [ebp+0x24] */
//    II(0x1019345e, 0x2)    add(edi, eax);                         /* add edi, eax */
//    II(0x10193460, 0x7)    test(memd_a32(ss, ebp + 0x2c), 0x1);   /* test dword [ebp+0x2c], 0x1 */
//    II(0x10193467, 0x2)    jzd(0x1019346f, 0x6);                  /* jz 0x1019346f */
//    II(0x10193469, 0x6)    add(edi, video_bytes_per_line);        /* add edi, [0x10209c98] */
//l_0x1019346f:
//    II(0x1019346f, 0x3)    mov(eax, memd_a32(ss, ebp - 0xc));     /* mov eax, [ebp-0xc] */
//    II(0x10193472, 0x3)    mov(edx, memd_a32(ss, ebp - 0x14));    /* mov edx, [ebp-0x14] */
//    II(0x10193475, 0x3)    mov(esi, memd_a32(ss, ebp + 0x8));     /* mov esi, [ebp+0x8] */
//    II(0x10193478, 0x3)    mov(ebx, memd_a32(ss, ebp + 0x20));    /* mov ebx, [ebp+0x20] */
//    II(0x1019347b, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x3);    /* cmp dword [0x101be204], 0x3 */
//    II(0x10193482, 0x2)    jnzd(0x101934d6, 0x52);                /* jnz 0x101934d6 */
//    II(0x10193484, 0x3)    sub(edi, 0x8);                         /* sub edi, 0x8 */
//l_0x10193487:
//    II(0x10193487, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x1019348a, 0x3)    shr(ecx, 0x2);                         /* shr ecx, 0x2 */
//    II(0x1019348d, 0x3)    mov(eax, eax);                         /* mov eax, eax */
//l_0x10193490:
//    II(0x10193490, 0x2)    mov(eax, memd_a32(ds, esi));           /* mov eax, [esi] */
//    II(0x10193492, 0x3)    mov(memd_a32(ds, edi + 0x8), eax);     /* mov [edi+0x8], eax */
//    II(0x10193495, 0x3)    mov(eax, memd_a32(ds, esi + 0x3));     /* mov eax, [esi+0x3] */
//    II(0x10193498, 0x3)    mov(memd_a32(ds, edi + 0xc), eax);     /* mov [edi+0xc], eax */
//    II(0x1019349b, 0x3)    add(edi, 0x10);                        /* add edi, 0x10 */
//    II(0x1019349e, 0x3)    mov(eax, memd_a32(ds, esi + 0x6));     /* mov eax, [esi+0x6] */
//    II(0x101934a1, 0x2)    mov(memd_a32(ds, edi), eax);           /* mov [edi], eax */
//    II(0x101934a3, 0x3)    mov(eax, memd_a32(ds, esi + 0x9));     /* mov eax, [esi+0x9] */
//    II(0x101934a6, 0x3)    mov(memd_a32(ds, edi + 0x4), eax);     /* mov [edi+0x4], eax */
//    II(0x101934a9, 0x3)    add(esi, 0xc);                         /* add esi, 0xc */
//    II(0x101934ac, 0x1)    dec(ecx);                              /* dec ecx */
//    II(0x101934ad, 0x2)    jnzd(0x10193490, -0x1f);               /* jnz 0x10193490 */
//    II(0x101934af, 0x2)    mov(eax, memd_a32(ds, esi));           /* mov eax, [esi] */
//    II(0x101934b1, 0x3)    mov(memd_a32(ds, edi + 0x8), eax);     /* mov [edi+0x8], eax */
//    II(0x101934b4, 0x3)    mov(eax, memd_a32(ds, esi + 0x3));     /* mov eax, [esi+0x3] */
//    II(0x101934b7, 0x3)    mov(memd_a32(ds, edi + 0xc), eax);     /* mov [edi+0xc], eax */
//    II(0x101934ba, 0x3)    add(edi, 0xc);                         /* add edi, 0xc */
//    II(0x101934bd, 0x3)    mov(eax, memd_a32(ds, esi + 0x6));     /* mov eax, [esi+0x6] */
//    II(0x101934c0, 0x3)    mov(memd_a32(ds, edi + 0x4), eax);     /* mov [edi+0x4], eax */
//    II(0x101934c3, 0x3)    add(esi, 0x9);                         /* add esi, 0x9 */
//    II(0x101934c6, 0x3)    add(esi, memd_a32(ss, ebp - 0xc));     /* add esi, [ebp-0xc] */
//    II(0x101934c9, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x101934cb, 0x1)    dec(ebx);                              /* dec ebx */
//    II(0x101934cc, 0x2)    jnzd(0x10193487, -0x47);               /* jnz 0x10193487 */
//    II(0x101934ce, 0x3)    add(edi, 0x8);                         /* add edi, 0x8 */
//    II(0x101934d1, 0x5)    jmpd(0x10193644, 0x16e);               /* jmp 0x10193644 */
//l_0x101934d6:
//    II(0x101934d6, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x101934d9, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */
//    II(0x101934db, 0x2)    add(esi, eax);                         /* add esi, eax */
//    II(0x101934dd, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x101934df, 0x1)    dec(ebx);                              /* dec ebx */
//    II(0x101934e0, 0x2)    jnzd(0x101934d6, -0xc);                /* jnz 0x101934d6 */
//    II(0x101934e2, 0x5)    jmpd(0x10193644, 0x15d);               /* jmp 0x10193644 */
//l_0x101934e7:
//    II(0x101934e7, 0x3)    mov(esi, memd_a32(ss, ebp + 0x8));     /* mov esi, [ebp+0x8] */        // img_ptr
//    II(0x101934ea, 0x3)    mov(eax, memd_a32(ss, ebp - 0x10));    /* mov eax, [ebp-0x10] */    // 640
//    II(0x101934ed, 0x3)    mul(memd_a32(ss, ebp + 0x28));         /* mul dword [ebp+0x28] */
//    II(0x101934f0, 0x7)    test(memd_a32(ss, ebp + 0x2c), 0x1);   /* test dword [ebp+0x2c], 0x1 */
//    II(0x101934f7, 0x2)    jzd(0x101934ff, 0x6);                  /* jz 0x101934ff */
//    II(0x101934f9, 0x6)    add(eax, video_bytes_per_line);        /* add eax, [0x10209c98] */
//l_0x101934ff:
//    II(0x101934ff, 0x3)    add(eax, memd_a32(ss, ebp + 0x24));    /* add eax, [ebp+0x24] */    // eax = video_bytes_per_line * video_y_offset + video_x_offset
//    II(0x10193502, 0x5)    mov(edx, 0);                           /* mov edx, 0x0 */
//    II(0x10193507, 0x6)    div(video_win_granularity);            /* div dword [0x10209ca4] */    // eax - num of request bank, edx - offset in bank.
//    II(0x1019350d, 0x3)    mov(memd_a32(ss, ebp - 0x4), eax);     /* mov [ebp-0x4], eax */
//    II(0x10193510, 0x2)    mov(edi, edx);                         /* mov edi, edx */
//    II(0x10193512, 0x6)    add(edi, video_win_start);             /* add edi, [0x10209ca8] */
//    II(0x10193518, 0x2)    mov(bh, 0);                            /* mov bh, 0x0 */
//    II(0x1019351a, 0x6)    mov(bl, memb_a32(ds, 0x10209cb0));     /* mov bl, [0x10209cb0] */
//    II(0x10193520, 0x3)    mov(edx, memd_a32(ss, ebp - 0x4));     /* mov edx, [ebp-0x4] */
//    II(0x10193523, 0x6)    calld_abs(memd_a32(ds, 0x10209c90));   /* call dword near [0x10209c90] */    // 0x1018cda8, switch_video_bank?
//l_0x10193529:
//    II(0x10193529, 0x5)    mov(eax, video_win_end);               /* mov eax, [0x10209cac] */
//    II(0x1019352e, 0x2)    sub(eax, edi);                         /* sub eax, edi */                // Оставшееся место в видео памяти.
//    II(0x10193530, 0x3)    add(eax, memd_a32(ss, ebp - 0x10));    /* add eax, [ebp-0x10] */        // + 640
//    II(0x10193533, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */        // - 572
//    II(0x10193536, 0x5)    mov(edx, 0);                           /* mov edx, 0x0 */
//    II(0x1019353b, 0x3)    div(memd_a32(ss, ebp - 0x10));         /* div dword [ebp-0x10] */        // / 640, eax -> count of lines, can be writen.
//    II(0x1019353e, 0x3)    cmp(memd_a32(ss, ebp + 0x20), eax);    /* cmp [ebp+0x20], eax */        // compare with count of left lines.
//    II(0x10193541, 0x2)    jaed(0x10193546, 0x3);                 /* jae 0x10193546 */
//    II(0x10193543, 0x3)    mov(eax, memd_a32(ss, ebp + 0x20));    /* mov eax, [ebp+0x20] */
//l_0x10193546:                                                                                    // eax - count of lines, must be written.
//    II(0x10193546, 0x2)    or_(eax, eax);                         /* or eax, eax */
//    II(0x10193548, 0x2)    jzd(0x101935b7, 0x6d);                 /* jz 0x101935b7 */
//    II(0x1019354a, 0x3)    sub(memd_a32(ss, ebp + 0x20), eax);    /* sub [ebp+0x20], eax */        // correct left lines
//    II(0x1019354d, 0x3)    mov(ebx, memd_a32(ss, ebp - 0xc));     /* mov ebx, [ebp-0xc] */
//    II(0x10193550, 0x3)    mov(edx, memd_a32(ss, ebp - 0x14));    /* mov edx, [ebp-0x14] */
//    II(0x10193553, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x3);    /* cmp dword [0x101be204], 0x3 */
//    II(0x1019355a, 0x2)    jnzd(0x101935ab, 0x4f);                /* jnz 0x101935ab */
//    II(0x1019355c, 0x3)    sub(edi, 0x8);                         /* sub edi, 0x8 */
//l_0x1019355f: // Цикл 1
//    II(0x1019355f, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */        // ecx <=  Кол-во байт в линии / 4
//    II(0x10193562, 0x3)    shr(ecx, 0x2);                         /* shr ecx, 0x2 */
//    II(0x10193565, 0x3)    mov(eax, eax);                         /* mov eax, eax */
//l_0x10193568: // Цикл 2, расширение: из 3 в 4.
//    II(0x10193568, 0x2)    mov(ebx, memd_a32(ds, esi));           /* mov ebx, [esi] */
//    II(0x1019356a, 0x3)    mov(memd_a32(ds, edi + 0x8), ebx);     /* mov [edi+0x8], ebx */        // В память.
//    II(0x1019356d, 0x3)    mov(ebx, memd_a32(ds, esi + 0x3));     /* mov ebx, [esi+0x3] */
//    II(0x10193570, 0x3)    mov(memd_a32(ds, edi + 0xc), ebx);     /* mov [edi+0xc], ebx */
//    II(0x10193573, 0x3)    add(edi, 0x10);                        /* add edi, 0x10 */
//    II(0x10193576, 0x3)    mov(ebx, memd_a32(ds, esi + 0x6));     /* mov ebx, [esi+0x6] */
//    II(0x10193579, 0x2)    mov(memd_a32(ds, edi), ebx);           /* mov [edi], ebx */
//    II(0x1019357b, 0x3)    mov(ebx, memd_a32(ds, esi + 0x9));     /* mov ebx, [esi+0x9] */
//    II(0x1019357e, 0x3)    mov(memd_a32(ds, edi + 0x4), ebx);     /* mov [edi+0x4], ebx */
//    II(0x10193581, 0x3)    add(esi, 0xc);                         /* add esi, 0xc */
//    II(0x10193584, 0x1)    dec(ecx);                              /* dec ecx */
//    II(0x10193585, 0x2)    jnzd(0x10193568, -0x1f);               /* jnz 0x10193568 */        // Цикл 2
//    II(0x10193587, 0x2)    mov(ebx, memd_a32(ds, esi));           /* mov ebx, [esi] */        // Запись оставшихся 3x4 точек линии.
//    II(0x10193589, 0x3)    mov(memd_a32(ds, edi + 0x8), ebx);     /* mov [edi+0x8], ebx */
//    II(0x1019358c, 0x3)    mov(ebx, memd_a32(ds, esi + 0x3));     /* mov ebx, [esi+0x3] */
//    II(0x1019358f, 0x3)    mov(memd_a32(ds, edi + 0xc), ebx);     /* mov [edi+0xc], ebx */
//    II(0x10193592, 0x3)    add(edi, 0xc);                         /* add edi, 0xc */
//    II(0x10193595, 0x3)    mov(ebx, memd_a32(ds, esi + 0x6));     /* mov ebx, [esi+0x6] */
//    II(0x10193598, 0x3)    mov(memd_a32(ds, edi + 0x4), ebx);     /* mov [edi+0x4], ebx */
//    II(0x1019359b, 0x3)    add(esi, 0x9);                         /* add esi, 0x9 */
//    II(0x1019359e, 0x3)    add(esi, memd_a32(ss, ebp - 0xc));     /* add esi, [ebp-0xc] */        // +3, кол-во исключённых точек из исходного изображение.
//    II(0x101935a1, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x101935a3, 0x1)    dec(eax);                              /* dec eax */
//    II(0x101935a4, 0x2)    jnzd(0x1019355f, -0x47);               /* jnz 0x1019355f */        // Цикл 1
//    II(0x101935a6, 0x3)    add(edi, 0x8);                         /* add edi, 0x8 */
//    II(0x101935a9, 0x2)    jmpd(0x101935b7, 0xc);                 /* jmp 0x101935b7 */
//l_0x101935ab:
//    II(0x101935ab, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x101935ae, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */
//    II(0x101935b0, 0x2)    add(esi, ebx);                         /* add esi, ebx */
//    II(0x101935b2, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x101935b4, 0x1)    dec(eax);                              /* dec eax */
//    II(0x101935b5, 0x2)    jnzd(0x101935ab, -0xc);                /* jnz 0x101935ab */
//l_0x101935b7:
//    II(0x101935b7, 0x3)    or_(eax, memd_a32(ss, ebp + 0x20));    /* or eax, [ebp+0x20] */
//    II(0x101935ba, 0x6)    jzd(0x10193644, 0x84);                 /* jz dword 0x10193644 */
//    II(0x101935c0, 0x6)    mov(ecx, video_win_end);    /* mov ecx, [0x10209cac] */
//    II(0x101935c6, 0x2)    sub(ecx, edi);                         /* sub ecx, edi */
//    II(0x101935c8, 0x3)    sar(ecx, 0x2);                         /* sar ecx, 0x2 */
//    II(0x101935cb, 0x2)    jnsd(0x101935d2, 0x5);                 /* jns 0x101935d2 */
//    II(0x101935cd, 0x5)    mov(ecx, 0);                           /* mov ecx, 0x0 */
//l_0x101935d2:
//    II(0x101935d2, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x101935d3, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x3);    /* cmp dword [0x101be204], 0x3 */
//    II(0x101935da, 0x2)    jnzd(0x101935ef, 0x13);                /* jnz 0x101935ef */
//    II(0x101935dc, 0x2)    or_(ecx, ecx);                         /* or ecx, ecx */
//    II(0x101935de, 0x2)    jzd(0x101935ed, 0xd);                  /* jz 0x101935ed */
//l_0x101935e0:
//    II(0x101935e0, 0x2)    mov(eax, memd_a32(ds, esi));           /* mov eax, [esi] */        // Копирование начала линии в конец видео памяти.
//    II(0x101935e2, 0x2)    mov(memd_a32(ds, edi), eax);           /* mov [edi], eax */
//    II(0x101935e4, 0x3)    add(esi, 0x3);                         /* add esi, 0x3 */
//    II(0x101935e7, 0x3)    add(edi, 0x4);                         /* add edi, 0x4 */
//    II(0x101935ea, 0x1)    dec(ecx);                              /* dec ecx */
//    II(0x101935eb, 0x2)    jnzd(0x101935e0, -0xd);                /* jnz 0x101935e0 */
//l_0x101935ed:
//    II(0x101935ed, 0x2)    jmpd(0x101935f1, 0x2);                 /* jmp 0x101935f1 */
//l_0x101935ef:
//    II(0x101935ef, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */
//l_0x101935f1:
//    II(0x101935f1, 0x5)    mov(eax, video_bank_count_in_win);     /* mov eax, [0x10209c9c] */
//    II(0x101935f6, 0x3)    add(memd_a32(ss, ebp - 0x4), eax);     /* add [ebp-0x4], eax */
//    II(0x101935f9, 0x6)    sub(edi, video_win_len);               /* sub edi, [0x10209ca0] */
//    II(0x101935ff, 0x2)    mov(bh, 0);                            /* mov bh, 0x0 */
//    II(0x10193601, 0x6)    mov(bl, memb_a32(ds, 0x10209cb0));     /* mov bl, [0x10209cb0] */
//    II(0x10193607, 0x3)    mov(edx, memd_a32(ss, ebp - 0x4));     /* mov edx, [ebp-0x4] */
//    II(0x1019360a, 0x6)    calld_abs(memd_a32(ds, 0x10209c90));   /* call dword near [0x10209c90] */    // Set video bank?
//    II(0x10193610, 0x1)    popd(eax);                             /* pop eax */
//    II(0x10193611, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x10193614, 0x2)    sub(ecx, eax);                         /* sub ecx, eax */
//    II(0x10193616, 0x7)    cmp(memd_a32(ds, 0x101be204), 0x3);    /* cmp dword [0x101be204], 0x3 */
//    II(0x1019361d, 0x2)    jnzd(0x10193633, 0x14);                /* jnz 0x10193633 */
//    II(0x1019361f, 0x1)                                           /* nop  */
//    II(0x10193620, 0x2)    or_(ecx, ecx);                         /* or ecx, ecx */
//    II(0x10193622, 0x2)    jzd(0x10193631, 0xd);                  /* jz 0x10193631 */
//l_0x10193624:
//    II(0x10193624, 0x2)    mov(eax, memd_a32(ds, esi));           /* mov eax, [esi] */
//    II(0x10193626, 0x2)    mov(memd_a32(ds, edi), eax);           /* mov [edi], eax */        // Копирование конции линии в начало видео памяти.
//    II(0x10193628, 0x3)    add(esi, 0x3);                         /* add esi, 0x3 */
//    II(0x1019362b, 0x3)    add(edi, 0x4);                         /* add edi, 0x4 */
//    II(0x1019362e, 0x1)    dec(ecx);                              /* dec ecx */
//    II(0x1019362f, 0x2)    jnzd(0x10193624, -0xd);                /* jnz 0x10193624 */
//l_0x10193631:
//    II(0x10193631, 0x2)    jmpd(0x10193635, 0x2);                 /* jmp 0x10193635 */
//l_0x10193633:
//    II(0x10193633, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */
//l_0x10193635:
//    II(0x10193635, 0x3)    add(esi, memd_a32(ss, ebp - 0xc));     /* add esi, [ebp-0xc] */
//    II(0x10193638, 0x3)    add(edi, memd_a32(ss, ebp - 0x14));    /* add edi, [ebp-0x14] */    // Unused pixels in line - 0x44.
//    II(0x1019363b, 0x3)    dec(memd_a32(ss, ebp + 0x20));         /* dec dword [ebp+0x20] */
//    II(0x1019363e, 0x6)    jnzd(0x10193529, -0x11b);              /* jnz dword 0x10193529 */
//l_0x10193644:
//    II(0x10193644, 0x1)    popd(ebx);                             /* pop ebx */
//    II(0x10193645, 0x1)    popd(edi);                             /* pop edi */
//    II(0x10193646, 0x1)    popd(esi);                             /* pop esi */
//    II(0x10193647, 0x1)    leaved();                              /* leave  */
//    II(0x10193648, 0x1)    retd();                                /* ret  */
//}

//FUNC_INFO_V2(0x1017a850, func_0x1017a850, 0x20, {0x55, 0x89, 0xe5, 0x56, 0x57, 0x8b, 0x5d, 0x8, 0x8b, 0x55, 0x10, 0x8b, 0x4d, 0x1c, 0x8b, 0x45, 0x20, 0x83, 0x3d, 0x94, 0x9c, 0x20, 0x10, 0, 0x74, 0x2a, 0x8b, 0x3d, 0xcc, 0x9c, 0x20, 0x10, 0x85, 0xff, 0x75, 0x20, 0x57, 0x8b, 0x7d, 0x28, 0x57, 0x8b, 0x75, 0x24, 0x56, 0x50, 0x51, 0x8b, 0x7d, 0x18, 0x57, 0x8b, 0x45, 0x14, 0x50, 0x52, 0x8b, 0x55, 0xc, 0x52, 0x53, 0xe8, 0xb7, 0x8d, 0x1, 0, 0xeb, 0x1f, 0x6a, 0, 0x8b, 0x75, 0x28, 0x56, 0x8b, 0x7d, 0x24, 0x57, 0x50, 0x51, 0x8b, 0x45, 0x18, 0x50, 0x8b, 0x4d, 0x14, 0x51, 0x52, 0x8b, 0x75, 0xc, 0x56, 0x53, 0xe8, 0x1a, 0x8b, 0x1, 0, 0x83, 0xc4, 0x28, 0x8d, 0x65, 0xf8, 0x5f, 0x5e, 0x5d, 0xc3})
//void func_0x1017a850()
//{
//    FUNC_START_V2(0x1017a850, 0x20);
//    II(0x1017a850, 0x1)    pushd(ebp);                            /* push ebp */
//    II(0x1017a851, 0x2)    mov(ebp, esp);                         /* mov ebp, esp */
//    II(0x1017a853, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a854, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a855, 0x3)    mov(ebx, memd_a32(ss, ebp + 0x8));     /* mov ebx, [ebp+0x8] */
//    II(0x1017a858, 0x3)    mov(edx, memd_a32(ss, ebp + 0x10));    /* mov edx, [ebp+0x10] */
//    II(0x1017a85b, 0x3)    mov(ecx, memd_a32(ss, ebp + 0x1c));    /* mov ecx, [ebp+0x1c] */
//    II(0x1017a85e, 0x3)    mov(eax, memd_a32(ss, ebp + 0x20));    /* mov eax, [ebp+0x20] */
//    II(0x1017a861, 0x7)    cmp(memd_a32(ds, 0x10209c94), 0);      /* cmp dword [0x10209c94], 0x0 */
//    II(0x1017a868, 0x2)    jzd(0x1017a894, 0x2a);                 /* jz 0x1017a894 */
//    II(0x1017a86a, 0x6)    mov(edi, memd_a32(ds, 0x10209ccc));    /* mov edi, [0x10209ccc] */
//    II(0x1017a870, 0x2)    test(edi, edi);                        /* test edi, edi */
//    II(0x1017a872, 0x2)    jnzd(0x1017a894, 0x20);                /* jnz 0x1017a894 */
//    II(0x1017a874, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a875, 0x3)    mov(edi, memd_a32(ss, ebp + 0x28));    /* mov edi, [ebp+0x28] */
//    II(0x1017a878, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a879, 0x3)    mov(esi, memd_a32(ss, ebp + 0x24));    /* mov esi, [ebp+0x24] */
//    II(0x1017a87c, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a87d, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a87e, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a87f, 0x3)    mov(edi, memd_a32(ss, ebp + 0x18));    /* mov edi, [ebp+0x18] */
//    II(0x1017a882, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a883, 0x3)    mov(eax, memd_a32(ss, ebp + 0x14));    /* mov eax, [ebp+0x14] */
//    II(0x1017a886, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a887, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1017a888, 0x3)    mov(edx, memd_a32(ss, ebp + 0xc));     /* mov edx, [ebp+0xc] */
//    II(0x1017a88b, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1017a88c, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1017a88d, 0x5)    calld(0x10193649, 0x18db7);            /* call 0x10193649 */
//    II(0x1017a892, 0x2)    jmpd(0x1017a8b3, 0x1f);                /* jmp 0x1017a8b3 */
//l_0x1017a894:
//    II(0x1017a894, 0x2)    pushd(0);                              /* push 0x0 */
//    II(0x1017a896, 0x3)    mov(esi, memd_a32(ss, ebp + 0x28));    /* mov esi, [ebp+0x28] */    // 15    video_y_offset
//    II(0x1017a899, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a89a, 0x3)    mov(edi, memd_a32(ss, ebp + 0x24));    /* mov edi, [ebp+0x24] */    // 32    video_x_offset
//    II(0x1017a89d, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1017a89e, 0x1)    pushd(eax);                            /* push eax */                // 320 - height
//    II(0x1017a89f, 0x1)    pushd(ecx);                            /* push ecx */                // 572 - width
//    II(0x1017a8a0, 0x3)    mov(eax, memd_a32(ss, ebp + 0x18));    /* mov eax, [ebp+0x18] */    // 0 - img_y_offset ?
//    II(0x1017a8a3, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1017a8a4, 0x3)    mov(ecx, memd_a32(ss, ebp + 0x14));    /* mov ecx, [ebp+0x14] */    // 0 - img_x_offset ?
//    II(0x1017a8a7, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1017a8a8, 0x1)    pushd(edx);                            /* push edx */                // 320
//    II(0x1017a8a9, 0x3)    mov(esi, memd_a32(ss, ebp + 0xc));     /* mov esi, [ebp+0xc] */        // 432
//    II(0x1017a8ac, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1017a8ad, 0x1)    pushd(ebx);                            /* push ebx */                // img_ptr?
//    II(0x1017a8ae, 0x5)    calld(0x101933cd, 0x18b1a);            /* call 0x101933cd */        // Копирование в видео память.
//l_0x1017a8b3:
//    II(0x1017a8b3, 0x3)    add(esp, 0x28);                        /* add esp, 0x28 */
//    II(0x1017a8b6, 0x3)    lea(esp, ebp - 0x8);                   /* lea esp, [ebp-0x8] */
//    II(0x1017a8b9, 0x1)    popd(edi);                             /* pop edi */
//    II(0x1017a8ba, 0x1)    popd(esi);                             /* pop esi */
//    II(0x1017a8bb, 0x1)    popd(ebp);                             /* pop ebp */
//    II(0x1017a8bc, 0x1)    retd();                                /* ret  */
//}

//FUNC_INFO_V2(0x1018d034, func_0x1018d034, 0x20, {0x55, 0x8b, 0xec, 0x83, 0xc4, 0xec, 0x50, 0x53, 0x51, 0x52, 0x56, 0x57, 0x8b, 0x45, 0x1c, 0xc1, 0xe8, 0x2, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xc, 0x2b, 0x45, 0x1c, 0x89, 0x45, 0xf4, 0xa1, 0xf8, 0x88, 0x20, 0x10, 0x89, 0x45, 0xf0, 0x2b, 0x45, 0x1c, 0x89, 0x45, 0xec, 0x8b, 0x45, 0x18, 0xf7, 0x65, 0xc, 0x3, 0x45, 0x14, 0x1, 0x45, 0x8, 0x83, 0x3d, 0xfc, 0x88, 0x20, 0x10, 0, 0x75, 0x2e, 0x8b, 0x3d, 0x18, 0x89, 0x20, 0x10, 0x8b, 0x45, 0x28, 0xf7, 0x65, 0xf0, 0x3, 0x45, 0x24, 0x3, 0xf8, 0x8b, 0x45, 0xf4, 0x8b, 0x55, 0xec, 0x8b, 0x75, 0x8, 0x8b, 0x5d, 0x20, 0x8b, 0x4d, 0xf8, 0xf3, 0xa5, 0x3, 0xf0, 0x3, 0xfa, 0x4b, 0x75, 0xf4, 0xe9, 0xb9, 0, 0, 0, 0x8b, 0x75, 0x8, 0x8b, 0x45, 0xf0, 0xf7, 0x65, 0x28, 0x3, 0x45, 0x24, 0xba, 0, 0, 0, 0, 0xf7, 0x35, 0x8, 0x89, 0x20, 0x10, 0x89, 0x45, 0xfc, 0x8b, 0xfa, 0x3, 0x3d, 0x18, 0x89, 0x20, 0x10, 0xb7, 0, 0x8a, 0x1d, 0, 0x89, 0x20, 0x10, 0x8b, 0x55, 0xfc, 0xff, 0x15, 0xfc, 0x88, 0x20, 0x10, 0xa1, 0x10, 0x89, 0x20, 0x10, 0x2b, 0xc7, 0x3, 0x45, 0xf0, 0x2b, 0x45, 0x1c, 0xba, 0, 0, 0, 0, 0xf7, 0x75, 0xf0, 0x39, 0x45, 0x20, 0x73, 0x3, 0x8b, 0x45, 0x20, 0xb, 0xc0, 0x74, 0x15, 0x29, 0x45, 0x20, 0x8b, 0x5d, 0xf4, 0x8b, 0x55, 0xec, 0x8b, 0x4d, 0xf8, 0xf3, 0xa5, 0x3, 0xf3, 0x3, 0xfa, 0x48, 0x75, 0xf4, 0xb, 0x45, 0x20, 0x74, 0x4b, 0x8b, 0xd, 0x10, 0x89, 0x20, 0x10, 0x2b, 0xcf, 0xc1, 0xf9, 0x2, 0x79, 0x5, 0xb9, 0, 0, 0, 0, 0x51, 0xf3, 0xa5, 0xa1, 0xf0, 0x88, 0x20, 0x10, 0x1, 0x45, 0xfc, 0x2b, 0x3d, 0x14, 0x89, 0x20, 0x10, 0xb7, 0, 0x8a, 0x1d, 0, 0x89, 0x20, 0x10, 0x8b, 0x55, 0xfc, 0xff, 0x15, 0xfc, 0x88, 0x20, 0x10, 0x58, 0x8b, 0x4d, 0xf8, 0x2b, 0xc8, 0xf3, 0xa5, 0x3, 0x75, 0xf4, 0x3, 0x7d, 0xec, 0xff, 0x4d, 0x20, 0xf, 0x85, 0x7a, 0xff, 0xff, 0xff, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0x58, 0xc9, 0xc3})
//void func_0x1018d034()
//{
//    FUNC_START_V2(0x1018d034, 0x20);
//
//    /* memd_a32(ss, ebp + 0x8) - img_ptr?
//     * memd_a32(ss, ebp + 0xc) -  640 - width?
//     * memd_a32(ss, ebp + 0x1c) - 640
//     *
//     *
//     * memd_a32(ss, ebp - 0x10) - 640 ?
//     * memd_a32(ss, ebp + 0x20) - 137 - кол-во каких-то линий.
//     *
//     */
//
//    II(0x1018d034, 0x1)    pushd(ebp);                            /* push ebp */
//    II(0x1018d035, 0x2)    mov(ebp, esp);                         /* mov ebp, esp */
//    II(0x1018d037, 0x3)    add(esp, -0x14);                       /* add esp, 0xec */
//    II(0x1018d03a, 0x1)    pushd(eax);                            /* push eax */
//    II(0x1018d03b, 0x1)    pushd(ebx);                            /* push ebx */
//    II(0x1018d03c, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1018d03d, 0x1)    pushd(edx);                            /* push edx */
//    II(0x1018d03e, 0x1)    pushd(esi);                            /* push esi */
//    II(0x1018d03f, 0x1)    pushd(edi);                            /* push edi */
//    II(0x1018d040, 0x3)    mov(eax, memd_a32(ss, ebp + 0x1c));    /* mov eax, [ebp+0x1c] */
//    II(0x1018d043, 0x3)    shr(eax, 0x2);                         /* shr eax, 0x2 */
//    II(0x1018d046, 0x3)    mov(memd_a32(ss, ebp - 0x8), eax);     /* mov [ebp-0x8], eax */
//    II(0x1018d049, 0x3)    mov(eax, memd_a32(ss, ebp + 0xc));     /* mov eax, [ebp+0xc] */
//    II(0x1018d04c, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */
//    II(0x1018d04f, 0x3)    mov(memd_a32(ss, ebp - 0xc), eax);     /* mov [ebp-0xc], eax */
//    II(0x1018d052, 0x5)    mov(eax, memd_a32(ds, 0x102088f8));    /* mov eax, [0x102088f8] */
//    II(0x1018d057, 0x3)    mov(memd_a32(ss, ebp - 0x10), eax);    /* mov [ebp-0x10], eax */
//    II(0x1018d05a, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */
//    II(0x1018d05d, 0x3)    mov(memd_a32(ss, ebp - 0x14), eax);    /* mov [ebp-0x14], eax */
//    II(0x1018d060, 0x3)    mov(eax, memd_a32(ss, ebp + 0x18));    /* mov eax, [ebp+0x18] */
//    II(0x1018d063, 0x3)    mul(memd_a32(ss, ebp + 0xc));          /* mul dword [ebp+0xc] */
//    II(0x1018d066, 0x3)    add(eax, memd_a32(ss, ebp + 0x14));    /* add eax, [ebp+0x14] */
//    II(0x1018d069, 0x3)    add(memd_a32(ss, ebp + 0x8), eax);     /* add [ebp+0x8], eax */
//    II(0x1018d06c, 0x7)    cmp(memd_a32(ds, 0x102088fc), 0);      /* cmp dword [0x102088fc], 0x0 */
//    II(0x1018d073, 0x2)    jnzd(0x1018d0a3, 0x2e);                /* jnz 0x1018d0a3 */
//    II(0x1018d075, 0x6)    mov(edi, memd_a32(ds, 0x10208918));    /* mov edi, [0x10208918] */
//    II(0x1018d07b, 0x3)    mov(eax, memd_a32(ss, ebp + 0x28));    /* mov eax, [ebp+0x28] */
//    II(0x1018d07e, 0x3)    mul(memd_a32(ss, ebp - 0x10));         /* mul dword [ebp-0x10] */
//    II(0x1018d081, 0x3)    add(eax, memd_a32(ss, ebp + 0x24));    /* add eax, [ebp+0x24] */
//    II(0x1018d084, 0x2)    add(edi, eax);                         /* add edi, eax */
//    II(0x1018d086, 0x3)    mov(eax, memd_a32(ss, ebp - 0xc));     /* mov eax, [ebp-0xc] */
//    II(0x1018d089, 0x3)    mov(edx, memd_a32(ss, ebp - 0x14));    /* mov edx, [ebp-0x14] */
//    II(0x1018d08c, 0x3)    mov(esi, memd_a32(ss, ebp + 0x8));     /* mov esi, [ebp+0x8] */
//    II(0x1018d08f, 0x3)    mov(ebx, memd_a32(ss, ebp + 0x20));    /* mov ebx, [ebp+0x20] */
//l_0x1018d092:
//    II(0x1018d092, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x1018d095, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */
//    II(0x1018d097, 0x2)    add(esi, eax);                         /* add esi, eax */
//    II(0x1018d099, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x1018d09b, 0x1)    dec(ebx);                              /* dec ebx */
//    II(0x1018d09c, 0x2)    jnzd(0x1018d092, -0xc);                /* jnz 0x1018d092 */
//    II(0x1018d09e, 0x5)    jmpd(0x1018d15c, 0xb9);                /* jmp 0x1018d15c */
//l_0x1018d0a3:
//    II(0x1018d0a3, 0x3)    mov(esi, memd_a32(ss, ebp + 0x8));     /* mov esi, [ebp+0x8] */
//    II(0x1018d0a6, 0x3)    mov(eax, memd_a32(ss, ebp - 0x10));    /* mov eax, [ebp-0x10] */
//    II(0x1018d0a9, 0x3)    mul(memd_a32(ss, ebp + 0x28));         /* mul dword [ebp+0x28] */
//    II(0x1018d0ac, 0x3)    add(eax, memd_a32(ss, ebp + 0x24));    /* add eax, [ebp+0x24] */
//    II(0x1018d0af, 0x5)    mov(edx, 0);                           /* mov edx, 0x0 */
//    II(0x1018d0b4, 0x6)    div(memd_a32(ds, 0x10208908));         /* div dword [0x10208908] */        // 0x10000
//    II(0x1018d0ba, 0x3)    mov(memd_a32(ss, ebp - 0x4), eax);     /* mov [ebp-0x4], eax */
//    II(0x1018d0bd, 0x2)    mov(edi, edx);                         /* mov edi, edx */
//    II(0x1018d0bf, 0x6)    add(edi, memd_a32(ds, 0x10208918));    /* add edi, [0x10208918] */        // 0xa0000
//    II(0x1018d0c5, 0x2)    mov(bh, 0);                            /* mov bh, 0x0 */
//    II(0x1018d0c7, 0x6)    mov(bl, memb_a32(ds, 0x10208900));     /* mov bl, [0x10208900] */
//    II(0x1018d0cd, 0x3)    mov(edx, memd_a32(ss, ebp - 0x4));     /* mov edx, [ebp-0x4] */
//    II(0x1018d0d0, 0x6)    calld_abs(memd_a32(ds, 0x102088fc));   /* call dword near [0x102088fc] */
//l_0x1018d0d6:
//    II(0x1018d0d6, 0x5)    mov(eax, memd_a32(ds, 0x10208910));    /* mov eax, [0x10208910] */    // 0xb0000
//    II(0x1018d0db, 0x2)    sub(eax, edi);                         /* sub eax, edi */            // eax - кол-во оставшихся байт в видео памяти.
//    II(0x1018d0dd, 0x3)    add(eax, memd_a32(ss, ebp - 0x10));    /* add eax, [ebp-0x10] */
//    II(0x1018d0e0, 0x3)    sub(eax, memd_a32(ss, ebp + 0x1c));    /* sub eax, [ebp+0x1c] */
//    II(0x1018d0e3, 0x5)    mov(edx, 0);                           /* mov edx, 0x0 */
//    II(0x1018d0e8, 0x3)    div(memd_a32(ss, ebp - 0x10));         /* div dword [ebp-0x10] */
//    II(0x1018d0eb, 0x3)    cmp(memd_a32(ss, ebp + 0x20), eax);    /* cmp [ebp+0x20], eax */
//    II(0x1018d0ee, 0x2)    jaed(0x1018d0f3, 0x3);                 /* jae 0x1018d0f3 */
//    II(0x1018d0f0, 0x3)    mov(eax, memd_a32(ss, ebp + 0x20));    /* mov eax, [ebp+0x20] */
//l_0x1018d0f3:
//    II(0x1018d0f3, 0x2)    or_(eax, eax);                         /* or eax, eax */
//    II(0x1018d0f5, 0x2)    jzd(0x1018d10c, 0x15);                 /* jz 0x1018d10c */
//    II(0x1018d0f7, 0x3)    sub(memd_a32(ss, ebp + 0x20), eax);    /* sub [ebp+0x20], eax */
//    II(0x1018d0fa, 0x3)    mov(ebx, memd_a32(ss, ebp - 0xc));     /* mov ebx, [ebp-0xc] */
//    II(0x1018d0fd, 0x3)    mov(edx, memd_a32(ss, ebp - 0x14));    /* mov edx, [ebp-0x14] */
//l_0x1018d100:
//    II(0x1018d100, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x1018d103, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */        // Копирование в видео память линии 640x1.
//    II(0x1018d105, 0x2)    add(esi, ebx);                         /* add esi, ebx */
//    II(0x1018d107, 0x2)    add(edi, edx);                         /* add edi, edx */
//    II(0x1018d109, 0x1)    dec(eax);                              /* dec eax */
//    II(0x1018d10a, 0x2)    jnzd(0x1018d100, -0xc);                /* jnz 0x1018d100 */
//l_0x1018d10c:
//    II(0x1018d10c, 0x3)    or_(eax, memd_a32(ss, ebp + 0x20));    /* or eax, [ebp+0x20] */
//    II(0x1018d10f, 0x2)    jzd(0x1018d15c, 0x4b);                 /* jz 0x1018d15c */
//    II(0x1018d111, 0x6)    mov(ecx, memd_a32(ds, 0x10208910));    /* mov ecx, [0x10208910] */    // 0xb0000
//    II(0x1018d117, 0x2)    sub(ecx, edi);                         /* sub ecx, edi */    // ecx - Оствшееся место в видео памяти.
//    II(0x1018d119, 0x3)    sar(ecx, 0x2);                         /* sar ecx, 0x2 */
//    II(0x1018d11c, 0x2)    jnsd(0x1018d123, 0x5);                 /* jns 0x1018d123 */
//    II(0x1018d11e, 0x5)    mov(ecx, 0);                           /* mov ecx, 0x0 */
//l_0x1018d123:
//    II(0x1018d123, 0x1)    pushd(ecx);                            /* push ecx */
//    II(0x1018d124, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */        // Копирование начала линии в оставшуюся часть видео памяти.
//    II(0x1018d126, 0x5)    mov(eax, memd_a32(ds, 0x102088f0));    /* mov eax, [0x102088f0] */
//    II(0x1018d12b, 0x3)    add(memd_a32(ss, ebp - 0x4), eax);     /* add [ebp-0x4], eax */
//    II(0x1018d12e, 0x6)    sub(edi, memd_a32(ds, 0x10208914));    /* sub edi, [0x10208914] */    // 0x10000
//    II(0x1018d134, 0x2)    mov(bh, 0);                            /* mov bh, 0x0 */
//    II(0x1018d136, 0x6)    mov(bl, memb_a32(ds, 0x10208900));     /* mov bl, [0x10208900] */
//    II(0x1018d13c, 0x3)    mov(edx, memd_a32(ss, ebp - 0x4));     /* mov edx, [ebp-0x4] */        // Номер банка видео памяти.
//    II(0x1018d13f, 0x6)    calld_abs(memd_a32(ds, 0x102088fc));   /* call dword near [0x102088fc] */    // func_0x1018cda8. int33 - SetCPUWindow?
//    II(0x1018d145, 0x1)    popd(eax);                             /* pop eax */
//    II(0x1018d146, 0x3)    mov(ecx, memd_a32(ss, ebp - 0x8));     /* mov ecx, [ebp-0x8] */
//    II(0x1018d149, 0x2)    sub(ecx, eax);                         /* sub ecx, eax */
//    II(0x1018d14b, 0x2)    rep_a32 movsd_a32();                   /* rep movsd  */        // Копирование конца линии в начало видео памяти.
//    II(0x1018d14d, 0x3)    add(esi, memd_a32(ss, ebp - 0xc));     /* add esi, [ebp-0xc] */
//    II(0x1018d150, 0x3)    add(edi, memd_a32(ss, ebp - 0x14));    /* add edi, [ebp-0x14] */
//    II(0x1018d153, 0x3)    dec(memd_a32(ss, ebp + 0x20));         /* dec dword [ebp+0x20] */
//    II(0x1018d156, 0x6)    jnzd(0x1018d0d6, -0x86);               /* jnz dword 0x1018d0d6 */
//l_0x1018d15c:
//    II(0x1018d15c, 0x1)    popd(edi);                             /* pop edi */
//    II(0x1018d15d, 0x1)    popd(esi);                             /* pop esi */
//    II(0x1018d15e, 0x1)    popd(edx);                             /* pop edx */
//    II(0x1018d15f, 0x1)    popd(ecx);                             /* pop ecx */
//    II(0x1018d160, 0x1)    popd(ebx);                             /* pop ebx */
//    II(0x1018d161, 0x1)    popd(eax);                             /* pop eax */
//    II(0x1018d162, 0x1)    leaved();                              /* leave  */
//    II(0x1018d163, 0x1)    retd();                                /* ret  */
//}

} /* namespace raw_program */
