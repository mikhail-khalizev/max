//#include <map>
//#include "x86/bin_to_cxx.hpp"

//namespace raw_program {
//extern std::multimap<uint32_t /* where */ , uint32_t /* to */> reloc_addr;
//} /* namespace raw_program */


FUNC_BEGIN(0x0015ba47, 0xed206829ce26620b, 0x10, ({0xc8, 0x16, 0, 0, 0x56, 0x1e, 0xb8, 0xa8, 0, 0x8e, 0xd8, 0xc6, 0x46, 0xf4, 0, 0x2b, 0xc0, 0x89, 0x46, 0xf2, 0x89, 0x46, 0xf0, 0x8b, 0x46, 0xe, 0xeb, 0x7d, 0x8b, 0x46, 0x10, 0x89, 0x46, 0xf6, 0xc7, 0x46, 0xf8, 0, 0, 0xc7, 0x46, 0xfe, 0x2, 0, 0xe9, 0x89, 0, 0x8b, 0x46, 0x12, 0x8b, 0x56, 0x14, 0x89, 0x46, 0xf6, 0x89, 0x56, 0xf8, 0xeb, 0xea, 0x8b, 0x46, 0x12, 0x8b, 0x56, 0x14, 0x89, 0x46, 0xf6, 0x89, 0x56, 0xf8, 0x83, 0x7e, 0xe, 0x7, 0x75, 0x5, 0xb8, 0x4, 0, 0xeb, 0x3, 0xb8, 0x1, 0, 0x89, 0x46, 0xfe, 0xeb, 0x5c, 0x8b, 0x46, 0x12, 0x8b, 0x56, 0x14, 0x89, 0x46, 0xf6, 0x89, 0x56, 0xf8, 0x8b, 0x46, 0x10, 0x89, 0x46, 0xf0, 0xc7, 0x46, 0xf2, 0, 0, 0xc7, 0x46, 0xfe, 0x6, 0, 0xeb, 0x3e, 0x8b, 0x46, 0x10, 0x8b, 0x4e, 0x12, 0x89, 0x4e, 0xf6, 0x89, 0x46, 0xf8, 0xc7, 0x46, 0xfe, 0x4, 0, 0xeb, 0x2b, 0xfe, 0x46, 0xf4, 0xeb, 0xf4, 0xc7, 0x46, 0xfe, 0, 0, 0xeb, 0x1f, 0x3d, 0x8, 0, 0x77, 0xf4, 0xd1, 0xe0, 0x93, 0x2e, 0xff, 0xa7, 0xcd, 0x66, 0x64, 0x66, 0xb9, 0x66, 0x43, 0x66, 0xa1, 0x66, 0xb9, 0x66, 0x56, 0x66, 0x83, 0x66, 0x64, 0x66, 0xb4, 0x66, 0x8b, 0x46, 0xf6, 0x8b, 0x56, 0xf8, 0xa3, 0x34, 0x21, 0x89, 0x16, 0x36, 0x21, 0x8b, 0x46, 0xf0, 0x8b, 0x56, 0xf2, 0xa3, 0x38, 0x21, 0x89, 0x16, 0x3a, 0x21, 0xe9, 0x87, 0, 0x8b, 0x5e, 0x16, 0xd1, 0xe3, 0xc4, 0x76, 0x18, 0x26, 0x8b, 0, 0x89, 0x46, 0xec, 0x89, 0x46, 0xee, 0x80, 0x7e, 0xf4, 0, 0x74, 0x21, 0x99, 0x8b, 0x4e, 0x12, 0x8b, 0x5e, 0x14, 0x2b, 0xc8, 0x1b, 0xda, 0x8b, 0x46, 0xfe, 0x99, 0x2b, 0xc8, 0x1b, 0xda, 0x2b, 0x4e, 0xa, 0x1b, 0x5e, 0xc, 0x89, 0xe, 0x34, 0x21, 0x89, 0x1e, 0x36, 0x21, 0xff, 0x76, 0xfe, 0xb8, 0x34, 0x21, 0x89, 0x46, 0xfa, 0x8c, 0x5e, 0xfc, 0x1e, 0x50, 0xff, 0x76, 0xec, 0xff, 0x76, 0x8, 0xff, 0x76, 0x6, 0xe, 0xe8, 0xd7, 0xfe, 0x83, 0xc4, 0xc, 0xeb, 0x6, 0xff, 0x46, 0xee, 0xff, 0x46, 0xfa, 0x8b, 0x46, 0xec, 0x3, 0x46, 0xfe, 0x3b, 0x46, 0xee, 0x7e, 0x1e, 0x81, 0x7e, 0xee, 0, 0x10, 0x7d, 0x17, 0x83, 0x7e, 0xee, 0, 0x7c, 0xe2, 0xc4, 0x5e, 0xfa, 0x26, 0x8a, 0x7, 0xc4, 0x5e, 0x6, 0x8b, 0x76, 0xee, 0x26, 0x88, 0, 0xeb, 0xd1, 0x8b, 0x46, 0x16, 0xff, 0x4e, 0x16, 0xb, 0xc0, 0x74, 0x3, 0xe9, 0x6c, 0xff, 0x1f, 0x5e, 0xc9, 0xcb}))

//int a = -1;
//uint32_t to;

    II(0x0015ba47, 0x4)   enterw(0x16, 0);                      /* enter 0x16, 0x0 */
    II(0x0015ba4b, 0x1)   pushw(si);                            /* push si */
    II(0x0015ba4c, 0x1)   pushw(ds);                            /* push ds */
    II(0x0015ba4d, 0x3)   mov(ax, 0xa8);                        /* mov ax, 0xa8 */
    II(0x0015ba50, 0x2)   mov(ds, ax);                          /* mov ds, ax */
    II(0x0015ba52, 0x4)   mov(memb_a16(ss, bp - 0xc), 0);       /* mov byte [bp-0xc], 0x0 */
    II(0x0015ba56, 0x2)   sub(ax, ax);                          /* sub ax, ax */
    II(0x0015ba58, 0x3)   mov(memw_a16(ss, bp - 0xe), ax);      /* mov [bp-0xe], ax */
    II(0x0015ba5b, 0x3)   mov(memw_a16(ss, bp - 0x10), ax);     /* mov [bp-0x10], ax */
    II(0x0015ba5e, 0x3)   mov(ax, memw_a16(ss, bp + 0xe));      /* mov ax, [bp+0xe] */
    II(0x0015ba61, 0x2)   jmpw(0x0015bae0, 0x7d);               /* jmp 0x15bae0 */       // switch (ax) {
l_0x0015ba63:
    II(0x0015ba63, 0x3)   mov(ax, memw_a16(ss, bp + 0x10));     /* mov ax, [bp+0x10] */      // case 2:
    II(0x0015ba66, 0x3)   mov(memw_a16(ss, bp - 0xa), ax);      /* mov [bp-0xa], ax */       // segment?
    II(0x0015ba69, 0x5)   mov(memw_a16(ss, bp - 0x8), 0);       /* mov word [bp-0x8], 0x0 */
l_0x0015ba6e:
    II(0x0015ba6e, 0x5)   mov(memw_a16(ss, bp - 0x2), 0x2);     /* mov word [bp-0x2], 0x2 */
    II(0x0015ba73, 0x3)   jmpw(0x0015baff, 0x89);               /* jmp 0x15baff */           // break;
l_0x0015ba76:
    II(0x0015ba76, 0x3)   mov(ax, memw_a16(ss, bp + 0x12));     /* mov ax, [bp+0x12] */      // case 5:
    II(0x0015ba79, 0x3)   mov(dx, memw_a16(ss, bp + 0x14));     /* mov dx, [bp+0x14] */
    II(0x0015ba7c, 0x3)   mov(memw_a16(ss, bp - 0xa), ax);      /* mov [bp-0xa], ax */
    II(0x0015ba7f, 0x3)   mov(memw_a16(ss, bp - 0x8), dx);      /* mov [bp-0x8], dx */
    II(0x0015ba82, 0x2)   jmpw(0x0015ba6e, -0x16);              /* jmp 0x15ba6e */
l_0x0015ba84:
    II(0x0015ba84, 0x3)   mov(ax, memw_a16(ss, bp + 0x12));     /* mov ax, [bp+0x12] */      // case 0: case 7:
    II(0x0015ba87, 0x3)   mov(dx, memw_a16(ss, bp + 0x14));     /* mov dx, [bp+0x14] */
    II(0x0015ba8a, 0x3)   mov(memw_a16(ss, bp - 0xa), ax);      /* mov [bp-0xa], ax */
    II(0x0015ba8d, 0x3)   mov(memw_a16(ss, bp - 0x8), dx);      /* mov [bp-0x8], dx */
    II(0x0015ba90, 0x4)   cmp(memw_a16(ss, bp + 0xe), 0x7);     /* cmp word [bp+0xe], 0x7 */
    II(0x0015ba94, 0x2)   jnzw(0x0015ba9b, 0x5);                /* jnz 0x15ba9b */

//std::cout << "addr " ;
//write_addr(std::cout, (dx << 16) + ax);
//to = (dx << 16) + ax;
//a = 0;

    II(0x0015ba96, 0x3)   mov(ax, 0x4);                         /* mov ax, 0x4 */
    II(0x0015ba99, 0x2)   jmpw(0x0015ba9e, 0x3);                /* jmp 0x15ba9e */
l_0x0015ba9b:
    II(0x0015ba9b, 0x3)   mov(ax, 0x1);                         /* mov ax, 0x1 */
l_0x0015ba9e:
    II(0x0015ba9e, 0x3)   mov(memw_a16(ss, bp - 0x2), ax);      /* mov [bp-0x2], ax */
    II(0x0015baa1, 0x2)   jmpw(0x0015baff, 0x5c);               /* jmp 0x15baff */            // break;
l_0x0015baa3:
    II(0x0015baa3, 0x3)   mov(ax, memw_a16(ss, bp + 0x12));     /* mov ax, [bp+0x12] */       // case 6:
    II(0x0015baa6, 0x3)   mov(dx, memw_a16(ss, bp + 0x14));     /* mov dx, [bp+0x14] */
    II(0x0015baa9, 0x3)   mov(memw_a16(ss, bp - 0xa), ax);      /* mov [bp-0xa], ax */
    II(0x0015baac, 0x3)   mov(memw_a16(ss, bp - 0x8), dx);      /* mov [bp-0x8], dx */
    II(0x0015baaf, 0x3)   mov(ax, memw_a16(ss, bp + 0x10));     /* mov ax, [bp+0x10] */
    II(0x0015bab2, 0x3)   mov(memw_a16(ss, bp - 0x10), ax);     /* mov [bp-0x10], ax */
    II(0x0015bab5, 0x5)   mov(memw_a16(ss, bp - 0xe), 0);       /* mov word [bp-0xe], 0x0 */
    II(0x0015baba, 0x5)   mov(memw_a16(ss, bp - 0x2), 0x6);     /* mov word [bp-0x2], 0x6 */
    II(0x0015babf, 0x2)   jmpw(0x0015baff, 0x3e);               /* jmp 0x15baff */             // break;
l_0x0015bac1:
    II(0x0015bac1, 0x3)   mov(ax, memw_a16(ss, bp + 0x10));     /* mov ax, [bp+0x10] */        // case 3:
    II(0x0015bac4, 0x3)   mov(cx, memw_a16(ss, bp + 0x12));     /* mov cx, [bp+0x12] */
    II(0x0015bac7, 0x3)   mov(memw_a16(ss, bp - 0xa), cx);      /* mov [bp-0xa], cx */
    II(0x0015baca, 0x3)   mov(memw_a16(ss, bp - 0x8), ax);      /* mov [bp-0x8], ax */
l_0x0015bacd:
    II(0x0015bacd, 0x5)   mov(memw_a16(ss, bp - 0x2), 0x4);     /* mov word [bp-0x2], 0x4 */
    II(0x0015bad2, 0x2)   jmpw(0x0015baff, 0x2b);               /* jmp 0x15baff */             // break;
l_0x0015bad4:
    II(0x0015bad4, 0x3)   inc(memb_a16(ss, bp - 0xc));          /* inc byte [bp-0xc] */        // case 8:
    II(0x0015bad7, 0x2)   jmpw(0x0015bacd, -0xc);               /* jmp 0x15bacd */
l_0x0015bad9:
    II(0x0015bad9, 0x5)   mov(memw_a16(ss, bp - 0x2), 0);       /* mov word [bp-0x2], 0x0 */   // case 1: case 4:
    II(0x0015bade, 0x2)   jmpw(0x0015baff, 0x1f);               /* jmp 0x15baff */             // break;
l_0x0015bae0:
    II(0x0015bae0, 0x3)   cmp(ax, 0x8);                         /* cmp ax, 0x8 */
    II(0x0015bae3, 0x2)   jaw(0x0015bad9, -0xc);                /* ja 0x15bad9 */
    II(0x0015bae5, 0x2)   shl(ax, 0x1);                         /* shl ax, 1 */
    II(0x0015bae7, 0x1)   xchg(bx, ax);                         /* xchg bx, ax */
    II(0x0015bae8, 0x5)   jmpw_abs_switch(memw_a16(cs, bx + 0x66cd), (0x0015ba63)(0x0015ba76)(0x0015ba84)(0x0015baa3)(0x0015bac1)(0x0015bad4)(0x0015bad9)); /* jmp word near [cs:bx+0x66cd] */
//    II(0x0015baed, 0x12)  /* Служебная область с абсолютными адресами переходов. {0x0015ba84, 0x0015bad9, 0x0015ba63, 0x0015bac1, 0x0015bad9, 0x0015ba76, 0x0015baa3, 0x0015ba84, 0x0015bad4}. */
l_0x0015baff:
    II(0x0015baff, 0x3)   mov(ax, memw_a16(ss, bp - 0xa));      /* mov ax, [bp-0xa] */  // {dx, ax} - указатель, который записываем.
    II(0x0015bb02, 0x3)   mov(dx, memw_a16(ss, bp - 0x8));      /* mov dx, [bp-0x8] */
    II(0x0015bb05, 0x3)   mov(memw_a16(ds, 0x2134), ax);        /* mov [0x2134], ax */
    II(0x0015bb08, 0x4)   mov(memw_a16(ds, 0x2136), dx);        /* mov [0x2136], dx */
    II(0x0015bb0c, 0x3)   mov(ax, memw_a16(ss, bp - 0x10));     /* mov ax, [bp-0x10] */ // опционально сегмент?
    II(0x0015bb0f, 0x3)   mov(dx, memw_a16(ss, bp - 0xe));      /* mov dx, [bp-0xe] */  // always 0.
    II(0x0015bb12, 0x3)   mov(memw_a16(ds, 0x2138), ax);        /* mov [0x2138], ax */
    II(0x0015bb15, 0x4)   mov(memw_a16(ds, 0x213a), dx);        /* mov [0x213a], dx */
    II(0x0015bb19, 0x3)   jmpw(0x0015bba3, 0x87);               /* jmp 0x15bba3 */
l_0x0015bb1c:
    II(0x0015bb1c, 0x3)   mov(bx, memw_a16(ss, bp + 0x16));     /* mov bx, [bp+0x16] */
    II(0x0015bb1f, 0x2)   shl(bx, 0x1);                         /* shl bx, 1 */
    II(0x0015bb21, 0x3)   les(si, ss, bp + 0x18);               /* les si, [bp+0x18] */
    II(0x0015bb24, 0x3)   mov(ax, memw_a16(es, bx + si));       /* mov ax, [es:bx+si] */
    II(0x0015bb27, 0x3)   mov(memw_a16(ss, bp - 0x14), ax);     /* mov [bp-0x14], ax */
    II(0x0015bb2a, 0x3)   mov(memw_a16(ss, bp - 0x12), ax);     /* mov [bp-0x12], ax */
    II(0x0015bb2d, 0x4)   cmp(memb_a16(ss, bp - 0xc), 0);       /* cmp byte [bp-0xc], 0x0 */
    II(0x0015bb31, 0x2)   jzw(0x0015bb54, 0x21);                /* jz 0x15bb54 */
    II(0x0015bb33, 0x1)   cwd();                                /* cwd  */
    II(0x0015bb34, 0x3)   mov(cx, memw_a16(ss, bp + 0x12));     /* mov cx, [bp+0x12] */
    II(0x0015bb37, 0x3)   mov(bx, memw_a16(ss, bp + 0x14));     /* mov bx, [bp+0x14] */
    II(0x0015bb3a, 0x2)   sub(cx, ax);                          /* sub cx, ax */
    II(0x0015bb3c, 0x2)   sbb(bx, dx);                          /* sbb bx, dx */
    II(0x0015bb3e, 0x3)   mov(ax, memw_a16(ss, bp - 0x2));      /* mov ax, [bp-0x2] */
    II(0x0015bb41, 0x1)   cwd();                                /* cwd  */
    II(0x0015bb42, 0x2)   sub(cx, ax);                          /* sub cx, ax */
    II(0x0015bb44, 0x2)   sbb(bx, dx);                          /* sbb bx, dx */
    II(0x0015bb46, 0x3)   sub(cx, memw_a16(ss, bp + 0xa));      /* sub cx, [bp+0xa] */
    II(0x0015bb49, 0x3)   sbb(bx, memw_a16(ss, bp + 0xc));      /* sbb bx, [bp+0xc] */
    II(0x0015bb4c, 0x4)   mov(memw_a16(ds, 0x2134), cx);        /* mov [0x2134], cx */
    II(0x0015bb50, 0x4)   mov(memw_a16(ds, 0x2136), bx);        /* mov [0x2136], bx */
l_0x0015bb54:
//    II(0x0015bb54, 0x3)   pushw(memw_a16(ss, bp - 0x2));        /* push word [bp-0x2] */
    II(0x0015bb57, 0x3)   mov(ax, 0x2134);                      /* mov ax, 0x2134 */
    II(0x0015bb5a, 0x3)   mov(memw_a16(ss, bp - 0x6), ax);      /* mov [bp-0x6], ax */
    II(0x0015bb5d, 0x3)   mov(memw_a16(ss, bp - 0x4), ds);      /* mov [bp-0x4], ds */
//    II(0x0015bb60, 0x1)   pushw(ds);                            /* push ds */
//    II(0x0015bb61, 0x1)   pushw(ax);                            /* push ax */
//    II(0x0015bb62, 0x3)   pushw(memw_a16(ss, bp - 0x14));       /* push word [bp-0x14] */
//    II(0x0015bb65, 0x3)   pushw(memw_a16(ss, bp + 0x8));        /* push word [bp+0x8] */
//    II(0x0015bb68, 0x3)   pushw(memw_a16(ss, bp + 0x6));        /* push word [bp+0x6] */
//    II(0x0015bb6b, 0x1)   pushw(cs);                            /* push cs */
//    II(0x0015bb6c, 0x3)   callw(0x0015ba46, -0x129);            /* call 0x15ba46 */
//    II(0x0015bb6f, 0x3)   add(sp, 0xc);                         /* add sp, 0xc */
    II(0x0015bb72, 0x2)   jmpw(0x0015bb7a, 0x6);                /* jmp 0x15bb7a */
l_0x0015bb74:
    II(0x0015bb74, 0x3)   inc(memw_a16(ss, bp - 0x12));         /* inc word [bp-0x12] */
    II(0x0015bb77, 0x3)   inc(memw_a16(ss, bp - 0x6));          /* inc word [bp-0x6] */
l_0x0015bb7a:
    II(0x0015bb7a, 0x3)   mov(ax, memw_a16(ss, bp - 0x14));     /* mov ax, [bp-0x14] */   // Смещние начала указателя.
    II(0x0015bb7d, 0x3)   add(ax, memw_a16(ss, bp - 0x2));      /* add ax, [bp-0x2] */    // Длина указателя: 0x4.
    II(0x0015bb80, 0x3)   cmp(ax, memw_a16(ss, bp - 0x12));     /* cmp ax, [bp-0x12] */   // Текущее смещение в странице назначения.
    II(0x0015bb83, 0x2)   jlew(0x0015bba3, 0x1e);               /* jle 0x15bba3 */
    II(0x0015bb85, 0x5)   cmp(memw_a16(ss, bp - 0x12), 0x1000); /* cmp word [bp-0x12], 0x1000 */ // Вышли за пределы страницы.
    II(0x0015bb8a, 0x2)   jgew(0x0015bba3, 0x17);               /* jge 0x15bba3 */
    II(0x0015bb8c, 0x4)   cmp(memw_a16(ss, bp - 0x12), 0);      /* cmp word [bp-0x12], 0x0 */
    II(0x0015bb90, 0x2)   jlw(0x0015bb74, -0x1e);               /* jl 0x15bb74 */
    II(0x0015bb92, 0x3)   les(bx, ss, bp - 0x6);                /* les bx, [bp-0x6] */    // Откуда копируем.
    II(0x0015bb95, 0x3)   mov(al, memb_a16(es, bx));            /* mov al, [es:bx] */
    II(0x0015bb98, 0x3)   les(bx, ss, bp + 0x6);                /* les bx, [bp+0x6] */    // Куда копируем. bx всегда 0?
    II(0x0015bb9b, 0x3)   mov(si, memw_a16(ss, bp - 0x12));     /* mov si, [bp-0x12] */   //    + смещение.

//if (a == 0)
//{
//    reloc_addr.insert(std::make_pair(es.get_base() + bx + si ,to));
//    std::cout << " in "; write_addr(std::cout, es.get_base() + bx + si); std::cout << std::endl;
//    a++;
//}

    II(0x0015bb9e, 0x3)   mov(memb_a16(es, bx + si), al);       /* mov [es:bx+si], al */  // Записть адресов функций в virtual table?
    II(0x0015bba1, 0x2)   jmpw(0x0015bb74, -0x2f);              /* jmp 0x15bb74 */
l_0x0015bba3:
    II(0x0015bba3, 0x3)   mov(ax, memw_a16(ss, bp + 0x16));     /* mov ax, [bp+0x16] */   // Сколько указателей копируем.
    II(0x0015bba6, 0x3)   dec(memw_a16(ss, bp + 0x16));         /* dec word [bp+0x16] */
    II(0x0015bba9, 0x2)   or_(ax, ax);                          /* or ax, ax */
    II(0x0015bbab, 0x2)   jzw(0x0015bbb0, 0x3);                 /* jz 0x15bbb0 */
    II(0x0015bbad, 0x3)   jmpw(0x0015bb1c, -0x94);              /* jmp 0x15bb1c */
l_0x0015bbb0:
    II(0x0015bbb0, 0x1)   popw(ds);                             /* pop ds */
    II(0x0015bbb1, 0x1)   popw(si);                             /* pop si */
    II(0x0015bbb2, 0x1)   leavew();                             /* leave  */
    II(0x0015bbb3, 0x1)   retfw();                              /* retf  */
FUNC_END

