FUNC_BEGIN(0x0015d8fa, 0x1d7d960fc7c9ed89, 0x10, ({0x55, 0x8b, 0xec, 0x1e, 0x6, 0xf, 0xa0, 0xf, 0xa8, 0x56, 0x57, 0x68, 0xa8, 0, 0x1f, 0x8c, 0xd0, 0x8e, 0xe8, 0xa3, 0x92, 0x2b, 0x89, 0x26, 0x90, 0x2b, 0xb0, 0x88, 0xe6, 0x99, 0x66, 0xc4, 0x3e, 0x94, 0x2b, 0x67, 0x66, 0x26, 0x8b, 0x7, 0x67, 0x66, 0x26, 0x8b, 0x87, 0, 0xf8, 0xff, 0xff, 0x66, 0xf, 0xb2, 0x26, 0x94, 0x2b, 0xf, 0xa1, 0x66, 0x83, 0xc4, 0x2, 0x16, 0x16, 0x1f, 0x7, 0x66, 0x8b, 0xf4, 0x66, 0x81, 0xee, 0, 0xc, 0, 0, 0x67, 0xc6, 0x6, 0x68, 0x67, 0xc7, 0x46, 0x1, 0x88, 0, 0x67, 0xc7, 0x46, 0x3, 0, 0, 0x67, 0xc6, 0x46, 0x5, 0x68, 0x67, 0xc7, 0x46, 0x6, 0x64, 0x85, 0x67, 0xc7, 0x46, 0x8, 0, 0, 0x67, 0xc6, 0x46, 0xa, 0xcb, 0x66, 0x56, 0x66, 0x33, 0xc0, 0x66, 0x33, 0xdb, 0x66, 0x33, 0xc9, 0x66, 0x33, 0xd2, 0x66, 0x33, 0xff, 0x66, 0x33, 0xf6, 0x66, 0x65, 0xff, 0x6e, 0x6}))
    II(0x0015d8fa, 0x1)   pushw(bp);                            /* push bp */
    II(0x0015d8fb, 0x2)   mov(bp, sp);                          /* mov bp, sp */
    II(0x0015d8fd, 0x1)   pushw(ds);                            /* push ds */
    II(0x0015d8fe, 0x1)   pushw(es);                            /* push es */
    II(0x0015d8ff, 0x2)   pushw(fs);                            /* push fs */
    II(0x0015d901, 0x2)   pushw(gs);                            /* push gs */
    II(0x0015d903, 0x1)   pushw(si);                            /* push si */
    II(0x0015d904, 0x1)   pushw(di);                            /* push di */
    II(0x0015d905, 0x3)   pushw(0xa8);                          /* push word 0xa8 */
    II(0x0015d908, 0x1)   popw(ds);                             /* pop ds */
    II(0x0015d909, 0x2)   mov(ax, ss);                          /* mov ax, ss */
    II(0x0015d90b, 0x2)   mov(gs, ax);                          /* mov gs, ax */
    II(0x0015d90d, 0x3)   mov(memw_a16(ds, 0x2b92), ax);        /* mov [0x2b92], ax */
    II(0x0015d910, 0x4)   mov(memw_a16(ds, 0x2b90), sp);        /* mov [0x2b90], sp */
    II(0x0015d914, 0x2)   mov(al, 0x88);                        /* mov al, 0x88 */
    II(0x0015d916, 0x2)   outb(0x99, al);                       /* out 0x99, al */
    II(0x0015d918, 0x5)   les(edi, ds, 0x2b94);                 /* les edi, [0x2b94] */
    II(0x0015d91d, 0x5)   mov(eax, memd_a32(es, edi));          /* mov eax, [es:edi] */
    II(0x0015d922, 0x9)   mov(eax, memd_a32(es, edi - 0x800));  /* mov eax, [es:edi+0xfffff800] */
    II(0x0015d92b, 0x6)   lss(esp, ds, 0x2b94);                 /* lss esp, [0x2b94] */
    II(0x0015d931, 0x2)   popw(fs);                             /* pop fs */
    II(0x0015d933, 0x4)   add(esp, 0x2);                        /* add esp, 0x2 */
    II(0x0015d937, 0x1)   pushw(ss);                            /* push ss */
    II(0x0015d938, 0x1)   pushw(ss);                            /* push ss */
    II(0x0015d939, 0x1)   popw(ds);                             /* pop ds */
    II(0x0015d93a, 0x1)   popw(es);                             /* pop es */
    II(0x0015d93b, 0x3)   mov(esi, esp);                        /* mov esi, esp */
    II(0x0015d93e, 0x7)   sub(esi, 0xc00);                      /* sub esi, 0xc00 */
    II(0x0015d945, 0x4)   mov(memb_a32(ds, esi), 0x68);         /* mov byte [esi], 0x68 */
    II(0x0015d949, 0x6)   mov(memw_a32(ds, esi + 0x1), 0x88);   /* mov word [esi+0x1], 0x88 */
    II(0x0015d94f, 0x6)   mov(memw_a32(ds, esi + 0x3), 0);      /* mov word [esi+0x3], 0x0 */
    II(0x0015d955, 0x5)   mov(memb_a32(ds, esi + 0x5), 0x68);   /* mov byte [esi+0x5], 0x68 */
    II(0x0015d95a, 0x6)   mov(memw_a32(ds, esi + 0x6), 0x8564); /* mov word [esi+0x6], 0x8564 */
    II(0x0015d960, 0x6)   mov(memw_a32(ds, esi + 0x8), 0);      /* mov word [esi+0x8], 0x0 */
    II(0x0015d966, 0x5)   mov(memb_a32(ds, esi + 0xa), 0xcb);   /* mov byte [esi+0xa], 0xcb */
    II(0x0015d96b, 0x2)   pushd(esi);                           /* push esi */
    II(0x0015d96d, 0x3)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x0015d970, 0x3)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x0015d973, 0x3)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x0015d976, 0x3)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x0015d979, 0x3)   xor_(edi, edi);                       /* xor edi, edi */
    II(0x0015d97c, 0x3)   xor_(esi, esi);                       /* xor esi, esi */
    II(0x0015d97f, 0x5)   jmpd_a16_far_ind(gs, bp + 0x6);       /* jmp dword far [gs:bp+0x6] */
FUNC_END

