#include "program/manual/file_mve/support.hpp"

FUNC_BEGIN(0x1018ea30, 0xc40c64701e771923, 0x20, ({}))

    static uint8_t code_template[] = {0x66, 0x8b, 0x6, 0x38, 0xe0, 0xf, 0x87, 0xa5, 0x1, 0, 0, 0x33, 0xc0, 0x8d, 0xd, 0x10, 0xf1, 0x1b, 0x10, 0x8d, 0x15, 0x12, 0xeb, 0x18, 0x10, 0x8a, 0x46, 0x2, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x6, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0xb, 0x88, 0x7a, 0x11, 0x8a, 0x46, 0x3, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x19, 0x88, 0x7a, 0x1f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x24, 0x88, 0x7a, 0x2a, 0x8a, 0x46, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x32, 0x88, 0x7a, 0x38, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x3d, 0x88, 0x7a, 0x43, 0x8a, 0x46, 0x5, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x51, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x56, 0x88, 0x7a, 0x5c, 0x8d, 0x52, 0x64, 0x8a, 0x46, 0x6, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x6, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0xb, 0x88, 0x7a, 0x11, 0x8a, 0x46, 0x7, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x19, 0x88, 0x7a, 0x1f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x24, 0x88, 0x7a, 0x2a, 0x8a, 0x46, 0x8, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x32, 0x88, 0x7a, 0x38, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x3d, 0x88, 0x7a, 0x43, 0x8a, 0x46, 0x9, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x51, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x56, 0x88, 0x7a, 0x5c, 0x55, 0x56, 0x66, 0x8b, 0xe, 0x8b, 0x35, 0xd0, 0x9c, 0x20, 0x10, 0x8a, 0xd9, 0x8a, 0xf9, 0x8a, 0xd5, 0x8a, 0xf1, 0x8a, 0xc5, 0x8a, 0xe5, 0x8b, 0xe8, 0xeb, 0x3, 0x2e, 0x8b, 0xc0, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfe, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x5e, 0x5d, 0x83, 0xc6, 0xa, 0x2b, 0x7d, 0xf0, 0xc3, 0x90, 0x33, 0xc0, 0x8d, 0xd, 0xd0, 0xf0, 0x1b, 0x10, 0x8d, 0x15, 0x5e, 0xec, 0x18, 0x10, 0x8a, 0x46, 0x2, 0x24, 0xf, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x6, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0xe, 0x88, 0x7a, 0x14, 0x8a, 0x46, 0x2, 0xc0, 0xe8, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x21, 0x88, 0x7a, 0x27, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x2f, 0x88, 0x7a, 0x35, 0x8a, 0x46, 0x3, 0x24, 0xf, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x42, 0x88, 0x7a, 0x48, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x50, 0x88, 0x7a, 0x56, 0x8a, 0x46, 0x3, 0xc0, 0xe8, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x63, 0x88, 0x7a, 0x69, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x71, 0x88, 0x7a, 0x77, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0x66, 0x8b, 0x1e, 0x8a, 0xcf, 0x8a, 0xfb, 0x8a, 0xe9, 0xeb, 0, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x89, 0x4, 0x3a, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x89, 0x44, 0x3a, 0x4, 0x8d, 0x3c, 0x57, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x89, 0x4, 0x3a, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x89, 0x44, 0x3a, 0x4, 0x8d, 0x3c, 0x57, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x89, 0x4, 0x3a, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x89, 0x44, 0x3a, 0x4, 0x8d, 0x3c, 0x57, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x7, 0x89, 0x4, 0x3a, 0x66, 0x8b, 0xc3, 0xc1, 0xe0, 0x10, 0x66, 0x8b, 0xc3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x89, 0x47, 0x4, 0x2b, 0x7d, 0xf0, 0x83, 0xc6, 0x4, 0xc3};

    uint8_t code_curr[sizeof(code_template)];
    mem_seg_pg_raw(cs, eip, sizeof(code_curr)).sub_space(0, sizeof(code_curr)).copy_to(code_curr);

    const uint32_t code_pc_start = eip;


    clear(0x1018eb10, 0x3);
    clear(0x1018eb16, 0x3);
    clear(0x1018eb19, 0x2);
    clear(0x1018eb1b, 0x3);
    clear(0x1018eb21, 0x3);
    clear(0x1018eb24, 0x3);
    clear(0x1018eb29, 0x3);
    clear(0x1018eb2f, 0x3);
    clear(0x1018eb32, 0x2);
    clear(0x1018eb34, 0x3);
    clear(0x1018eb3a, 0x3);
    clear(0x1018eb3d, 0x3);
    clear(0x1018eb42, 0x3);
    clear(0x1018eb48, 0x3);
    clear(0x1018eb4b, 0x2);
    clear(0x1018eb4d, 0x3);
    clear(0x1018eb53, 0x3);
    clear(0x1018eb56, 0x3);
    clear(0x1018eb5b, 0x3);
    clear(0x1018eb61, 0x3);
    clear(0x1018eb64, 0x2);
    clear(0x1018eb66, 0x3);
    clear(0x1018eb6c, 0x3);
    clear(0x1018eb6f, 0x3);
    clear(0x1018eb74, 0x3);
    clear(0x1018eb7a, 0x3);
    clear(0x1018eb7d, 0x2);
    clear(0x1018eb7f, 0x3);
    clear(0x1018eb85, 0x3);
    clear(0x1018eb88, 0x3);
    clear(0x1018eb8d, 0x3);
    clear(0x1018eb93, 0x3);
    clear(0x1018eb96, 0x2);
    clear(0x1018eb98, 0x3);
    clear(0x1018eb9e, 0x3);
    clear(0x1018eba1, 0x3);
    clear(0x1018eba6, 0x3);
    clear(0x1018ebac, 0x3);
    clear(0x1018ebaf, 0x2);
    clear(0x1018ebb1, 0x3);
    clear(0x1018ebb7, 0x3);
    clear(0x1018ebba, 0x3);
    clear(0x1018ebbf, 0x3);
    clear(0x1018ebc5, 0x3);
    clear(0x1018ebc8, 0x2);
    clear(0x1018ebca, 0x3);
    clear(0x1018ebd0, 0x3);
    clear(0x1018ebd3, 0x3);
    clear(0x1018ec5c, 0x3);
    clear(0x1018ec62, 0x3);
    clear(0x1018ec65, 0x2);
    clear(0x1018ec67, 0x3);
    clear(0x1018ec6a, 0x3);
    clear(0x1018ec70, 0x3);
    clear(0x1018ec73, 0x3);
    clear(0x1018ec7d, 0x3);
    clear(0x1018ec83, 0x3);
    clear(0x1018ec86, 0x2);
    clear(0x1018ec88, 0x3);
    clear(0x1018ec8b, 0x3);
    clear(0x1018ec91, 0x3);
    clear(0x1018ec94, 0x3);
    clear(0x1018ec9e, 0x3);
    clear(0x1018eca4, 0x3);
    clear(0x1018eca7, 0x2);
    clear(0x1018eca9, 0x3);
    clear(0x1018ecac, 0x3);
    clear(0x1018ecb2, 0x3);
    clear(0x1018ecb5, 0x3);
    clear(0x1018ecbf, 0x3);
    clear(0x1018ecc5, 0x3);
    clear(0x1018ecc8, 0x2);
    clear(0x1018ecca, 0x3);
    clear(0x1018eccd, 0x3);
    clear(0x1018ecd3, 0x3);
    clear(0x1018ecd6, 0x3);
    clear(0x1018ecdb, 0x3);


    II(0x1018ea30, 0x3)   mov(ax, memw_a32(ds, esi));           /* mov ax, [esi] */
    II(0x1018ea33, 0x2)   cmp(al, ah);                          /* cmp al, ah */
    II(0x1018ea35, 0x6)   jad(0x1018ebe0, 0x1a5);               /* ja dword 0x1018ebe0 */
    II(0x1018ea3b, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1018ea3d, 0x6)   lea(ecx, 0x101bf110);                 /* lea ecx, [0x101bf110] */
    II(0x1018ea43, 0x6)   lea(edx, 0x1018eb12);                 /* lea edx, [0x1018eb12] */
    II(0x1018ea49, 0x3)   mov(al, memb_a32(ds, esi + 0x2));     /* mov al, [esi+0x2] */
    II(0x1018ea4c, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ea4f, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018ea51, 0x3)   mov(memb_a32(ds, edx + 0x6), bh);     /* mov [edx+0x6], bh */
    II(0x1018ea54, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ea57, 0x3)   mov(memb_a32(ds, edx + 0xb), bl);     /* mov [edx+0xb], bl */
    II(0x1018ea5a, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018ea5d, 0x3)   mov(al, memb_a32(ds, esi + 0x3));     /* mov al, [esi+0x3] */
    II(0x1018ea60, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ea63, 0x3)   mov(memb_a32(ds, edx + 0x19), bl);    /* mov [edx+0x19], bl */
    II(0x1018ea66, 0x3)   mov(memb_a32(ds, edx + 0x1f), bh);    /* mov [edx+0x1f], bh */
    II(0x1018ea69, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ea6c, 0x3)   mov(memb_a32(ds, edx + 0x24), bl);    /* mov [edx+0x24], bl */
    II(0x1018ea6f, 0x3)   mov(memb_a32(ds, edx + 0x2a), bh);    /* mov [edx+0x2a], bh */
    II(0x1018ea72, 0x3)   mov(al, memb_a32(ds, esi + 0x4));     /* mov al, [esi+0x4] */
    II(0x1018ea75, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ea78, 0x3)   mov(memb_a32(ds, edx + 0x32), bl);    /* mov [edx+0x32], bl */
    II(0x1018ea7b, 0x3)   mov(memb_a32(ds, edx + 0x38), bh);    /* mov [edx+0x38], bh */
    II(0x1018ea7e, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ea81, 0x3)   mov(memb_a32(ds, edx + 0x3d), bl);    /* mov [edx+0x3d], bl */
    II(0x1018ea84, 0x3)   mov(memb_a32(ds, edx + 0x43), bh);    /* mov [edx+0x43], bh */
    II(0x1018ea87, 0x3)   mov(al, memb_a32(ds, esi + 0x5));     /* mov al, [esi+0x5] */
    II(0x1018ea8a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ea8d, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018ea90, 0x3)   mov(memb_a32(ds, edx + 0x51), bh);    /* mov [edx+0x51], bh */
    II(0x1018ea93, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ea96, 0x3)   mov(memb_a32(ds, edx + 0x56), bl);    /* mov [edx+0x56], bl */
    II(0x1018ea99, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018ea9c, 0x3)   lea(edx, edx + 0x64);                 /* lea edx, [edx+0x64] */
    II(0x1018ea9f, 0x3)   mov(al, memb_a32(ds, esi + 0x6));     /* mov al, [esi+0x6] */
    II(0x1018eaa2, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018eaa5, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018eaa7, 0x3)   mov(memb_a32(ds, edx + 0x6), bh);     /* mov [edx+0x6], bh */
    II(0x1018eaaa, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018eaad, 0x3)   mov(memb_a32(ds, edx + 0xb), bl);     /* mov [edx+0xb], bl */
    II(0x1018eab0, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018eab3, 0x3)   mov(al, memb_a32(ds, esi + 0x7));     /* mov al, [esi+0x7] */
    II(0x1018eab6, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018eab9, 0x3)   mov(memb_a32(ds, edx + 0x19), bl);    /* mov [edx+0x19], bl */
    II(0x1018eabc, 0x3)   mov(memb_a32(ds, edx + 0x1f), bh);    /* mov [edx+0x1f], bh */
    II(0x1018eabf, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018eac2, 0x3)   mov(memb_a32(ds, edx + 0x24), bl);    /* mov [edx+0x24], bl */
    II(0x1018eac5, 0x3)   mov(memb_a32(ds, edx + 0x2a), bh);    /* mov [edx+0x2a], bh */
    II(0x1018eac8, 0x3)   mov(al, memb_a32(ds, esi + 0x8));     /* mov al, [esi+0x8] */
    II(0x1018eacb, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018eace, 0x3)   mov(memb_a32(ds, edx + 0x32), bl);    /* mov [edx+0x32], bl */
    II(0x1018ead1, 0x3)   mov(memb_a32(ds, edx + 0x38), bh);    /* mov [edx+0x38], bh */
    II(0x1018ead4, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ead7, 0x3)   mov(memb_a32(ds, edx + 0x3d), bl);    /* mov [edx+0x3d], bl */
    II(0x1018eada, 0x3)   mov(memb_a32(ds, edx + 0x43), bh);    /* mov [edx+0x43], bh */
    II(0x1018eadd, 0x3)   mov(al, memb_a32(ds, esi + 0x9));     /* mov al, [esi+0x9] */
    II(0x1018eae0, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018eae3, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018eae6, 0x3)   mov(memb_a32(ds, edx + 0x51), bh);    /* mov [edx+0x51], bh */
    II(0x1018eae9, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018eaec, 0x3)   mov(memb_a32(ds, edx + 0x56), bl);    /* mov [edx+0x56], bl */
    II(0x1018eaef, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018eaf2, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1018eaf3, 0x1)   pushd(esi);                           /* push esi */
    II(0x1018eaf4, 0x3)   mov(cx, memw_a32(ds, esi));           /* mov cx, [esi] */
    II(0x1018eaf7, 0x6)   mov(esi, memd_a32(ds, 0x10209cd0));   /* mov esi, [0x10209cd0] */
    II(0x1018eafd, 0x2)   mov(bl, cl);                          /* mov bl, cl */
    II(0x1018eaff, 0x2)   mov(bh, cl);                          /* mov bh, cl */
    II(0x1018eb01, 0x2)   mov(dl, ch);                          /* mov dl, ch */
    II(0x1018eb03, 0x2)   mov(dh, cl);                          /* mov dh, cl */
    II(0x1018eb05, 0x2)   mov(al, ch);                          /* mov al, ch */
    II(0x1018eb07, 0x2)   mov(ah, ch);                          /* mov ah, ch */
    II(0x1018eb09, 0x2)   mov(ebp, eax);                        /* mov ebp, eax */
    II(0x1018eb0b, 0x2)   jmpd(0x1018eb10, 0x3);                /* jmp 0x1018eb10 */
//    II(0x1018eb0d, 0x3)   /* Недостижимый код. */
l_0x1018eb10:
    II(0x1018eb10, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb13, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb16, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb19, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb1b, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb1e, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb21, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb24, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eb27, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eb29, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb2c, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb2f, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb32, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb34, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb37, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb3a, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb3d, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eb40, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eb42, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb45, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb48, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb4b, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb4d, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb50, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb53, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb56, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eb59, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eb5b, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb5e, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb61, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb64, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb66, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb69, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb6c, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb6f, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eb72, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eb74, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb77, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb7a, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb7d, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb7f, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb82, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb85, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb88, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eb8b, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eb8d, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb90, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb93, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb96, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eb98, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eb9b, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eb9e, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eba1, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018eba4, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018eba6, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eba9, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ebac, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebaf, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ebb1, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebb4, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ebb7, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebba, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ebbd, 0x2)   add(edi, esi);                        /* add edi, esi */
    II(0x1018ebbf, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebc2, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ebc5, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebc8, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ebca, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebcd, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ebd0, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ebd3, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ebd6, 0x1)   popd(esi);                            /* pop esi */
    II(0x1018ebd7, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1018ebd8, 0x3)   add(esi, 0xa);                        /* add esi, 0xa */
    II(0x1018ebdb, 0x3)   sub(edi, memd_a32(ss, ebp - 0x10));   /* sub edi, [ebp-0x10] */
    II(0x1018ebde, 0x1)   __retd__();                               /* ret  */
//    II(0x1018ebdf, 0x1)   /* Недостижимый код. */
l_0x1018ebe0:
    II(0x1018ebe0, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1018ebe2, 0x6)   lea(ecx, 0x101bf0d0);                 /* lea ecx, [0x101bf0d0] */
    II(0x1018ebe8, 0x6)   lea(edx, 0x1018ec5e);                 /* lea edx, [0x1018ec5e] */
    II(0x1018ebee, 0x3)   mov(al, memb_a32(ds, esi + 0x2));     /* mov al, [esi+0x2] */
    II(0x1018ebf1, 0x2)   and_(al, 0xf);                        /* and al, 0xf */
    II(0x1018ebf3, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ebf6, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018ebf8, 0x3)   mov(memb_a32(ds, edx + 0x6), bh);     /* mov [edx+0x6], bh */
    II(0x1018ebfb, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ebfe, 0x3)   mov(memb_a32(ds, edx + 0xe), bl);     /* mov [edx+0xe], bl */
    II(0x1018ec01, 0x3)   mov(memb_a32(ds, edx + 0x14), bh);    /* mov [edx+0x14], bh */
    II(0x1018ec04, 0x3)   mov(al, memb_a32(ds, esi + 0x2));     /* mov al, [esi+0x2] */
    II(0x1018ec07, 0x3)   shr(al, 0x4);                         /* shr al, 0x4 */
    II(0x1018ec0a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ec0d, 0x3)   mov(memb_a32(ds, edx + 0x21), bl);    /* mov [edx+0x21], bl */
    II(0x1018ec10, 0x3)   mov(memb_a32(ds, edx + 0x27), bh);    /* mov [edx+0x27], bh */
    II(0x1018ec13, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ec16, 0x3)   mov(memb_a32(ds, edx + 0x2f), bl);    /* mov [edx+0x2f], bl */
    II(0x1018ec19, 0x3)   mov(memb_a32(ds, edx + 0x35), bh);    /* mov [edx+0x35], bh */
    II(0x1018ec1c, 0x3)   mov(al, memb_a32(ds, esi + 0x3));     /* mov al, [esi+0x3] */
    II(0x1018ec1f, 0x2)   and_(al, 0xf);                        /* and al, 0xf */
    II(0x1018ec21, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ec24, 0x3)   mov(memb_a32(ds, edx + 0x42), bl);    /* mov [edx+0x42], bl */
    II(0x1018ec27, 0x3)   mov(memb_a32(ds, edx + 0x48), bh);    /* mov [edx+0x48], bh */
    II(0x1018ec2a, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ec2d, 0x3)   mov(memb_a32(ds, edx + 0x50), bl);    /* mov [edx+0x50], bl */
    II(0x1018ec30, 0x3)   mov(memb_a32(ds, edx + 0x56), bh);    /* mov [edx+0x56], bh */
    II(0x1018ec33, 0x3)   mov(al, memb_a32(ds, esi + 0x3));     /* mov al, [esi+0x3] */
    II(0x1018ec36, 0x3)   shr(al, 0x4);                         /* shr al, 0x4 */
    II(0x1018ec39, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ec3c, 0x3)   mov(memb_a32(ds, edx + 0x63), bl);    /* mov [edx+0x63], bl */
    II(0x1018ec3f, 0x3)   mov(memb_a32(ds, edx + 0x69), bh);    /* mov [edx+0x69], bh */
    II(0x1018ec42, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ec45, 0x3)   mov(memb_a32(ds, edx + 0x71), bl);    /* mov [edx+0x71], bl */
    II(0x1018ec48, 0x3)   mov(memb_a32(ds, edx + 0x77), bh);    /* mov [edx+0x77], bh */
    II(0x1018ec4b, 0x6)   mov(edx, memd_a32(ds, 0x10209cd0));   /* mov edx, [0x10209cd0] */
    II(0x1018ec51, 0x3)   mov(bx, memw_a32(ds, esi));           /* mov bx, [esi] */
    II(0x1018ec54, 0x2)   mov(cl, bh);                          /* mov cl, bh */
    II(0x1018ec56, 0x2)   mov(bh, bl);                          /* mov bh, bl */
    II(0x1018ec58, 0x2)   mov(ch, cl);                          /* mov ch, cl */
    II(0x1018ec5a, 0x2)   jmpd(0x1018ec5c, 0);                  /* jmp 0x1018ec5c */
l_0x1018ec5c:
    II(0x1018ec5c, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec5f, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ec62, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec65, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ec67, 0x3)   __mov__(memd_a32(ds, edx + edi), eax);    /* mov [edx+edi], eax */
    II(0x1018ec6a, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec6d, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ec70, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec73, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ec76, 0x4)   mov(memd_a32(ds, edx + edi + 0x4), eax); /* mov [edx+edi+0x4], eax */
    II(0x1018ec7a, 0x3)   lea(edi, edi + edx * 0x2);            /* lea edi, [edi+edx*2] */
    II(0x1018ec7d, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec80, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ec83, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec86, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ec88, 0x3)   __mov__(memd_a32(ds, edx + edi), eax);    /* mov [edx+edi], eax */
    II(0x1018ec8b, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec8e, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ec91, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ec94, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ec97, 0x4)   mov(memd_a32(ds, edx + edi + 0x4), eax); /* mov [edx+edi+0x4], eax */
    II(0x1018ec9b, 0x3)   lea(edi, edi + edx * 0x2);            /* lea edi, [edi+edx*2] */
    II(0x1018ec9e, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eca1, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018eca4, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018eca7, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018eca9, 0x3)   __mov__(memd_a32(ds, edx + edi), eax);    /* mov [edx+edi], eax */
    II(0x1018ecac, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecaf, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ecb2, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecb5, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ecb8, 0x4)   mov(memd_a32(ds, edx + edi + 0x4), eax); /* mov [edx+edi+0x4], eax */
    II(0x1018ecbc, 0x3)   lea(edi, edi + edx * 0x2);            /* lea edi, [edi+edx*2] */
    II(0x1018ecbf, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecc2, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ecc5, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecc8, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ecca, 0x3)   __mov__(memd_a32(ds, edx + edi), eax);    /* mov [edx+edi], eax */
    II(0x1018eccd, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecd0, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ecd3, 0x3)   __mov__(ax, bx);                          /* mov ax, bx */
    II(0x1018ecd6, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ecd9, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018ecdb, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ecde, 0x3)   sub(edi, memd_a32(ss, ebp - 0x10));   /* sub edi, [ebp-0x10] */
    II(0x1018ece1, 0x3)   add(esi, 0x4);                        /* add esi, 0x4 */
    II(0x1018ece4, 0x1)   __retd__();                               /* ret  */
FUNC_END

