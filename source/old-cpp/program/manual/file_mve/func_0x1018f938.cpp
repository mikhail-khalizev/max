#include "program/manual/file_mve/support.hpp"

FUNC_BEGIN(0x1018f938, 0xe803adc8e197dd78, 0x20, ({}))

static int a = 0;
if (a == 0)
{
    a = 1;
    // @todo Выход из вступительного видео.
    key_pressed = kbd_keys::esc;
    pic.activate_irq(1);
}


    static uint8_t code_template[] = {0x66, 0x8b, 0x6, 0x38, 0xe0, 0xf, 0x87, 0x8d, 0x2, 0, 0, 0x33, 0xc0, 0x8d, 0xd, 0x10, 0xf5, 0x1b, 0x10, 0x8d, 0x15, 0xb5, 0xfa, 0x18, 0x10, 0x8a, 0x46, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x5, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xf, 0x88, 0x7a, 0x11, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x16, 0x88, 0x7a, 0x18, 0x8a, 0x46, 0x6, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1e, 0x88, 0x7a, 0x20, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x25, 0x88, 0x7a, 0x27, 0x8a, 0x46, 0x7, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2d, 0x88, 0x7a, 0x2f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x34, 0x88, 0x7a, 0x36, 0x8a, 0x46, 0xc, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x44, 0x88, 0x7a, 0x46, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x4d, 0x8a, 0x46, 0xd, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x53, 0x88, 0x7a, 0x55, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x5a, 0x88, 0x7a, 0x5c, 0x8a, 0x46, 0xe, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x62, 0x88, 0x7a, 0x64, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x69, 0x88, 0x7a, 0x6b, 0x8a, 0x46, 0xf, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x71, 0x88, 0x7a, 0x73, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x78, 0x88, 0x7a, 0x7a, 0x8d, 0x92, 0x91, 0, 0, 0, 0x8a, 0x46, 0x14, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x15, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xf, 0x88, 0x7a, 0x11, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x16, 0x88, 0x7a, 0x18, 0x8a, 0x46, 0x16, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1e, 0x88, 0x7a, 0x20, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x25, 0x88, 0x7a, 0x27, 0x8a, 0x46, 0x17, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2d, 0x88, 0x7a, 0x2f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x34, 0x88, 0x7a, 0x36, 0x8a, 0x46, 0x1c, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x44, 0x88, 0x7a, 0x46, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x4d, 0x8a, 0x46, 0x1d, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x53, 0x88, 0x7a, 0x55, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x5a, 0x88, 0x7a, 0x5c, 0x8a, 0x46, 0x1e, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x62, 0x88, 0x7a, 0x64, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x69, 0x88, 0x7a, 0x6b, 0x8a, 0x46, 0x1f, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x71, 0x88, 0x7a, 0x73, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x78, 0x88, 0x7a, 0x7a, 0x66, 0x8b, 0x1e, 0x66, 0x8b, 0x4e, 0x2, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0xeb, 0, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x66, 0x8b, 0x5e, 0x8, 0x66, 0x8b, 0x4e, 0xa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8d, 0x4, 0xd5, 0xfc, 0xff, 0xff, 0xff, 0x2b, 0xf8, 0x66, 0x8b, 0x5e, 0x10, 0x66, 0x8b, 0x4e, 0x12, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x66, 0x8b, 0x5e, 0x18, 0x66, 0x8b, 0x4e, 0x1a, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x83, 0xc6, 0x20, 0x83, 0xef, 0x4, 0x2b, 0x7d, 0xf0, 0xc3, 0x2e, 0x8b, 0xc0, 0x66, 0x8b, 0x46, 0xc, 0x38, 0xe0, 0xf, 0x87, 0x80, 0x2, 0, 0, 0x33, 0xc0, 0x8d, 0xd, 0x10, 0xf5, 0x1b, 0x10, 0x8d, 0x15, 0x51, 0xfd, 0x18, 0x10, 0x8a, 0x46, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x5, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xf, 0x88, 0x7a, 0x11, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x16, 0x88, 0x7a, 0x18, 0x8a, 0x46, 0x6, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1e, 0x88, 0x7a, 0x20, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x25, 0x88, 0x7a, 0x27, 0x8a, 0x46, 0x7, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2d, 0x88, 0x7a, 0x2f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x34, 0x88, 0x7a, 0x36, 0x8a, 0x46, 0x8, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x3c, 0x88, 0x7a, 0x3e, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x43, 0x88, 0x7a, 0x45, 0x8a, 0x46, 0x9, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x4d, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x52, 0x88, 0x7a, 0x54, 0x8a, 0x46, 0xa, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x5a, 0x88, 0x7a, 0x5c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x61, 0x88, 0x7a, 0x63, 0x8a, 0x46, 0xb, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x69, 0x88, 0x7a, 0x6b, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x70, 0x88, 0x7a, 0x72, 0x8d, 0x92, 0x89, 0, 0, 0, 0x8a, 0x46, 0x10, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x11, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xf, 0x88, 0x7a, 0x11, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x16, 0x88, 0x7a, 0x18, 0x8a, 0x46, 0x12, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1e, 0x88, 0x7a, 0x20, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x25, 0x88, 0x7a, 0x27, 0x8a, 0x46, 0x13, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2d, 0x88, 0x7a, 0x2f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x34, 0x88, 0x7a, 0x36, 0x8a, 0x46, 0x14, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x3c, 0x88, 0x7a, 0x3e, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x43, 0x88, 0x7a, 0x45, 0x8a, 0x46, 0x15, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x4b, 0x88, 0x7a, 0x4d, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x52, 0x88, 0x7a, 0x54, 0x8a, 0x46, 0x16, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x5a, 0x88, 0x7a, 0x5c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x61, 0x88, 0x7a, 0x63, 0x8a, 0x46, 0x17, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x69, 0x88, 0x7a, 0x6b, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x70, 0x88, 0x7a, 0x72, 0x66, 0x8b, 0x1e, 0x66, 0x8b, 0x4e, 0x2, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0xeb, 0x3, 0x2e, 0x8b, 0xc0, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8d, 0x4, 0xd5, 0xfc, 0xff, 0xff, 0xff, 0x2b, 0xf8, 0x66, 0x8b, 0x5e, 0xc, 0x66, 0x8b, 0x4e, 0xe, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x83, 0xc6, 0x18, 0x83, 0xef, 0x4, 0x2b, 0x7d, 0xf0, 0xc3, 0x2e, 0x8b, 0xc0, 0x33, 0xc0, 0x8d, 0xd, 0x10, 0xf5, 0x1b, 0x10, 0x8d, 0x15, 0xcd, 0xff, 0x18, 0x10, 0x8a, 0x46, 0x4, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x5, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xd, 0x88, 0x7a, 0xf, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x14, 0x88, 0x7a, 0x16, 0x8a, 0x46, 0x6, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1d, 0x88, 0x7a, 0x1f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x24, 0x88, 0x7a, 0x26, 0x8a, 0x46, 0x7, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2a, 0x88, 0x7a, 0x2c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x31, 0x88, 0x7a, 0x33, 0x8a, 0x46, 0x8, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x3a, 0x88, 0x7a, 0x3c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x41, 0x88, 0x7a, 0x43, 0x8a, 0x46, 0x9, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x47, 0x88, 0x7a, 0x49, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x4e, 0x88, 0x7a, 0x50, 0x8a, 0x46, 0xa, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x57, 0x88, 0x7a, 0x59, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x5e, 0x88, 0x7a, 0x60, 0x8a, 0x46, 0xb, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x64, 0x88, 0x7a, 0x66, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x6b, 0x88, 0x7a, 0x6d, 0x8d, 0x52, 0x7c, 0x8a, 0x46, 0x10, 0x8b, 0x1c, 0x81, 0x88, 0x1a, 0x88, 0x7a, 0x2, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x7, 0x88, 0x7a, 0x9, 0x8a, 0x46, 0x11, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0xd, 0x88, 0x7a, 0xf, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x14, 0x88, 0x7a, 0x16, 0x8a, 0x46, 0x12, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x1d, 0x88, 0x7a, 0x1f, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x24, 0x88, 0x7a, 0x26, 0x8a, 0x46, 0x13, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x2a, 0x88, 0x7a, 0x2c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x31, 0x88, 0x7a, 0x33, 0x8a, 0x46, 0x14, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x3a, 0x88, 0x7a, 0x3c, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x41, 0x88, 0x7a, 0x43, 0x8a, 0x46, 0x15, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x47, 0x88, 0x7a, 0x49, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x4e, 0x88, 0x7a, 0x50, 0x8a, 0x46, 0x16, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x57, 0x88, 0x7a, 0x59, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x5e, 0x88, 0x7a, 0x60, 0x8a, 0x46, 0x17, 0x8b, 0x1c, 0x81, 0x88, 0x5a, 0x64, 0x88, 0x7a, 0x66, 0xc1, 0xeb, 0x10, 0x88, 0x5a, 0x6b, 0x88, 0x7a, 0x6d, 0x66, 0x8b, 0x1e, 0x66, 0x8b, 0x4e, 0x2, 0x8b, 0x15, 0xd0, 0x9c, 0x20, 0x10, 0xeb, 0x2, 0x8b, 0xc0, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x66, 0x8b, 0x5e, 0xc, 0x66, 0x8b, 0x4e, 0xe, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x3, 0xfa, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x7, 0x8a, 0xc3, 0x8a, 0xe3, 0xc1, 0xe0, 0x10, 0x8a, 0xc3, 0x8a, 0xe3, 0x89, 0x47, 0x4, 0x83, 0xc6, 0x18, 0x2b, 0x7d, 0xf0, 0xc3};

    uint8_t code_curr[sizeof(code_template)];
    mem_seg_pg_raw(cs, eip, sizeof(code_curr)).sub_space(0, sizeof(code_curr)).copy_to(code_curr);

    const uint32_t code_pc_start = eip;


    clear(0x1018fab4, 0x2);
    clear(0x1018fab6, 0x2);
    clear(0x1018fabb, 0x2);
    clear(0x1018fabd, 0x2);
    clear(0x1018fabf, 0x2);
    clear(0x1018fac3, 0x2);
    clear(0x1018fac5, 0x2);
    clear(0x1018faca, 0x2);
    clear(0x1018facc, 0x2);
    clear(0x1018face, 0x2);
    clear(0x1018fad2, 0x2);
    clear(0x1018fad4, 0x2);
    clear(0x1018fad9, 0x2);
    clear(0x1018fadb, 0x2);
    clear(0x1018fadd, 0x2);
    clear(0x1018fae1, 0x2);
    clear(0x1018fae3, 0x2);
    clear(0x1018fae8, 0x2);
    clear(0x1018faea, 0x2);
    clear(0x1018faec, 0x2);
    clear(0x1018faf8, 0x2);
    clear(0x1018fafa, 0x2);
    clear(0x1018faff, 0x2);
    clear(0x1018fb01, 0x2);
    clear(0x1018fb03, 0x2);
    clear(0x1018fb07, 0x2);
    clear(0x1018fb09, 0x2);
    clear(0x1018fb0e, 0x2);
    clear(0x1018fb10, 0x2);
    clear(0x1018fb12, 0x2);
    clear(0x1018fb16, 0x2);
    clear(0x1018fb18, 0x2);
    clear(0x1018fb1d, 0x2);
    clear(0x1018fb1f, 0x2);
    clear(0x1018fb21, 0x2);
    clear(0x1018fb25, 0x2);
    clear(0x1018fb27, 0x2);
    clear(0x1018fb2c, 0x2);
    clear(0x1018fb2e, 0x2);
    clear(0x1018fb30, 0x2);
    clear(0x1018fb45, 0x2);
    clear(0x1018fb47, 0x2);
    clear(0x1018fb4c, 0x2);
    clear(0x1018fb4e, 0x2);
    clear(0x1018fb50, 0x2);
    clear(0x1018fb54, 0x2);
    clear(0x1018fb56, 0x2);
    clear(0x1018fb5b, 0x2);
    clear(0x1018fb5d, 0x2);
    clear(0x1018fb5f, 0x2);
    clear(0x1018fb63, 0x2);
    clear(0x1018fb65, 0x2);
    clear(0x1018fb6a, 0x2);
    clear(0x1018fb6c, 0x2);
    clear(0x1018fb6e, 0x2);
    clear(0x1018fb72, 0x2);
    clear(0x1018fb74, 0x2);
    clear(0x1018fb79, 0x2);
    clear(0x1018fb7b, 0x2);
    clear(0x1018fb7d, 0x2);
    clear(0x1018fb89, 0x2);
    clear(0x1018fb8b, 0x2);
    clear(0x1018fb90, 0x2);
    clear(0x1018fb92, 0x2);
    clear(0x1018fb94, 0x2);
    clear(0x1018fb98, 0x2);
    clear(0x1018fb9a, 0x2);
    clear(0x1018fb9f, 0x2);
    clear(0x1018fba1, 0x2);
    clear(0x1018fba3, 0x2);
    clear(0x1018fba7, 0x2);
    clear(0x1018fba9, 0x2);
    clear(0x1018fbae, 0x2);
    clear(0x1018fbb0, 0x2);
    clear(0x1018fbb2, 0x2);
    clear(0x1018fbb6, 0x2);
    clear(0x1018fbb8, 0x2);
    clear(0x1018fbbd, 0x2);
    clear(0x1018fbbf, 0x2);
    clear(0x1018fbc1, 0x2);
    clear(0x1018fd50, 0x2);
    clear(0x1018fd52, 0x2);
    clear(0x1018fd57, 0x2);
    clear(0x1018fd59, 0x2);
    clear(0x1018fd5b, 0x2);
    clear(0x1018fd5f, 0x2);
    clear(0x1018fd61, 0x2);
    clear(0x1018fd66, 0x2);
    clear(0x1018fd68, 0x2);
    clear(0x1018fd6a, 0x2);
    clear(0x1018fd6e, 0x2);
    clear(0x1018fd70, 0x2);
    clear(0x1018fd75, 0x2);
    clear(0x1018fd77, 0x2);
    clear(0x1018fd79, 0x2);
    clear(0x1018fd7d, 0x2);
    clear(0x1018fd7f, 0x2);
    clear(0x1018fd84, 0x2);
    clear(0x1018fd86, 0x2);
    clear(0x1018fd88, 0x2);
    clear(0x1018fd8c, 0x2);
    clear(0x1018fd8e, 0x2);
    clear(0x1018fd93, 0x2);
    clear(0x1018fd95, 0x2);
    clear(0x1018fd97, 0x2);
    clear(0x1018fd9b, 0x2);
    clear(0x1018fd9d, 0x2);
    clear(0x1018fda2, 0x2);
    clear(0x1018fda4, 0x2);
    clear(0x1018fda6, 0x2);
    clear(0x1018fdaa, 0x2);
    clear(0x1018fdac, 0x2);
    clear(0x1018fdb1, 0x2);
    clear(0x1018fdb3, 0x2);
    clear(0x1018fdb5, 0x2);
    clear(0x1018fdb9, 0x2);
    clear(0x1018fdbb, 0x2);
    clear(0x1018fdc0, 0x2);
    clear(0x1018fdc2, 0x2);
    clear(0x1018fdc4, 0x2);
    clear(0x1018fdd9, 0x2);
    clear(0x1018fddb, 0x2);
    clear(0x1018fde0, 0x2);
    clear(0x1018fde2, 0x2);
    clear(0x1018fde4, 0x2);
    clear(0x1018fde8, 0x2);
    clear(0x1018fdea, 0x2);
    clear(0x1018fdef, 0x2);
    clear(0x1018fdf1, 0x2);
    clear(0x1018fdf3, 0x2);
    clear(0x1018fdf7, 0x2);
    clear(0x1018fdf9, 0x2);
    clear(0x1018fdfe, 0x2);
    clear(0x1018fe00, 0x2);
    clear(0x1018fe02, 0x2);
    clear(0x1018fe06, 0x2);
    clear(0x1018fe08, 0x2);
    clear(0x1018fe0d, 0x2);
    clear(0x1018fe0f, 0x2);
    clear(0x1018fe11, 0x2);
    clear(0x1018fe15, 0x2);
    clear(0x1018fe17, 0x2);
    clear(0x1018fe1c, 0x2);
    clear(0x1018fe1e, 0x2);
    clear(0x1018fe20, 0x2);
    clear(0x1018fe24, 0x2);
    clear(0x1018fe26, 0x2);
    clear(0x1018fe2b, 0x2);
    clear(0x1018fe2d, 0x2);
    clear(0x1018fe2f, 0x2);
    clear(0x1018fe33, 0x2);
    clear(0x1018fe35, 0x2);
    clear(0x1018fe3a, 0x2);
    clear(0x1018fe3c, 0x2);
    clear(0x1018fe3e, 0x2);
    clear(0x1018fe42, 0x2);
    clear(0x1018fe44, 0x2);
    clear(0x1018fe49, 0x2);
    clear(0x1018fe4b, 0x2);
    clear(0x1018fe4d, 0x2);
    clear(0x1018ffcc, 0x2);
    clear(0x1018ffce, 0x2);
    clear(0x1018ffd3, 0x2);
    clear(0x1018ffd5, 0x2);
    clear(0x1018ffd7, 0x2);
    clear(0x1018ffd9, 0x2);
    clear(0x1018ffdb, 0x2);
    clear(0x1018ffe0, 0x2);
    clear(0x1018ffe2, 0x2);
    clear(0x1018ffe4, 0x3);
    clear(0x1018ffe9, 0x2);
    clear(0x1018ffeb, 0x2);
    clear(0x1018fff0, 0x2);
    clear(0x1018fff2, 0x2);
    clear(0x1018fff4, 0x2);
    clear(0x1018fff6, 0x2);
    clear(0x1018fff8, 0x2);
    clear(0x1018fffd, 0x2);
    clear(0x1018ffff, 0x2);
    clear(0x10190001, 0x3);
    clear(0x10190006, 0x2);
    clear(0x10190008, 0x2);
    clear(0x1019000d, 0x2);
    clear(0x1019000f, 0x2);
    clear(0x10190011, 0x2);
    clear(0x10190013, 0x2);
    clear(0x10190015, 0x2);
    clear(0x1019001a, 0x2);
    clear(0x1019001c, 0x2);
    clear(0x1019001e, 0x3);
    clear(0x10190023, 0x2);
    clear(0x10190025, 0x2);
    clear(0x1019002a, 0x2);
    clear(0x1019002c, 0x2);
    clear(0x1019002e, 0x2);
    clear(0x10190030, 0x2);
    clear(0x10190032, 0x2);
    clear(0x10190037, 0x2);
    clear(0x10190039, 0x2);
    clear(0x1019003b, 0x3);
    clear(0x10190048, 0x2);
    clear(0x1019004a, 0x2);
    clear(0x1019004f, 0x2);
    clear(0x10190051, 0x2);
    clear(0x10190053, 0x2);
    clear(0x10190055, 0x2);
    clear(0x10190057, 0x2);
    clear(0x1019005c, 0x2);
    clear(0x1019005e, 0x2);
    clear(0x10190060, 0x3);
    clear(0x10190065, 0x2);
    clear(0x10190067, 0x2);
    clear(0x1019006c, 0x2);
    clear(0x1019006e, 0x2);
    clear(0x10190070, 0x2);
    clear(0x10190072, 0x2);
    clear(0x10190074, 0x2);
    clear(0x10190079, 0x2);
    clear(0x1019007b, 0x2);
    clear(0x1019007d, 0x3);
    clear(0x10190082, 0x2);
    clear(0x10190084, 0x2);
    clear(0x10190089, 0x2);
    clear(0x1019008b, 0x2);
    clear(0x1019008d, 0x2);
    clear(0x1019008f, 0x2);
    clear(0x10190091, 0x2);
    clear(0x10190096, 0x2);
    clear(0x10190098, 0x2);
    clear(0x1019009a, 0x3);
    clear(0x1019009f, 0x2);
    clear(0x101900a1, 0x2);
    clear(0x101900a6, 0x2);
    clear(0x101900a8, 0x2);
    clear(0x101900aa, 0x2);
    clear(0x101900ac, 0x2);
    clear(0x101900ae, 0x2);
    clear(0x101900b3, 0x2);
    clear(0x101900b5, 0x2);
    clear(0x101900b7, 0x3);


    II(0x1018f938, 0x3)   mov(ax, memw_a32(ds, esi));           /* mov ax, [esi] */
    II(0x1018f93b, 0x2)   cmp(al, ah);                          /* cmp al, ah */
    II(0x1018f93d, 0x6)   jad(0x1018fbd0, 0x28d);               /* ja dword 0x1018fbd0 */
    II(0x1018f943, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1018f945, 0x6)   lea(ecx, 0x101bf510);                 /* lea ecx, [0x101bf510] */
    II(0x1018f94b, 0x6)   lea(edx, 0x1018fab5);                 /* lea edx, [0x1018fab5] */
    II(0x1018f951, 0x3)   mov(al, memb_a32(ds, esi + 0x4));     /* mov al, [esi+0x4] */
    II(0x1018f954, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f957, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018f959, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018f95c, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f95f, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018f962, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018f965, 0x3)   mov(al, memb_a32(ds, esi + 0x5));     /* mov al, [esi+0x5] */
    II(0x1018f968, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f96b, 0x3)   mov(memb_a32(ds, edx + 0xf), bl);     /* mov [edx+0xf], bl */
    II(0x1018f96e, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018f971, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f974, 0x3)   mov(memb_a32(ds, edx + 0x16), bl);    /* mov [edx+0x16], bl */
    II(0x1018f977, 0x3)   mov(memb_a32(ds, edx + 0x18), bh);    /* mov [edx+0x18], bh */
    II(0x1018f97a, 0x3)   mov(al, memb_a32(ds, esi + 0x6));     /* mov al, [esi+0x6] */
    II(0x1018f97d, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f980, 0x3)   mov(memb_a32(ds, edx + 0x1e), bl);    /* mov [edx+0x1e], bl */
    II(0x1018f983, 0x3)   mov(memb_a32(ds, edx + 0x20), bh);    /* mov [edx+0x20], bh */
    II(0x1018f986, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f989, 0x3)   mov(memb_a32(ds, edx + 0x25), bl);    /* mov [edx+0x25], bl */
    II(0x1018f98c, 0x3)   mov(memb_a32(ds, edx + 0x27), bh);    /* mov [edx+0x27], bh */
    II(0x1018f98f, 0x3)   mov(al, memb_a32(ds, esi + 0x7));     /* mov al, [esi+0x7] */
    II(0x1018f992, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f995, 0x3)   mov(memb_a32(ds, edx + 0x2d), bl);    /* mov [edx+0x2d], bl */
    II(0x1018f998, 0x3)   mov(memb_a32(ds, edx + 0x2f), bh);    /* mov [edx+0x2f], bh */
    II(0x1018f99b, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f99e, 0x3)   mov(memb_a32(ds, edx + 0x34), bl);    /* mov [edx+0x34], bl */
    II(0x1018f9a1, 0x3)   mov(memb_a32(ds, edx + 0x36), bh);    /* mov [edx+0x36], bh */
    II(0x1018f9a4, 0x3)   mov(al, memb_a32(ds, esi + 0xc));     /* mov al, [esi+0xc] */
    II(0x1018f9a7, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f9aa, 0x3)   mov(memb_a32(ds, edx + 0x44), bl);    /* mov [edx+0x44], bl */
    II(0x1018f9ad, 0x3)   mov(memb_a32(ds, edx + 0x46), bh);    /* mov [edx+0x46], bh */
    II(0x1018f9b0, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f9b3, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018f9b6, 0x3)   mov(memb_a32(ds, edx + 0x4d), bh);    /* mov [edx+0x4d], bh */
    II(0x1018f9b9, 0x3)   mov(al, memb_a32(ds, esi + 0xd));     /* mov al, [esi+0xd] */
    II(0x1018f9bc, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f9bf, 0x3)   mov(memb_a32(ds, edx + 0x53), bl);    /* mov [edx+0x53], bl */
    II(0x1018f9c2, 0x3)   mov(memb_a32(ds, edx + 0x55), bh);    /* mov [edx+0x55], bh */
    II(0x1018f9c5, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f9c8, 0x3)   mov(memb_a32(ds, edx + 0x5a), bl);    /* mov [edx+0x5a], bl */
    II(0x1018f9cb, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018f9ce, 0x3)   mov(al, memb_a32(ds, esi + 0xe));     /* mov al, [esi+0xe] */
    II(0x1018f9d1, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f9d4, 0x3)   mov(memb_a32(ds, edx + 0x62), bl);    /* mov [edx+0x62], bl */
    II(0x1018f9d7, 0x3)   mov(memb_a32(ds, edx + 0x64), bh);    /* mov [edx+0x64], bh */
    II(0x1018f9da, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f9dd, 0x3)   mov(memb_a32(ds, edx + 0x69), bl);    /* mov [edx+0x69], bl */
    II(0x1018f9e0, 0x3)   mov(memb_a32(ds, edx + 0x6b), bh);    /* mov [edx+0x6b], bh */
    II(0x1018f9e3, 0x3)   mov(al, memb_a32(ds, esi + 0xf));     /* mov al, [esi+0xf] */
    II(0x1018f9e6, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018f9e9, 0x3)   mov(memb_a32(ds, edx + 0x71), bl);    /* mov [edx+0x71], bl */
    II(0x1018f9ec, 0x3)   mov(memb_a32(ds, edx + 0x73), bh);    /* mov [edx+0x73], bh */
    II(0x1018f9ef, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018f9f2, 0x3)   mov(memb_a32(ds, edx + 0x78), bl);    /* mov [edx+0x78], bl */
    II(0x1018f9f5, 0x3)   mov(memb_a32(ds, edx + 0x7a), bh);    /* mov [edx+0x7a], bh */
    II(0x1018f9f8, 0x6)   lea(edx, edx + 0x91);                 /* lea edx, [edx+0x91] */
    II(0x1018f9fe, 0x3)   mov(al, memb_a32(ds, esi + 0x14));    /* mov al, [esi+0x14] */
    II(0x1018fa01, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa04, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018fa06, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018fa09, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa0c, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018fa0f, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018fa12, 0x3)   mov(al, memb_a32(ds, esi + 0x15));    /* mov al, [esi+0x15] */
    II(0x1018fa15, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa18, 0x3)   mov(memb_a32(ds, edx + 0xf), bl);     /* mov [edx+0xf], bl */
    II(0x1018fa1b, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018fa1e, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa21, 0x3)   mov(memb_a32(ds, edx + 0x16), bl);    /* mov [edx+0x16], bl */
    II(0x1018fa24, 0x3)   mov(memb_a32(ds, edx + 0x18), bh);    /* mov [edx+0x18], bh */
    II(0x1018fa27, 0x3)   mov(al, memb_a32(ds, esi + 0x16));    /* mov al, [esi+0x16] */
    II(0x1018fa2a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa2d, 0x3)   mov(memb_a32(ds, edx + 0x1e), bl);    /* mov [edx+0x1e], bl */
    II(0x1018fa30, 0x3)   mov(memb_a32(ds, edx + 0x20), bh);    /* mov [edx+0x20], bh */
    II(0x1018fa33, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa36, 0x3)   mov(memb_a32(ds, edx + 0x25), bl);    /* mov [edx+0x25], bl */
    II(0x1018fa39, 0x3)   mov(memb_a32(ds, edx + 0x27), bh);    /* mov [edx+0x27], bh */
    II(0x1018fa3c, 0x3)   mov(al, memb_a32(ds, esi + 0x17));    /* mov al, [esi+0x17] */
    II(0x1018fa3f, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa42, 0x3)   mov(memb_a32(ds, edx + 0x2d), bl);    /* mov [edx+0x2d], bl */
    II(0x1018fa45, 0x3)   mov(memb_a32(ds, edx + 0x2f), bh);    /* mov [edx+0x2f], bh */
    II(0x1018fa48, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa4b, 0x3)   mov(memb_a32(ds, edx + 0x34), bl);    /* mov [edx+0x34], bl */
    II(0x1018fa4e, 0x3)   mov(memb_a32(ds, edx + 0x36), bh);    /* mov [edx+0x36], bh */
    II(0x1018fa51, 0x3)   mov(al, memb_a32(ds, esi + 0x1c));    /* mov al, [esi+0x1c] */
    II(0x1018fa54, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa57, 0x3)   mov(memb_a32(ds, edx + 0x44), bl);    /* mov [edx+0x44], bl */
    II(0x1018fa5a, 0x3)   mov(memb_a32(ds, edx + 0x46), bh);    /* mov [edx+0x46], bh */
    II(0x1018fa5d, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa60, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018fa63, 0x3)   mov(memb_a32(ds, edx + 0x4d), bh);    /* mov [edx+0x4d], bh */
    II(0x1018fa66, 0x3)   mov(al, memb_a32(ds, esi + 0x1d));    /* mov al, [esi+0x1d] */
    II(0x1018fa69, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa6c, 0x3)   mov(memb_a32(ds, edx + 0x53), bl);    /* mov [edx+0x53], bl */
    II(0x1018fa6f, 0x3)   mov(memb_a32(ds, edx + 0x55), bh);    /* mov [edx+0x55], bh */
    II(0x1018fa72, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa75, 0x3)   mov(memb_a32(ds, edx + 0x5a), bl);    /* mov [edx+0x5a], bl */
    II(0x1018fa78, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018fa7b, 0x3)   mov(al, memb_a32(ds, esi + 0x1e));    /* mov al, [esi+0x1e] */
    II(0x1018fa7e, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa81, 0x3)   mov(memb_a32(ds, edx + 0x62), bl);    /* mov [edx+0x62], bl */
    II(0x1018fa84, 0x3)   mov(memb_a32(ds, edx + 0x64), bh);    /* mov [edx+0x64], bh */
    II(0x1018fa87, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa8a, 0x3)   mov(memb_a32(ds, edx + 0x69), bl);    /* mov [edx+0x69], bl */
    II(0x1018fa8d, 0x3)   mov(memb_a32(ds, edx + 0x6b), bh);    /* mov [edx+0x6b], bh */
    II(0x1018fa90, 0x3)   mov(al, memb_a32(ds, esi + 0x1f));    /* mov al, [esi+0x1f] */
    II(0x1018fa93, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fa96, 0x3)   mov(memb_a32(ds, edx + 0x71), bl);    /* mov [edx+0x71], bl */
    II(0x1018fa99, 0x3)   mov(memb_a32(ds, edx + 0x73), bh);    /* mov [edx+0x73], bh */
    II(0x1018fa9c, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fa9f, 0x3)   mov(memb_a32(ds, edx + 0x78), bl);    /* mov [edx+0x78], bl */
    II(0x1018faa2, 0x3)   mov(memb_a32(ds, edx + 0x7a), bh);    /* mov [edx+0x7a], bh */
    II(0x1018faa5, 0x3)   mov(bx, memw_a32(ds, esi));           /* mov bx, [esi] */
    II(0x1018faa8, 0x4)   mov(cx, memw_a32(ds, esi + 0x2));     /* mov cx, [esi+0x2] */
    II(0x1018faac, 0x6)   mov(edx, memd_a32(ds, 0x10209cd0));   /* mov edx, [0x10209cd0] */
    II(0x1018fab2, 0x2)   jmpd(0x1018fab4, 0);                  /* jmp 0x1018fab4 */
l_0x1018fab4:
    II(0x1018fab4, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fab6, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fab8, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fabb, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fabd, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fabf, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fac1, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fac3, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fac5, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fac7, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018faca, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018facc, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018face, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fad0, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fad2, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fad4, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fad6, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fad9, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fadb, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fadd, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fadf, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fae1, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fae3, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fae5, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fae8, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018faea, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018faec, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018faee, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018faf0, 0x4)   mov(bx, memw_a32(ds, esi + 0x8));     /* mov bx, [esi+0x8] */
    II(0x1018faf4, 0x4)   mov(cx, memw_a32(ds, esi + 0xa));     /* mov cx, [esi+0xa] */
    II(0x1018faf8, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fafa, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fafc, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018faff, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb01, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb03, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb05, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb07, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb09, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb0b, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb0e, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb10, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb12, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb14, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb16, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb18, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb1a, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb1d, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb1f, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb21, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb23, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb25, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb27, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb29, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb2c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb2e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb30, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb32, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb34, 0x7)   lea(eax, edx * 0x8 - 0x4);            /* lea eax, [edx*8+0xfffffffc] */
    II(0x1018fb3b, 0x2)   sub(edi, eax);                        /* sub edi, eax */
    II(0x1018fb3d, 0x4)   mov(bx, memw_a32(ds, esi + 0x10));    /* mov bx, [esi+0x10] */
    II(0x1018fb41, 0x4)   mov(cx, memw_a32(ds, esi + 0x12));    /* mov cx, [esi+0x12] */
    II(0x1018fb45, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb47, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb49, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb4c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb4e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb50, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb52, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb54, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb56, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb58, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb5b, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb5d, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb5f, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb61, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb63, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb65, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb67, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb6a, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb6c, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb6e, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb70, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb72, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb74, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb76, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb79, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb7b, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb7d, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb7f, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb81, 0x4)   mov(bx, memw_a32(ds, esi + 0x18));    /* mov bx, [esi+0x18] */
    II(0x1018fb85, 0x4)   mov(cx, memw_a32(ds, esi + 0x1a));    /* mov cx, [esi+0x1a] */
    II(0x1018fb89, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb8b, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb8d, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb90, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb92, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb94, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fb96, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fb98, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fb9a, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fb9c, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fb9f, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fba1, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fba3, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fba5, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fba7, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fba9, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fbab, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fbae, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fbb0, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fbb2, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fbb4, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fbb6, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fbb8, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fbba, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fbbd, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fbbf, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fbc1, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fbc3, 0x3)   add(esi, 0x20);                       /* add esi, 0x20 */
    II(0x1018fbc6, 0x3)   sub(edi, 0x4);                        /* sub edi, 0x4 */
    II(0x1018fbc9, 0x3)   sub(edi, memd_a32(ss, ebp - 0x10));   /* sub edi, [ebp-0x10] */
    II(0x1018fbcc, 0x1)   __retd__();                               /* ret  */
//    II(0x1018fbcd, 0x3)   /* Недостижимый код. */
l_0x1018fbd0:
    II(0x1018fbd0, 0x4)   mov(ax, memw_a32(ds, esi + 0xc));     /* mov ax, [esi+0xc] */
    II(0x1018fbd4, 0x2)   cmp(al, ah);                          /* cmp al, ah */
    II(0x1018fbd6, 0x6)   jad(0x1018fe5c, 0x280);               /* ja dword 0x1018fe5c */
    II(0x1018fbdc, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1018fbde, 0x6)   lea(ecx, 0x101bf510);                 /* lea ecx, [0x101bf510] */
    II(0x1018fbe4, 0x6)   lea(edx, 0x1018fd51);                 /* lea edx, [0x1018fd51] */
    II(0x1018fbea, 0x3)   mov(al, memb_a32(ds, esi + 0x4));     /* mov al, [esi+0x4] */
    II(0x1018fbed, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fbf0, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018fbf2, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018fbf5, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fbf8, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018fbfb, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018fbfe, 0x3)   mov(al, memb_a32(ds, esi + 0x5));     /* mov al, [esi+0x5] */
    II(0x1018fc01, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc04, 0x3)   mov(memb_a32(ds, edx + 0xf), bl);     /* mov [edx+0xf], bl */
    II(0x1018fc07, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018fc0a, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc0d, 0x3)   mov(memb_a32(ds, edx + 0x16), bl);    /* mov [edx+0x16], bl */
    II(0x1018fc10, 0x3)   mov(memb_a32(ds, edx + 0x18), bh);    /* mov [edx+0x18], bh */
    II(0x1018fc13, 0x3)   mov(al, memb_a32(ds, esi + 0x6));     /* mov al, [esi+0x6] */
    II(0x1018fc16, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc19, 0x3)   mov(memb_a32(ds, edx + 0x1e), bl);    /* mov [edx+0x1e], bl */
    II(0x1018fc1c, 0x3)   mov(memb_a32(ds, edx + 0x20), bh);    /* mov [edx+0x20], bh */
    II(0x1018fc1f, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc22, 0x3)   mov(memb_a32(ds, edx + 0x25), bl);    /* mov [edx+0x25], bl */
    II(0x1018fc25, 0x3)   mov(memb_a32(ds, edx + 0x27), bh);    /* mov [edx+0x27], bh */
    II(0x1018fc28, 0x3)   mov(al, memb_a32(ds, esi + 0x7));     /* mov al, [esi+0x7] */
    II(0x1018fc2b, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc2e, 0x3)   mov(memb_a32(ds, edx + 0x2d), bl);    /* mov [edx+0x2d], bl */
    II(0x1018fc31, 0x3)   mov(memb_a32(ds, edx + 0x2f), bh);    /* mov [edx+0x2f], bh */
    II(0x1018fc34, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc37, 0x3)   mov(memb_a32(ds, edx + 0x34), bl);    /* mov [edx+0x34], bl */
    II(0x1018fc3a, 0x3)   mov(memb_a32(ds, edx + 0x36), bh);    /* mov [edx+0x36], bh */
    II(0x1018fc3d, 0x3)   mov(al, memb_a32(ds, esi + 0x8));     /* mov al, [esi+0x8] */
    II(0x1018fc40, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc43, 0x3)   mov(memb_a32(ds, edx + 0x3c), bl);    /* mov [edx+0x3c], bl */
    II(0x1018fc46, 0x3)   mov(memb_a32(ds, edx + 0x3e), bh);    /* mov [edx+0x3e], bh */
    II(0x1018fc49, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc4c, 0x3)   mov(memb_a32(ds, edx + 0x43), bl);    /* mov [edx+0x43], bl */
    II(0x1018fc4f, 0x3)   mov(memb_a32(ds, edx + 0x45), bh);    /* mov [edx+0x45], bh */
    II(0x1018fc52, 0x3)   mov(al, memb_a32(ds, esi + 0x9));     /* mov al, [esi+0x9] */
    II(0x1018fc55, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc58, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018fc5b, 0x3)   mov(memb_a32(ds, edx + 0x4d), bh);    /* mov [edx+0x4d], bh */
    II(0x1018fc5e, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc61, 0x3)   mov(memb_a32(ds, edx + 0x52), bl);    /* mov [edx+0x52], bl */
    II(0x1018fc64, 0x3)   mov(memb_a32(ds, edx + 0x54), bh);    /* mov [edx+0x54], bh */
    II(0x1018fc67, 0x3)   mov(al, memb_a32(ds, esi + 0xa));     /* mov al, [esi+0xa] */
    II(0x1018fc6a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc6d, 0x3)   mov(memb_a32(ds, edx + 0x5a), bl);    /* mov [edx+0x5a], bl */
    II(0x1018fc70, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018fc73, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc76, 0x3)   mov(memb_a32(ds, edx + 0x61), bl);    /* mov [edx+0x61], bl */
    II(0x1018fc79, 0x3)   mov(memb_a32(ds, edx + 0x63), bh);    /* mov [edx+0x63], bh */
    II(0x1018fc7c, 0x3)   mov(al, memb_a32(ds, esi + 0xb));     /* mov al, [esi+0xb] */
    II(0x1018fc7f, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc82, 0x3)   mov(memb_a32(ds, edx + 0x69), bl);    /* mov [edx+0x69], bl */
    II(0x1018fc85, 0x3)   mov(memb_a32(ds, edx + 0x6b), bh);    /* mov [edx+0x6b], bh */
    II(0x1018fc88, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fc8b, 0x3)   mov(memb_a32(ds, edx + 0x70), bl);    /* mov [edx+0x70], bl */
    II(0x1018fc8e, 0x3)   mov(memb_a32(ds, edx + 0x72), bh);    /* mov [edx+0x72], bh */
    II(0x1018fc91, 0x6)   lea(edx, edx + 0x89);                 /* lea edx, [edx+0x89] */
    II(0x1018fc97, 0x3)   mov(al, memb_a32(ds, esi + 0x10));    /* mov al, [esi+0x10] */
    II(0x1018fc9a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fc9d, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018fc9f, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018fca2, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fca5, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018fca8, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018fcab, 0x3)   mov(al, memb_a32(ds, esi + 0x11));    /* mov al, [esi+0x11] */
    II(0x1018fcae, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fcb1, 0x3)   mov(memb_a32(ds, edx + 0xf), bl);     /* mov [edx+0xf], bl */
    II(0x1018fcb4, 0x3)   mov(memb_a32(ds, edx + 0x11), bh);    /* mov [edx+0x11], bh */
    II(0x1018fcb7, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fcba, 0x3)   mov(memb_a32(ds, edx + 0x16), bl);    /* mov [edx+0x16], bl */
    II(0x1018fcbd, 0x3)   mov(memb_a32(ds, edx + 0x18), bh);    /* mov [edx+0x18], bh */
    II(0x1018fcc0, 0x3)   mov(al, memb_a32(ds, esi + 0x12));    /* mov al, [esi+0x12] */
    II(0x1018fcc3, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fcc6, 0x3)   mov(memb_a32(ds, edx + 0x1e), bl);    /* mov [edx+0x1e], bl */
    II(0x1018fcc9, 0x3)   mov(memb_a32(ds, edx + 0x20), bh);    /* mov [edx+0x20], bh */
    II(0x1018fccc, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fccf, 0x3)   mov(memb_a32(ds, edx + 0x25), bl);    /* mov [edx+0x25], bl */
    II(0x1018fcd2, 0x3)   mov(memb_a32(ds, edx + 0x27), bh);    /* mov [edx+0x27], bh */
    II(0x1018fcd5, 0x3)   mov(al, memb_a32(ds, esi + 0x13));    /* mov al, [esi+0x13] */
    II(0x1018fcd8, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fcdb, 0x3)   mov(memb_a32(ds, edx + 0x2d), bl);    /* mov [edx+0x2d], bl */
    II(0x1018fcde, 0x3)   mov(memb_a32(ds, edx + 0x2f), bh);    /* mov [edx+0x2f], bh */
    II(0x1018fce1, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fce4, 0x3)   mov(memb_a32(ds, edx + 0x34), bl);    /* mov [edx+0x34], bl */
    II(0x1018fce7, 0x3)   mov(memb_a32(ds, edx + 0x36), bh);    /* mov [edx+0x36], bh */
    II(0x1018fcea, 0x3)   mov(al, memb_a32(ds, esi + 0x14));    /* mov al, [esi+0x14] */
    II(0x1018fced, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fcf0, 0x3)   mov(memb_a32(ds, edx + 0x3c), bl);    /* mov [edx+0x3c], bl */
    II(0x1018fcf3, 0x3)   mov(memb_a32(ds, edx + 0x3e), bh);    /* mov [edx+0x3e], bh */
    II(0x1018fcf6, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fcf9, 0x3)   mov(memb_a32(ds, edx + 0x43), bl);    /* mov [edx+0x43], bl */
    II(0x1018fcfc, 0x3)   mov(memb_a32(ds, edx + 0x45), bh);    /* mov [edx+0x45], bh */
    II(0x1018fcff, 0x3)   mov(al, memb_a32(ds, esi + 0x15));    /* mov al, [esi+0x15] */
    II(0x1018fd02, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fd05, 0x3)   mov(memb_a32(ds, edx + 0x4b), bl);    /* mov [edx+0x4b], bl */
    II(0x1018fd08, 0x3)   mov(memb_a32(ds, edx + 0x4d), bh);    /* mov [edx+0x4d], bh */
    II(0x1018fd0b, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fd0e, 0x3)   mov(memb_a32(ds, edx + 0x52), bl);    /* mov [edx+0x52], bl */
    II(0x1018fd11, 0x3)   mov(memb_a32(ds, edx + 0x54), bh);    /* mov [edx+0x54], bh */
    II(0x1018fd14, 0x3)   mov(al, memb_a32(ds, esi + 0x16));    /* mov al, [esi+0x16] */
    II(0x1018fd17, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fd1a, 0x3)   mov(memb_a32(ds, edx + 0x5a), bl);    /* mov [edx+0x5a], bl */
    II(0x1018fd1d, 0x3)   mov(memb_a32(ds, edx + 0x5c), bh);    /* mov [edx+0x5c], bh */
    II(0x1018fd20, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fd23, 0x3)   mov(memb_a32(ds, edx + 0x61), bl);    /* mov [edx+0x61], bl */
    II(0x1018fd26, 0x3)   mov(memb_a32(ds, edx + 0x63), bh);    /* mov [edx+0x63], bh */
    II(0x1018fd29, 0x3)   mov(al, memb_a32(ds, esi + 0x17));    /* mov al, [esi+0x17] */
    II(0x1018fd2c, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fd2f, 0x3)   mov(memb_a32(ds, edx + 0x69), bl);    /* mov [edx+0x69], bl */
    II(0x1018fd32, 0x3)   mov(memb_a32(ds, edx + 0x6b), bh);    /* mov [edx+0x6b], bh */
    II(0x1018fd35, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fd38, 0x3)   mov(memb_a32(ds, edx + 0x70), bl);    /* mov [edx+0x70], bl */
    II(0x1018fd3b, 0x3)   mov(memb_a32(ds, edx + 0x72), bh);    /* mov [edx+0x72], bh */
    II(0x1018fd3e, 0x3)   mov(bx, memw_a32(ds, esi));           /* mov bx, [esi] */
    II(0x1018fd41, 0x4)   mov(cx, memw_a32(ds, esi + 0x2));     /* mov cx, [esi+0x2] */
    II(0x1018fd45, 0x6)   mov(edx, memd_a32(ds, 0x10209cd0));   /* mov edx, [0x10209cd0] */
    II(0x1018fd4b, 0x2)   jmpd(0x1018fd50, 0x3);                /* jmp 0x1018fd50 */
//    II(0x1018fd4d, 0x3)   /* Недостижимый код. */
l_0x1018fd50:
    II(0x1018fd50, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd52, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd54, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fd57, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd59, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd5b, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fd5d, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fd5f, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd61, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd63, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fd66, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd68, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd6a, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fd6c, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fd6e, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd70, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd72, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fd75, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd77, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd79, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fd7b, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fd7d, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd7f, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd81, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fd84, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd86, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd88, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fd8a, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fd8c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd8e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd90, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fd93, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd95, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd97, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fd99, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fd9b, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fd9d, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fd9f, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fda2, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fda4, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fda6, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fda8, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fdaa, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdac, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdae, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fdb1, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdb3, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdb5, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fdb7, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fdb9, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdbb, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdbd, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fdc0, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdc2, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdc4, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fdc6, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fdc8, 0x7)   lea(eax, edx * 0x8 - 0x4);            /* lea eax, [edx*8+0xfffffffc] */
    II(0x1018fdcf, 0x2)   sub(edi, eax);                        /* sub edi, eax */
    II(0x1018fdd1, 0x4)   mov(bx, memw_a32(ds, esi + 0xc));     /* mov bx, [esi+0xc] */
    II(0x1018fdd5, 0x4)   mov(cx, memw_a32(ds, esi + 0xe));     /* mov cx, [esi+0xe] */
    II(0x1018fdd9, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fddb, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fddd, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fde0, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fde2, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fde4, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fde6, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fde8, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdea, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdec, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fdef, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdf1, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdf3, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fdf5, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fdf7, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fdf9, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fdfb, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fdfe, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe00, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe02, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe04, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fe06, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe08, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe0a, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fe0d, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe0f, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe11, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe13, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fe15, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe17, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe19, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fe1c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe1e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe20, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe22, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fe24, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe26, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe28, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fe2b, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe2d, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe2f, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe31, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fe33, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe35, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe37, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fe3a, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe3c, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe3e, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe40, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018fe42, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe44, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe46, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fe49, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fe4b, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fe4d, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fe4f, 0x3)   add(esi, 0x18);                       /* add esi, 0x18 */
    II(0x1018fe52, 0x3)   sub(edi, 0x4);                        /* sub edi, 0x4 */
    II(0x1018fe55, 0x3)   sub(edi, memd_a32(ss, ebp - 0x10));   /* sub edi, [ebp-0x10] */
    II(0x1018fe58, 0x1)   __retd__();                               /* ret  */
//    II(0x1018fe59, 0x3)   /* Недостижимый код. */
l_0x1018fe5c:
    II(0x1018fe5c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1018fe5e, 0x6)   lea(ecx, 0x101bf510);                 /* lea ecx, [0x101bf510] */
    II(0x1018fe64, 0x6)   lea(edx, 0x1018ffcd);                 /* lea edx, [0x1018ffcd] */
    II(0x1018fe6a, 0x3)   mov(al, memb_a32(ds, esi + 0x4));     /* mov al, [esi+0x4] */
    II(0x1018fe6d, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fe70, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018fe72, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018fe75, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fe78, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018fe7b, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018fe7e, 0x3)   mov(al, memb_a32(ds, esi + 0x5));     /* mov al, [esi+0x5] */
    II(0x1018fe81, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fe84, 0x3)   mov(memb_a32(ds, edx + 0xd), bl);     /* mov [edx+0xd], bl */
    II(0x1018fe87, 0x3)   mov(memb_a32(ds, edx + 0xf), bh);     /* mov [edx+0xf], bh */
    II(0x1018fe8a, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fe8d, 0x3)   mov(memb_a32(ds, edx + 0x14), bl);    /* mov [edx+0x14], bl */
    II(0x1018fe90, 0x3)   mov(memb_a32(ds, edx + 0x16), bh);    /* mov [edx+0x16], bh */
    II(0x1018fe93, 0x3)   mov(al, memb_a32(ds, esi + 0x6));     /* mov al, [esi+0x6] */
    II(0x1018fe96, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fe99, 0x3)   mov(memb_a32(ds, edx + 0x1d), bl);    /* mov [edx+0x1d], bl */
    II(0x1018fe9c, 0x3)   mov(memb_a32(ds, edx + 0x1f), bh);    /* mov [edx+0x1f], bh */
    II(0x1018fe9f, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fea2, 0x3)   mov(memb_a32(ds, edx + 0x24), bl);    /* mov [edx+0x24], bl */
    II(0x1018fea5, 0x3)   mov(memb_a32(ds, edx + 0x26), bh);    /* mov [edx+0x26], bh */
    II(0x1018fea8, 0x3)   mov(al, memb_a32(ds, esi + 0x7));     /* mov al, [esi+0x7] */
    II(0x1018feab, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018feae, 0x3)   mov(memb_a32(ds, edx + 0x2a), bl);    /* mov [edx+0x2a], bl */
    II(0x1018feb1, 0x3)   mov(memb_a32(ds, edx + 0x2c), bh);    /* mov [edx+0x2c], bh */
    II(0x1018feb4, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018feb7, 0x3)   mov(memb_a32(ds, edx + 0x31), bl);    /* mov [edx+0x31], bl */
    II(0x1018feba, 0x3)   mov(memb_a32(ds, edx + 0x33), bh);    /* mov [edx+0x33], bh */
    II(0x1018febd, 0x3)   mov(al, memb_a32(ds, esi + 0x8));     /* mov al, [esi+0x8] */
    II(0x1018fec0, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fec3, 0x3)   mov(memb_a32(ds, edx + 0x3a), bl);    /* mov [edx+0x3a], bl */
    II(0x1018fec6, 0x3)   mov(memb_a32(ds, edx + 0x3c), bh);    /* mov [edx+0x3c], bh */
    II(0x1018fec9, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fecc, 0x3)   mov(memb_a32(ds, edx + 0x41), bl);    /* mov [edx+0x41], bl */
    II(0x1018fecf, 0x3)   mov(memb_a32(ds, edx + 0x43), bh);    /* mov [edx+0x43], bh */
    II(0x1018fed2, 0x3)   mov(al, memb_a32(ds, esi + 0x9));     /* mov al, [esi+0x9] */
    II(0x1018fed5, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018fed8, 0x3)   mov(memb_a32(ds, edx + 0x47), bl);    /* mov [edx+0x47], bl */
    II(0x1018fedb, 0x3)   mov(memb_a32(ds, edx + 0x49), bh);    /* mov [edx+0x49], bh */
    II(0x1018fede, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fee1, 0x3)   mov(memb_a32(ds, edx + 0x4e), bl);    /* mov [edx+0x4e], bl */
    II(0x1018fee4, 0x3)   mov(memb_a32(ds, edx + 0x50), bh);    /* mov [edx+0x50], bh */
    II(0x1018fee7, 0x3)   mov(al, memb_a32(ds, esi + 0xa));     /* mov al, [esi+0xa] */
    II(0x1018feea, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018feed, 0x3)   mov(memb_a32(ds, edx + 0x57), bl);    /* mov [edx+0x57], bl */
    II(0x1018fef0, 0x3)   mov(memb_a32(ds, edx + 0x59), bh);    /* mov [edx+0x59], bh */
    II(0x1018fef3, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018fef6, 0x3)   mov(memb_a32(ds, edx + 0x5e), bl);    /* mov [edx+0x5e], bl */
    II(0x1018fef9, 0x3)   mov(memb_a32(ds, edx + 0x60), bh);    /* mov [edx+0x60], bh */
    II(0x1018fefc, 0x3)   mov(al, memb_a32(ds, esi + 0xb));     /* mov al, [esi+0xb] */
    II(0x1018feff, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff02, 0x3)   mov(memb_a32(ds, edx + 0x64), bl);    /* mov [edx+0x64], bl */
    II(0x1018ff05, 0x3)   mov(memb_a32(ds, edx + 0x66), bh);    /* mov [edx+0x66], bh */
    II(0x1018ff08, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff0b, 0x3)   mov(memb_a32(ds, edx + 0x6b), bl);    /* mov [edx+0x6b], bl */
    II(0x1018ff0e, 0x3)   mov(memb_a32(ds, edx + 0x6d), bh);    /* mov [edx+0x6d], bh */
    II(0x1018ff11, 0x3)   lea(edx, edx + 0x7c);                 /* lea edx, [edx+0x7c] */
    II(0x1018ff14, 0x3)   mov(al, memb_a32(ds, esi + 0x10));    /* mov al, [esi+0x10] */
    II(0x1018ff17, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff1a, 0x2)   mov(memb_a32(ds, edx), bl);           /* mov [edx], bl */
    II(0x1018ff1c, 0x3)   mov(memb_a32(ds, edx + 0x2), bh);     /* mov [edx+0x2], bh */
    II(0x1018ff1f, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff22, 0x3)   mov(memb_a32(ds, edx + 0x7), bl);     /* mov [edx+0x7], bl */
    II(0x1018ff25, 0x3)   mov(memb_a32(ds, edx + 0x9), bh);     /* mov [edx+0x9], bh */
    II(0x1018ff28, 0x3)   mov(al, memb_a32(ds, esi + 0x11));    /* mov al, [esi+0x11] */
    II(0x1018ff2b, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff2e, 0x3)   mov(memb_a32(ds, edx + 0xd), bl);     /* mov [edx+0xd], bl */
    II(0x1018ff31, 0x3)   mov(memb_a32(ds, edx + 0xf), bh);     /* mov [edx+0xf], bh */
    II(0x1018ff34, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff37, 0x3)   mov(memb_a32(ds, edx + 0x14), bl);    /* mov [edx+0x14], bl */
    II(0x1018ff3a, 0x3)   mov(memb_a32(ds, edx + 0x16), bh);    /* mov [edx+0x16], bh */
    II(0x1018ff3d, 0x3)   mov(al, memb_a32(ds, esi + 0x12));    /* mov al, [esi+0x12] */
    II(0x1018ff40, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff43, 0x3)   mov(memb_a32(ds, edx + 0x1d), bl);    /* mov [edx+0x1d], bl */
    II(0x1018ff46, 0x3)   mov(memb_a32(ds, edx + 0x1f), bh);    /* mov [edx+0x1f], bh */
    II(0x1018ff49, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff4c, 0x3)   mov(memb_a32(ds, edx + 0x24), bl);    /* mov [edx+0x24], bl */
    II(0x1018ff4f, 0x3)   mov(memb_a32(ds, edx + 0x26), bh);    /* mov [edx+0x26], bh */
    II(0x1018ff52, 0x3)   mov(al, memb_a32(ds, esi + 0x13));    /* mov al, [esi+0x13] */
    II(0x1018ff55, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff58, 0x3)   mov(memb_a32(ds, edx + 0x2a), bl);    /* mov [edx+0x2a], bl */
    II(0x1018ff5b, 0x3)   mov(memb_a32(ds, edx + 0x2c), bh);    /* mov [edx+0x2c], bh */
    II(0x1018ff5e, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff61, 0x3)   mov(memb_a32(ds, edx + 0x31), bl);    /* mov [edx+0x31], bl */
    II(0x1018ff64, 0x3)   mov(memb_a32(ds, edx + 0x33), bh);    /* mov [edx+0x33], bh */
    II(0x1018ff67, 0x3)   mov(al, memb_a32(ds, esi + 0x14));    /* mov al, [esi+0x14] */
    II(0x1018ff6a, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff6d, 0x3)   mov(memb_a32(ds, edx + 0x3a), bl);    /* mov [edx+0x3a], bl */
    II(0x1018ff70, 0x3)   mov(memb_a32(ds, edx + 0x3c), bh);    /* mov [edx+0x3c], bh */
    II(0x1018ff73, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff76, 0x3)   mov(memb_a32(ds, edx + 0x41), bl);    /* mov [edx+0x41], bl */
    II(0x1018ff79, 0x3)   mov(memb_a32(ds, edx + 0x43), bh);    /* mov [edx+0x43], bh */
    II(0x1018ff7c, 0x3)   mov(al, memb_a32(ds, esi + 0x15));    /* mov al, [esi+0x15] */
    II(0x1018ff7f, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff82, 0x3)   mov(memb_a32(ds, edx + 0x47), bl);    /* mov [edx+0x47], bl */
    II(0x1018ff85, 0x3)   mov(memb_a32(ds, edx + 0x49), bh);    /* mov [edx+0x49], bh */
    II(0x1018ff88, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ff8b, 0x3)   mov(memb_a32(ds, edx + 0x4e), bl);    /* mov [edx+0x4e], bl */
    II(0x1018ff8e, 0x3)   mov(memb_a32(ds, edx + 0x50), bh);    /* mov [edx+0x50], bh */
    II(0x1018ff91, 0x3)   mov(al, memb_a32(ds, esi + 0x16));    /* mov al, [esi+0x16] */
    II(0x1018ff94, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ff97, 0x3)   mov(memb_a32(ds, edx + 0x57), bl);    /* mov [edx+0x57], bl */
    II(0x1018ff9a, 0x3)   mov(memb_a32(ds, edx + 0x59), bh);    /* mov [edx+0x59], bh */
    II(0x1018ff9d, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ffa0, 0x3)   mov(memb_a32(ds, edx + 0x5e), bl);    /* mov [edx+0x5e], bl */
    II(0x1018ffa3, 0x3)   mov(memb_a32(ds, edx + 0x60), bh);    /* mov [edx+0x60], bh */
    II(0x1018ffa6, 0x3)   mov(al, memb_a32(ds, esi + 0x17));    /* mov al, [esi+0x17] */
    II(0x1018ffa9, 0x3)   mov(ebx, memd_a32(ds, ecx + eax * 0x4)); /* mov ebx, [ecx+eax*4] */
    II(0x1018ffac, 0x3)   mov(memb_a32(ds, edx + 0x64), bl);    /* mov [edx+0x64], bl */
    II(0x1018ffaf, 0x3)   mov(memb_a32(ds, edx + 0x66), bh);    /* mov [edx+0x66], bh */
    II(0x1018ffb2, 0x3)   shr(ebx, 0x10);                       /* shr ebx, 0x10 */
    II(0x1018ffb5, 0x3)   mov(memb_a32(ds, edx + 0x6b), bl);    /* mov [edx+0x6b], bl */
    II(0x1018ffb8, 0x3)   mov(memb_a32(ds, edx + 0x6d), bh);    /* mov [edx+0x6d], bh */
    II(0x1018ffbb, 0x3)   mov(bx, memw_a32(ds, esi));           /* mov bx, [esi] */
    II(0x1018ffbe, 0x4)   mov(cx, memw_a32(ds, esi + 0x2));     /* mov cx, [esi+0x2] */
    II(0x1018ffc2, 0x6)   mov(edx, memd_a32(ds, 0x10209cd0));   /* mov edx, [0x10209cd0] */
    II(0x1018ffc8, 0x2)   jmpd(0x1018ffcc, 0x2);                /* jmp 0x1018ffcc */
//    II(0x1018ffca, 0x2)   /* Недостижимый код. */
l_0x1018ffcc:
    II(0x1018ffcc, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffce, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018ffd0, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ffd3, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffd5, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018ffd7, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018ffd9, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffdb, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018ffdd, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018ffe0, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffe2, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018ffe4, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1018ffe7, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1018ffe9, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffeb, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018ffed, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fff0, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fff2, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fff4, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1018fff6, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018fff8, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1018fffa, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1018fffd, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1018ffff, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190001, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x10190004, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x10190006, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190008, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019000a, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019000d, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019000f, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190011, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x10190013, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190015, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190017, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019001a, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019001c, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019001e, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x10190021, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x10190023, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190025, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190027, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019002a, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019002c, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019002e, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x10190030, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190032, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190034, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x10190037, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190039, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019003b, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1019003e, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x10190040, 0x4)   mov(bx, memw_a32(ds, esi + 0xc));     /* mov bx, [esi+0xc] */
    II(0x10190044, 0x4)   mov(cx, memw_a32(ds, esi + 0xe));     /* mov cx, [esi+0xe] */
    II(0x10190048, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019004a, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019004c, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019004f, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190051, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190053, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x10190055, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190057, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190059, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019005c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019005e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190060, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x10190063, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x10190065, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190067, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190069, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x1019006c, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019006e, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190070, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x10190072, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190074, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190076, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x10190079, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019007b, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019007d, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x10190080, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x10190082, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190084, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190086, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x10190089, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x1019008b, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019008d, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x1019008f, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190091, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x10190093, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x10190096, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x10190098, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x1019009a, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x1019009d, 0x2)   add(edi, edx);                        /* add edi, edx */
    II(0x1019009f, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x101900a1, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x101900a3, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x101900a6, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x101900a8, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x101900aa, 0x2)   __mov__(memd_a32(ds, edi), eax);          /* mov [edi], eax */
    II(0x101900ac, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x101900ae, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x101900b0, 0x3)   shl(eax, 0x10);                       /* shl eax, 0x10 */
    II(0x101900b3, 0x2)   __mov__(al, bl);                          /* mov al, bl */
    II(0x101900b5, 0x2)   __mov__(ah, bl);                          /* mov ah, bl */
    II(0x101900b7, 0x3)   __mov__(memd_a32(ds, edi + 0x4), eax);    /* mov [edi+0x4], eax */
    II(0x101900ba, 0x3)   add(esi, 0x18);                       /* add esi, 0x18 */
    II(0x101900bd, 0x3)   sub(edi, memd_a32(ss, ebp - 0x10));   /* sub edi, [ebp-0x10] */
    II(0x101900c0, 0x1)   __retd__();                               /* ret  */
FUNC_END
