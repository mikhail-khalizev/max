FUNC_BEGIN(0x10071f2e, 0x7f75b5a57eb259c0, 0x20, ({0x68, 0x2c, 0, 0, 0, 0xe8, 0x1a, 0x3e, 0xf, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf8, 0xeb, 0x29, 0xc7, 0x45, 0xf4, 0x1, 0, 0, 0, 0xe9, 0x8c, 0, 0, 0, 0xc7, 0x45, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xe9, 0x80, 0, 0, 0, 0xc7, 0x45, 0xf4, 0xfa, 0xff, 0xff, 0xff, 0xe9, 0x74, 0, 0, 0, 0xe9, 0x68, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x89, 0x45, 0xf0, 0x66, 0x83, 0x7d, 0xf0, 0x17, 0x72, 0x37, 0x66, 0x83, 0x7d, 0xf0, 0x19, 0x76, 0xc3, 0x66, 0x83, 0x7d, 0xf0, 0x1d, 0x72, 0x20, 0x66, 0x83, 0x7d, 0xf0, 0x1e, 0x76, 0xb5, 0x66, 0x83, 0x7d, 0xf0, 0x20, 0x72, 0x10, 0x66, 0x83, 0x7d, 0xf0, 0x20, 0x76, 0xa7, 0x66, 0x83, 0x7d, 0xf0, 0x28, 0x74, 0xa0, 0xeb, 0xc2, 0xeb, 0xc0, 0x66, 0x83, 0x7d, 0xf0, 0x1b, 0x74, 0x95, 0xeb, 0xb7, 0x66, 0x83, 0x7d, 0xf0, 0x1, 0x72, 0x10, 0x66, 0x83, 0x7d, 0xf0, 0x1, 0x76, 0x9d, 0x66, 0x83, 0x7d, 0xf0, 0x2, 0x74, 0x8a, 0xeb, 0xa0, 0x66, 0x83, 0x7d, 0xf0, 0, 0xf, 0x84, 0x71, 0xff, 0xff, 0xff, 0xeb, 0x93, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10071f2e, 0x5)   pushd(0x2c);                          /* push dword 0x2c */
    II(0x10071f33, 0x5)   calld(sys_check_available_stack_size, 0xf3e1a); /* call 0x10165d52 */
    II(0x10071f38, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10071f39, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10071f3a, 0x1)   pushd(edx);                           /* push edx */
    II(0x10071f3b, 0x1)   pushd(esi);                           /* push esi */
    II(0x10071f3c, 0x1)   pushd(edi);                           /* push edi */
    II(0x10071f3d, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10071f3e, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10071f40, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x10071f46, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x10071f49, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10071f4c, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10071f4f, 0x2)   jmpd(0x10071f7a, 0x29);               /* jmp 0x10071f7a */
l_0x10071f51:
    II(0x10071f51, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x1);    /* mov dword [ebp-0xc], 0x1 */
    II(0x10071f58, 0x5)   jmpd(0x10071fe9, 0x8c);               /* jmp 0x10071fe9 */
l_0x10071f5d:
    II(0x10071f5d, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0xffffffff); /* mov dword [ebp-0xc], 0xffffffff */
    II(0x10071f64, 0x5)   jmpd(0x10071fe9, 0x80);               /* jmp 0x10071fe9 */
l_0x10071f69:
    II(0x10071f69, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0xfffffffa); /* mov dword [ebp-0xc], 0xfffffffa */
    II(0x10071f70, 0x5)   jmpd(0x10071fe9, 0x74);               /* jmp 0x10071fe9 */
l_0x10071f75:
    II(0x10071f75, 0x5)   jmpd(0x10071fe2, 0x68);               /* jmp 0x10071fe2 */
l_0x10071f7a:
    II(0x10071f7a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10071f7d, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10071f80, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x17);  /* cmp word [ebp-0x10], 0x17 */
    II(0x10071f85, 0x2)   jbd(0x10071fbe, 0x37);                /* jb 0x10071fbe */
    II(0x10071f87, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x19);  /* cmp word [ebp-0x10], 0x19 */
    II(0x10071f8c, 0x2)   jbed(0x10071f51, -0x3d);              /* jbe 0x10071f51 */
    II(0x10071f8e, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1d);  /* cmp word [ebp-0x10], 0x1d */
    II(0x10071f93, 0x2)   jbd(0x10071fb5, 0x20);                /* jb 0x10071fb5 */
    II(0x10071f95, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1e);  /* cmp word [ebp-0x10], 0x1e */
    II(0x10071f9a, 0x2)   jbed(0x10071f51, -0x4b);              /* jbe 0x10071f51 */
    II(0x10071f9c, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x20);  /* cmp word [ebp-0x10], 0x20 */
    II(0x10071fa1, 0x2)   jbd(0x10071fb3, 0x10);                /* jb 0x10071fb3 */
    II(0x10071fa3, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x20);  /* cmp word [ebp-0x10], 0x20 */
    II(0x10071fa8, 0x2)   jbed(0x10071f51, -0x59);              /* jbe 0x10071f51 */
    II(0x10071faa, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x28);  /* cmp word [ebp-0x10], 0x28 */
    II(0x10071faf, 0x2)   jzd(0x10071f51, -0x60);               /* jz 0x10071f51 */
    II(0x10071fb1, 0x2)   jmpd(0x10071f75, -0x3e);              /* jmp 0x10071f75 */
l_0x10071fb3:
    II(0x10071fb3, 0x2)   jmpd(0x10071f75, -0x40);              /* jmp 0x10071f75 */
l_0x10071fb5:
    II(0x10071fb5, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1b);  /* cmp word [ebp-0x10], 0x1b */
    II(0x10071fba, 0x2)   jzd(0x10071f51, -0x6b);               /* jz 0x10071f51 */
    II(0x10071fbc, 0x2)   jmpd(0x10071f75, -0x49);              /* jmp 0x10071f75 */
l_0x10071fbe:
    II(0x10071fbe, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1);   /* cmp word [ebp-0x10], 0x1 */
    II(0x10071fc3, 0x2)   jbd(0x10071fd5, 0x10);                /* jb 0x10071fd5 */
    II(0x10071fc5, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1);   /* cmp word [ebp-0x10], 0x1 */
    II(0x10071fca, 0x2)   jbed(0x10071f69, -0x63);              /* jbe 0x10071f69 */
    II(0x10071fcc, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x2);   /* cmp word [ebp-0x10], 0x2 */
    II(0x10071fd1, 0x2)   jzd(0x10071f5d, -0x76);               /* jz 0x10071f5d */
    II(0x10071fd3, 0x2)   jmpd(0x10071f75, -0x60);              /* jmp 0x10071f75 */
l_0x10071fd5:
    II(0x10071fd5, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0);     /* cmp word [ebp-0x10], 0x0 */
    II(0x10071fda, 0x6)   jzd(0x10071f51, -0x8f);               /* jz dword 0x10071f51 */
    II(0x10071fe0, 0x2)   jmpd(0x10071f75, -0x6d);              /* jmp 0x10071f75 */
l_0x10071fe2:
    II(0x10071fe2, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0);      /* mov dword [ebp-0xc], 0x0 */
l_0x10071fe9:
    II(0x10071fe9, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10071fec, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10071fee, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10071fef, 0x1)   popd(edi);                            /* pop edi */
    II(0x10071ff0, 0x1)   popd(esi);                            /* pop esi */
    II(0x10071ff1, 0x1)   popd(edx);                            /* pop edx */
    II(0x10071ff2, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10071ff3, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10071ff4, 0x1)   retd();                               /* ret */
FUNC_END

