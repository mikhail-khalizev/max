FUNC_BEGIN(0x10146a6d, 0x6be6bce2744b809, 0x20, ({0x68, 0x3c, 0, 0, 0, 0xe8, 0xdb, 0xf2, 0x1, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x1c, 0, 0, 0, 0x80, 0x4d, 0xfc, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0x57, 0xb0, 0xff, 0xff, 0x89, 0x45, 0xf0, 0x80, 0x65, 0xfc, 0xfe, 0x8d, 0x45, 0x24, 0x89, 0x45, 0xf4, 0x8d, 0x4d, 0xf4, 0x8b, 0x5d, 0x20, 0xba, 0x2c, 0x1, 0, 0, 0x8d, 0x45, 0xec, 0xe8, 0x26, 0xb6, 0xff, 0xff, 0xc7, 0x45, 0xf4, 0, 0, 0, 0, 0xcc, 0xe8, 0x42, 0x3f, 0xf8, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x57, 0x3f, 0xf8, 0xff, 0x89, 0x45, 0xe8, 0xbf, 0x1, 0, 0, 0, 0xc7, 0x45, 0xe4, 0x2, 0, 0, 0, 0x8b, 0x45, 0x1c, 0x8b, 0x40, 0x18, 0xc1, 0xf8, 0x10, 0x50, 0x8b, 0x4d, 0x1c, 0x8b, 0x49, 0x16, 0x8b, 0x45, 0x1c, 0x83, 0xc0, 0x12, 0xe8, 0xd5, 0x2c, 0xf4, 0xff, 0x89, 0xc3, 0x8d, 0x45, 0xec, 0xe8, 0xcb, 0x2c, 0xf4, 0xff, 0x8d, 0x75, 0xf8, 0x89, 0xc2, 0x89, 0xf0, 0xe8, 0x4d, 0xe5, 0xff, 0xff, 0xe8, 0xba, 0x2c, 0xf4, 0xff, 0x8b, 0x4d, 0xe8, 0x89, 0xfb, 0x8b, 0x55, 0xe4, 0xe8, 0x8, 0xf2, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf8, 0xe8, 0x5, 0xb0, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xfb, 0xaf, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10146a6d, 0x5)   pushd(0x3c);                          /* push dword 0x3c */
    II(0x10146a72, 0x5)   calld(sys_check_available_stack_size, 0x1f2db); /* call 0x10165d52 */
    II(0x10146a77, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10146a78, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10146a79, 0x1)   pushd(edx);                           /* push edx */
    II(0x10146a7a, 0x1)   pushd(esi);                           /* push esi */
    II(0x10146a7b, 0x1)   pushd(edi);                           /* push edi */
    II(0x10146a7c, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10146a7d, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10146a7f, 0x6)   sub(esp, 0x1c);                       /* sub esp, 0x1c */
    II(0x10146a85, 0x4)   or_(memb_a32(ss, ebp - 0x4), 0x1);    /* or byte [ebp-0x4], 0x1 */
    II(0x10146a89, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146a8c, 0x5)   calld(my_string_ctor, -0x4fa9);       /* call 0x10141ae8 */
    II(0x10146a91, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10146a94, 0x4)   and_(memb_a32(ss, ebp - 0x4), -0x2 /* 0xfe */); /* and byte [ebp-0x4], 0xfe */
    II(0x10146a98, 0x3)   lea(eax, ebp + 0x24);                 /* lea eax, [ebp+0x24] */
    II(0x10146a9b, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10146a9e, 0x3)   lea(ecx, ebp - 0xc);                  /* lea ecx, [ebp-0xc] */
    II(0x10146aa1, 0x3)   mov(ebx, memd_a32(ss, ebp + 0x20));   /* mov ebx, [ebp+0x20] */
    II(0x10146aa4, 0x5)   mov(edx, 0x12c);                      /* mov edx, 0x12c */
    II(0x10146aa9, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146aac, 0x5)   calld(0x101420d7, -0x49da);           /* call 0x101420d7 */
    II(0x10146ab1, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0);      /* mov dword [ebp-0xc], 0x0 */
    II(0x10146ab8, 0x1)   int3();                               /* int3 */
    II(0x10146ab9, 0x5)   calld(0x100caa00, -0x7c0be);          /* call 0x100caa00 */
    II(0x10146abe, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10146ac3, 0x1)   pushd(eax);                           /* push eax */
    II(0x10146ac4, 0x5)   calld(0x100caa20, -0x7c0a9);          /* call 0x100caa20 */
    II(0x10146ac9, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x10146acc, 0x5)   mov(edi, 0x1);                        /* mov edi, 0x1 */
    II(0x10146ad1, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0x2);   /* mov dword [ebp-0x1c], 0x2 */
    II(0x10146ad8, 0x3)   mov(eax, memd_a32(ss, ebp + 0x1c));   /* mov eax, [ebp+0x1c] */
    II(0x10146adb, 0x3)   mov(eax, memd_a32(ds, eax + 0x18));   /* mov eax, [eax+0x18] */
    II(0x10146ade, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10146ae1, 0x1)   pushd(eax);                           /* push eax */
    II(0x10146ae2, 0x3)   mov(ecx, memd_a32(ss, ebp + 0x1c));   /* mov ecx, [ebp+0x1c] */
    II(0x10146ae5, 0x3)   mov(ecx, memd_a32(ds, ecx + 0x16));   /* mov ecx, [ecx+0x16] */
    II(0x10146ae8, 0x3)   mov(eax, memd_a32(ss, ebp + 0x1c));   /* mov eax, [ebp+0x1c] */
    II(0x10146aeb, 0x3)   add(eax, 0x12);                       /* add eax, 0x12 */
    II(0x10146aee, 0x5)   calld(my_strobj_c_str_v2, -0xbd32b);  /* call 0x100897c8 */
    II(0x10146af3, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x10146af5, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146af8, 0x5)   calld(my_strobj_c_str_v2, -0xbd335);  /* call 0x100897c8 */
    II(0x10146afd, 0x3)   lea(esi, ebp - 0x8);                  /* lea esi, [ebp-0x8] */
    II(0x10146b00, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10146b02, 0x2)   mov(eax, esi);                        /* mov eax, esi */
    II(0x10146b04, 0x5)   calld(0x10145056, -0x1ab3);           /* call 0x10145056 */
    II(0x10146b09, 0x5)   calld(my_strobj_c_str_v2, -0xbd346);  /* call 0x100897c8 */
    II(0x10146b0e, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x18));   /* mov ecx, [ebp-0x18] */
    II(0x10146b11, 0x2)   mov(ebx, edi);                        /* mov ebx, edi */
    II(0x10146b13, 0x3)   mov(edx, memd_a32(ss, ebp - 0x1c));   /* mov edx, [ebp-0x1c] */
    II(0x10146b16, 0x5)   calld(0x10115d23, -0x30df8);          /* call 0x10115d23 */
    II(0x10146b1b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10146b1d, 0x3)   lea(eax, ebp - 0x8);                  /* lea eax, [ebp-0x8] */
    II(0x10146b20, 0x5)   calld(my_string_dtor, -0x4ffb);       /* call 0x10141b2a */
    II(0x10146b25, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10146b27, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10146b2a, 0x5)   calld(my_string_dtor, -0x5005);       /* call 0x10141b2a */
    II(0x10146b2f, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10146b31, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10146b32, 0x1)   popd(edi);                            /* pop edi */
    II(0x10146b33, 0x1)   popd(esi);                            /* pop esi */
    II(0x10146b34, 0x1)   popd(edx);                            /* pop edx */
    II(0x10146b35, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10146b36, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10146b37, 0x1)   retd();                               /* ret */
FUNC_END

