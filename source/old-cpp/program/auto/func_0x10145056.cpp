FUNC_BEGIN(0x10145056, 0x2d2f5654dd349c11, 0x20, ({0x68, 0x44, 0, 0, 0, 0xe8, 0xf2, 0xc, 0x2, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xf0, 0x89, 0x55, 0xf4, 0x89, 0x5d, 0xf8, 0x89, 0x4d, 0xfc, 0x80, 0x4d, 0xec, 0x1, 0x8d, 0x45, 0xe8, 0xe8, 0x65, 0xca, 0xff, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xec, 0xfe, 0x8b, 0x45, 0xf8, 0x89, 0x45, 0xe0, 0xf, 0xbf, 0x45, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xb8, 0x88, 0xcf, 0x1a, 0x10, 0x50, 0xb8, 0x50, 0, 0, 0, 0x50, 0x8d, 0x45, 0xe8, 0x50, 0xe8, 0x89, 0xcf, 0xff, 0xff, 0x83, 0xc4, 0x14, 0x8b, 0x55, 0xf8, 0x8d, 0x45, 0xe8, 0xe8, 0x83, 0xcc, 0xff, 0xff, 0x8d, 0x45, 0xe8, 0xe8, 0x2c, 0x5e, 0xfa, 0xff, 0x48, 0xf, 0xbf, 0xd0, 0x8d, 0x45, 0xe8, 0xe8, 0xc2, 0xd1, 0xff, 0xff, 0x80, 0x38, 0xa, 0x74, 0xd, 0xba, 0xa, 0, 0, 0, 0x8d, 0x45, 0xe8, 0xe8, 0x8, 0xcd, 0xff, 0xff, 0x8b, 0x55, 0xf4, 0x8d, 0x45, 0xe8, 0xe8, 0x52, 0xcc, 0xff, 0xff, 0xba, 0xa, 0, 0, 0, 0x8d, 0x45, 0xe8, 0xe8, 0xf0, 0xcc, 0xff, 0xff, 0x83, 0x45, 0x10, 0xff, 0x66, 0x83, 0x7d, 0x10, 0, 0x74, 0x15, 0xba, 0x2a, 0, 0, 0, 0x8d, 0x45, 0xe8, 0xe8, 0xd8, 0xcc, 0xff, 0xff, 0x8b, 0x45, 0xe0, 0xff, 0x45, 0xe0, 0xeb, 0xe0, 0x8b, 0x55, 0xe0, 0x8d, 0x45, 0xe8, 0xe8, 0x1a, 0xcc, 0xff, 0xff, 0x8d, 0x55, 0xe8, 0x8b, 0x45, 0xf0, 0xe8, 0x76, 0xc9, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xf0, 0xc9, 0xff, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xe4, 0xc9, 0xff, 0xff, 0x8b, 0x45, 0xf0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc2, 0x4, 0}))
    II(0x10145056, 0x5)   pushd(0x44);                          /* push dword 0x44 */
    II(0x1014505b, 0x5)   calld(sys_check_available_stack_size, 0x20cf2); /* call 0x10165d52 */
    II(0x10145060, 0x1)   pushd(esi);                           /* push esi */
    II(0x10145061, 0x1)   pushd(edi);                           /* push edi */
    II(0x10145062, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10145063, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10145065, 0x6)   sub(esp, 0x20);                       /* sub esp, 0x20 */
    II(0x1014506b, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1014506e, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x10145071, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x10145074, 0x3)   mov(memd_a32(ss, ebp - 0x4), ecx);    /* mov [ebp-0x4], ecx */
    II(0x10145077, 0x4)   or_(memb_a32(ss, ebp - 0x14), 0x1);   /* or byte [ebp-0x14], 0x1 */
    II(0x1014507b, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1014507e, 0x5)   calld(my_string_ctor, -0x359b);       /* call 0x10141ae8 */
    II(0x10145083, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x10145086, 0x4)   and_(memb_a32(ss, ebp - 0x14), -0x2 /* 0xfe */); /* and byte [ebp-0x14], 0xfe */
    II(0x1014508a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1014508d, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10145090, 0x4)   movsx(eax, memw_a32(ss, ebp + 0x10)); /* movsx eax, word [ebp+0x10] */
    II(0x10145094, 0x1)   pushd(eax);                           /* push eax */
    II(0x10145095, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10145098, 0x1)   pushd(eax);                           /* push eax */
    II(0x10145099, 0x5)   mov(eax, 0x101acf88);                 /* mov eax, 0x101acf88 */ /* "Error in line %li, column %i:\n" */
    II(0x1014509e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1014509f, 0x5)   mov(eax, 0x50);                       /* mov eax, 0x50 */
    II(0x101450a4, 0x1)   pushd(eax);                           /* push eax */
    II(0x101450a5, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450a8, 0x1)   pushd(eax);                           /* push eax */
    II(0x101450a9, 0x5)   calld(0x10142037, -0x3077);           /* call 0x10142037 */
    II(0x101450ae, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x101450b1, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x101450b4, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450b7, 0x5)   calld(my_string_append_char_ptr, -0x337d); /* call 0x10141d3f */
    II(0x101450bc, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450bf, 0x5)   calld(0x100eaef0, -0x5a1d4);          /* call 0x100eaef0 */
    II(0x101450c4, 0x1)   dec(eax);                             /* dec eax */
    II(0x101450c5, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x101450c8, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450cb, 0x5)   calld(my_string_get, -0x2e3e);        /* call 0x10142292 */
    II(0x101450d0, 0x3)   cmp(memb_a32(ds, eax), 0xa);          /* cmp byte [eax], 0xa */
    II(0x101450d3, 0x2)   jzd(0x101450e2, 0xd);                 /* jz 0x101450e2 */
    II(0x101450d5, 0x5)   mov(edx, 0xa);                        /* mov edx, 0xa */
    II(0x101450da, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450dd, 0x5)   calld(my_string_append_char, -0x32f8); /* call 0x10141dea */
l_0x101450e2:
    II(0x101450e2, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x101450e5, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450e8, 0x5)   calld(my_string_append_char_ptr, -0x33ae); /* call 0x10141d3f */
    II(0x101450ed, 0x5)   mov(edx, 0xa);                        /* mov edx, 0xa */
    II(0x101450f2, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x101450f5, 0x5)   calld(my_string_append_char, -0x3310); /* call 0x10141dea */
l_0x101450fa:
    II(0x101450fa, 0x4)   add(memd_a32(ss, ebp + 0x10), -0x1 /* 0xff */); /* add dword [ebp+0x10], 0xff */
    II(0x101450fe, 0x5)   cmp(memw_a32(ss, ebp + 0x10), 0);     /* cmp word [ebp+0x10], 0x0 */
    II(0x10145103, 0x2)   jzd(0x1014511a, 0x15);                /* jz 0x1014511a */
    II(0x10145105, 0x5)   mov(edx, 0x2a);                       /* mov edx, 0x2a */
    II(0x1014510a, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1014510d, 0x5)   calld(my_string_append_char, -0x3328); /* call 0x10141dea */
    II(0x10145112, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x10145115, 0x3)   inc(memd_a32(ss, ebp - 0x20));        /* inc dword [ebp-0x20] */
    II(0x10145118, 0x2)   jmpd(0x101450fa, -0x20);              /* jmp 0x101450fa */
l_0x1014511a:
    II(0x1014511a, 0x3)   mov(edx, memd_a32(ss, ebp - 0x20));   /* mov edx, [ebp-0x20] */
    II(0x1014511d, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10145120, 0x5)   calld(my_string_append_char_ptr, -0x33e6); /* call 0x10141d3f */
    II(0x10145125, 0x3)   lea(edx, ebp - 0x18);                 /* lea edx, [ebp-0x18] */
    II(0x10145128, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1014512b, 0x5)   calld(my_string_ctor_string, -0x368a); /* call 0x10141aa6 */
    II(0x10145130, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10145132, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10145135, 0x5)   calld(my_string_dtor, -0x3610);       /* call 0x10141b2a */
    II(0x1014513a, 0x2)   jmpd(0x10145146, 0xa);                /* jmp 0x10145146 */
//  II(0x1014513c, 0xa)   /* Недостижимый код. */
l_0x10145146:
    II(0x10145146, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10145149, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1014514b, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1014514c, 0x1)   popd(edi);                            /* pop edi */
    II(0x1014514d, 0x1)   popd(esi);                            /* pop esi */
    II(0x1014514e, 0x3)   retd(0x4);                            /* ret 0x4 */
FUNC_END

