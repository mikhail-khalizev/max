FUNC_BEGIN(0x100d2f2a, 0xe26f003daa861c95, 0x20, ({0x68, 0xa0, 0, 0, 0, 0xe8, 0x1e, 0x2e, 0x9, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x6c, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x3e, 0xe8, 0xf9, 0xd1, 0xff, 0xff, 0x89, 0x45, 0xf4, 0xf, 0xbf, 0x45, 0xf4, 0xe8, 0x66, 0xaf, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2c, 0xb8, 0x1, 0, 0, 0, 0xe8, 0x96, 0xde, 0, 0, 0x8d, 0x55, 0xc8, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xe7, 0xda, 0x7, 0, 0xe8, 0x7b, 0x9b, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xc8, 0xe8, 0x7d, 0x5b, 0xfb, 0xff, 0xe9, 0, 0x4, 0, 0, 0x8b, 0x45, 0xfc, 0xc6, 0x40, 0x36, 0x1, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x66, 0x8b, 0x40, 0x1a, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x66, 0x8b, 0x40, 0x1c, 0x89, 0x45, 0xec, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0xec, 0x8d, 0x55, 0xe8, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xe0, 0xb1, 0xff, 0xff, 0x66, 0x85, 0xc0, 0xf, 0x85, 0x99, 0, 0, 0, 0x8d, 0x7d, 0xbc, 0xbe, 0x48, 0x7e, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xb8, 0xe8, 0x6, 0xeb, 0x6, 0, 0x89, 0x45, 0xb4, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0x8b, 0x80, 0xd3, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xbc, 0xb8, 0x96, 0, 0, 0, 0x50, 0x8d, 0x45, 0xb8, 0x50, 0xe8, 0xb, 0xf0, 0x6, 0, 0x83, 0xc4, 0x10, 0xe8, 0xcc, 0x79, 0xff, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xe1, 0x79, 0xff, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0xba, 0x1, 0, 0, 0, 0x8d, 0x45, 0xb8, 0xe8, 0x78, 0x67, 0xfb, 0xff, 0xe8, 0xce, 0x2c, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xb8, 0xe8, 0xcb, 0xea, 0x6, 0, 0xe9, 0x28, 0x3, 0, 0, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x33, 0xba, 0xc0, 0x81, 0x1c, 0x10, 0x1, 0xc2, 0x89, 0x55, 0xd8, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xdc, 0x8b, 0x45, 0xdc, 0x8b, 0x58, 0x13, 0xf, 0xbf, 0x55, 0xf4, 0x8b, 0x45, 0xdc, 0xff, 0x53, 0x10, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x31, 0x8b, 0x5b, 0x50, 0xc1, 0xfb, 0x10, 0xf, 0xbf, 0x55, 0xe4, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0xe8, 0xba, 0x1b, 0, 0, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x38, 0x66, 0x3b, 0x45, 0xf0, 0x7e, 0xa, 0x8b, 0x45, 0xf0, 0x8b, 0x55, 0xfc, 0x66, 0x89, 0x42, 0x38, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x36, 0xc1, 0xf8, 0x10, 0x83, 0xf8, 0x1, 0x75, 0x30, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x58, 0x50, 0xc1, 0xfb, 0x10, 0xba, 0x1, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0xe8, 0x7, 0xed, 0xf9, 0xff, 0xf, 0xbf, 0xd0, 0xf, 0xbf, 0x45, 0xe4, 0xf, 0xaf, 0xc2, 0x39, 0xc3, 0x7c, 0x2, 0xeb, 0x28, 0xe8, 0xf2, 0x78, 0xff, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x7, 0x79, 0xff, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0xba, 0x2, 0, 0, 0, 0xb8, 0xcb, 0x14, 0x1a, 0x10, 0xe8, 0xf7, 0x2b, 0x4, 0, 0xe9, 0x5b, 0x2, 0, 0, 0x8d, 0x5d, 0xf4, 0x8d, 0x55, 0xe0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0x1d, 0xd9, 0x7, 0, 0x89, 0xda, 0xe8, 0x5f, 0x81, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xb1, 0x59, 0xfb, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x36, 0xc1, 0xfa, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0x9, 0x98, 0xfc, 0xff, 0x8b, 0x45, 0xfc, 0xc6, 0x40, 0x35, 0x1, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x83, 0xc0, 0x65, 0xe8, 0xb6, 0x38, 0xfa, 0xff, 0x83, 0x3d, 0x24, 0x56, 0x1c, 0x10, 0, 0x74, 0xb, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xfb, 0x7c, 0x5, 0, 0x8b, 0x45, 0xd8, 0xf6, 0, 0x10, 0x75, 0xd, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x37, 0, 0xf, 0x84, 0xcb, 0, 0, 0, 0xbb, 0x19, 0, 0, 0, 0xba, 0x4, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xda, 0xfd, 0x8, 0, 0x8b, 0x45, 0xfc, 0xff, 0x70, 0x31, 0xf, 0xbf, 0x45, 0xec, 0x89, 0x45, 0xb0, 0xff, 0x75, 0xb0, 0xf, 0xbf, 0x45, 0xe8, 0x89, 0x45, 0xac, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x98, 0x89, 0x45, 0xa8, 0x8b, 0x45, 0xd8, 0xf6, 0, 0x10, 0x74, 0x9, 0xc7, 0x45, 0xa4, 0xf, 0, 0, 0, 0xeb, 0x7, 0xc7, 0x45, 0xa4, 0x10, 0, 0, 0, 0x8b, 0x55, 0xa2, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xa0, 0x8b, 0x4d, 0xac, 0x8b, 0x5d, 0xa8, 0xe8, 0xa0, 0x74, 0x8, 0, 0xb9, 0xc0, 0x37, 0x1c, 0x10, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0, 0x7a, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xa0, 0xe8, 0xa, 0x2d, 0xfa, 0xff, 0xe8, 0xd9, 0x77, 0xff, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xee, 0x77, 0xff, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0x31, 0xd2, 0xb8, 0xc, 0x15, 0x1a, 0x10, 0xe8, 0xe1, 0x2a, 0x4, 0, 0xb8, 0x3e, 0, 0, 0, 0xe8, 0x90, 0x2d, 0xfa, 0xff, 0x83, 0xf8, 0x1, 0x75, 0x1c, 0xe8, 0x1a, 0x22, 0, 0, 0xf, 0xbf, 0xc8, 0xbb, 0xe1, 0x3, 0, 0, 0xba, 0xde, 0x3, 0, 0, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x7d, 0xa8, 0x6, 0, 0xe9, 0x1a, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x31, 0x8b, 0x45, 0xe8, 0x66, 0x89, 0x42, 0x41, 0x8b, 0x45, 0xfc, 0x8b, 0x50, 0x31, 0x8b, 0x45, 0xec, 0x66, 0x89, 0x42, 0x43, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xf0, 0xf0, 0x7, 0, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xd0, 0xe8, 0x45, 0xe8, 0x6, 0, 0x89, 0x45, 0xcc, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x7d, 0x94, 0xbe, 0x54, 0x7e, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x8d, 0x4d, 0xe4, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x36, 0xc1, 0xfb, 0x10, 0xf, 0xbf, 0x55, 0xf4, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0xe8, 0xb8, 0x1c, 0x8, 0, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0x69, 0xd2, 0x47, 0x2, 0, 0, 0xf, 0xbf, 0x45, 0xf4, 0x1, 0xd0, 0x8a, 0x80, 0x92, 0xa4, 0x1c, 0x10, 0x25, 0xff, 0, 0, 0, 0x50, 0x8b, 0x45, 0xd8, 0xff, 0x70, 0x17, 0x8b, 0x45, 0xd8, 0x8b, 0x40, 0x13, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0x94, 0xb8, 0xfa, 0, 0, 0, 0x50, 0x8d, 0x45, 0xd0, 0x50, 0xe8, 0x1a, 0xed, 0x6, 0, 0x83, 0xc4, 0x18, 0xa1, 0x80, 0x39, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x83, 0xf8, 0x1, 0x75, 0xf, 0xb8, 0x3e, 0, 0, 0, 0xe8, 0xa5, 0x2c, 0xfa, 0xff, 0x83, 0xf8, 0x1, 0x74, 0x2, 0xeb, 0xd, 0xba, 0x41, 0x15, 0x1a, 0x10, 0x8d, 0x45, 0xd0, 0xe8, 0xf4, 0xe9, 0x6, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x31, 0x8b, 0x50, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xd4, 0xe8, 0x41, 0x37, 0xfa, 0xff, 0x8b, 0x8, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x31, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x4b, 0x64, 0xfb, 0xff, 0xe8, 0xde, 0x27, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x9e, 0xe7, 0x6, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100d2f2a, 0x5)   pushd(0xa0);                          /* push dword 0xa0 */
    II(0x100d2f2f, 0x5)   calld(sys_check_available_stack_size, 0x92e1e); /* call 0x10165d52 */
    II(0x100d2f34, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100d2f35, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100d2f36, 0x1)   pushd(edx);                           /* push edx */
    II(0x100d2f37, 0x1)   pushd(esi);                           /* push esi */
    II(0x100d2f38, 0x1)   pushd(edi);                           /* push edi */
    II(0x100d2f39, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100d2f3a, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100d2f3c, 0x6)   sub(esp, 0x6c);                       /* sub esp, 0x6c */
    II(0x100d2f42, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x100d2f45, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2f48, 0x3)   mov(eax, memd_a32(ds, eax + 0x3e));   /* mov eax, [eax+0x3e] */
    II(0x100d2f4b, 0x5)   calld(0x100d0149, -0x2e07);           /* call 0x100d0149 */
    II(0x100d2f50, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100d2f53, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100d2f57, 0x5)   calld(0x100cdec2, -0x509a);           /* call 0x100cdec2 */
    II(0x100d2f5c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100d2f5e, 0x2)   jnzd(0x100d2f8c, 0x2c);               /* jnz 0x100d2f8c */
    II(0x100d2f60, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100d2f65, 0x5)   calld(0x100e0e00, 0xde96);            /* call 0x100e0e00 */
    II(0x100d2f6a, 0x3)   lea(edx, ebp - 0x38);                 /* lea edx, [ebp-0x38] */
    II(0x100d2f6d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2f70, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d2f73, 0x5)   calld(0x10150a5f, 0x7dae7);           /* call 0x10150a5f */
    II(0x100d2f78, 0x5)   calld(0x1009caf8, -0x36485);          /* call 0x1009caf8 */
    II(0x100d2f7d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d2f7f, 0x3)   lea(eax, ebp - 0x38);                 /* lea eax, [ebp-0x38] */
    II(0x100d2f82, 0x5)   calld(0x10088b04, -0x4a483);          /* call 0x10088b04 */
    II(0x100d2f87, 0x5)   jmpd(0x100d338c, 0x400);              /* jmp 0x100d338c */
l_0x100d2f8c:
    II(0x100d2f8c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2f8f, 0x4)   mov(memb_a32(ds, eax + 0x36), 0x1);   /* mov byte [eax+0x36], 0x1 */
    II(0x100d2f93, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2f96, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d2f99, 0x4)   mov(ax, memw_a32(ds, eax + 0x1a));    /* mov ax, [eax+0x1a] */
    II(0x100d2f9d, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100d2fa0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2fa3, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d2fa6, 0x4)   mov(ax, memw_a32(ds, eax + 0x1c));    /* mov ax, [eax+0x1c] */
    II(0x100d2faa, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100d2fad, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x100d2fb1, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x100d2fb4, 0x3)   lea(edx, ebp - 0x18);                 /* lea edx, [ebp-0x18] */
    II(0x100d2fb7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2fba, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d2fbd, 0x5)   calld(0x100ce1a2, -0x4e20);           /* call 0x100ce1a2 */
    II(0x100d2fc2, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100d2fc5, 0x6)   jnzd(0x100d3064, 0x99);               /* jnz dword 0x100d3064 */
    II(0x100d2fcb, 0x3)   lea(edi, ebp - 0x44);                 /* lea edi, [ebp-0x44] */
    II(0x100d2fce, 0x5)   mov(esi, 0x101b7e48);                 /* mov esi, 0x101b7e48 */
    II(0x100d2fd3, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d2fd4, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d2fd5, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d2fd6, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100d2fda, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x100d2fdd, 0x5)   calld(my_string_ctor, 0x6eb06);       /* call 0x10141ae8 */
    II(0x100d2fe2, 0x3)   mov(memd_a32(ss, ebp - 0x4c), eax);   /* mov [ebp-0x4c], eax */
    II(0x100d2fe5, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100d2fe9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d2fec, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d2fef, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100d2ff2, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d2ff5, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100d2ff8, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100d2ffe, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3001, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d3004, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100d3007, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d300a, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100d300d, 0x6)   mov(eax, memd_a32(ds, eax + 0x101c81d3)); /* mov eax, [eax+0x101c81d3] */
    II(0x100d3013, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x100d3016, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100d3019, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x44)); /* push dword [eax+ebp-0x44] */
    II(0x100d301d, 0x5)   mov(eax, 0x96);                       /* mov eax, 0x96 */
    II(0x100d3022, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d3023, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x100d3026, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d3027, 0x5)   calld(0x10142037, 0x6f00b);           /* call 0x10142037 */
    II(0x100d302c, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x100d302f, 0x5)   calld(0x100caa00, -0x8634);           /* call 0x100caa00 */
    II(0x100d3034, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d3039, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d303a, 0x5)   calld(0x100caa20, -0x861f);           /* call 0x100caa20 */
    II(0x100d303f, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100d3041, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100d3043, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100d3048, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x100d304b, 0x5)   calld(my_strobj_c_str_v2, -0x49888);  /* call 0x100897c8 */
    II(0x100d3050, 0x5)   calld(0x10115d23, 0x42cce);           /* call 0x10115d23 */
    II(0x100d3055, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d3057, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x100d305a, 0x5)   calld(my_string_dtor, 0x6eacb);       /* call 0x10141b2a */
    II(0x100d305f, 0x5)   jmpd(0x100d338c, 0x328);              /* jmp 0x100d338c */
l_0x100d3064:
    II(0x100d3064, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100d3068, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100d306b, 0x5)   mov(edx, 0x101c81c0);                 /* mov edx, 0x101c81c0 */
    II(0x100d3070, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100d3072, 0x3)   mov(memd_a32(ss, ebp - 0x28), edx);   /* mov [ebp-0x28], edx */
    II(0x100d3075, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3078, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
//    II(0x100d307b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100d307e, 0x3)   mov(ebx, memd_a32(ds, eax + 0x13));   /* mov ebx, [eax+0x13] */
    II(0x100d3081, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x100d3085, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100d3088, 0x3)   calld_abs(memd_a32(ds, ebx + 0x10));  /* call dword near [ebx+0x10] */
    II(0x100d308b, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100d308e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3091, 0x3)   mov(ebx, memd_a32(ds, eax + 0x31));   /* mov ebx, [eax+0x31] */
    II(0x100d3094, 0x3)   mov(ebx, memd_a32(ds, ebx + 0x50));   /* mov ebx, [ebx+0x50] */
    II(0x100d3097, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100d309a, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x1c)); /* movsx edx, word [ebp-0x1c] */
    II(0x100d309e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d30a1, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d30a4, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100d30a7, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d30aa, 0x5)   calld(0x100d4c69, 0x1bba);            /* call 0x100d4c69 */
    II(0x100d30af, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100d30b2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d30b5, 0x4)   mov(ax, memw_a32(ds, eax + 0x38));    /* mov ax, [eax+0x38] */
    II(0x100d30b9, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x10));    /* cmp ax, [ebp-0x10] */
    II(0x100d30bd, 0x2)   jled(0x100d30c9, 0xa);                /* jle 0x100d30c9 */
    II(0x100d30bf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100d30c2, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100d30c5, 0x4)   mov(memw_a32(ds, edx + 0x38), ax);    /* mov [edx+0x38], ax */
l_0x100d30c9:
    II(0x100d30c9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d30cc, 0x3)   mov(eax, memd_a32(ds, eax + 0x36));   /* mov eax, [eax+0x36] */
    II(0x100d30cf, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d30d2, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x100d30d5, 0x2)   jnzd(0x100d3107, 0x30);               /* jnz 0x100d3107 */
    II(0x100d30d7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d30da, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d30dd, 0x3)   mov(ebx, memd_a32(ds, eax + 0x50));   /* mov ebx, [eax+0x50] */
    II(0x100d30e0, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100d30e3, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100d30e8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d30eb, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d30ee, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100d30f1, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d30f4, 0x5)   calld(0x10071e00, -0x612f9);          /* call 0x10071e00 */
    II(0x100d30f9, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100d30fc, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x100d3100, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x100d3103, 0x2)   cmp(ebx, eax);                        /* cmp ebx, eax */
    II(0x100d3105, 0x2)   jld(0x100d3109, 0x2);                 /* jl 0x100d3109 */
l_0x100d3107:
    II(0x100d3107, 0x2)   jmpd(0x100d3131, 0x28);               /* jmp 0x100d3131 */
l_0x100d3109:
    II(0x100d3109, 0x5)   calld(0x100caa00, -0x870e);           /* call 0x100caa00 */
    II(0x100d310e, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d3113, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d3114, 0x5)   calld(0x100caa20, -0x86f9);           /* call 0x100caa20 */
    II(0x100d3119, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100d311b, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100d311d, 0x5)   mov(edx, 0x2);                        /* mov edx, 0x2 */
    II(0x100d3122, 0x5)   mov(eax, 0x101a14cb);                 /* mov eax, 0x101a14cb */ /* "WARNING:\ninsufficient material in storage\nto start construction." */
    II(0x100d3127, 0x5)   calld(0x10115d23, 0x42bf7);           /* call 0x10115d23 */
    II(0x100d312c, 0x5)   jmpd(0x100d338c, 0x25b);              /* jmp 0x100d338c */
l_0x100d3131:
    II(0x100d3131, 0x3)   lea(ebx, ebp - 0xc);                  /* lea ebx, [ebp-0xc] */
    II(0x100d3134, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x100d3137, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d313a, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d313d, 0x5)   calld(0x10150a5f, 0x7d91d);           /* call 0x10150a5f */
    II(0x100d3142, 0x2)   mov(edx, ebx);                        /* mov edx, ebx */
    II(0x100d3144, 0x5)   calld(0x1008b2a8, -0x47ea1);          /* call 0x1008b2a8 */
    II(0x100d3149, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d314b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100d314e, 0x5)   calld(0x10088b04, -0x4a64f);          /* call 0x10088b04 */
    II(0x100d3153, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3156, 0x3)   mov(edx, memd_a32(ds, eax + 0x36));   /* mov edx, [eax+0x36] */
    II(0x100d3159, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100d315c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d315f, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d3162, 0x5)   calld(0x1009c970, -0x367f7);          /* call 0x1009c970 */
    II(0x100d3167, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d316a, 0x4)   mov(memb_a32(ds, eax + 0x35), 0x1);   /* mov byte [eax+0x35], 0x1 */
    II(0x100d316e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d3170, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3173, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d3176, 0x3)   add(eax, 0x65);                       /* add eax, 0x65 */
    II(0x100d3179, 0x5)   calld(0x10076a34, -0x5c74a);          /* call 0x10076a34 */
    II(0x100d317e, 0x7)   cmp(memd_a32(ds, 0x101c5624), 0);     /* cmp dword [0x101c5624], 0x0 */
    II(0x100d3185, 0x2)   jzd(0x100d3192, 0xb);                 /* jz 0x100d3192 */
    II(0x100d3187, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d318a, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d318d, 0x5)   calld(0x1012ae8d, 0x57cfb);           /* call 0x1012ae8d */
l_0x100d3192:
    II(0x100d3192, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100d3195, 0x3)   test(memb_a32(ds, eax), 0x10);        /* test byte [eax], 0x10 */
    II(0x100d3198, 0x2)   jnzd(0x100d31a7, 0xd);                /* jnz 0x100d31a7 */
    II(0x100d319a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d319d, 0x4)   cmp(memb_a32(ds, eax + 0x37), 0);     /* cmp byte [eax+0x37], 0x0 */
    II(0x100d31a1, 0x6)   jzd(0x100d3272, 0xcb);                /* jz dword 0x100d3272 */
l_0x100d31a7:
    II(0x100d31a7, 0x5)   mov(ebx, 0x19);                       /* mov ebx, 0x19 */
    II(0x100d31ac, 0x5)   mov(edx, 0x4);                        /* mov edx, 0x4 */
    II(0x100d31b1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d31b4, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d31b7, 0x5)   calld(0x10162f96, 0x8fdda);           /* call 0x10162f96 */
    II(0x100d31bc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d31bf, 0x3)   pushd(memd_a32(ds, eax + 0x31));      /* push dword [eax+0x31] */
    II(0x100d31c2, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x100d31c6, 0x3)   mov(memd_a32(ss, ebp - 0x50), eax);   /* mov [ebp-0x50], eax */
    II(0x100d31c9, 0x3)   pushd(memd_a32(ss, ebp - 0x50));      /* push dword [ebp-0x50] */
    II(0x100d31cc, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x100d31d0, 0x3)   mov(memd_a32(ss, ebp - 0x54), eax);   /* mov [ebp-0x54], eax */
    II(0x100d31d3, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100d31d5, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x100d31da, 0x1)   cwde();                               /* cwde */
    II(0x100d31db, 0x3)   mov(memd_a32(ss, ebp - 0x58), eax);   /* mov [ebp-0x58], eax */
    II(0x100d31de, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100d31e1, 0x3)   test(memb_a32(ds, eax), 0x10);        /* test byte [eax], 0x10 */
    II(0x100d31e4, 0x2)   jzd(0x100d31ef, 0x9);                 /* jz 0x100d31ef */
    II(0x100d31e6, 0x7)   mov(memd_a32(ss, ebp - 0x5c), 0xf);   /* mov dword [ebp-0x5c], 0xf */
    II(0x100d31ed, 0x2)   jmpd(0x100d31f6, 0x7);                /* jmp 0x100d31f6 */
l_0x100d31ef:
    II(0x100d31ef, 0x7)   mov(memd_a32(ss, ebp - 0x5c), 0x10);  /* mov dword [ebp-0x5c], 0x10 */
l_0x100d31f6:
    II(0x100d31f6, 0x3)   mov(edx, memd_a32(ss, ebp - 0x5e));   /* mov edx, [ebp-0x5e] */
    II(0x100d31f9, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100d31fc, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100d31ff, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x54));   /* mov ecx, [ebp-0x54] */
    II(0x100d3202, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x58));   /* mov ebx, [ebp-0x58] */
    II(0x100d3205, 0x5)   calld(0x1015a6aa, 0x874a0);           /* call 0x1015a6aa */
    II(0x100d320a, 0x5)   mov(ecx, 0x101c37c0);                 /* mov ecx, 0x101c37c0 */
    II(0x100d320f, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100d3211, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x100d3213, 0x5)   calld(0x1008ac18, -0x48600);          /* call 0x1008ac18 */
    II(0x100d3218, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d321a, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100d321d, 0x5)   calld(0x10075f2c, -0x5d2f6);          /* call 0x10075f2c */
    II(0x100d3222, 0x5)   calld(0x100caa00, -0x8827);           /* call 0x100caa00 */
    II(0x100d3227, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d322c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d322d, 0x5)   calld(0x100caa20, -0x8812);           /* call 0x100caa20 */
    II(0x100d3232, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100d3234, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100d3236, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d3238, 0x5)   mov(eax, 0x101a150c);                 /* mov eax, 0x101a150c */ /* "Position tape and click inside it to begin building." */
    II(0x100d323d, 0x5)   calld(0x10115d23, 0x42ae1);           /* call 0x10115d23 */
    II(0x100d3242, 0x5)   mov(eax, 0x3e);                       /* mov eax, 0x3e */
    II(0x100d3247, 0x5)   calld(0x10075fdc, -0x5d270);          /* call 0x10075fdc */
    II(0x100d324c, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x100d324f, 0x2)   jnzd(0x100d326d, 0x1c);               /* jnz 0x100d326d */
    II(0x100d3251, 0x5)   calld(0x100d5470, 0x221a);            /* call 0x100d5470 */
    II(0x100d3256, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x100d3259, 0x5)   mov(ebx, 0x3e1);                      /* mov ebx, 0x3e1 */
    II(0x100d325e, 0x5)   mov(edx, 0x3de);                      /* mov edx, 0x3de */
    II(0x100d3263, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x100d3268, 0x5)   calld(0x1013daea, 0x6a87d);           /* call 0x1013daea */
l_0x100d326d:
    II(0x100d326d, 0x5)   jmpd(0x100d338c, 0x11a);              /* jmp 0x100d338c */
l_0x100d3272:
    II(0x100d3272, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3275, 0x3)   mov(edx, memd_a32(ds, eax + 0x31));   /* mov edx, [eax+0x31] */
    II(0x100d3278, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100d327b, 0x4)   mov(memw_a32(ds, edx + 0x41), ax);    /* mov [edx+0x41], ax */
    II(0x100d327f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3282, 0x3)   mov(edx, memd_a32(ds, eax + 0x31));   /* mov edx, [eax+0x31] */
    II(0x100d3285, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100d3288, 0x4)   mov(memw_a32(ds, edx + 0x43), ax);    /* mov [edx+0x43], ax */
    II(0x100d328c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d328f, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d3292, 0x5)   calld(0x10152387, 0x7f0f0);           /* call 0x10152387 */
    II(0x100d3297, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100d329b, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100d329e, 0x5)   calld(my_string_ctor, 0x6e845);       /* call 0x10141ae8 */
    II(0x100d32a3, 0x3)   mov(memd_a32(ss, ebp - 0x34), eax);   /* mov [ebp-0x34], eax */
    II(0x100d32a6, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100d32aa, 0x3)   lea(edi, ebp - 0x6c);                 /* lea edi, [ebp-0x6c] */
    II(0x100d32ad, 0x5)   mov(esi, 0x101b7e54);                 /* mov esi, 0x101b7e54 */
    II(0x100d32b2, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d32b3, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d32b4, 0x1)   movsd_a32();                          /* movsd */
    II(0x100d32b5, 0x3)   lea(ecx, ebp - 0x1c);                 /* lea ecx, [ebp-0x1c] */
    II(0x100d32b8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d32bb, 0x3)   mov(ebx, memd_a32(ds, eax + 0x36));   /* mov ebx, [eax+0x36] */
    II(0x100d32be, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100d32c1, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x100d32c5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d32c8, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d32cb, 0x5)   calld(0x10154f88, 0x81cb8);           /* call 0x10154f88 */
    II(0x100d32d0, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x100d32d4, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d32d5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d32d8, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d32db, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d32dd, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100d32e0, 0x6)   imul(edx, edx, 0x247);                /* imul edx, edx, 0x247 */
    II(0x100d32e6, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100d32ea, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100d32ec, 0x6)   mov(al, memb_a32(ds, eax + 0x101ca492)); /* mov al, [eax+0x101ca492] */
    II(0x100d32f2, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d32f7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d32f8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100d32fb, 0x3)   pushd(memd_a32(ds, eax + 0x17));      /* push dword [eax+0x17] */
    II(0x100d32fe, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100d3301, 0x3)   mov(eax, memd_a32(ds, eax + 0x13));   /* mov eax, [eax+0x13] */
    II(0x100d3304, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x100d3307, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100d330a, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x6c)); /* push dword [eax+ebp-0x6c] */
    II(0x100d330e, 0x5)   mov(eax, 0xfa);                       /* mov eax, 0xfa */
    II(0x100d3313, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d3314, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100d3317, 0x1)   pushd(eax);                           /* push eax */
    II(0x100d3318, 0x5)   calld(0x10142037, 0x6ed1a);           /* call 0x10142037 */
    II(0x100d331d, 0x3)   add(esp, 0x18);                       /* add esp, 0x18 */
    II(0x100d3320, 0x5)   mov(eax, memd_a32(ds, 0x101c3980));   /* mov eax, [0x101c3980] */
    II(0x100d3325, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100d3328, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x100d332b, 0x2)   jnzd(0x100d333c, 0xf);                /* jnz 0x100d333c */
    II(0x100d332d, 0x5)   mov(eax, 0x3e);                       /* mov eax, 0x3e */
    II(0x100d3332, 0x5)   calld(0x10075fdc, -0x5d35b);          /* call 0x10075fdc */
    II(0x100d3337, 0x3)   cmp(eax, 0x1);                        /* cmp eax, 0x1 */
    II(0x100d333a, 0x2)   jzd(0x100d333e, 0x2);                 /* jz 0x100d333e */
l_0x100d333c:
    II(0x100d333c, 0x2)   jmpd(0x100d334b, 0xd);                /* jmp 0x100d334b */
l_0x100d333e:
    II(0x100d333e, 0x5)   mov(edx, 0x101a1541);                 /* mov edx, 0x101a1541 */ /* "\nAt this point you might wish to click the 'End Turn' button several times, so the Engineer will finish building." */
    II(0x100d3343, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100d3346, 0x5)   calld(my_string_append_char_ptr, 0x6e9f4); /* call 0x10141d3f */
l_0x100d334b:
    II(0x100d334b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d334e, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d3351, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x100d3354, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100d3357, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d335a, 0x3)   mov(eax, memd_a32(ds, eax + 0x31));   /* mov eax, [eax+0x31] */
    II(0x100d335d, 0x3)   mov(edx, memd_a32(ds, eax + 0x18));   /* mov edx, [eax+0x18] */
    II(0x100d3360, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100d3363, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100d3366, 0x5)   calld(0x10076aac, -0x5c8bf);          /* call 0x10076aac */
    II(0x100d336b, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x100d336d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d3370, 0x3)   mov(ebx, memd_a32(ds, eax + 0x31));   /* mov ebx, [eax+0x31] */
    II(0x100d3373, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d3375, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100d3378, 0x5)   calld(my_strobj_c_str_v2, -0x49bb5);  /* call 0x100897c8 */
    II(0x100d337d, 0x5)   calld(0x10115b60, 0x427de);           /* call 0x10115b60 */
    II(0x100d3382, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d3384, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100d3387, 0x5)   calld(my_string_dtor, 0x6e79e);       /* call 0x10141b2a */
l_0x100d338c:
    II(0x100d338c, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100d338e, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100d338f, 0x1)   popd(edi);                            /* pop edi */
    II(0x100d3390, 0x1)   popd(esi);                            /* pop esi */
    II(0x100d3391, 0x1)   popd(edx);                            /* pop edx */
    II(0x100d3392, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100d3393, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100d3394, 0x1)   retd();                               /* ret */
FUNC_END

