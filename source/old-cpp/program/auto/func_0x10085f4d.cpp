FUNC_BEGIN(0x10085f4d, 0x8d8aafa1b422f352, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0xfb, 0xfd, 0xd, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x20, 0xe8, 0x95, 0x3d, 0, 0, 0x8d, 0x5d, 0xdc, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x65, 0x3c, 0, 0, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x71, 0x5, 0xff, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xf8, 0xfe, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xc7, 0x45, 0xf0, 0, 0, 0, 0, 0x31, 0xd2, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x3e, 0xe8, 0xc4, 0x4d, 0xb, 0, 0x84, 0xc0, 0x74, 0x1d, 0xc6, 0x45, 0xf4, 0x1, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xad, 0xff, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x7b, 0x30, 0, 0, 0xe9, 0x3, 0x1, 0, 0, 0x8d, 0x5d, 0xf0, 0x8d, 0x55, 0xec, 0x8b, 0x45, 0xfc, 0xe8, 0x6, 0xce, 0xff, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xdc, 0xe8, 0x12, 0xc, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x81, 0x4d, 0xb, 0, 0x84, 0xc0, 0xf, 0x84, 0xab, 0, 0, 0, 0x8d, 0x45, 0xdc, 0xe8, 0xcc, 0x3a, 0, 0, 0xe8, 0xbf, 0x3f, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x2d, 0x4, 0xff, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xe0, 0xe8, 0xdf, 0xb, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x4e, 0x4d, 0xb, 0, 0x84, 0xc0, 0xf, 0x84, 0x73, 0, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x6d, 0x3, 0xff, 0xff, 0xe8, 0x4, 0x2, 0xff, 0xff, 0x89, 0x45, 0xe8, 0x8d, 0x45, 0xe0, 0xe8, 0x5d, 0x3, 0xff, 0xff, 0xf6, 0x40, 0x12, 0x40, 0x74, 0x29, 0x8b, 0x45, 0xe8, 0x66, 0x8b, 0x40, 0x17, 0x66, 0x3b, 0x45, 0xec, 0x7c, 0x1a, 0xc6, 0x45, 0xf4, 0x1, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x8, 0xff, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xd6, 0x2f, 0, 0, 0xeb, 0x61, 0xeb, 0x27, 0x8b, 0x45, 0xe8, 0x66, 0x8b, 0x40, 0x17, 0x66, 0x3b, 0x45, 0xf0, 0x7c, 0x1a, 0xc6, 0x45, 0xf4, 0x1, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xdf, 0xfe, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xad, 0x2f, 0, 0, 0xeb, 0x38, 0xe9, 0x73, 0xff, 0xff, 0xff, 0xe9, 0x3b, 0xff, 0xff, 0xff, 0xc6, 0x45, 0xf4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xbb, 0xfe, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x89, 0x2f, 0, 0, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xa5, 0xfe, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x73, 0x2f, 0, 0, 0x8a, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10085f4d, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x10085f52, 0x5)   calld(sys_check_available_stack_size, 0xdfdfb); /* call 0x10165d52 */
    II(0x10085f57, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10085f58, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10085f59, 0x1)   pushd(edx);                           /* push edx */
    II(0x10085f5a, 0x1)   pushd(esi);                           /* push esi */
    II(0x10085f5b, 0x1)   pushd(edi);                           /* push edi */
    II(0x10085f5c, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10085f5d, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10085f5f, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x10085f65, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x10085f68, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10085f6b, 0x3)   add(eax, 0x20);                       /* add eax, 0x20 */
    II(0x10085f6e, 0x5)   calld(0x10089d08, 0x3d95);            /* call 0x10089d08 */
    II(0x10085f73, 0x3)   lea(ebx, ebp - 0x24);                 /* lea ebx, [ebp-0x24] */
    II(0x10085f76, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10085f78, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x10085f7a, 0x5)   calld(0x10089be4, 0x3c65);            /* call 0x10089be4 */
    II(0x10085f7f, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x10085f83, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085f86, 0x5)   calld(0x100764fc, -0xfa8f);           /* call 0x100764fc */
    II(0x10085f8b, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x10085f8e, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x10085f92, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x10085f99, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0);     /* mov dword [ebp-0x10], 0x0 */
    II(0x10085fa0, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085fa2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10085fa5, 0x3)   add(eax, 0x3e);                       /* add eax, 0x3e */
    II(0x10085fa8, 0x5)   calld(0x1013ad71, 0xb4dc4);           /* call 0x1013ad71 */
    II(0x10085fad, 0x2)   test(al, al);                         /* test al, al */
    II(0x10085faf, 0x2)   jzd(0x10085fce, 0x1d);                /* jz 0x10085fce */
    II(0x10085fb1, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x10085fb5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085fb7, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085fba, 0x5)   calld(0x10075f6c, -0x10053);          /* call 0x10075f6c */
    II(0x10085fbf, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085fc1, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085fc4, 0x5)   calld(0x10089044, 0x307b);            /* call 0x10089044 */
    II(0x10085fc9, 0x5)   jmpd(0x100860d1, 0x103);              /* jmp 0x100860d1 */
l_0x10085fce:
    II(0x10085fce, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x10085fd1, 0x3)   lea(edx, ebp - 0x14);                 /* lea edx, [ebp-0x14] */
    II(0x10085fd4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10085fd7, 0x5)   calld(0x10082de2, -0x31fa);           /* call 0x10082de2 */
    II(0x10085fdc, 0x2)   jmpd(0x10085fe6, 0x8);                /* jmp 0x10085fe6 */
l_0x10085fde:
    II(0x10085fde, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085fe1, 0x5)   calld(0x10076bf8, -0xf3ee);           /* call 0x10076bf8 */
l_0x10085fe6:
    II(0x10085fe6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085fe8, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085feb, 0x5)   calld(0x1013ad71, 0xb4d81);           /* call 0x1013ad71 */
    II(0x10085ff0, 0x2)   test(al, al);                         /* test al, al */
    II(0x10085ff2, 0x6)   jzd(0x100860a3, 0xab);                /* jz dword 0x100860a3 */
    II(0x10085ff8, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085ffb, 0x5)   calld(0x10089acc, 0x3acc);            /* call 0x10089acc */
    II(0x10086000, 0x5)   calld(0x10089fc4, 0x3fbf);            /* call 0x10089fc4 */
    II(0x10086005, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10086007, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1008600a, 0x5)   calld(0x1007643c, -0xfbd3);           /* call 0x1007643c */
    II(0x1008600f, 0x2)   jmpd(0x10086019, 0x8);                /* jmp 0x10086019 */
l_0x10086011:
    II(0x10086011, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10086014, 0x5)   calld(0x10076bf8, -0xf421);           /* call 0x10076bf8 */
l_0x10086019:
    II(0x10086019, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008601b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1008601e, 0x5)   calld(0x1013ad71, 0xb4d4e);           /* call 0x1013ad71 */
    II(0x10086023, 0x2)   test(al, al);                         /* test al, al */
    II(0x10086025, 0x6)   jzd(0x1008609e, 0x73);                /* jz dword 0x1008609e */
    II(0x1008602b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1008602e, 0x5)   calld(0x100763a0, -0xfc93);           /* call 0x100763a0 */
    II(0x10086033, 0x5)   calld(0x1007623c, -0xfdfc);           /* call 0x1007623c */
    II(0x10086038, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x1008603b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1008603e, 0x5)   calld(0x100763a0, -0xfca3);           /* call 0x100763a0 */
    II(0x10086043, 0x4)   test(memb_a32(ds, eax + 0x12), 0x40); /* test byte [eax+0x12], 0x40 */
    II(0x10086047, 0x2)   jzd(0x10086072, 0x29);                /* jz 0x10086072 */
    II(0x10086049, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x1008604c, 0x4)   mov(ax, memw_a32(ds, eax + 0x17));    /* mov ax, [eax+0x17] */
    II(0x10086050, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x14));    /* cmp ax, [ebp-0x14] */
    II(0x10086054, 0x2)   jld(0x10086070, 0x1a);                /* jl 0x10086070 */
    II(0x10086056, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x1008605a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008605c, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1008605f, 0x5)   calld(0x10075f6c, -0x100f8);          /* call 0x10075f6c */
    II(0x10086064, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10086066, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10086069, 0x5)   calld(0x10089044, 0x2fd6);            /* call 0x10089044 */
    II(0x1008606e, 0x2)   jmpd(0x100860d1, 0x61);               /* jmp 0x100860d1 */
l_0x10086070:
    II(0x10086070, 0x2)   jmpd(0x10086099, 0x27);               /* jmp 0x10086099 */
l_0x10086072:
    II(0x10086072, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x10086075, 0x4)   mov(ax, memw_a32(ds, eax + 0x17));    /* mov ax, [eax+0x17] */
    II(0x10086079, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x10));    /* cmp ax, [ebp-0x10] */
    II(0x1008607d, 0x2)   jld(0x10086099, 0x1a);                /* jl 0x10086099 */
    II(0x1008607f, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x10086083, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10086085, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10086088, 0x5)   calld(0x10075f6c, -0x10121);          /* call 0x10075f6c */
    II(0x1008608d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1008608f, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10086092, 0x5)   calld(0x10089044, 0x2fad);            /* call 0x10089044 */
    II(0x10086097, 0x2)   jmpd(0x100860d1, 0x38);               /* jmp 0x100860d1 */
l_0x10086099:
    II(0x10086099, 0x5)   jmpd(0x10086011, -0x8d);              /* jmp 0x10086011 */
l_0x1008609e:
    II(0x1008609e, 0x5)   jmpd(0x10085fde, -0xc5);              /* jmp 0x10085fde */
l_0x100860a3:
    II(0x100860a3, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x100860a7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100860a9, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100860ac, 0x5)   calld(0x10075f6c, -0x10145);          /* call 0x10075f6c */
    II(0x100860b1, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100860b3, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100860b6, 0x5)   calld(0x10089044, 0x2f89);            /* call 0x10089044 */
    II(0x100860bb, 0x2)   jmpd(0x100860d1, 0x14);               /* jmp 0x100860d1 */
//  II(0x100860bd, 0x14)  /* Недостижимый код. */
l_0x100860d1:
    II(0x100860d1, 0x3)   mov(al, memb_a32(ss, ebp - 0xc));     /* mov al, [ebp-0xc] */
    II(0x100860d4, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100860d6, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100860d7, 0x1)   popd(edi);                            /* pop edi */
    II(0x100860d8, 0x1)   popd(esi);                            /* pop esi */
    II(0x100860d9, 0x1)   popd(edx);                            /* pop edx */
    II(0x100860da, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100860db, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100860dc, 0x1)   retd();                               /* ret */
FUNC_END

