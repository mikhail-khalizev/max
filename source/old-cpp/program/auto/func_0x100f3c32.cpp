FUNC_BEGIN(0x100f3c32, 0x90140789bef6f24d, 0x20, ({0x68, 0x7c, 0x1, 0, 0, 0xe8, 0x16, 0x21, 0x7, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x58, 0x1, 0, 0, 0x89, 0x45, 0xf8, 0x88, 0x55, 0xfc, 0xc7, 0x45, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x8b, 0x55, 0xf8, 0xb8, 0xb4, 0x38, 0x1c, 0x10, 0xe8, 0xcd, 0x29, 0xf8, 0xff, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0x1a, 0x66, 0xa3, 0xb8, 0x38, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0x1c, 0x66, 0xa3, 0xba, 0x38, 0x1c, 0x10, 0x8a, 0x45, 0xfc, 0x88, 0x45, 0xf4, 0xe9, 0x38, 0x2, 0, 0, 0x8d, 0x7d, 0xe4, 0xbe, 0xb8, 0x8a, 0x1b, 0x10, 0xa5, 0xa5, 0xa5, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0x8b, 0x80, 0xd3, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x18, 0xc1, 0xe0, 0x2, 0xff, 0x74, 0x28, 0xe4, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0x34, 0x22, 0x7, 0, 0x83, 0xc4, 0xc, 0x8b, 0x45, 0xf8, 0xe8, 0x2b, 0xd4, 0, 0, 0x66, 0x85, 0xc0, 0x75, 0x11, 0xa1, 0x84, 0x38, 0x1c, 0x10, 0xe8, 0xc6, 0x48, 0x5, 0, 0x3d, 0x88, 0x13, 0, 0, 0x77, 0x2, 0xeb, 0x11, 0xc7, 0x45, 0xf0, 0xa, 0x4, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xd, 0x4, 0, 0, 0xe8, 0xee, 0x45, 0x5, 0, 0xa3, 0x84, 0x38, 0x1c, 0x10, 0xe9, 0xd4, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0x80, 0x78, 0x4d, 0, 0x74, 0xc, 0xc7, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0x84, 0x24, 0x1a, 0x10, 0xeb, 0xa, 0xc7, 0x85, 0xb0, 0xfe, 0xff, 0xff, 0x95, 0x24, 0x1a, 0x10, 0xff, 0xb5, 0xb0, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0xae, 0x21, 0x7, 0, 0x83, 0xc4, 0xc, 0x8b, 0x45, 0xf8, 0x8a, 0x40, 0x4d, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0x75, 0x2c, 0x8b, 0x45, 0xf8, 0xe8, 0x96, 0xd3, 0, 0, 0x66, 0x85, 0xc0, 0x75, 0x1d, 0x31, 0xd2, 0xb8, 0xb4, 0x38, 0x1c, 0x10, 0xe8, 0xb2, 0x28, 0xf8, 0xff, 0xc7, 0x45, 0xf0, 0x2, 0x4, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x5, 0x4, 0, 0, 0xeb, 0x1e, 0x8b, 0x45, 0xf8, 0xe8, 0x6a, 0xd3, 0, 0, 0x66, 0x85, 0xc0, 0x75, 0x11, 0xc7, 0x45, 0xf0, 0xf6, 0x3, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x1, 0x4, 0, 0, 0xe9, 0x30, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0xac, 0x24, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0x29, 0x21, 0x7, 0, 0x83, 0xc4, 0xc, 0xc7, 0x45, 0xf0, 0xd5, 0x3, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xd6, 0x3, 0, 0, 0xe9, 0xf3, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0xc2, 0x24, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0xec, 0x20, 0x7, 0, 0x83, 0xc4, 0xc, 0xc7, 0x45, 0xf0, 0xdb, 0x3, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xdc, 0x3, 0, 0, 0xe9, 0xb6, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0xd8, 0x24, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0xaf, 0x20, 0x7, 0, 0x83, 0xc4, 0xc, 0xc7, 0x45, 0xf0, 0xcf, 0x3, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xd0, 0x3, 0, 0, 0xe9, 0x79, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xb8, 0xef, 0x24, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0x50, 0xe8, 0x72, 0x20, 0x7, 0, 0x83, 0xc4, 0xc, 0xc7, 0x45, 0xf0, 0xcf, 0x3, 0, 0, 0xc7, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0xd0, 0x3, 0, 0, 0xeb, 0x3f, 0xeb, 0x3d, 0x90, 0x88, 0x3c, 0xf, 0x10, 0x10, 0x3d, 0xf, 0x10, 0xb4, 0x3d, 0xf, 0x10, 0xf1, 0x3d, 0xf, 0x10, 0x2e, 0x3e, 0xf, 0x10, 0x6b, 0x3e, 0xf, 0x10, 0x8a, 0x45, 0xf4, 0x88, 0x85, 0xac, 0xfe, 0xff, 0xff, 0x80, 0xbd, 0xac, 0xfe, 0xff, 0xff, 0x5, 0x77, 0xd3, 0x31, 0xc0, 0x8a, 0x85, 0xac, 0xfe, 0xff, 0xff, 0xc1, 0xe0, 0x2, 0x2e, 0xff, 0xa0, 0xa8, 0x3e, 0xf, 0x10, 0x31, 0xd2, 0xb8, 0xb4, 0x38, 0x1c, 0x10, 0xe8, 0x81, 0x6e, 0x4, 0, 0x84, 0xc0, 0x74, 0x10, 0xba, 0x6, 0x25, 0x1a, 0x10, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0x2d, 0x20, 0x7, 0, 0x8b, 0x1d, 0xb8, 0x38, 0x1c, 0x10, 0xc1, 0xfb, 0x10, 0x8b, 0x15, 0xb6, 0x38, 0x1c, 0x10, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0xa8, 0xfe, 0xff, 0xff, 0xe8, 0x8b, 0x2b, 0xf8, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xf8, 0xba, 0x1, 0, 0, 0, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0x2a, 0x1c, 0x2, 0, 0x66, 0x83, 0x7d, 0xf0, 0xff, 0x74, 0x1d, 0xe8, 0x2e, 0x15, 0xfe, 0xff, 0xf, 0xbf, 0xc8, 0xf, 0xbf, 0x9d, 0xb4, 0xfe, 0xff, 0xff, 0xf, 0xbf, 0x55, 0xf0, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x90, 0x9b, 0x4, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100f3c32, 0x5)   pushd(0x17c);                         /* push dword 0x17c */
    II(0x100f3c37, 0x5)   calld(sys_check_available_stack_size, 0x72116); /* call 0x10165d52 */
    II(0x100f3c3c, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100f3c3d, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100f3c3e, 0x1)   pushd(esi);                           /* push esi */
    II(0x100f3c3f, 0x1)   pushd(edi);                           /* push edi */
    II(0x100f3c40, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100f3c41, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100f3c43, 0x6)   sub(esp, 0x158);                      /* sub esp, 0x158 */
    II(0x100f3c49, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100f3c4c, 0x3)   mov(memb_a32(ss, ebp - 0x4), dl);     /* mov [ebp-0x4], dl */
    II(0x100f3c4f, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0xffffffff); /* mov dword [ebp-0x10], 0xffffffff */
    II(0x100f3c56, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x100f3c59, 0x5)   mov(eax, 0x101c38b4);                 /* mov eax, 0x101c38b4 */
    II(0x100f3c5e, 0x5)   calld(0x10076630, -0x7d633);          /* call 0x10076630 */
    II(0x100f3c63, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3c66, 0x4)   mov(ax, memw_a32(ds, eax + 0x1a));    /* mov ax, [eax+0x1a] */
    II(0x100f3c6a, 0x6)   mov(memw_a32(ds, 0x101c38b8), ax);    /* mov [0x101c38b8], ax */
    II(0x100f3c70, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3c73, 0x4)   mov(ax, memw_a32(ds, eax + 0x1c));    /* mov ax, [eax+0x1c] */
    II(0x100f3c77, 0x6)   mov(memw_a32(ds, 0x101c38ba), ax);    /* mov [0x101c38ba], ax */
    II(0x100f3c7d, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x100f3c80, 0x3)   mov(memb_a32(ss, ebp - 0xc), al);     /* mov [ebp-0xc], al */
    II(0x100f3c83, 0x5)   jmpd(0x100f3ec0, 0x238);              /* jmp 0x100f3ec0 */
l_0x100f3c88:
    II(0x100f3c88, 0x3)   lea(edi, ebp - 0x1c);                 /* lea edi, [ebp-0x1c] */
    II(0x100f3c8b, 0x5)   mov(esi, 0x101b8ab8);                 /* mov esi, 0x101b8ab8 */
    II(0x100f3c90, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f3c91, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f3c92, 0x1)   movsd_a32();                          /* movsd */
    II(0x100f3c93, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3c96, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3c99, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3c9c, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3c9f, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3ca5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3ca8, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3cab, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3cae, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3cb1, 0x6)   mov(eax, memd_a32(ds, eax + 0x101c81d3)); /* mov eax, [eax+0x101c81d3] */
    II(0x100f3cb7, 0x3)   sar(eax, 0x18);                       /* sar eax, 0x18 */
    II(0x100f3cba, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100f3cbd, 0x4)   pushd(memd_a32(ds, eax + ebp - 0x1c)); /* push dword [eax+ebp-0x1c] */
    II(0x100f3cc1, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3cc7, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3cc8, 0x5)   calld(sys_sprintf, 0x72234);          /* call 0x10165f01 */
    II(0x100f3ccd, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3cd0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3cd3, 0x5)   calld(0x10101103, 0xd42b);            /* call 0x10101103 */
    II(0x100f3cd8, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100f3cdb, 0x2)   jnzd(0x100f3cee, 0x11);               /* jnz 0x100f3cee */
    II(0x100f3cdd, 0x5)   mov(eax, memd_a32(ds, 0x101c3884));   /* mov eax, [0x101c3884] */
    II(0x100f3ce2, 0x5)   calld(0x101485ad, 0x548c6);           /* call 0x101485ad */
    II(0x100f3ce7, 0x5)   cmp(eax, 0x1388);                     /* cmp eax, 0x1388 */
    II(0x100f3cec, 0x2)   jad(0x100f3cf0, 0x2);                 /* ja 0x100f3cf0 */
l_0x100f3cee:
    II(0x100f3cee, 0x2)   jmpd(0x100f3d01, 0x11);               /* jmp 0x100f3d01 */
l_0x100f3cf0:
    II(0x100f3cf0, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x40a); /* mov dword [ebp-0x10], 0x40a */
    II(0x100f3cf7, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x40d); /* mov dword [ebp+0xfffffeb4], 0x40d */
l_0x100f3d01:
    II(0x100f3d01, 0x5)   calld(0x101482f4, 0x545ee);           /* call 0x101482f4 */
    II(0x100f3d06, 0x5)   mov(memd_a32(ds, 0x101c3884), eax);   /* mov [0x101c3884], eax */
    II(0x100f3d0b, 0x5)   jmpd(0x100f3ee4, 0x1d4);              /* jmp 0x100f3ee4 */
l_0x100f3d10:
    II(0x100f3d10, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3d13, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3d16, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3d19, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3d1c, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3d22, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3d25, 0x4)   cmp(memb_a32(ds, eax + 0x4d), 0);     /* cmp byte [eax+0x4d], 0x0 */
    II(0x100f3d29, 0x2)   jzd(0x100f3d37, 0xc);                 /* jz 0x100f3d37 */
    II(0x100f3d2b, 0xa)   mov(memd_a32(ss, ebp - 0x150), 0x101a2484); /* mov dword [ebp+0xfffffeb0], 0x101a2484 */ /* "%s under attack!" */
    II(0x100f3d35, 0x2)   jmpd(0x100f3d41, 0xa);                /* jmp 0x100f3d41 */
l_0x100f3d37:
    II(0x100f3d37, 0xa)   mov(memd_a32(ss, ebp - 0x150), 0x101a2495); /* mov dword [ebp+0xfffffeb0], 0x101a2495 */ /* "%s has been destroyed!" */
l_0x100f3d41:
    II(0x100f3d41, 0x6)   pushd(memd_a32(ss, ebp - 0x150));     /* push dword [ebp+0xfffffeb0] */
    II(0x100f3d47, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3d4d, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3d4e, 0x5)   calld(sys_sprintf, 0x721ae);          /* call 0x10165f01 */
    II(0x100f3d53, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3d56, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3d59, 0x3)   mov(al, memb_a32(ds, eax + 0x4d));    /* mov al, [eax+0x4d] */
    II(0x100f3d5c, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100f3d61, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100f3d63, 0x2)   jnzd(0x100f3d91, 0x2c);               /* jnz 0x100f3d91 */
    II(0x100f3d65, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3d68, 0x5)   calld(0x10101103, 0xd396);            /* call 0x10101103 */
    II(0x100f3d6d, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100f3d70, 0x2)   jnzd(0x100f3d8f, 0x1d);               /* jnz 0x100f3d8f */
    II(0x100f3d72, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f3d74, 0x5)   mov(eax, 0x101c38b4);                 /* mov eax, 0x101c38b4 */
    II(0x100f3d79, 0x5)   calld(0x10076630, -0x7d74e);          /* call 0x10076630 */
    II(0x100f3d7e, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x402); /* mov dword [ebp-0x10], 0x402 */
    II(0x100f3d85, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x405); /* mov dword [ebp+0xfffffeb4], 0x405 */
l_0x100f3d8f:
    II(0x100f3d8f, 0x2)   jmpd(0x100f3daf, 0x1e);               /* jmp 0x100f3daf */
l_0x100f3d91:
    II(0x100f3d91, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3d94, 0x5)   calld(0x10101103, 0xd36a);            /* call 0x10101103 */
    II(0x100f3d99, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100f3d9c, 0x2)   jnzd(0x100f3daf, 0x11);               /* jnz 0x100f3daf */
    II(0x100f3d9e, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3f6); /* mov dword [ebp-0x10], 0x3f6 */
    II(0x100f3da5, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x401); /* mov dword [ebp+0xfffffeb4], 0x401 */
l_0x100f3daf:
    II(0x100f3daf, 0x5)   jmpd(0x100f3ee4, 0x130);              /* jmp 0x100f3ee4 */
l_0x100f3db4:
    II(0x100f3db4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3db7, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3dba, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3dbd, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3dc0, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3dc6, 0x5)   mov(eax, 0x101a24ac);                 /* mov eax, 0x101a24ac */ /* "%s has been captured!" */
    II(0x100f3dcb, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3dcc, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3dd2, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3dd3, 0x5)   calld(sys_sprintf, 0x72129);          /* call 0x10165f01 */
    II(0x100f3dd8, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3ddb, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3d5); /* mov dword [ebp-0x10], 0x3d5 */
    II(0x100f3de2, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x3d6); /* mov dword [ebp+0xfffffeb4], 0x3d6 */
    II(0x100f3dec, 0x5)   jmpd(0x100f3ee4, 0xf3);               /* jmp 0x100f3ee4 */
l_0x100f3df1:
    II(0x100f3df1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3df4, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3df7, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3dfa, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3dfd, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3e03, 0x5)   mov(eax, 0x101a24c2);                 /* mov eax, 0x101a24c2 */ /* "%s has been disabled!" */
    II(0x100f3e08, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e09, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3e0f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e10, 0x5)   calld(sys_sprintf, 0x720ec);          /* call 0x10165f01 */
    II(0x100f3e15, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3e18, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3db); /* mov dword [ebp-0x10], 0x3db */
    II(0x100f3e1f, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x3dc); /* mov dword [ebp+0xfffffeb4], 0x3dc */
    II(0x100f3e29, 0x5)   jmpd(0x100f3ee4, 0xb6);               /* jmp 0x100f3ee4 */
l_0x100f3e2e:
    II(0x100f3e2e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3e31, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3e34, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3e37, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3e3a, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3e40, 0x5)   mov(eax, 0x101a24d8);                 /* mov eax, 0x101a24d8 */ /* "Attempt to capture %s!" */
    II(0x100f3e45, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e46, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3e4c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e4d, 0x5)   calld(sys_sprintf, 0x720af);          /* call 0x10165f01 */
    II(0x100f3e52, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3e55, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3cf); /* mov dword [ebp-0x10], 0x3cf */
    II(0x100f3e5c, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x3d0); /* mov dword [ebp+0xfffffeb4], 0x3d0 */
    II(0x100f3e66, 0x5)   jmpd(0x100f3ee4, 0x79);               /* jmp 0x100f3ee4 */
l_0x100f3e6b:
    II(0x100f3e6b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f3e6e, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100f3e71, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f3e74, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100f3e77, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100f3e7d, 0x5)   mov(eax, 0x101a24ef);                 /* mov eax, 0x101a24ef */ /* "Attempt to disable %s!" */
    II(0x100f3e82, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e83, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3e89, 0x1)   pushd(eax);                           /* push eax */
    II(0x100f3e8a, 0x5)   calld(sys_sprintf, 0x72072);          /* call 0x10165f01 */
    II(0x100f3e8f, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100f3e92, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0x3cf); /* mov dword [ebp-0x10], 0x3cf */
    II(0x100f3e99, 0xa)   mov(memd_a32(ss, ebp - 0x14c), 0x3d0); /* mov dword [ebp+0xfffffeb4], 0x3d0 */
    II(0x100f3ea3, 0x2)   jmpd(0x100f3ee4, 0x3f);               /* jmp 0x100f3ee4 */
l_0x100f3ea5:
    II(0x100f3ea5, 0x2)   jmpd(0x100f3ee4, 0x3d);               /* jmp 0x100f3ee4 */
//    II(0x100f3ea7, 0x1)   /* Выравнивание. */
//    II(0x100f3ea8, 0x18)  /* Служебная область с абсолютными адресами переходов. {0x100f3c88, 0x100f3d10, 0x100f3db4, 0x100f3df1, 0x100f3e2e, 0x100f3e6b}. */
l_0x100f3ec0:
    II(0x100f3ec0, 0x3)   mov(al, memb_a32(ss, ebp - 0xc));     /* mov al, [ebp-0xc] */
    II(0x100f3ec3, 0x6)   mov(memb_a32(ss, ebp - 0x154), al);   /* mov [ebp+0xfffffeac], al */
    II(0x100f3ec9, 0x7)   cmp(memb_a32(ss, ebp - 0x154), 0x5);  /* cmp byte [ebp+0xfffffeac], 0x5 */
    II(0x100f3ed0, 0x2)   jad(0x100f3ea5, -0x2d);               /* ja 0x100f3ea5 */
    II(0x100f3ed2, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100f3ed4, 0x6)   mov(al, memb_a32(ss, ebp - 0x154));   /* mov al, [ebp+0xfffffeac] */
    II(0x100f3eda, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100f3edd, 0x7)   jmpd_abs_switch(memd_a32(cs, eax + 0x100f3ea8), (0x100f3c88)(0x100f3d10)(0x100f3db4)(0x100f3df1)(0x100f3e2e)(0x100f3e6b)); /* jmp dword near [cs:eax+0x100f3ea8] */
l_0x100f3ee4:
    II(0x100f3ee4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f3ee6, 0x5)   mov(eax, 0x101c38b4);                 /* mov eax, 0x101c38b4 */
    II(0x100f3eeb, 0x5)   calld(0x1013ad71, 0x46e81);           /* call 0x1013ad71 */
    II(0x100f3ef0, 0x2)   test(al, al);                         /* test al, al */
    II(0x100f3ef2, 0x2)   jzd(0x100f3f04, 0x10);                /* jz 0x100f3f04 */
    II(0x100f3ef4, 0x5)   mov(edx, 0x101a2506);                 /* mov edx, 0x101a2506 */ /* " Press F1." */
    II(0x100f3ef9, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3eff, 0x5)   calld(sys_strcat, 0x7202d);           /* call 0x10165f31 */
l_0x100f3f04:
    II(0x100f3f04, 0x6)   mov(ebx, memd_a32(ds, 0x101c38b8));   /* mov ebx, [0x101c38b8] */
    II(0x100f3f0a, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x100f3f0d, 0x6)   mov(edx, memd_a32(ds, 0x101c38b6));   /* mov edx, [0x101c38b6] */
    II(0x100f3f13, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100f3f16, 0x6)   lea(eax, ebp - 0x158);                /* lea eax, [ebp+0xfffffea8] */
    II(0x100f3f1c, 0x5)   calld(0x10076aac, -0x7d475);          /* call 0x10076aac */
    II(0x100f3f21, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x100f3f23, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x8));    /* mov ebx, [ebp-0x8] */
    II(0x100f3f26, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x100f3f2b, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100f3f31, 0x5)   calld(0x10115b60, 0x21c2a);           /* call 0x10115b60 */
    II(0x100f3f36, 0x5)   cmp(memw_a32(ss, ebp - 0x10), -0x1 /* 0xff */); /* cmp word [ebp-0x10], 0xff */
    II(0x100f3f3b, 0x2)   jzd(0x100f3f5a, 0x1d);                /* jz 0x100f3f5a */
    II(0x100f3f3d, 0x5)   calld(0x100d5470, -0x1ead2);          /* call 0x100d5470 */
    II(0x100f3f42, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x100f3f45, 0x7)   movsx(ebx, memw_a32(ss, ebp - 0x14c)); /* movsx ebx, word [ebp+0xfffffeb4] */
    II(0x100f3f4c, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x100f3f50, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x100f3f55, 0x5)   calld(0x1013daea, 0x49b90);           /* call 0x1013daea */
l_0x100f3f5a:
    II(0x100f3f5a, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100f3f5c, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100f3f5d, 0x1)   popd(edi);                            /* pop edi */
    II(0x100f3f5e, 0x1)   popd(esi);                            /* pop esi */
    II(0x100f3f5f, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100f3f60, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100f3f61, 0x1)   retd();                               /* ret */
FUNC_END

