FUNC_BEGIN(0x100fbbed, 0xd2173358d1fcd034, 0x20, ({0x68, 0x6c, 0, 0, 0, 0xe8, 0x5b, 0xa1, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x48, 0, 0, 0, 0x89, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0x8a, 0x80, 0xc6, 0x35, 0x1c, 0x10, 0x88, 0x45, 0xf8, 0x80, 0x4d, 0xec, 0x1, 0x8d, 0x45, 0xd4, 0xe8, 0x20, 0xac, 0xf7, 0xff, 0x89, 0x45, 0xd0, 0x80, 0x65, 0xec, 0xfe, 0xc6, 0x45, 0xf4, 0x1, 0x80, 0x7d, 0xf8, 0x1, 0x75, 0x40, 0xe8, 0xc6, 0xed, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xdb, 0xed, 0xfc, 0xff, 0x31, 0xdb, 0x31, 0xd2, 0xbe, 0xb3, 0x28, 0x1a, 0x10, 0x89, 0xc1, 0x89, 0xf0, 0xe8, 0xcc, 0xa0, 0x1, 0, 0xe8, 0x14, 0x98, 0xfd, 0xff, 0xf, 0xbf, 0xc8, 0xbb, 0x63, 0x4, 0, 0, 0xba, 0x5e, 0x4, 0, 0, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x77, 0x1e, 0x4, 0, 0xeb, 0x4, 0xc6, 0x45, 0xf4, 0, 0x80, 0x7d, 0xf8, 0, 0x74, 0x6, 0x80, 0x7d, 0xf8, 0x6, 0x75, 0x5, 0xe9, 0xca, 0x2, 0, 0, 0xe8, 0x74, 0xec, 0xfe, 0xff, 0xc6, 0x5, 0x1e, 0x39, 0x1c, 0x10, 0x7, 0x80, 0x7d, 0xf4, 0, 0x74, 0x10, 0x80, 0x3d, 0x1e, 0x39, 0x1c, 0x10, 0x7, 0x75, 0x7, 0xe8, 0x82, 0x56, 0, 0, 0xeb, 0xf0, 0x80, 0x3d, 0x1e, 0x39, 0x1c, 0x10, 0xe, 0x74, 0x9, 0x80, 0x3d, 0x1e, 0x39, 0x1c, 0x10, 0x3, 0x75, 0x2, 0xeb, 0x9, 0x80, 0x3d, 0x1e, 0x39, 0x1c, 0x10, 0xf, 0x75, 0x9, 0xc6, 0x45, 0xf8, 0x6, 0xe9, 0x82, 0x2, 0, 0, 0xc6, 0x5, 0x1e, 0x39, 0x1c, 0x10, 0x7, 0xb8, 0x1, 0, 0, 0, 0xe8, 0xb1, 0x50, 0x2, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0x66, 0x8b, 0x80, 0xbc, 0x35, 0x1c, 0x10, 0x89, 0x45, 0xc8, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0x66, 0x8b, 0x80, 0xbe, 0x35, 0x1c, 0x10, 0x89, 0x45, 0xe8, 0x31, 0xd2, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0, 0xf0, 0x3, 0, 0x84, 0xc0, 0xf, 0x84, 0x88, 0, 0, 0, 0x6a, 0, 0xf, 0xbf, 0x45, 0xe8, 0x50, 0xf, 0xbf, 0x4d, 0xc8, 0xf, 0xbf, 0x5d, 0xfc, 0xba, 0x30, 0, 0, 0, 0x8d, 0x45, 0xc4, 0xe8, 0x75, 0xe9, 0x5, 0, 0x89, 0xc2, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0xd7, 0xee, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xc4, 0xe8, 0xe1, 0xa1, 0xf7, 0xff, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x1f, 0xa8, 0xf7, 0xff, 0xc6, 0x40, 0x3d, 0x10, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x11, 0xa8, 0xf7, 0xff, 0xe8, 0xd4, 0xa4, 0xf7, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd4, 0xe8, 0xa, 0xfa, 0xfc, 0xff, 0x8d, 0x45, 0xd4, 0xe8, 0xb6, 0xa9, 0xf7, 0xff, 0x66, 0x8b, 0x40, 0x12, 0x89, 0x45, 0xe0, 0x8d, 0x45, 0xd4, 0xe8, 0xa7, 0xa9, 0xf7, 0xff, 0x66, 0x8b, 0x40, 0x17, 0x89, 0x45, 0xe4, 0xc6, 0x5, 0x8a, 0x38, 0x1c, 0x10, 0x1, 0xa0, 0x8a, 0x38, 0x1c, 0x10, 0xa2, 0x89, 0x38, 0x1c, 0x10, 0x80, 0x7d, 0xf4, 0, 0x74, 0x6, 0x80, 0x7d, 0xf8, 0x2, 0x74, 0x2, 0xeb, 0x5a, 0xf, 0xbf, 0x55, 0xc8, 0xf, 0xbf, 0x45, 0xd8, 0x29, 0xc2, 0x89, 0xd0, 0xe8, 0x38, 0xa0, 0x6, 0, 0x83, 0xf8, 0x3, 0x7f, 0x16, 0xf, 0xbf, 0x55, 0xe8, 0xf, 0xbf, 0x45, 0xdc, 0x29, 0xc2, 0x89, 0xd0, 0xe8, 0x22, 0xa0, 0x6, 0, 0x83, 0xf8, 0x3, 0x7e, 0x2, 0xeb, 0x28, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x13, 0x8b, 0x45, 0xd8, 0x66, 0x89, 0x82, 0xbc, 0x35, 0x1c, 0x10, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x13, 0x8b, 0x45, 0xdc, 0x66, 0x89, 0x82, 0xbe, 0x35, 0x1c, 0x10, 0xc6, 0x45, 0xf8, 0x4, 0xeb, 0x4, 0xc6, 0x45, 0xf8, 0x1, 0x80, 0x7d, 0xf8, 0x1, 0x74, 0x6, 0x80, 0x7d, 0xf8, 0x2, 0x75, 0x2, 0xeb, 0x6, 0x80, 0x7d, 0xf8, 0x3, 0x75, 0x1c, 0xf, 0xbf, 0x5d, 0xe8, 0xf, 0xbf, 0x55, 0xc8, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x8d, 0xed, 0xf8, 0xff, 0xe8, 0x66, 0x72, 0x6, 0, 0xe8, 0x50, 0xfa, 0xff, 0xff, 0xf, 0xbf, 0x55, 0xfc, 0x6b, 0xd2, 0x13, 0x8a, 0x45, 0xf8, 0x88, 0x82, 0xc6, 0x35, 0x1c, 0x10, 0x83, 0x3d, 0x24, 0x56, 0x1c, 0x10, 0, 0x74, 0x13, 0xf, 0xbf, 0x45, 0xfc, 0xe8, 0xa7, 0xd0, 0x2, 0, 0xe8, 0x8f, 0xdb, 0x2, 0, 0x88, 0x45, 0xcc, 0xeb, 0x1a, 0x80, 0x7d, 0xf4, 0, 0x74, 0xe, 0xf, 0xbf, 0x45, 0xfc, 0xe8, 0x88, 0xfc, 0xff, 0xff, 0x88, 0x45, 0xcc, 0xeb, 0x6, 0x8a, 0x45, 0xf8, 0x88, 0x45, 0xcc, 0x8a, 0x45, 0xcc, 0x88, 0x45, 0xc0, 0xe9, 0xaa, 0, 0, 0, 0xe8, 0x71, 0xeb, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x86, 0xeb, 0xfc, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0xba, 0x2, 0, 0, 0, 0xb8, 0xcd, 0x28, 0x1a, 0x10, 0xe8, 0x76, 0x9e, 0x1, 0, 0xc6, 0x45, 0xf8, 0x1, 0xc6, 0x45, 0xf4, 0x1, 0xe9, 0x95, 0, 0, 0, 0x80, 0x7d, 0xf8, 0x4, 0x74, 0x36, 0xe8, 0x3b, 0xeb, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x50, 0xeb, 0xfc, 0xff, 0x89, 0xc1, 0x31, 0xdb, 0x31, 0xd2, 0xb8, 0xfd, 0x28, 0x1a, 0x10, 0xe8, 0x43, 0x9e, 0x1, 0, 0x8b, 0x45, 0xc8, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xe8, 0x89, 0x45, 0xdc, 0xc6, 0x45, 0xf8, 0x2, 0xc6, 0x45, 0xf4, 0x1, 0xeb, 0x11, 0xc6, 0x45, 0xf4, 0, 0x83, 0x3d, 0x24, 0x56, 0x1c, 0x10, 0, 0x75, 0x4, 0xc6, 0x45, 0xf8, 0, 0xeb, 0x46, 0xc6, 0x45, 0xf4, 0, 0x8a, 0x45, 0xcc, 0x88, 0x45, 0xf8, 0xeb, 0x3a, 0xeb, 0x38, 0x90, 0x9, 0xbf, 0xf, 0x10, 0x15, 0xbf, 0xf, 0x10, 0xba, 0xbe, 0xf, 0x10, 0x8a, 0xbe, 0xf, 0x10, 0x15, 0xbf, 0xf, 0x10, 0x9, 0xbf, 0xf, 0x10, 0x9, 0xbf, 0xf, 0x10, 0x8a, 0x45, 0xc0, 0x88, 0x45, 0xbc, 0x80, 0x7d, 0xbc, 0x6, 0x77, 0xd5, 0x31, 0xc0, 0x8a, 0x45, 0xbc, 0xc1, 0xe0, 0x2, 0x2e, 0xff, 0xa0, 0x18, 0xbf, 0xf, 0x10, 0xe9, 0x25, 0xfd, 0xff, 0xff, 0x31, 0xd2, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x11, 0xee, 0x3, 0, 0x84, 0xc0, 0x74, 0x42, 0x8d, 0x45, 0xd4, 0xe8, 0xc4, 0xa7, 0xf7, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xe0, 0x66, 0x89, 0x42, 0x12, 0x8d, 0x45, 0xd4, 0xe8, 0xb3, 0xa7, 0xf7, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xe4, 0x66, 0x89, 0x42, 0x17, 0xc6, 0x5, 0x8a, 0x38, 0x1c, 0x10, 0, 0xa0, 0x8a, 0x38, 0x1c, 0x10, 0xa2, 0x89, 0x38, 0x1c, 0x10, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x5f, 0xa6, 0xf7, 0xff, 0xe8, 0x26, 0x33, 0x6, 0, 0x80, 0x7d, 0xf8, 0, 0x75, 0x6, 0xc6, 0x45, 0xb8, 0x1, 0xeb, 0x4, 0xc6, 0x45, 0xb8, 0, 0x8a, 0x45, 0xb8, 0x88, 0x45, 0xf0, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x26, 0x9f, 0xf7, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x1a, 0x9f, 0xf7, 0xff, 0x8a, 0x45, 0xf0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100fbbed, 0x5)   pushd(0x6c);                          /* push dword 0x6c */
    II(0x100fbbf2, 0x5)   calld(sys_check_available_stack_size, 0x6a15b); /* call 0x10165d52 */
    II(0x100fbbf7, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100fbbf8, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100fbbf9, 0x1)   pushd(edx);                           /* push edx */
    II(0x100fbbfa, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fbbfb, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fbbfc, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fbbfd, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fbbff, 0x6)   sub(esp, 0x48);                       /* sub esp, 0x48 */
    II(0x100fbc05, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100fbc08, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fbc0c, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x100fbc0f, 0x6)   mov(al, memb_a32(ds, eax + 0x101c35c6)); /* mov al, [eax+0x101c35c6] */
    II(0x100fbc15, 0x3)   mov(memb_a32(ss, ebp - 0x8), al);     /* mov [ebp-0x8], al */
    II(0x100fbc18, 0x4)   or_(memb_a32(ss, ebp - 0x14), 0x1);   /* or byte [ebp-0x14], 0x1 */
    II(0x100fbc1c, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbc1f, 0x5)   calld(my_ctor_0x101b38d0, -0x853e0);  /* call 0x10076844 */
    II(0x100fbc24, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
    II(0x100fbc27, 0x4)   and_(memb_a32(ss, ebp - 0x14), -0x2 /* 0xfe */); /* and byte [ebp-0x14], 0xfe */
    II(0x100fbc2b, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x100fbc2f, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x1);    /* cmp byte [ebp-0x8], 0x1 */
    II(0x100fbc33, 0x2)   jnzd(0x100fbc75, 0x40);               /* jnz 0x100fbc75 */
    II(0x100fbc35, 0x5)   calld(0x100caa00, -0x3123a);          /* call 0x100caa00 */
    II(0x100fbc3a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fbc3f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fbc40, 0x5)   calld(0x100caa20, -0x31225);          /* call 0x100caa20 */
    II(0x100fbc45, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fbc47, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbc49, 0x5)   mov(esi, 0x101a28b3);                 /* mov esi, 0x101a28b3 */ /* "Select starting location." */
    II(0x100fbc4e, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100fbc50, 0x2)   mov(eax, esi);                        /* mov eax, esi */
    II(0x100fbc52, 0x5)   calld(0x10115d23, 0x1a0cc);           /* call 0x10115d23 */
    II(0x100fbc57, 0x5)   calld(0x100d5470, -0x267ec);          /* call 0x100d5470 */
    II(0x100fbc5c, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x100fbc5f, 0x5)   mov(ebx, 0x463);                      /* mov ebx, 0x463 */
    II(0x100fbc64, 0x5)   mov(edx, 0x45e);                      /* mov edx, 0x45e */
    II(0x100fbc69, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x100fbc6e, 0x5)   calld(0x1013daea, 0x41e77);           /* call 0x1013daea */
    II(0x100fbc73, 0x2)   jmpd(0x100fbc79, 0x4);                /* jmp 0x100fbc79 */
l_0x100fbc75:
    II(0x100fbc75, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
l_0x100fbc79:
    II(0x100fbc79, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0);      /* cmp byte [ebp-0x8], 0x0 */
    II(0x100fbc7d, 0x2)   jzd(0x100fbc85, 0x6);                 /* jz 0x100fbc85 */
    II(0x100fbc7f, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x6);    /* cmp byte [ebp-0x8], 0x6 */
    II(0x100fbc83, 0x2)   jnzd(0x100fbc8a, 0x5);                /* jnz 0x100fbc8a */
l_0x100fbc85:
    II(0x100fbc85, 0x5)   jmpd(0x100fbf54, 0x2ca);              /* jmp 0x100fbf54 */
l_0x100fbc8a:
    II(0x100fbc8a, 0x5)   calld(0x100ea903, -0x1138c);          /* call 0x100ea903 */
    II(0x100fbc8f, 0x7)   mov(memb_a32(ds, 0x101c391e), 0x7);   /* mov byte [0x101c391e], 0x7 */
    II(0x100fbc96, 0x4)   cmp(memb_a32(ss, ebp - 0xc), 0);      /* cmp byte [ebp-0xc], 0x0 */
    II(0x100fbc9a, 0x2)   jzd(0x100fbcac, 0x10);                /* jz 0x100fbcac */
l_0x100fbc9c:
    II(0x100fbc9c, 0x7)   cmp(memb_a32(ds, 0x101c391e), 0x7);   /* cmp byte [0x101c391e], 0x7 */
    II(0x100fbca3, 0x2)   jnzd(0x100fbcac, 0x7);                /* jnz 0x100fbcac */
    II(0x100fbca5, 0x5)   calld(0x1010132c, 0x5682);            /* call 0x1010132c */
    II(0x100fbcaa, 0x2)   jmpd(0x100fbc9c, -0x10);              /* jmp 0x100fbc9c */
l_0x100fbcac:
    II(0x100fbcac, 0x7)   cmp(memb_a32(ds, 0x101c391e), 0xe);   /* cmp byte [0x101c391e], 0xe */
    II(0x100fbcb3, 0x2)   jzd(0x100fbcbe, 0x9);                 /* jz 0x100fbcbe */
    II(0x100fbcb5, 0x7)   cmp(memb_a32(ds, 0x101c391e), 0x3);   /* cmp byte [0x101c391e], 0x3 */
    II(0x100fbcbc, 0x2)   jnzd(0x100fbcc0, 0x2);                /* jnz 0x100fbcc0 */
l_0x100fbcbe:
    II(0x100fbcbe, 0x2)   jmpd(0x100fbcc9, 0x9);                /* jmp 0x100fbcc9 */
l_0x100fbcc0:
    II(0x100fbcc0, 0x7)   cmp(memb_a32(ds, 0x101c391e), 0xf);   /* cmp byte [0x101c391e], 0xf */
    II(0x100fbcc7, 0x2)   jnzd(0x100fbcd2, 0x9);                /* jnz 0x100fbcd2 */
l_0x100fbcc9:
    II(0x100fbcc9, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x6);    /* mov byte [ebp-0x8], 0x6 */
    II(0x100fbccd, 0x5)   jmpd(0x100fbf54, 0x282);              /* jmp 0x100fbf54 */
l_0x100fbcd2:
    II(0x100fbcd2, 0x7)   mov(memb_a32(ds, 0x101c391e), 0x7);   /* mov byte [0x101c391e], 0x7 */
    II(0x100fbcd9, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fbcde, 0x5)   calld(0x10120d94, 0x250b1);           /* call 0x10120d94 */
    II(0x100fbce3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fbce7, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x100fbcea, 0x7)   mov(ax, memw_a32(ds, eax + 0x101c35bc)); /* mov ax, [eax+0x101c35bc] */
    II(0x100fbcf1, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
    II(0x100fbcf4, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fbcf8, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x100fbcfb, 0x7)   mov(ax, memw_a32(ds, eax + 0x101c35be)); /* mov ax, [eax+0x101c35be] */
    II(0x100fbd02, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100fbd05, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbd07, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbd0c, 0x5)   calld(0x1013ad11, 0x3f000);           /* call 0x1013ad11 */
    II(0x100fbd11, 0x2)   test(al, al);                         /* test al, al */
    II(0x100fbd13, 0x6)   jzd(0x100fbda1, 0x88);                /* jz dword 0x100fbda1 */
    II(0x100fbd19, 0x2)   pushd(0);                             /* push 0x0 */
    II(0x100fbd1b, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x100fbd1f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fbd20, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0x38)); /* movsx ecx, word [ebp-0x38] */
    II(0x100fbd24, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x100fbd28, 0x5)   mov(edx, 0x30);                       /* mov edx, 0x30 */
    II(0x100fbd2d, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x100fbd30, 0x5)   calld(0x1015a6aa, 0x5e975);           /* call 0x1015a6aa */
    II(0x100fbd35, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fbd37, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbd3c, 0x5)   calld(0x1008ac18, -0x71129);          /* call 0x1008ac18 */
    II(0x100fbd41, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbd43, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x100fbd46, 0x5)   calld(0x10075f2c, -0x85e1f);          /* call 0x10075f2c */
    II(0x100fbd4b, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbd50, 0x5)   calld(0x10076574, -0x857e1);          /* call 0x10076574 */
    II(0x100fbd55, 0x4)   mov(memb_a32(ds, eax + 0x3d), 0x10);  /* mov byte [eax+0x3d], 0x10 */
    II(0x100fbd59, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbd5e, 0x5)   calld(0x10076574, -0x857ef);          /* call 0x10076574 */
    II(0x100fbd63, 0x5)   calld(0x1007623c, -0x85b2c);          /* call 0x1007623c */
    II(0x100fbd68, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fbd6a, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbd6d, 0x5)   calld(0x100cb77c, -0x305f6);          /* call 0x100cb77c */
    II(0x100fbd72, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbd75, 0x5)   calld(0x10076730, -0x8564a);          /* call 0x10076730 */
    II(0x100fbd7a, 0x4)   mov(ax, memw_a32(ds, eax + 0x12));    /* mov ax, [eax+0x12] */
    II(0x100fbd7e, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x100fbd81, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbd84, 0x5)   calld(0x10076730, -0x85659);          /* call 0x10076730 */
    II(0x100fbd89, 0x4)   mov(ax, memw_a32(ds, eax + 0x17));    /* mov ax, [eax+0x17] */
    II(0x100fbd8d, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100fbd90, 0x7)   mov(memb_a32(ds, 0x101c388a), 0x1);   /* mov byte [0x101c388a], 0x1 */
    II(0x100fbd97, 0x5)   mov(al, memb_a32(ds, 0x101c388a));    /* mov al, [0x101c388a] */
    II(0x100fbd9c, 0x5)   mov(memb_a32(ds, 0x101c3889), al);    /* mov [0x101c3889], al */
l_0x100fbda1:
    II(0x100fbda1, 0x4)   cmp(memb_a32(ss, ebp - 0xc), 0);      /* cmp byte [ebp-0xc], 0x0 */
    II(0x100fbda5, 0x2)   jzd(0x100fbdad, 0x6);                 /* jz 0x100fbdad */
    II(0x100fbda7, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x2);    /* cmp byte [ebp-0x8], 0x2 */
    II(0x100fbdab, 0x2)   jzd(0x100fbdaf, 0x2);                 /* jz 0x100fbdaf */
l_0x100fbdad:
    II(0x100fbdad, 0x2)   jmpd(0x100fbe09, 0x5a);               /* jmp 0x100fbe09 */
l_0x100fbdaf:
    II(0x100fbdaf, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x38)); /* movsx edx, word [ebp-0x38] */
    II(0x100fbdb3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fbdb7, 0x2)   sub(edx, eax);                        /* sub edx, eax */
    II(0x100fbdb9, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x100fbdbb, 0x5)   calld(/* sys */ 0x10165df8, 0x6a038); /* call 0x10165df8 */
    II(0x100fbdc0, 0x3)   cmp(eax, 0x3);                        /* cmp eax, 0x3 */
    II(0x100fbdc3, 0x2)   jgd(0x100fbddb, 0x16);                /* jg 0x100fbddb */
    II(0x100fbdc5, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x18)); /* movsx edx, word [ebp-0x18] */
    II(0x100fbdc9, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x24)); /* movsx eax, word [ebp-0x24] */
    II(0x100fbdcd, 0x2)   sub(edx, eax);                        /* sub edx, eax */
    II(0x100fbdcf, 0x2)   mov(eax, edx);                        /* mov eax, edx */
    II(0x100fbdd1, 0x5)   calld(/* sys */ 0x10165df8, 0x6a022); /* call 0x10165df8 */
    II(0x100fbdd6, 0x3)   cmp(eax, 0x3);                        /* cmp eax, 0x3 */
    II(0x100fbdd9, 0x2)   jled(0x100fbddd, 0x2);                /* jle 0x100fbddd */
l_0x100fbddb:
    II(0x100fbddb, 0x2)   jmpd(0x100fbe05, 0x28);               /* jmp 0x100fbe05 */
l_0x100fbddd:
    II(0x100fbddd, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100fbde1, 0x3)   imul(edx, edx, 0x13);                 /* imul edx, edx, 0x13 */
    II(0x100fbde4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100fbde7, 0x7)   mov(memw_a32(ds, edx + 0x101c35bc), ax); /* mov [edx+0x101c35bc], ax */
    II(0x100fbdee, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100fbdf2, 0x3)   imul(edx, edx, 0x13);                 /* imul edx, edx, 0x13 */
    II(0x100fbdf5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100fbdf8, 0x7)   mov(memw_a32(ds, edx + 0x101c35be), ax); /* mov [edx+0x101c35be], ax */
    II(0x100fbdff, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x4);    /* mov byte [ebp-0x8], 0x4 */
    II(0x100fbe03, 0x2)   jmpd(0x100fbe09, 0x4);                /* jmp 0x100fbe09 */
l_0x100fbe05:
    II(0x100fbe05, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x1);    /* mov byte [ebp-0x8], 0x1 */
l_0x100fbe09:
    II(0x100fbe09, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x1);    /* cmp byte [ebp-0x8], 0x1 */
    II(0x100fbe0d, 0x2)   jzd(0x100fbe15, 0x6);                 /* jz 0x100fbe15 */
    II(0x100fbe0f, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x2);    /* cmp byte [ebp-0x8], 0x2 */
    II(0x100fbe13, 0x2)   jnzd(0x100fbe17, 0x2);                /* jnz 0x100fbe17 */
l_0x100fbe15:
    II(0x100fbe15, 0x2)   jmpd(0x100fbe1d, 0x6);                /* jmp 0x100fbe1d */
l_0x100fbe17:
    II(0x100fbe17, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x3);    /* cmp byte [ebp-0x8], 0x3 */
    II(0x100fbe1b, 0x2)   jnzd(0x100fbe39, 0x1c);               /* jnz 0x100fbe39 */
l_0x100fbe1d:
    II(0x100fbe1d, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x18)); /* movsx ebx, word [ebp-0x18] */
    II(0x100fbe21, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x38)); /* movsx edx, word [ebp-0x38] */
    II(0x100fbe25, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbe2a, 0x5)   calld(0x1008abbc, -0x71273);          /* call 0x1008abbc */
    II(0x100fbe2f, 0x5)   calld(0x1016309a, 0x67266);           /* call 0x1016309a */
    II(0x100fbe34, 0x5)   calld(0x100fb889, -0x5b0);            /* call 0x100fb889 */
l_0x100fbe39:
    II(0x100fbe39, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x100fbe3d, 0x3)   imul(edx, edx, 0x13);                 /* imul edx, edx, 0x13 */
    II(0x100fbe40, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x100fbe43, 0x6)   mov(memb_a32(ds, edx + 0x101c35c6), al); /* mov [edx+0x101c35c6], al */
    II(0x100fbe49, 0x7)   cmp(memd_a32(ds, 0x101c5624), 0);     /* cmp dword [0x101c5624], 0x0 */
    II(0x100fbe50, 0x2)   jzd(0x100fbe65, 0x13);                /* jz 0x100fbe65 */
    II(0x100fbe52, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fbe56, 0x5)   calld(0x10128f02, 0x2d0a7);           /* call 0x10128f02 */
    II(0x100fbe5b, 0x5)   calld(0x101299ef, 0x2db8f);           /* call 0x101299ef */
    II(0x100fbe60, 0x3)   mov(memb_a32(ss, ebp - 0x34), al);    /* mov [ebp-0x34], al */
    II(0x100fbe63, 0x2)   jmpd(0x100fbe7f, 0x1a);               /* jmp 0x100fbe7f */
l_0x100fbe65:
    II(0x100fbe65, 0x4)   cmp(memb_a32(ss, ebp - 0xc), 0);      /* cmp byte [ebp-0xc], 0x0 */
    II(0x100fbe69, 0x2)   jzd(0x100fbe79, 0xe);                 /* jz 0x100fbe79 */
    II(0x100fbe6b, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fbe6f, 0x5)   calld(0x100fbafc, -0x378);            /* call 0x100fbafc */
    II(0x100fbe74, 0x3)   mov(memb_a32(ss, ebp - 0x34), al);    /* mov [ebp-0x34], al */
    II(0x100fbe77, 0x2)   jmpd(0x100fbe7f, 0x6);                /* jmp 0x100fbe7f */
l_0x100fbe79:
    II(0x100fbe79, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x100fbe7c, 0x3)   mov(memb_a32(ss, ebp - 0x34), al);    /* mov [ebp-0x34], al */
l_0x100fbe7f:
    II(0x100fbe7f, 0x3)   mov(al, memb_a32(ss, ebp - 0x34));    /* mov al, [ebp-0x34] */
    II(0x100fbe82, 0x3)   mov(memb_a32(ss, ebp - 0x40), al);    /* mov [ebp-0x40], al */
    II(0x100fbe85, 0x5)   jmpd(0x100fbf34, 0xaa);               /* jmp 0x100fbf34 */
l_0x100fbe8a:
    II(0x100fbe8a, 0x5)   calld(0x100caa00, -0x3148f);          /* call 0x100caa00 */
    II(0x100fbe8f, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fbe94, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fbe95, 0x5)   calld(0x100caa20, -0x3147a);          /* call 0x100caa20 */
    II(0x100fbe9a, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100fbe9c, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fbe9e, 0x5)   mov(edx, 0x2);                        /* mov edx, 0x2 */
    II(0x100fbea3, 0x5)   mov(eax, 0x101a28cd);                 /* mov eax, 0x101a28cd */ /* "Warning: Exclusion zones overlap! Select again." */
    II(0x100fbea8, 0x5)   calld(0x10115d23, 0x19e76);           /* call 0x10115d23 */
    II(0x100fbead, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x1);    /* mov byte [ebp-0x8], 0x1 */
    II(0x100fbeb1, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x100fbeb5, 0x5)   jmpd(0x100fbf4f, 0x95);               /* jmp 0x100fbf4f */
l_0x100fbeba:
    II(0x100fbeba, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0x4);    /* cmp byte [ebp-0x8], 0x4 */
    II(0x100fbebe, 0x2)   jzd(0x100fbef6, 0x36);                /* jz 0x100fbef6 */
    II(0x100fbec0, 0x5)   calld(0x100caa00, -0x314c5);          /* call 0x100caa00 */
    II(0x100fbec5, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fbeca, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fbecb, 0x5)   calld(0x100caa20, -0x314b0);          /* call 0x100caa20 */
    II(0x100fbed0, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x100fbed2, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fbed4, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbed6, 0x5)   mov(eax, 0x101a28fd);                 /* mov eax, 0x101a28fd */ /* "Notice: Proximity zones overlap! Select again or\nclick inside red circle to remain at current location." */
    II(0x100fbedb, 0x5)   calld(0x10115d23, 0x19e43);           /* call 0x10115d23 */
    II(0x100fbee0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x38));   /* mov eax, [ebp-0x38] */
    II(0x100fbee3, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x100fbee6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100fbee9, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
    II(0x100fbeec, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x2);    /* mov byte [ebp-0x8], 0x2 */
    II(0x100fbef0, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0x1);    /* mov byte [ebp-0xc], 0x1 */
    II(0x100fbef4, 0x2)   jmpd(0x100fbf07, 0x11);               /* jmp 0x100fbf07 */
l_0x100fbef6:
    II(0x100fbef6, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x100fbefa, 0x7)   cmp(memd_a32(ds, 0x101c5624), 0);     /* cmp dword [0x101c5624], 0x0 */
    II(0x100fbf01, 0x2)   jnzd(0x100fbf07, 0x4);                /* jnz 0x100fbf07 */
    II(0x100fbf03, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0);      /* mov byte [ebp-0x8], 0x0 */
l_0x100fbf07:
    II(0x100fbf07, 0x2)   jmpd(0x100fbf4f, 0x46);               /* jmp 0x100fbf4f */
l_0x100fbf09:
    II(0x100fbf09, 0x4)   mov(memb_a32(ss, ebp - 0xc), 0);      /* mov byte [ebp-0xc], 0x0 */
    II(0x100fbf0d, 0x3)   mov(al, memb_a32(ss, ebp - 0x34));    /* mov al, [ebp-0x34] */
    II(0x100fbf10, 0x3)   mov(memb_a32(ss, ebp - 0x8), al);     /* mov [ebp-0x8], al */
    II(0x100fbf13, 0x2)   jmpd(0x100fbf4f, 0x3a);               /* jmp 0x100fbf4f */
l_0x100fbf15:
    II(0x100fbf15, 0x2)   jmpd(0x100fbf4f, 0x38);               /* jmp 0x100fbf4f */
//    II(0x100fbf17, 0x1)   /* Выравнивание. */
//    II(0x100fbf18, 0x1c)  /* Служебная область с абсолютными адресами переходов. {0x100fbf09, 0x100fbf15, 0x100fbeba, 0x100fbe8a, 0x100fbf15, 0x100fbf09, 0x100fbf09}. */
l_0x100fbf34:
    II(0x100fbf34, 0x3)   mov(al, memb_a32(ss, ebp - 0x40));    /* mov al, [ebp-0x40] */
    II(0x100fbf37, 0x3)   mov(memb_a32(ss, ebp - 0x44), al);    /* mov [ebp-0x44], al */
    II(0x100fbf3a, 0x4)   cmp(memb_a32(ss, ebp - 0x44), 0x6);   /* cmp byte [ebp-0x44], 0x6 */
    II(0x100fbf3e, 0x2)   jad(0x100fbf15, -0x2b);               /* ja 0x100fbf15 */
    II(0x100fbf40, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fbf42, 0x3)   mov(al, memb_a32(ss, ebp - 0x44));    /* mov al, [ebp-0x44] */
    II(0x100fbf45, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100fbf48, 0x7)   jmpd_abs_switch(memd_a32(cs, eax + 0x100fbf18), (0x100fbe8a)(0x100fbeba)(0x100fbf09)(0x100fbf15)); /* jmp dword near [cs:eax+0x100fbf18] */
l_0x100fbf4f:
    II(0x100fbf4f, 0x5)   jmpd(0x100fbc79, -0x2db);             /* jmp 0x100fbc79 */
l_0x100fbf54:
    II(0x100fbf54, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbf56, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbf5b, 0x5)   calld(0x1013ad71, 0x3ee11);           /* call 0x1013ad71 */
    II(0x100fbf60, 0x2)   test(al, al);                         /* test al, al */
    II(0x100fbf62, 0x2)   jzd(0x100fbfa6, 0x42);                /* jz 0x100fbfa6 */
    II(0x100fbf64, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbf67, 0x5)   calld(0x10076730, -0x8583c);          /* call 0x10076730 */
    II(0x100fbf6c, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fbf6e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x100fbf71, 0x4)   mov(memw_a32(ds, edx + 0x12), ax);    /* mov [edx+0x12], ax */
    II(0x100fbf75, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbf78, 0x5)   calld(0x10076730, -0x8584d);          /* call 0x10076730 */
    II(0x100fbf7d, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fbf7f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x100fbf82, 0x4)   mov(memw_a32(ds, edx + 0x17), ax);    /* mov [edx+0x17], ax */
    II(0x100fbf86, 0x7)   mov(memb_a32(ds, 0x101c388a), 0);     /* mov byte [0x101c388a], 0x0 */
    II(0x100fbf8d, 0x5)   mov(al, memb_a32(ds, 0x101c388a));    /* mov al, [0x101c388a] */
    II(0x100fbf92, 0x5)   mov(memb_a32(ds, 0x101c3889), al);    /* mov [0x101c3889], al */
    II(0x100fbf97, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fbf9c, 0x5)   calld(0x10076600, -0x859a1);          /* call 0x10076600 */
    II(0x100fbfa1, 0x5)   calld(0x1015f2cc, 0x63326);           /* call 0x1015f2cc */
l_0x100fbfa6:
    II(0x100fbfa6, 0x4)   cmp(memb_a32(ss, ebp - 0x8), 0);      /* cmp byte [ebp-0x8], 0x0 */
    II(0x100fbfaa, 0x2)   jnzd(0x100fbfb2, 0x6);                /* jnz 0x100fbfb2 */
    II(0x100fbfac, 0x4)   mov(memb_a32(ss, ebp - 0x48), 0x1);   /* mov byte [ebp-0x48], 0x1 */
    II(0x100fbfb0, 0x2)   jmpd(0x100fbfb6, 0x4);                /* jmp 0x100fbfb6 */
l_0x100fbfb2:
    II(0x100fbfb2, 0x4)   mov(memb_a32(ss, ebp - 0x48), 0);     /* mov byte [ebp-0x48], 0x0 */
l_0x100fbfb6:
    II(0x100fbfb6, 0x3)   mov(al, memb_a32(ss, ebp - 0x48));    /* mov al, [ebp-0x48] */
    II(0x100fbfb9, 0x3)   mov(memb_a32(ss, ebp - 0x10), al);    /* mov [ebp-0x10], al */
    II(0x100fbfbc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fbfbe, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x100fbfc1, 0x5)   calld(0x10075eec, -0x860da);          /* call 0x10075eec */
    II(0x100fbfc6, 0x2)   jmpd(0x100fbfd2, 0xa);                /* jmp 0x100fbfd2 */
//  II(0x100fbfc8, 0xa)   /* Недостижимый код. */
l_0x100fbfd2:
    II(0x100fbfd2, 0x3)   mov(al, memb_a32(ss, ebp - 0x10));    /* mov al, [ebp-0x10] */
    II(0x100fbfd5, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100fbfd7, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100fbfd8, 0x1)   popd(edi);                            /* pop edi */
    II(0x100fbfd9, 0x1)   popd(esi);                            /* pop esi */
    II(0x100fbfda, 0x1)   popd(edx);                            /* pop edx */
    II(0x100fbfdb, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100fbfdc, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100fbfdd, 0x1)   retd();                               /* ret */
FUNC_END

