FUNC_BEGIN(0x1013602e, 0x27242641d944c4b7, 0x20, ({0x68, 0x50, 0, 0, 0, 0xe8, 0x1a, 0xfd, 0x2, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x34, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0xef, 0x7, 0xf4, 0xff, 0x89, 0x45, 0xe8, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xe4, 0xeb, 0x44, 0xc7, 0x45, 0xe0, 0xb4, 0x61, 0x1c, 0x10, 0xeb, 0x58, 0xc7, 0x45, 0xe0, 0xb0, 0x64, 0x1c, 0x10, 0xeb, 0x4f, 0xc7, 0x45, 0xe0, 0xac, 0x67, 0x1c, 0x10, 0xeb, 0x46, 0xc7, 0x45, 0xe0, 0xa8, 0x6a, 0x1c, 0x10, 0xeb, 0x3d, 0xc7, 0x45, 0xe0, 0xa4, 0x6d, 0x1c, 0x10, 0xeb, 0x34, 0xeb, 0x32, 0x90, 0x64, 0x60, 0x13, 0x10, 0x6d, 0x60, 0x13, 0x10, 0x76, 0x60, 0x13, 0x10, 0x7f, 0x60, 0x13, 0x10, 0x88, 0x60, 0x13, 0x10, 0x8b, 0x45, 0xe4, 0x89, 0x45, 0xdc, 0x66, 0x83, 0x7d, 0xdc, 0x4, 0x77, 0xdc, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0xdc, 0xc1, 0xe0, 0x2, 0x2e, 0xff, 0xa0, 0x94, 0x60, 0x13, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0x83, 0xf8, 0x4, 0x7d, 0x12, 0x8a, 0x45, 0xfc, 0x4, 0x6b, 0xf, 0xbe, 0xc0, 0xe8, 0x1, 0xff, 0xf3, 0xff, 0x89, 0x45, 0xf4, 0xeb, 0x7, 0xc7, 0x45, 0xf4, 0x1, 0, 0, 0, 0x66, 0x83, 0x7d, 0xf4, 0, 0x75, 0x20, 0xe8, 0xa8, 0xfd, 0x2, 0, 0xc1, 0xe0, 0x3, 0xc1, 0xe8, 0xf, 0x40, 0x89, 0x45, 0xf4, 0xf, 0xbf, 0x55, 0xf4, 0x8a, 0x45, 0xfc, 0x4, 0x6b, 0xf, 0xbe, 0xc0, 0xe8, 0xee, 0x49, 0xf9, 0xff, 0xf, 0xbf, 0x55, 0xfc, 0x69, 0xd2, 0x47, 0x2, 0, 0, 0x8a, 0x45, 0xf4, 0x88, 0x82, 0xef, 0xa4, 0x1c, 0x10, 0x8b, 0x45, 0xe0, 0xe8, 0x7b, 0x4, 0, 0, 0x8b, 0x45, 0xe0, 0xe8, 0xab, 0xdb, 0xff, 0xff, 0xc7, 0x45, 0xf0, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf0, 0xff, 0x45, 0xf0, 0xf, 0xbf, 0x45, 0xf0, 0x83, 0xf8, 0x5d, 0xf, 0x8d, 0x99, 0, 0, 0, 0xb8, 0x24, 0, 0, 0, 0xe8, 0xa9, 0xfc, 0x2, 0, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xd8, 0x89, 0x45, 0xd4, 0x83, 0x7d, 0xd4, 0, 0x74, 0x23, 0xf, 0xbf, 0x55, 0xf0, 0x8b, 0x45, 0xe0, 0xe8, 0x3e, 0x55, 0xf9, 0xff, 0x8b, 0x5d, 0xd8, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x7a, 0x41, 0xf9, 0xff, 0x89, 0x45, 0xd0, 0x8b, 0x45, 0xd0, 0x89, 0x45, 0xcc, 0xeb, 0x6, 0x8b, 0x45, 0xd4, 0x89, 0x45, 0xcc, 0x8b, 0x55, 0xcc, 0x8d, 0x45, 0xec, 0xe8, 0xe2, 0x55, 0xf9, 0xff, 0x8d, 0x45, 0xec, 0xe8, 0xaa, 0x55, 0xf9, 0xff, 0xf, 0xbf, 0x55, 0xf0, 0xf, 0xbf, 0x4d, 0xf4, 0x89, 0xc3, 0x89, 0xc8, 0xe8, 0x19, 0xfe, 0xff, 0xff, 0x8d, 0x45, 0xec, 0xe8, 0x91, 0x55, 0xf9, 0xff, 0xf, 0xbf, 0x55, 0xf0, 0x8b, 0x4d, 0xe0, 0x89, 0xc3, 0x89, 0xc8, 0xe8, 0x99, 0x3, 0, 0, 0x8d, 0x45, 0xec, 0xe8, 0x79, 0x55, 0xf9, 0xff, 0x89, 0xc3, 0xf, 0xbf, 0x55, 0xf0, 0x8b, 0x45, 0xe0, 0xe8, 0x5b, 0x54, 0xf9, 0xff, 0xe9, 0x54, 0xff, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xfc, 0xfc, 0xf3, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x1013602e, 0x5)   pushd(0x50);                          /* push dword 0x50 */
    II(0x10136033, 0x5)   calld(sys_check_available_stack_size, 0x2fd1a); /* call 0x10165d52 */
    II(0x10136038, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10136039, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1013603a, 0x1)   pushd(edx);                           /* push edx */
    II(0x1013603b, 0x1)   pushd(esi);                           /* push esi */
    II(0x1013603c, 0x1)   pushd(edi);                           /* push edi */
    II(0x1013603d, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1013603e, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10136040, 0x6)   sub(esp, 0x34);                       /* sub esp, 0x34 */
    II(0x10136046, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10136049, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1013604d, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10136050, 0x5)   calld(my_ctor_0x101b38d0, -0xbf811);  /* call 0x10076844 */
    II(0x10136055, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x10136058, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1013605c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1013605f, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x10136062, 0x2)   jmpd(0x101360a8, 0x44);               /* jmp 0x101360a8 */
l_0x10136064:
    II(0x10136064, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x101c61b4); /* mov dword [ebp-0x20], 0x101c61b4 */
    II(0x1013606b, 0x2)   jmpd(0x101360c5, 0x58);               /* jmp 0x101360c5 */
l_0x1013606d:
    II(0x1013606d, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x101c64b0); /* mov dword [ebp-0x20], 0x101c64b0 */
    II(0x10136074, 0x2)   jmpd(0x101360c5, 0x4f);               /* jmp 0x101360c5 */
l_0x10136076:
    II(0x10136076, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x101c67ac); /* mov dword [ebp-0x20], 0x101c67ac */
    II(0x1013607d, 0x2)   jmpd(0x101360c5, 0x46);               /* jmp 0x101360c5 */
l_0x1013607f:
    II(0x1013607f, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x101c6aa8); /* mov dword [ebp-0x20], 0x101c6aa8 */
    II(0x10136086, 0x2)   jmpd(0x101360c5, 0x3d);               /* jmp 0x101360c5 */
l_0x10136088:
    II(0x10136088, 0x7)   mov(memd_a32(ss, ebp - 0x20), 0x101c6da4); /* mov dword [ebp-0x20], 0x101c6da4 */
    II(0x1013608f, 0x2)   jmpd(0x101360c5, 0x34);               /* jmp 0x101360c5 */
l_0x10136091:
    II(0x10136091, 0x2)   jmpd(0x101360c5, 0x32);               /* jmp 0x101360c5 */
//    II(0x10136093, 0x1)   /* Выравнивание. */
//    II(0x10136094, 0x14)  /* Служебная область с абсолютными адресами переходов. {0x10136064, 0x1013606d, 0x10136076, 0x1013607f, 0x10136088}. */
l_0x101360a8:
    II(0x101360a8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x101360ab, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
    II(0x101360ae, 0x5)   cmp(memw_a32(ss, ebp - 0x24), 0x4);   /* cmp word [ebp-0x24], 0x4 */
    II(0x101360b3, 0x2)   jad(0x10136091, -0x24);               /* ja 0x10136091 */
    II(0x101360b5, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101360b7, 0x4)   mov(ax, memw_a32(ss, ebp - 0x24));    /* mov ax, [ebp-0x24] */
    II(0x101360bb, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x101360be, 0x7)   jmpd_abs_switch(memd_a32(cs, eax + 0x10136094), (0x10136064)(0x1013606d)(0x10136076)(0x1013607f)(0x10136088)); /* jmp dword near [cs:eax+0x10136094] */
l_0x101360c5:
    II(0x101360c5, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x101360c9, 0x3)   cmp(eax, 0x4);                        /* cmp eax, 0x4 */
    II(0x101360cc, 0x2)   jged(0x101360e0, 0x12);               /* jge 0x101360e0 */
    II(0x101360ce, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x101360d1, 0x2)   add(al, 0x6b);                        /* add al, 0x6b */
    II(0x101360d3, 0x3)   movsx(eax, al);                       /* movsx eax, al */
    II(0x101360d6, 0x5)   calld(0x10075fdc, -0xc00ff);          /* call 0x10075fdc */
    II(0x101360db, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x101360de, 0x2)   jmpd(0x101360e7, 0x7);                /* jmp 0x101360e7 */
l_0x101360e0:
    II(0x101360e0, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x1);    /* mov dword [ebp-0xc], 0x1 */
l_0x101360e7:
    II(0x101360e7, 0x5)   cmp(memw_a32(ss, ebp - 0xc), 0);      /* cmp word [ebp-0xc], 0x0 */
    II(0x101360ec, 0x2)   jnzd(0x1013610e, 0x20);               /* jnz 0x1013610e */
    II(0x101360ee, 0x5)   calld(/* sys */ 0x10165e9b, 0x2fda8); /* call 0x10165e9b */
    II(0x101360f3, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x101360f6, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x101360f9, 0x1)   inc(eax);                             /* inc eax */
    II(0x101360fa, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x101360fd, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x10136101, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x10136104, 0x2)   add(al, 0x6b);                        /* add al, 0x6b */
    II(0x10136106, 0x3)   movsx(eax, al);                       /* movsx eax, al */
    II(0x10136109, 0x5)   calld(0x100caafc, -0x6b612);          /* call 0x100caafc */
l_0x1013610e:
    II(0x1013610e, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x10136112, 0x6)   imul(edx, edx, 0x247);                /* imul edx, edx, 0x247 */
    II(0x10136118, 0x3)   mov(al, memb_a32(ss, ebp - 0xc));     /* mov al, [ebp-0xc] */
    II(0x1013611b, 0x6)   mov(memb_a32(ds, edx + 0x101ca4ef), al); /* mov [edx+0x101ca4ef], al */
    II(0x10136121, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x10136124, 0x5)   calld(0x101365a4, 0x47b);             /* call 0x101365a4 */
    II(0x10136129, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1013612c, 0x5)   calld(0x10133cdc, -0x2455);           /* call 0x10133cdc */
    II(0x10136131, 0x7)   mov(memd_a32(ss, ebp - 0x10), 0);     /* mov dword [ebp-0x10], 0x0 */
    II(0x10136138, 0x2)   jmpd(0x10136140, 0x6);                /* jmp 0x10136140 */
l_0x1013613a:
    II(0x1013613a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1013613d, 0x3)   inc(memd_a32(ss, ebp - 0x10));        /* inc dword [ebp-0x10] */
l_0x10136140:
    II(0x10136140, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x10136144, 0x3)   cmp(eax, 0x5d);                       /* cmp eax, 0x5d */
    II(0x10136147, 0x6)   jged(0x101361e6, 0x99);               /* jge dword 0x101361e6 */
    II(0x1013614d, 0x5)   mov(eax, 0x24);                       /* mov eax, 0x24 */
    II(0x10136152, 0x5)   calld(sys_new, 0x2fca9);              /* call 0x10165e00 */
    II(0x10136157, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
//    II(0x1013615a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x1013615d, 0x3)   mov(memd_a32(ss, ebp - 0x2c), eax);   /* mov [ebp-0x2c], eax */
    II(0x10136160, 0x4)   cmp(memd_a32(ss, ebp - 0x2c), 0);     /* cmp dword [ebp-0x2c], 0x0 */
    II(0x10136164, 0x2)   jzd(0x10136189, 0x23);                /* jz 0x10136189 */
    II(0x10136166, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x1013616a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1013616d, 0x5)   calld(0x100cb6b0, -0x6aac2);          /* call 0x100cb6b0 */
    II(0x10136172, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x28));   /* mov ebx, [ebp-0x28] */
    II(0x10136175, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10136177, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x10136179, 0x5)   calld(0x100ca2f8, -0x6be86);          /* call 0x100ca2f8 */
    II(0x1013617e, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
//    II(0x10136181, 0x3)   mov(eax, memd_a32(ss, ebp - 0x30));   /* mov eax, [ebp-0x30] */
    II(0x10136184, 0x3)   mov(memd_a32(ss, ebp - 0x34), eax);   /* mov [ebp-0x34], eax */
    II(0x10136187, 0x2)   jmpd(0x1013618f, 0x6);                /* jmp 0x1013618f */
l_0x10136189:
    II(0x10136189, 0x3)   mov(eax, memd_a32(ss, ebp - 0x2c));   /* mov eax, [ebp-0x2c] */
    II(0x1013618c, 0x3)   mov(memd_a32(ss, ebp - 0x34), eax);   /* mov [ebp-0x34], eax */
l_0x1013618f:
    II(0x1013618f, 0x3)   mov(edx, memd_a32(ss, ebp - 0x34));   /* mov edx, [ebp-0x34] */
    II(0x10136192, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10136195, 0x5)   calld(0x100cb77c, -0x6aa1e);          /* call 0x100cb77c */
    II(0x1013619a, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x1013619d, 0x5)   calld(0x100cb74c, -0x6aa56);          /* call 0x100cb74c */
    II(0x101361a2, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x101361a6, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x101361aa, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x101361ac, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x101361ae, 0x5)   calld(0x10135fcc, -0x1e7);            /* call 0x10135fcc */
    II(0x101361b3, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101361b6, 0x5)   calld(0x100cb74c, -0x6aa6f);          /* call 0x100cb74c */
    II(0x101361bb, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x101361bf, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x20));   /* mov ecx, [ebp-0x20] */
    II(0x101361c2, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x101361c4, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x101361c6, 0x5)   calld(0x10136564, 0x399);             /* call 0x10136564 */
    II(0x101361cb, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101361ce, 0x5)   calld(0x100cb74c, -0x6aa87);          /* call 0x100cb74c */
    II(0x101361d3, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x101361d5, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x10)); /* movsx edx, word [ebp-0x10] */
    II(0x101361d9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x101361dc, 0x5)   calld(0x100cb63c, -0x6aba5);          /* call 0x100cb63c */
    II(0x101361e1, 0x5)   jmpd(0x1013613a, -0xac);              /* jmp 0x1013613a */
l_0x101361e6:
    II(0x101361e6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101361e8, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x101361eb, 0x5)   calld(0x10075eec, -0xc0304);          /* call 0x10075eec */
    II(0x101361f0, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101361f2, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101361f3, 0x1)   popd(edi);                            /* pop edi */
    II(0x101361f4, 0x1)   popd(esi);                            /* pop esi */
    II(0x101361f5, 0x1)   popd(edx);                            /* pop edx */
    II(0x101361f6, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x101361f7, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x101361f8, 0x1)   retd();                               /* ret */
FUNC_END

