FUNC_BEGIN(0x100cdf95, 0x892e6549d04c872d, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0xb3, 0x7d, 0x9, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x28, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0xc7, 0x45, 0xe8, 0, 0, 0, 0, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x67, 0xc0, 0xff, 0xff, 0x89, 0x45, 0xdc, 0x80, 0x65, 0xf4, 0xfe, 0xc7, 0x45, 0xe4, 0x4b, 0, 0, 0, 0x8b, 0x45, 0xe8, 0x66, 0x3b, 0x45, 0xe4, 0xf, 0x8d, 0x84, 0, 0, 0, 0x8b, 0x45, 0xe8, 0xff, 0x45, 0xe8, 0x98, 0x1, 0xc0, 0x66, 0x8b, 0x80, 0x78, 0x7b, 0x1b, 0x10, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xe8, 0xff, 0x45, 0xe8, 0x98, 0x1, 0xc0, 0x66, 0x8b, 0x80, 0x78, 0x7b, 0x1b, 0x10, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xf0, 0x66, 0x3b, 0x45, 0xfc, 0x75, 0x4a, 0xff, 0x4d, 0xec, 0x66, 0x83, 0x7d, 0xec, 0xff, 0x74, 0x20, 0x8b, 0x45, 0xe8, 0xff, 0x45, 0xe8, 0x98, 0x1, 0xc0, 0x66, 0x8b, 0x80, 0x78, 0x7b, 0x1b, 0x10, 0x89, 0x45, 0xd8, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0xe0, 0xe8, 0x71, 0xd2, 0xfb, 0xff, 0xeb, 0xd6, 0xe8, 0x36, 0xeb, 0xfc, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xe0, 0x8b, 0x45, 0xf8, 0xe8, 0x63, 0xea, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xad, 0xaa, 0xfb, 0xff, 0xeb, 0x35, 0x8b, 0x45, 0xec, 0x1, 0x45, 0xe8, 0xe9, 0x6f, 0xff, 0xff, 0xff, 0xe8, 0xb, 0xeb, 0xfc, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8d, 0x55, 0xe0, 0x8b, 0x45, 0xf8, 0xe8, 0x38, 0xea, 0xfc, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x82, 0xaa, 0xfb, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x76, 0xaa, 0xfb, 0xff, 0x8b, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100cdf95, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x100cdf9a, 0x5)   calld(sys_check_available_stack_size, 0x97db3); /* call 0x10165d52 */
    II(0x100cdf9f, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100cdfa0, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100cdfa1, 0x1)   pushd(esi);                           /* push esi */
    II(0x100cdfa2, 0x1)   pushd(edi);                           /* push edi */
    II(0x100cdfa3, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100cdfa4, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100cdfa6, 0x6)   sub(esp, 0x28);                       /* sub esp, 0x28 */
    II(0x100cdfac, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100cdfaf, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100cdfb2, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0);     /* mov dword [ebp-0x18], 0x0 */
    II(0x100cdfb9, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100cdfbd, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100cdfc0, 0x5)   calld(0x100ca02c, -0x3f99);           /* call 0x100ca02c */
    II(0x100cdfc5, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
    II(0x100cdfc8, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100cdfcc, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0x4b);  /* mov dword [ebp-0x1c], 0x4b */
l_0x100cdfd3:
    II(0x100cdfd3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100cdfd6, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x1c));    /* cmp ax, [ebp-0x1c] */
    II(0x100cdfda, 0x6)   jged(0x100ce064, 0x84);               /* jge dword 0x100ce064 */
    II(0x100cdfe0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100cdfe3, 0x3)   inc(memd_a32(ss, ebp - 0x18));        /* inc dword [ebp-0x18] */
    II(0x100cdfe6, 0x1)   cwde();                               /* cwde */
    II(0x100cdfe7, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100cdfe9, 0x7)   mov(ax, memw_a32(ds, eax + 0x101b7b78)); /* mov ax, [eax+0x101b7b78] */
    II(0x100cdff0, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100cdff3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100cdff6, 0x3)   inc(memd_a32(ss, ebp - 0x18));        /* inc dword [ebp-0x18] */
    II(0x100cdff9, 0x1)   cwde();                               /* cwde */
    II(0x100cdffa, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100cdffc, 0x7)   mov(ax, memw_a32(ds, eax + 0x101b7b78)); /* mov ax, [eax+0x101b7b78] */
    II(0x100ce003, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100ce006, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100ce009, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x100ce00d, 0x2)   jnzd(0x100ce059, 0x4a);               /* jnz 0x100ce059 */
l_0x100ce00f:
    II(0x100ce00f, 0x3)   dec(memd_a32(ss, ebp - 0x14));        /* dec dword [ebp-0x14] */
    II(0x100ce012, 0x5)   cmp(memw_a32(ss, ebp - 0x14), -0x1 /* 0xff */); /* cmp word [ebp-0x14], 0xff */
    II(0x100ce017, 0x2)   jzd(0x100ce039, 0x20);                /* jz 0x100ce039 */
    II(0x100ce019, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100ce01c, 0x3)   inc(memd_a32(ss, ebp - 0x18));        /* inc dword [ebp-0x18] */
    II(0x100ce01f, 0x1)   cwde();                               /* cwde */
    II(0x100ce020, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100ce022, 0x7)   mov(ax, memw_a32(ds, eax + 0x101b7b78)); /* mov ax, [eax+0x101b7b78] */
    II(0x100ce029, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x100ce02c, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100ce02f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100ce032, 0x5)   calld(0x1008b2a8, -0x42d8f);          /* call 0x1008b2a8 */
    II(0x100ce037, 0x2)   jmpd(0x100ce00f, -0x2a);              /* jmp 0x100ce00f */
l_0x100ce039:
    II(0x100ce039, 0x5)   calld(0x1009cb74, -0x314ca);          /* call 0x1009cb74 */
    II(0x100ce03e, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100ce040, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100ce042, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x100ce045, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ce048, 0x5)   calld(0x1009cab0, -0x3159d);          /* call 0x1009cab0 */
    II(0x100ce04d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100ce04f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100ce052, 0x5)   calld(0x10088b04, -0x45553);          /* call 0x10088b04 */
    II(0x100ce057, 0x2)   jmpd(0x100ce08e, 0x35);               /* jmp 0x100ce08e */
l_0x100ce059:
    II(0x100ce059, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100ce05c, 0x3)   add(memd_a32(ss, ebp - 0x18), eax);   /* add [ebp-0x18], eax */
    II(0x100ce05f, 0x5)   jmpd(0x100cdfd3, -0x91);              /* jmp 0x100cdfd3 */
l_0x100ce064:
    II(0x100ce064, 0x5)   calld(0x1009cb74, -0x314f5);          /* call 0x1009cb74 */
    II(0x100ce069, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100ce06b, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x100ce06d, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x100ce070, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ce073, 0x5)   calld(0x1009cab0, -0x315c8);          /* call 0x1009cab0 */
    II(0x100ce078, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100ce07a, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100ce07d, 0x5)   calld(0x10088b04, -0x4557e);          /* call 0x10088b04 */
    II(0x100ce082, 0x2)   jmpd(0x100ce08e, 0xa);                /* jmp 0x100ce08e */
//  II(0x100ce084, 0xa)   /* Недостижимый код. */
l_0x100ce08e:
    II(0x100ce08e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ce091, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100ce093, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100ce094, 0x1)   popd(edi);                            /* pop edi */
    II(0x100ce095, 0x1)   popd(esi);                            /* pop esi */
    II(0x100ce096, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100ce097, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100ce098, 0x1)   retd();                               /* ret */
FUNC_END

