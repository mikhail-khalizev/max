FUNC_BEGIN(0x10113fec, 0x12467c7ba73c9f97, 0x20, ({0x68, 0x2c, 0, 0, 0, 0xe8, 0x5c, 0x1d, 0x5, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x8b, 0x40, 0x4, 0x83, 0xe8, 0xd, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x13, 0, 0x74, 0x44, 0xe8, 0xdf, 0x69, 0xfb, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xf4, 0x69, 0xfb, 0xff, 0x89, 0xc1, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0xb8, 0x20, 0x48, 0x1a, 0x10, 0xe8, 0xe4, 0x1c, 0, 0, 0x8a, 0x45, 0xf8, 0x4, 0xd, 0x88, 0x45, 0xf4, 0x31, 0xd2, 0xf, 0xbe, 0x45, 0xf4, 0xc1, 0xe0, 0x2, 0x3, 0x45, 0xfc, 0x8b, 0x40, 0x16, 0xe8, 0x18, 0xbb, 0xfb, 0xff, 0xe9, 0xb0, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x11, 0x25, 0xff, 0, 0, 0, 0x3d, 0xff, 0, 0, 0, 0x74, 0x19, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x11, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xa4, 0xf0, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0xfe, 0x48, 0xf, 0x8b, 0x55, 0xfc, 0x81, 0xc2, 0x1a, 0x2, 0, 0, 0x6b, 0x5d, 0xf8, 0x1e, 0x8b, 0x45, 0xfc, 0x5, 0x38, 0x3, 0, 0, 0x1, 0xd8, 0xe8, 0x28, 0x1e, 0x5, 0, 0x8b, 0x55, 0xf8, 0x1, 0xd2, 0x3, 0x55, 0xfc, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x14, 0x66, 0x89, 0x82, 0xdc, 0x4, 0, 0, 0x8b, 0x45, 0xfc, 0x3, 0x45, 0xf8, 0xc6, 0x80, 0xec, 0x4, 0, 0, 0x1, 0x8a, 0x45, 0xf8, 0x8b, 0x55, 0xfc, 0x88, 0x42, 0x11, 0x8b, 0x45, 0xf8, 0x1, 0xc0, 0x3, 0x45, 0xfc, 0x8a, 0x90, 0xe4, 0x4, 0, 0, 0x8b, 0x45, 0xfc, 0x88, 0x50, 0x12, 0x8b, 0x45, 0xfc, 0xfe, 0x40, 0xf, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0xb, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0x75, 0x7, 0x8b, 0x45, 0xfc, 0xc6, 0x40, 0xb, 0x1, 0xe8, 0x27, 0x6a, 0x1, 0, 0x8b, 0x45, 0xfc, 0xe8, 0xfd, 0xf7, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10113fec, 0x5)   pushd(0x2c);                          /* push dword 0x2c */
    II(0x10113ff1, 0x5)   calld(sys_check_available_stack_size, 0x51d5c); /* call 0x10165d52 */
    II(0x10113ff6, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10113ff7, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10113ff8, 0x1)   pushd(edx);                           /* push edx */
    II(0x10113ff9, 0x1)   pushd(esi);                           /* push esi */
    II(0x10113ffa, 0x1)   pushd(edi);                           /* push edi */
    II(0x10113ffb, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10113ffc, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10113ffe, 0x6)   sub(esp, 0xc);                        /* sub esp, 0xc */
    II(0x10114004, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x10114007, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011400a, 0x3)   mov(eax, memd_a32(ds, eax + 0x4));    /* mov eax, [eax+0x4] */
    II(0x1011400d, 0x3)   sub(eax, 0xd);                        /* sub eax, 0xd */
    II(0x10114010, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10114013, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10114016, 0x4)   cmp(memb_a32(ds, eax + 0x13), 0);     /* cmp byte [eax+0x13], 0x0 */
    II(0x1011401a, 0x2)   jzd(0x10114060, 0x44);                /* jz 0x10114060 */
    II(0x1011401c, 0x5)   calld(0x100caa00, -0x49621);          /* call 0x100caa00 */
    II(0x10114021, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10114026, 0x1)   pushd(eax);                           /* push eax */
    II(0x10114027, 0x5)   calld(0x100caa20, -0x4960c);          /* call 0x100caa20 */
    II(0x1011402c, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x1011402e, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x10114033, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10114035, 0x5)   mov(eax, 0x101a4820);                 /* mov eax, 0x101a4820 */ /* "The host has selected a load file that is not compatible with the load file on your system. You will not be able to start this session until the host selects another load file or selects a new world map." */
    II(0x1011403a, 0x5)   calld(0x10115d23, 0x1ce4);            /* call 0x10115d23 */
    II(0x1011403f, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x10114042, 0x2)   add(al, 0xd);                         /* add al, 0xd */
    II(0x10114044, 0x3)   mov(memb_a32(ss, ebp - 0xc), al);     /* mov [ebp-0xc], al */
    II(0x10114047, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10114049, 0x4)   movsx(eax, memb_a32(ss, ebp - 0xc));  /* movsx eax, byte [ebp-0xc] */
    II(0x1011404d, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x10114050, 0x3)   add(eax, memd_a32(ss, ebp - 0x4));    /* add eax, [ebp-0x4] */
    II(0x10114053, 0x3)   mov(eax, memd_a32(ds, eax + 0x16));   /* mov eax, [eax+0x16] */
    II(0x10114056, 0x5)   calld(0x100cfb73, -0x444e8);          /* call 0x100cfb73 */
    II(0x1011405b, 0x5)   jmpd(0x10114110, 0xb0);               /* jmp 0x10114110 */
l_0x10114060:
    II(0x10114060, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10114063, 0x3)   mov(al, memb_a32(ds, eax + 0x11));    /* mov al, [eax+0x11] */
    II(0x10114066, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1011406b, 0x5)   cmp(eax, 0xff);                       /* cmp eax, 0xff */
    II(0x10114070, 0x2)   jzd(0x1011408b, 0x19);                /* jz 0x1011408b */
    II(0x10114072, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10114075, 0x3)   mov(al, memb_a32(ds, eax + 0x11));    /* mov al, [eax+0x11] */
    II(0x10114078, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1011407a, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1011407d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10114080, 0x5)   calld(0x10113129, -0xf5c);            /* call 0x10113129 */
    II(0x10114085, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10114088, 0x3)   dec(memb_a32(ds, eax + 0xf));         /* dec byte [eax+0xf] */
l_0x1011408b:
    II(0x1011408b, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1011408e, 0x6)   add(edx, 0x21a);                      /* add edx, 0x21a */
    II(0x10114094, 0x4)   imul(ebx, memd_a32(ss, ebp - 0x8), 0x1e); /* imul ebx, [ebp-0x8], 0x1e */
    II(0x10114098, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011409b, 0x5)   add(eax, 0x338);                      /* add eax, 0x338 */
    II(0x101140a0, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x101140a2, 0x5)   calld(sys_strcpy, 0x51e28);           /* call 0x10165ecf */
    II(0x101140a7, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x101140aa, 0x2)   add(edx, edx);                        /* add edx, edx */
    II(0x101140ac, 0x3)   add(edx, memd_a32(ss, ebp - 0x4));    /* add edx, [ebp-0x4] */
    II(0x101140af, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140b2, 0x4)   mov(ax, memw_a32(ds, eax + 0x14));    /* mov ax, [eax+0x14] */
    II(0x101140b6, 0x7)   mov(memw_a32(ds, edx + 0x4dc), ax);   /* mov [edx+0x4dc], ax */
    II(0x101140bd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140c0, 0x3)   add(eax, memd_a32(ss, ebp - 0x8));    /* add eax, [ebp-0x8] */
    II(0x101140c3, 0x7)   mov(memb_a32(ds, eax + 0x4ec), 0x1);  /* mov byte [eax+0x4ec], 0x1 */
    II(0x101140ca, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x101140cd, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x101140d0, 0x3)   mov(memb_a32(ds, edx + 0x11), al);    /* mov [edx+0x11], al */
    II(0x101140d3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101140d6, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x101140d8, 0x3)   add(eax, memd_a32(ss, ebp - 0x4));    /* add eax, [ebp-0x4] */
    II(0x101140db, 0x6)   mov(dl, memb_a32(ds, eax + 0x4e4));   /* mov dl, [eax+0x4e4] */
    II(0x101140e1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140e4, 0x3)   mov(memb_a32(ds, eax + 0x12), dl);    /* mov [eax+0x12], dl */
    II(0x101140e7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140ea, 0x3)   inc(memb_a32(ds, eax + 0xf));         /* inc byte [eax+0xf] */
    II(0x101140ed, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140f0, 0x3)   mov(al, memb_a32(ds, eax + 0xb));     /* mov al, [eax+0xb] */
    II(0x101140f3, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x101140f8, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x101140fa, 0x2)   jnzd(0x10114103, 0x7);                /* jnz 0x10114103 */
    II(0x101140fc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101140ff, 0x4)   mov(memb_a32(ds, eax + 0xb), 0x1);    /* mov byte [eax+0xb], 0x1 */
l_0x10114103:
    II(0x10114103, 0x5)   calld(0x1012ab2f, 0x16a27);           /* call 0x1012ab2f */
    II(0x10114108, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011410b, 0x5)   calld(0x1011390d, -0x803);            /* call 0x1011390d */
l_0x10114110:
    II(0x10114110, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10114112, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10114113, 0x1)   popd(edi);                            /* pop edi */
    II(0x10114114, 0x1)   popd(esi);                            /* pop esi */
    II(0x10114115, 0x1)   popd(edx);                            /* pop edx */
    II(0x10114116, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10114117, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10114118, 0x1)   retd();                               /* ret */
FUNC_END

