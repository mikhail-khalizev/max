FUNC_BEGIN(0x1015f502, 0xccadffef108b356d, 0x20, ({0x68, 0x7c, 0, 0, 0, 0xe8, 0x46, 0x68, 0, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x4c, 0, 0, 0, 0x89, 0x45, 0xfc, 0x31, 0xc0, 0x8b, 0x55, 0xfc, 0x8a, 0x42, 0x26, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xfc, 0xe8, 0x7c, 0x31, 0xff, 0xff, 0x8d, 0x5d, 0xb8, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x24, 0xbb, 0xf2, 0xff, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xbc, 0xe8, 0xa8, 0x71, 0xf1, 0xff, 0x89, 0x45, 0xc0, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xc4, 0xe8, 0x95, 0x71, 0xf1, 0xff, 0x89, 0x45, 0xc8, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xcc, 0xe8, 0x82, 0x71, 0xf1, 0xff, 0x89, 0x45, 0xd0, 0x80, 0x65, 0xf8, 0xfe, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x41, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x43, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x52, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xfc, 0xe8, 0x31, 0xfd, 0xff, 0xff, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc9, 0x31, 0xdb, 0xf, 0xbf, 0x55, 0xe0, 0xf, 0xbf, 0x45, 0xe8, 0xe8, 0xe0, 0x4d, 0xf1, 0xff, 0xe8, 0xca, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xdf, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xe0, 0x50, 0xf, 0xbf, 0x45, 0xe8, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xec, 0xba, 0x28, 0, 0, 0, 0x8d, 0x45, 0xd4, 0xe8, 0xef, 0xac, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xbc, 0xe8, 0x23, 0xb6, 0xf2, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd4, 0xe8, 0x2d, 0x69, 0xf1, 0xff, 0x8b, 0x45, 0xe8, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xe0, 0x89, 0x45, 0xe4, 0x8d, 0x5d, 0xe4, 0x8d, 0x55, 0xf0, 0xf, 0xbf, 0x45, 0xec, 0xe8, 0xdf, 0xaa, 0xff, 0xff, 0xe8, 0x65, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x7a, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0xf, 0xbf, 0x45, 0xf0, 0x50, 0x8d, 0x45, 0xbc, 0xe8, 0x2f, 0x6f, 0xf1, 0xff, 0xe8, 0xba, 0x6b, 0xf1, 0xff, 0x89, 0xc1, 0xf, 0xbf, 0x5d, 0xec, 0xba, 0x2, 0, 0, 0, 0x8d, 0x45, 0xd8, 0xe8, 0x7d, 0xac, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xc4, 0xe8, 0xb1, 0xb5, 0xf2, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0xbb, 0x68, 0xf1, 0xff, 0xe8, 0xe, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x23, 0x35, 0xfa, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xa1, 0x5c, 0x85, 0x1c, 0x10, 0x31, 0xd2, 0x8a, 0x50, 0x1, 0xe8, 0x5, 0x68, 0, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x98, 0x50, 0xf, 0xbf, 0x45, 0xe4, 0x50, 0xf, 0xbf, 0x45, 0xf0, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xec, 0xba, 0x12, 0, 0, 0, 0x8d, 0x45, 0xdc, 0xe8, 0x1f, 0xac, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xcc, 0xe8, 0x53, 0xb5, 0xf2, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x5d, 0x68, 0xf1, 0xff, 0xf, 0xbf, 0x5d, 0xe0, 0xf, 0xbf, 0x55, 0xe8, 0x8d, 0x45, 0xbc, 0xe8, 0xdd, 0xb4, 0xf2, 0xff, 0xe8, 0x7f, 0x3b, 0, 0, 0x8d, 0x45, 0xbc, 0xe8, 0x88, 0x6e, 0xf1, 0xff, 0xc6, 0x40, 0x2d, 0x4, 0x8d, 0x45, 0xcc, 0xe8, 0x7c, 0x6e, 0xf1, 0xff, 0xc6, 0x40, 0x2d, 0x4, 0x8d, 0x45, 0xc4, 0xe8, 0x70, 0x6e, 0xf1, 0xff, 0xc6, 0x40, 0x2d, 0x4, 0x8d, 0x45, 0xbc, 0xe8, 0x64, 0x6e, 0xf1, 0xff, 0xc6, 0x40, 0x3d, 0x1, 0x8d, 0x45, 0xbc, 0xe8, 0x58, 0x6e, 0xf1, 0xff, 0xc6, 0x40, 0x3e, 0x17, 0xba, 0x20, 0, 0, 0, 0x8d, 0x45, 0xbc, 0xe8, 0xd3, 0x6e, 0xf1, 0xff, 0xe8, 0xd8, 0x37, 0, 0, 0xba, 0x20, 0, 0, 0, 0x8d, 0x45, 0xcc, 0xe8, 0xc1, 0x6e, 0xf1, 0xff, 0xe8, 0xc6, 0x37, 0, 0, 0xba, 0x20, 0, 0, 0, 0x8d, 0x45, 0xc4, 0xe8, 0xaf, 0x6e, 0xf1, 0xff, 0xe8, 0xb4, 0x37, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xb8, 0xe8, 0x11, 0xb6, 0xfd, 0xff, 0x84, 0xc0, 0x74, 0x3a, 0x8d, 0x45, 0xb8, 0xe8, 0x18, 0xb8, 0xf2, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xbc, 0xe8, 0xfe, 0x6d, 0xf1, 0xff, 0xe8, 0x72, 0x30, 0xff, 0xff, 0x8d, 0x45, 0xb8, 0xe8, 0xa5, 0xb7, 0xf2, 0xff, 0x89, 0x45, 0xb4, 0x8b, 0x45, 0xb4, 0x8b, 0x58, 0x2, 0x8d, 0x45, 0xc4, 0xe8, 0x3c, 0x6e, 0xf1, 0xff, 0x8b, 0x4d, 0xb4, 0x89, 0xc2, 0x89, 0xc8, 0xff, 0x53, 0x2c, 0x31, 0xd2, 0x8d, 0x45, 0xcc, 0xe8, 0x84, 0x67, 0xf1, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xc4, 0xe8, 0x7a, 0x67, 0xf1, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xbc, 0xe8, 0x70, 0x67, 0xf1, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xb8, 0xe8, 0xb6, 0x93, 0xf2, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x1015f502, 0x5)   pushd(0x7c);                          /* push dword 0x7c */
    II(0x1015f507, 0x5)   calld(sys_check_available_stack_size, 0x6846); /* call 0x10165d52 */
    II(0x1015f50c, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1015f50d, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1015f50e, 0x1)   pushd(edx);                           /* push edx */
    II(0x1015f50f, 0x1)   pushd(esi);                           /* push esi */
    II(0x1015f510, 0x1)   pushd(edi);                           /* push edi */
    II(0x1015f511, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1015f512, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1015f514, 0x6)   sub(esp, 0x4c);                       /* sub esp, 0x4c */
    II(0x1015f51a, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x1015f51d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015f51f, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1015f522, 0x3)   mov(al, memb_a32(ds, edx + 0x26));    /* mov al, [edx+0x26] */
    II(0x1015f525, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x1015f528, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015f52b, 0x5)   calld(0x101526ac, -0xce84);           /* call 0x101526ac */
    II(0x1015f530, 0x3)   lea(ebx, ebp - 0x48);                 /* lea ebx, [ebp-0x48] */
    II(0x1015f533, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f535, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x1015f537, 0x5)   calld(0x1008b060, -0xd44dc);          /* call 0x1008b060 */
    II(0x1015f53c, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1015f540, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f543, 0x5)   calld(my_ctor_0x101b38f8, -0xe8e58);  /* call 0x100766f0 */
    II(0x1015f548, 0x3)   mov(memd_a32(ss, ebp - 0x40), eax);   /* mov [ebp-0x40], eax */
    II(0x1015f54b, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1015f54f, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1015f553, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f556, 0x5)   calld(my_ctor_0x101b38f8, -0xe8e6b);  /* call 0x100766f0 */
    II(0x1015f55b, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
    II(0x1015f55e, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1015f562, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x1015f566, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1015f569, 0x5)   calld(my_ctor_0x101b38f8, -0xe8e7e);  /* call 0x100766f0 */
    II(0x1015f56e, 0x3)   mov(memd_a32(ss, ebp - 0x30), eax);   /* mov [ebp-0x30], eax */
    II(0x1015f571, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x1015f575, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015f578, 0x4)   mov(ax, memw_a32(ds, eax + 0x41));    /* mov ax, [eax+0x41] */
    II(0x1015f57c, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x1015f57f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015f582, 0x4)   mov(ax, memw_a32(ds, eax + 0x43));    /* mov ax, [eax+0x43] */
    II(0x1015f586, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x1015f589, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015f58c, 0x4)   mov(ax, memw_a32(ds, eax + 0x52));    /* mov ax, [eax+0x52] */
    II(0x1015f590, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x1015f593, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015f596, 0x5)   calld(0x1015f2cc, -0x2cf);            /* call 0x1015f2cc */
    II(0x1015f59b, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x1015f5a0, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5a1, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015f5a3, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5a4, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x1015f5a6, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x1015f5a8, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x1015f5ac, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x1015f5b0, 0x5)   calld(0x10074395, -0xeb220);          /* call 0x10074395 */
    II(0x1015f5b5, 0x5)   calld(0x10102b84, -0x5ca36);          /* call 0x10102b84 */
    II(0x1015f5ba, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f5bf, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5c0, 0x5)   calld(0x10102ba4, -0x5ca21);          /* call 0x10102ba4 */
    II(0x1015f5c5, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f5ca, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5cb, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015f5cd, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5ce, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x20)); /* movsx eax, word [ebp-0x20] */
    II(0x1015f5d2, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5d3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x1015f5d7, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f5d8, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x1015f5da, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x1015f5de, 0x5)   mov(edx, 0x28);                       /* mov edx, 0x28 */
    II(0x1015f5e3, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1015f5e6, 0x5)   calld(0x1015a2da, -0x5311);           /* call 0x1015a2da */
    II(0x1015f5eb, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f5ed, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f5f0, 0x5)   calld(0x1008ac18, -0xd49dd);          /* call 0x1008ac18 */
    II(0x1015f5f5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f5f7, 0x3)   lea(eax, ebp - 0x2c);                 /* lea eax, [ebp-0x2c] */
    II(0x1015f5fa, 0x5)   calld(0x10075f2c, -0xe96d3);          /* call 0x10075f2c */
    II(0x1015f5ff, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x1015f602, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1015f605, 0x3)   mov(eax, memd_a32(ss, ebp - 0x20));   /* mov eax, [ebp-0x20] */
    II(0x1015f608, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x1015f60b, 0x3)   lea(ebx, ebp - 0x1c);                 /* lea ebx, [ebp-0x1c] */
    II(0x1015f60e, 0x3)   lea(edx, ebp - 0x10);                 /* lea edx, [ebp-0x10] */
    II(0x1015f611, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x1015f615, 0x5)   calld(0x1015a0f9, -0x5521);           /* call 0x1015a0f9 */
    II(0x1015f61a, 0x5)   calld(0x10102b84, -0x5ca9b);          /* call 0x10102b84 */
    II(0x1015f61f, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f624, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f625, 0x5)   calld(0x10102ba4, -0x5ca86);          /* call 0x10102ba4 */
    II(0x1015f62a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f62f, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f630, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015f632, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f633, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x1015f637, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f638, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x1015f63c, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f63d, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f640, 0x5)   calld(0x10076574, -0xe90d1);          /* call 0x10076574 */
    II(0x1015f645, 0x5)   calld(0x10076204, -0xe9446);          /* call 0x10076204 */
    II(0x1015f64a, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x1015f64c, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x1015f650, 0x5)   mov(edx, 0x2);                        /* mov edx, 0x2 */
    II(0x1015f655, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x1015f658, 0x5)   calld(0x1015a2da, -0x5383);           /* call 0x1015a2da */
    II(0x1015f65d, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f65f, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f662, 0x5)   calld(0x1008ac18, -0xd4a4f);          /* call 0x1008ac18 */
    II(0x1015f667, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f669, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x1015f66c, 0x5)   calld(0x10075f2c, -0xe9745);          /* call 0x10075f2c */
    II(0x1015f671, 0x5)   calld(0x10102b84, -0x5caf2);          /* call 0x10102b84 */
    II(0x1015f676, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f67b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f67c, 0x5)   calld(0x10102ba4, -0x5cadd);          /* call 0x10102ba4 */
    II(0x1015f681, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015f686, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f687, 0x5)   mov(eax, memd_a32(ds, 0x101c855c));   /* mov eax, [0x101c855c] */
    II(0x1015f68c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f68e, 0x3)   mov(dl, memb_a32(ds, eax + 0x1));     /* mov dl, [eax+0x1] */
    II(0x1015f691, 0x5)   calld(/* sys */ 0x10165e9b, 0x6805);  /* call 0x10165e9b */
    II(0x1015f696, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x1015f699, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x1015f69c, 0x1)   cwde();                               /* cwde */
    II(0x1015f69d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f69e, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x1c)); /* movsx eax, word [ebp-0x1c] */
    II(0x1015f6a2, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f6a3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x1015f6a7, 0x1)   pushd(eax);                           /* push eax */
    II(0x1015f6a8, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x1015f6aa, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x1015f6ae, 0x5)   mov(edx, 0x12);                       /* mov edx, 0x12 */
    II(0x1015f6b3, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1015f6b6, 0x5)   calld(0x1015a2da, -0x53e1);           /* call 0x1015a2da */
    II(0x1015f6bb, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f6bd, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1015f6c0, 0x5)   calld(0x1008ac18, -0xd4aad);          /* call 0x1008ac18 */
    II(0x1015f6c5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f6c7, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1015f6ca, 0x5)   calld(0x10075f2c, -0xe97a3);          /* call 0x10075f2c */
    II(0x1015f6cf, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x20)); /* movsx ebx, word [ebp-0x20] */
    II(0x1015f6d3, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x18)); /* movsx edx, word [ebp-0x18] */
    II(0x1015f6d7, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f6da, 0x5)   calld(0x1008abbc, -0xd4b23);          /* call 0x1008abbc */
    II(0x1015f6df, 0x5)   calld(0x10163263, 0x3b7f);            /* call 0x10163263 */
    II(0x1015f6e4, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f6e7, 0x5)   calld(0x10076574, -0xe9178);          /* call 0x10076574 */
    II(0x1015f6ec, 0x4)   mov(memb_a32(ds, eax + 0x2d), 0x4);   /* mov byte [eax+0x2d], 0x4 */
    II(0x1015f6f0, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1015f6f3, 0x5)   calld(0x10076574, -0xe9184);          /* call 0x10076574 */
    II(0x1015f6f8, 0x4)   mov(memb_a32(ds, eax + 0x2d), 0x4);   /* mov byte [eax+0x2d], 0x4 */
    II(0x1015f6fc, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f6ff, 0x5)   calld(0x10076574, -0xe9190);          /* call 0x10076574 */
    II(0x1015f704, 0x4)   mov(memb_a32(ds, eax + 0x2d), 0x4);   /* mov byte [eax+0x2d], 0x4 */
    II(0x1015f708, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f70b, 0x5)   calld(0x10076574, -0xe919c);          /* call 0x10076574 */
    II(0x1015f710, 0x4)   mov(memb_a32(ds, eax + 0x3d), 0x1);   /* mov byte [eax+0x3d], 0x1 */
    II(0x1015f714, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f717, 0x5)   calld(0x10076574, -0xe91a8);          /* call 0x10076574 */
    II(0x1015f71c, 0x4)   mov(memb_a32(ds, eax + 0x3e), 0x17);  /* mov byte [eax+0x3e], 0x17 */
    II(0x1015f720, 0x5)   mov(edx, 0x20);                       /* mov edx, 0x20 */
    II(0x1015f725, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f728, 0x5)   calld(0x10076600, -0xe912d);          /* call 0x10076600 */
    II(0x1015f72d, 0x5)   calld(0x10162f0a, 0x37d8);            /* call 0x10162f0a */
    II(0x1015f732, 0x5)   mov(edx, 0x20);                       /* mov edx, 0x20 */
    II(0x1015f737, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1015f73a, 0x5)   calld(0x10076600, -0xe913f);          /* call 0x10076600 */
    II(0x1015f73f, 0x5)   calld(0x10162f0a, 0x37c6);            /* call 0x10162f0a */
    II(0x1015f744, 0x5)   mov(edx, 0x20);                       /* mov edx, 0x20 */
    II(0x1015f749, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f74c, 0x5)   calld(0x10076600, -0xe9151);          /* call 0x10076600 */
    II(0x1015f751, 0x5)   calld(0x10162f0a, 0x37b4);            /* call 0x10162f0a */
    II(0x1015f756, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f758, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x1015f75b, 0x5)   calld(0x1013ad71, -0x249ef);          /* call 0x1013ad71 */
    II(0x1015f760, 0x2)   test(al, al);                         /* test al, al */
    II(0x1015f762, 0x2)   jzd(0x1015f79e, 0x3a);                /* jz 0x1015f79e */
    II(0x1015f764, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x1015f767, 0x5)   calld(0x1008af84, -0xd47e8);          /* call 0x1008af84 */
    II(0x1015f76c, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f76e, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f771, 0x5)   calld(0x10076574, -0xe9202);          /* call 0x10076574 */
    II(0x1015f776, 0x5)   calld(0x101527ed, -0xcf8e);           /* call 0x101527ed */
    II(0x1015f77b, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x1015f77e, 0x5)   calld(0x1008af28, -0xd485b);          /* call 0x1008af28 */
    II(0x1015f783, 0x3)   mov(memd_a32(ss, ebp - 0x4c), eax);   /* mov [ebp-0x4c], eax */
//    II(0x1015f786, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4c));   /* mov eax, [ebp-0x4c] */
    II(0x1015f789, 0x3)   mov(ebx, memd_a32(ds, eax + 0x2));    /* mov ebx, [eax+0x2] */
    II(0x1015f78c, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f78f, 0x5)   calld(0x100765d0, -0xe91c4);          /* call 0x100765d0 */
    II(0x1015f794, 0x3)   mov(ecx, memd_a32(ss, ebp - 0x4c));   /* mov ecx, [ebp-0x4c] */
    II(0x1015f797, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015f799, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x1015f79b, 0x3)   calld_abs(memd_a32(ds, ebx + 0x2c));  /* call dword near [ebx+0x2c] */
l_0x1015f79e:
    II(0x1015f79e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f7a0, 0x3)   lea(eax, ebp - 0x34);                 /* lea eax, [ebp-0x34] */
    II(0x1015f7a3, 0x5)   calld(0x10075f2c, -0xe987c);          /* call 0x10075f2c */
    II(0x1015f7a8, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f7aa, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x1015f7ad, 0x5)   calld(0x10075f2c, -0xe9886);          /* call 0x10075f2c */
    II(0x1015f7b2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f7b4, 0x3)   lea(eax, ebp - 0x44);                 /* lea eax, [ebp-0x44] */
    II(0x1015f7b7, 0x5)   calld(0x10075f2c, -0xe9890);          /* call 0x10075f2c */
    II(0x1015f7bc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015f7be, 0x3)   lea(eax, ebp - 0x48);                 /* lea eax, [ebp-0x48] */
    II(0x1015f7c1, 0x5)   calld(0x10088b7c, -0xd6c4a);          /* call 0x10088b7c */
    II(0x1015f7c6, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1015f7c8, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1015f7c9, 0x1)   popd(edi);                            /* pop edi */
    II(0x1015f7ca, 0x1)   popd(esi);                            /* pop esi */
    II(0x1015f7cb, 0x1)   popd(edx);                            /* pop edx */
    II(0x1015f7cc, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1015f7cd, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1015f7ce, 0x1)   retd();                               /* ret */
FUNC_END

