FUNC_BEGIN(0x101263d4, 0xf4d0bdd9262c78ed, 0x20, ({0x68, 0x3c, 0, 0, 0, 0xe8, 0x74, 0xf9, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x31, 0xc0, 0xe8, 0x4a, 0x24, 0xfc, 0xff, 0x89, 0x45, 0xf8, 0xc7, 0x5, 0x28, 0x56, 0x1c, 0x10, 0, 0, 0, 0, 0xc6, 0x5, 0x31, 0x56, 0x1c, 0x10, 0, 0xc6, 0x5, 0xb9, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0xba, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0xbb, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0xda, 0x37, 0x1c, 0x10, 0, 0xc6, 0x5, 0xbc, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0xc4, 0x59, 0x1c, 0x10, 0x1, 0xc6, 0x5, 0xc5, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0xb8, 0x59, 0x1c, 0x10, 0, 0xc6, 0x5, 0x30, 0x56, 0x1c, 0x10, 0, 0xc6, 0x5, 0xc9, 0x59, 0x1c, 0x10, 0x1, 0xc6, 0x5, 0x9e, 0x60, 0x1c, 0x10, 0, 0xc7, 0x45, 0xfc, 0x4, 0, 0, 0, 0xff, 0x4d, 0xfc, 0x66, 0x83, 0x7d, 0xfc, 0xff, 0x74, 0x61, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xc0, 0x59, 0x1c, 0x10, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xd0, 0x59, 0x1c, 0x10, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xd4, 0x59, 0x1c, 0x10, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xd8, 0x59, 0x1c, 0x10, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xdc, 0x59, 0x1c, 0x10, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc6, 0x80, 0xe0, 0x59, 0x1c, 0x10, 0, 0xbb, 0x6, 0, 0, 0, 0xba, 0xff, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc8, 0x6, 0xb8, 0x90, 0x40, 0x1c, 0x10, 0x1, 0xc8, 0xe8, 0x1c, 0xf9, 0x3, 0, 0xeb, 0x95, 0x66, 0xc7, 0x5, 0xd0, 0x40, 0x1c, 0x10, 0x3f, 0x91, 0xc7, 0x45, 0xfc, 0x20, 0, 0, 0, 0xff, 0x4d, 0xfc, 0x66, 0x83, 0x7d, 0xfc, 0xff, 0xf, 0x84, 0xc2, 0x1, 0, 0, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf4, 0xe9, 0x91, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa0, 0x60, 0x1c, 0x10, 0x66, 0x5d, 0x12, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa4, 0x60, 0x1c, 0x10, 0xd6, 0x5d, 0x12, 0x10, 0xe9, 0x8b, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa0, 0x60, 0x1c, 0x10, 0x4e, 0x5e, 0x12, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa4, 0x60, 0x1c, 0x10, 0xbb, 0x5e, 0x12, 0x10, 0xe9, 0x64, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa0, 0x60, 0x1c, 0x10, 0x31, 0x5f, 0x12, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa4, 0x60, 0x1c, 0x10, 0xba, 0x5f, 0x12, 0x10, 0xe9, 0x3d, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa0, 0x60, 0x1c, 0x10, 0x4c, 0x60, 0x12, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa4, 0x60, 0x1c, 0x10, 0x2d, 0x61, 0x12, 0x10, 0xe9, 0x16, 0x1, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa0, 0x60, 0x1c, 0x10, 0x2, 0x62, 0x12, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x3, 0xc7, 0x80, 0xa4, 0x60, 0x1c, 0x10, 0x72, 0x62, 0x12, 0x10, 0xe9, 0xef, 0, 0, 0, 0xba, 0x96, 0x81, 0x1a, 0x10, 0xb8, 0x74, 0x5e, 0x1c, 0x10, 0xe8, 0xe, 0xf9, 0x3, 0, 0xb8, 0x1, 0, 0, 0, 0x50, 0xb8, 0xff, 0, 0, 0, 0x50, 0xb8, 0x74, 0x5e, 0x1c, 0x10, 0x50, 0x68, 0xae, 0x1, 0, 0, 0xb9, 0x64, 0, 0, 0, 0xbb, 0x80, 0x2, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x16, 0x8b, 0x45, 0xf8, 0xe8, 0xec, 0xfa, 0xfe, 0xff, 0xe8, 0x13, 0x4c, 0x4, 0, 0x83, 0xf8, 0x1b, 0x75, 0xf6, 0xe9, 0xa2, 0, 0, 0, 0x90, 0xef, 0x64, 0x12, 0x10, 0x64, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x64, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x8b, 0x65, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0x16, 0x65, 0x12, 0x10, 0x64, 0x65, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0x16, 0x65, 0x12, 0x10, 0x16, 0x65, 0x12, 0x10, 0x16, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x64, 0x65, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0x16, 0x65, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0x3d, 0x65, 0x12, 0x10, 0xef, 0x64, 0x12, 0x10, 0x8b, 0x45, 0xf4, 0x89, 0x45, 0xf0, 0x66, 0x83, 0x7d, 0xf0, 0x1f, 0xf, 0x87, 0x21, 0xff, 0xff, 0xff, 0x31, 0xc0, 0x66, 0x8b, 0x45, 0xf0, 0xc1, 0xe0, 0x2, 0x2e, 0xff, 0xa0, 0, 0x66, 0x12, 0x10, 0xe9, 0x30, 0xfe, 0xff, 0xff, 0x66, 0xc7, 0x5, 0x9a, 0x60, 0x1c, 0x10, 0x28, 0, 0x66, 0xc7, 0x5, 0x9c, 0x60, 0x1c, 0x10, 0x17, 0, 0xa1, 0x98, 0x60, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x3d, 0x26, 0x2, 0, 0, 0x7f, 0xf, 0xa1, 0x9a, 0x60, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x3d, 0x26, 0x2, 0, 0, 0x7e, 0x48, 0xba, 0xb6, 0x81, 0x1a, 0x10, 0xb8, 0x74, 0x5e, 0x1c, 0x10, 0xe8, 0xea, 0xf7, 0x3, 0, 0xb8, 0x1, 0, 0, 0, 0x50, 0xb8, 0xff, 0, 0, 0, 0x50, 0xb8, 0x74, 0x5e, 0x1c, 0x10, 0x50, 0x68, 0xae, 0x1, 0, 0, 0xb9, 0x64, 0, 0, 0, 0xbb, 0x80, 0x2, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x50, 0x16, 0x8b, 0x45, 0xf8, 0xe8, 0xc8, 0xf9, 0xfe, 0xff, 0xe8, 0xef, 0x4a, 0x4, 0, 0x83, 0xf8, 0x1b, 0x75, 0xf6, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x101263d4, 0x5)   pushd(0x3c);                          /* push dword 0x3c */
    II(0x101263d9, 0x5)   calld(sys_check_available_stack_size, 0x3f974); /* call 0x10165d52 */
    II(0x101263de, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x101263df, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x101263e0, 0x1)   pushd(edx);                           /* push edx */
    II(0x101263e1, 0x1)   pushd(esi);                           /* push esi */
    II(0x101263e2, 0x1)   pushd(edi);                           /* push edi */
    II(0x101263e3, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x101263e4, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x101263e6, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x101263ec, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x101263ee, 0x5)   calld(0x100e883d, -0x3dbb6);          /* call 0x100e883d */
    II(0x101263f3, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x101263f6, 0xa)   mov(memd_a32(ds, 0x101c5628), 0);     /* mov dword [0x101c5628], 0x0 */
    II(0x10126400, 0x7)   mov(memb_a32(ds, 0x101c5631), 0);     /* mov byte [0x101c5631], 0x0 */
    II(0x10126407, 0x7)   mov(memb_a32(ds, 0x101c59b9), 0);     /* mov byte [0x101c59b9], 0x0 */
    II(0x1012640e, 0x7)   mov(memb_a32(ds, 0x101c59ba), 0);     /* mov byte [0x101c59ba], 0x0 */
    II(0x10126415, 0x7)   mov(memb_a32(ds, 0x101c59bb), 0);     /* mov byte [0x101c59bb], 0x0 */
    II(0x1012641c, 0x7)   mov(memb_a32(ds, 0x101c37da), 0);     /* mov byte [0x101c37da], 0x0 */
    II(0x10126423, 0x7)   mov(memb_a32(ds, 0x101c59bc), 0);     /* mov byte [0x101c59bc], 0x0 */
    II(0x1012642a, 0x7)   mov(memb_a32(ds, 0x101c59c4), 0x1);   /* mov byte [0x101c59c4], 0x1 */
    II(0x10126431, 0x7)   mov(memb_a32(ds, 0x101c59c5), 0);     /* mov byte [0x101c59c5], 0x0 */
    II(0x10126438, 0x7)   mov(memb_a32(ds, 0x101c59b8), 0);     /* mov byte [0x101c59b8], 0x0 */
    II(0x1012643f, 0x7)   mov(memb_a32(ds, 0x101c5630), 0);     /* mov byte [0x101c5630], 0x0 */
    II(0x10126446, 0x7)   mov(memb_a32(ds, 0x101c59c9), 0x1);   /* mov byte [0x101c59c9], 0x1 */
    II(0x1012644d, 0x7)   mov(memb_a32(ds, 0x101c609e), 0);     /* mov byte [0x101c609e], 0x0 */
    II(0x10126454, 0x7)   mov(memd_a32(ss, ebp - 0x4), 0x4);    /* mov dword [ebp-0x4], 0x4 */
l_0x1012645b:
    II(0x1012645b, 0x3)   dec(memd_a32(ss, ebp - 0x4));         /* dec dword [ebp-0x4] */
    II(0x1012645e, 0x5)   cmp(memw_a32(ss, ebp - 0x4), -0x1 /* 0xff */); /* cmp word [ebp-0x4], 0xff */
    II(0x10126463, 0x2)   jzd(0x101264c6, 0x61);                /* jz 0x101264c6 */
    II(0x10126465, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126469, 0x7)   mov(memb_a32(ds, eax + 0x101c59c0), 0); /* mov byte [eax+0x101c59c0], 0x0 */
    II(0x10126470, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126474, 0x7)   mov(memb_a32(ds, eax + 0x101c59d0), 0); /* mov byte [eax+0x101c59d0], 0x0 */
    II(0x1012647b, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012647f, 0x7)   mov(memb_a32(ds, eax + 0x101c59d4), 0); /* mov byte [eax+0x101c59d4], 0x0 */
    II(0x10126486, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012648a, 0x7)   mov(memb_a32(ds, eax + 0x101c59d8), 0); /* mov byte [eax+0x101c59d8], 0x0 */
    II(0x10126491, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126495, 0x7)   mov(memb_a32(ds, eax + 0x101c59dc), 0); /* mov byte [eax+0x101c59dc], 0x0 */
    II(0x1012649c, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x101264a0, 0x7)   mov(memb_a32(ds, eax + 0x101c59e0), 0); /* mov byte [eax+0x101c59e0], 0x0 */
    II(0x101264a7, 0x5)   mov(ebx, 0x6);                        /* mov ebx, 0x6 */
    II(0x101264ac, 0x5)   mov(edx, 0xff);                       /* mov edx, 0xff */
    II(0x101264b1, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x101264b5, 0x3)   imul(ecx, eax, 0x6);                  /* imul ecx, eax, 0x6 */
    II(0x101264b8, 0x5)   mov(eax, 0x101c4090);                 /* mov eax, 0x101c4090 */
    II(0x101264bd, 0x2)   add(eax, ecx);                        /* add eax, ecx */
    II(0x101264bf, 0x5)   calld(sys_memset, 0x3f91c);           /* call 0x10165de0 */
    II(0x101264c4, 0x2)   jmpd(0x1012645b, -0x6b);              /* jmp 0x1012645b */
l_0x101264c6:
    II(0x101264c6, 0x9)   mov(memw_a32(ds, 0x101c40d0), 0x913f); /* mov word [0x101c40d0], 0x913f */
    II(0x101264cf, 0x7)   mov(memd_a32(ss, ebp - 0x4), 0x20);   /* mov dword [ebp-0x4], 0x20 */
l_0x101264d6:
    II(0x101264d6, 0x3)   dec(memd_a32(ss, ebp - 0x4));         /* dec dword [ebp-0x4] */
    II(0x101264d9, 0x5)   cmp(memw_a32(ss, ebp - 0x4), -0x1 /* 0xff */); /* cmp word [ebp-0x4], 0xff */
    II(0x101264de, 0x6)   jzd(0x101266a6, 0x1c2);               /* jz dword 0x101266a6 */
    II(0x101264e4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101264e7, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x101264ea, 0x5)   jmpd(0x10126680, 0x191);              /* jmp 0x10126680 */
l_0x101264ef:
    II(0x101264ef, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x101264f3, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x101264f6, 0xa)   mov(memd_a32(ds, eax + 0x101c60a0), 0x10125d66); /* mov dword [eax+0x101c60a0], 0x10125d66 */
    II(0x10126500, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126504, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x10126507, 0xa)   mov(memd_a32(ds, eax + 0x101c60a4), 0x10125dd6); /* mov dword [eax+0x101c60a4], 0x10125dd6 */
    II(0x10126511, 0x5)   jmpd(0x101266a1, 0x18b);              /* jmp 0x101266a1 */
l_0x10126516:
    II(0x10126516, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012651a, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x1012651d, 0xa)   mov(memd_a32(ds, eax + 0x101c60a0), 0x10125e4e); /* mov dword [eax+0x101c60a0], 0x10125e4e */
    II(0x10126527, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012652b, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x1012652e, 0xa)   mov(memd_a32(ds, eax + 0x101c60a4), 0x10125ebb); /* mov dword [eax+0x101c60a4], 0x10125ebb */
    II(0x10126538, 0x5)   jmpd(0x101266a1, 0x164);              /* jmp 0x101266a1 */
l_0x1012653d:
    II(0x1012653d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126541, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x10126544, 0xa)   mov(memd_a32(ds, eax + 0x101c60a0), 0x10125f31); /* mov dword [eax+0x101c60a0], 0x10125f31 */
    II(0x1012654e, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126552, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x10126555, 0xa)   mov(memd_a32(ds, eax + 0x101c60a4), 0x10125fba); /* mov dword [eax+0x101c60a4], 0x10125fba */
    II(0x1012655f, 0x5)   jmpd(0x101266a1, 0x13d);              /* jmp 0x101266a1 */
l_0x10126564:
    II(0x10126564, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126568, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x1012656b, 0xa)   mov(memd_a32(ds, eax + 0x101c60a0), 0x1012604c); /* mov dword [eax+0x101c60a0], 0x1012604c */
    II(0x10126575, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10126579, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x1012657c, 0xa)   mov(memd_a32(ds, eax + 0x101c60a4), 0x1012612d); /* mov dword [eax+0x101c60a4], 0x1012612d */
    II(0x10126586, 0x5)   jmpd(0x101266a1, 0x116);              /* jmp 0x101266a1 */
l_0x1012658b:
    II(0x1012658b, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x1012658f, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x10126592, 0xa)   mov(memd_a32(ds, eax + 0x101c60a0), 0x10126202); /* mov dword [eax+0x101c60a0], 0x10126202 */
    II(0x1012659c, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x101265a0, 0x3)   shl(eax, 0x3);                        /* shl eax, 0x3 */
    II(0x101265a3, 0xa)   mov(memd_a32(ds, eax + 0x101c60a4), 0x10126272); /* mov dword [eax+0x101c60a4], 0x10126272 */
    II(0x101265ad, 0x5)   jmpd(0x101266a1, 0xef);               /* jmp 0x101266a1 */
l_0x101265b2:
    II(0x101265b2, 0x5)   mov(edx, 0x101a8196);                 /* mov edx, 0x101a8196 */ /* "packet length array out of sync" */
    II(0x101265b7, 0x5)   mov(eax, 0x101c5e74);                 /* mov eax, 0x101c5e74 */
    II(0x101265bc, 0x5)   calld(sys_strcpy, 0x3f90e);           /* call 0x10165ecf */
    II(0x101265c1, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x101265c6, 0x1)   pushd(eax);                           /* push eax */
    II(0x101265c7, 0x5)   mov(eax, 0xff);                       /* mov eax, 0xff */
    II(0x101265cc, 0x1)   pushd(eax);                           /* push eax */
    II(0x101265cd, 0x5)   mov(eax, 0x101c5e74);                 /* mov eax, 0x101c5e74 */
    II(0x101265d2, 0x1)   pushd(eax);                           /* push eax */
    II(0x101265d3, 0x5)   pushd(0x1ae);                         /* push dword 0x1ae */
    II(0x101265d8, 0x5)   mov(ecx, 0x64);                       /* mov ecx, 0x64 */
    II(0x101265dd, 0x5)   mov(ebx, 0x280);                      /* mov ebx, 0x280 */
    II(0x101265e2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101265e5, 0x3)   mov(edx, memd_a32(ds, eax + 0x16));   /* mov edx, [eax+0x16] */
//    II(0x101265e8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x101265eb, 0x5)   calld(0x101160dc, -0x10514);          /* call 0x101160dc */
l_0x101265f0:
    II(0x101265f0, 0x5)   calld(/* sys */ 0x1016b208, 0x44c13); /* call 0x1016b208 */
    II(0x101265f5, 0x3)   cmp(eax, 0x1b);                       /* cmp eax, 0x1b */
    II(0x101265f8, 0x2)   jnzd(0x101265f0, -0xa);               /* jnz 0x101265f0 */
    II(0x101265fa, 0x5)   jmpd(0x101266a1, 0xa2);               /* jmp 0x101266a1 */
//    II(0x101265ff, 0x1)   /* Выравнивание. */
//    II(0x10126600, 0x80)  /* Служебная область с абсолютными адресами переходов. {0x101264ef, 0x10126564, 0x1012653d, 0x1012653d, 0x10126564, 0x1012653d, 0x1012658b, 0x101264ef, 0x101264ef, 0x101264ef, 0x10126516, 0x10126564, 0x101264ef, 0x101264ef, 0x101264ef, 0x101264ef, 0x101264ef, 0x10126516, 0x10126516, 0x10126516, 0x1012653d, 0x101264ef, 0x101264ef, 0x101264ef, 0x1012653d, 0x1012653d, 0x10126564, 0x1012653d, 0x10126516, 0x101264ef, 0x1012653d, 0x101264ef}. */
l_0x10126680:
    II(0x10126680, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10126683, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10126686, 0x5)   cmp(memw_a32(ss, ebp - 0x10), 0x1f);  /* cmp word [ebp-0x10], 0x1f */
    II(0x1012668b, 0x6)   jad(0x101265b2, -0xdf);               /* ja dword 0x101265b2 */
    II(0x10126691, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10126693, 0x4)   mov(ax, memw_a32(ss, ebp - 0x10));    /* mov ax, [ebp-0x10] */
    II(0x10126697, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1012669a, 0x7)   jmpd_abs_switch(memd_a32(cs, eax + 0x10126600), (0x101264ef)(0x10126516)(0x1012653d)(0x10126564)(0x1012658b)); /* jmp dword near [cs:eax+0x10126600] */
l_0x101266a1:
    II(0x101266a1, 0x5)   jmpd(0x101264d6, -0x1d0);             /* jmp 0x101264d6 */
l_0x101266a6:
    II(0x101266a6, 0x9)   mov(memw_a32(ds, 0x101c609a), 0x28);  /* mov word [0x101c609a], 0x28 */
    II(0x101266af, 0x9)   mov(memw_a32(ds, 0x101c609c), 0x17);  /* mov word [0x101c609c], 0x17 */
    II(0x101266b8, 0x5)   mov(eax, memd_a32(ds, 0x101c6098));   /* mov eax, [0x101c6098] */
    II(0x101266bd, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x101266c0, 0x5)   cmp(eax, 0x226);                      /* cmp eax, 0x226 */
    II(0x101266c5, 0x2)   jgd(0x101266d6, 0xf);                 /* jg 0x101266d6 */
    II(0x101266c7, 0x5)   mov(eax, memd_a32(ds, 0x101c609a));   /* mov eax, [0x101c609a] */
    II(0x101266cc, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x101266cf, 0x5)   cmp(eax, 0x226);                      /* cmp eax, 0x226 */
    II(0x101266d4, 0x2)   jled(0x1012671e, 0x48);               /* jle 0x1012671e */
l_0x101266d6:
    II(0x101266d6, 0x5)   mov(edx, 0x101a81b6);                 /* mov edx, 0x101a81b6 */ /* "max packet length exceeded." */
    II(0x101266db, 0x5)   mov(eax, 0x101c5e74);                 /* mov eax, 0x101c5e74 */
    II(0x101266e0, 0x5)   calld(sys_strcpy, 0x3f7ea);           /* call 0x10165ecf */
    II(0x101266e5, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x101266ea, 0x1)   pushd(eax);                           /* push eax */
    II(0x101266eb, 0x5)   mov(eax, 0xff);                       /* mov eax, 0xff */
    II(0x101266f0, 0x1)   pushd(eax);                           /* push eax */
    II(0x101266f1, 0x5)   mov(eax, 0x101c5e74);                 /* mov eax, 0x101c5e74 */
    II(0x101266f6, 0x1)   pushd(eax);                           /* push eax */
    II(0x101266f7, 0x5)   pushd(0x1ae);                         /* push dword 0x1ae */
    II(0x101266fc, 0x5)   mov(ecx, 0x64);                       /* mov ecx, 0x64 */
    II(0x10126701, 0x5)   mov(ebx, 0x280);                      /* mov ebx, 0x280 */
    II(0x10126706, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10126709, 0x3)   mov(edx, memd_a32(ds, eax + 0x16));   /* mov edx, [eax+0x16] */
//    II(0x1012670c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012670f, 0x5)   calld(0x101160dc, -0x10638);          /* call 0x101160dc */
l_0x10126714:
    II(0x10126714, 0x5)   calld(/* sys */ 0x1016b208, 0x44aef); /* call 0x1016b208 */
    II(0x10126719, 0x3)   cmp(eax, 0x1b);                       /* cmp eax, 0x1b */
    II(0x1012671c, 0x2)   jnzd(0x10126714, -0xa);               /* jnz 0x10126714 */
l_0x1012671e:
    II(0x1012671e, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10126720, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10126721, 0x1)   popd(edi);                            /* pop edi */
    II(0x10126722, 0x1)   popd(esi);                            /* pop esi */
    II(0x10126723, 0x1)   popd(edx);                            /* pop edx */
    II(0x10126724, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10126725, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10126726, 0x1)   retd();                               /* ret */
FUNC_END

