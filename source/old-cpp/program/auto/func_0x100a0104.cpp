FUNC_BEGIN(0x100a0104, 0xa85801facaf484a2, 0x20, ({0x68, 0x4c, 0, 0, 0, 0xe8, 0x44, 0x5c, 0xc, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x38, 0, 0, 0, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xfc, 0x89, 0x5d, 0xf8, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x2, 0xe8, 0x6a, 0x68, 0xfd, 0xff, 0x83, 0xe8, 0x2, 0x89, 0x45, 0xf4, 0x8d, 0x45, 0xf4, 0x89, 0x45, 0xec, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x6, 0xe8, 0x6c, 0x1f, 0xfd, 0xff, 0x83, 0xe8, 0x6, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x12, 0xe8, 0x5b, 0x1f, 0xfd, 0xff, 0x83, 0xe8, 0x12, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x1e, 0xe8, 0x4a, 0x1f, 0xfd, 0xff, 0x83, 0xe8, 0x1e, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x2a, 0xe8, 0x39, 0x1f, 0xfd, 0xff, 0x83, 0xe8, 0x2a, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x36, 0xe8, 0x28, 0x1f, 0xfd, 0xff, 0x83, 0xe8, 0x36, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x44, 0xe8, 0x56, 0x65, 0xfd, 0xff, 0x83, 0xe8, 0x44, 0x89, 0x45, 0xf4, 0x8d, 0x45, 0xf4, 0x89, 0x45, 0xe8, 0xe8, 0x41, 0xb2, 0xfe, 0xff, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x48, 0xe8, 0x2b, 0xb0, 0xfe, 0xff, 0x83, 0xe8, 0x48, 0x89, 0x45, 0xf4, 0x8d, 0x45, 0xf4, 0x89, 0x45, 0xe4, 0x80, 0x4d, 0xf0, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x2b, 0x63, 0xfd, 0xff, 0x89, 0x45, 0xdc, 0x80, 0x65, 0xf0, 0xfe, 0x8b, 0x45, 0xfc, 0x8b, 0x55, 0xf4, 0x66, 0x89, 0x2, 0x8b, 0x55, 0xf8, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x2, 0xe8, 0xb9, 0xb0, 0, 0, 0x8b, 0x45, 0xf4, 0xc6, 0x40, 0x4d, 0, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x38, 0x61, 0xfd, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x32, 0x62, 0xfd, 0xff, 0x8b, 0x45, 0xf4, 0x66, 0xc7, 0x80, 0x73, 0x3, 0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0xc7, 0x80, 0x6f, 0x3, 0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0xc7, 0x80, 0x71, 0x3, 0, 0, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0xc7, 0x80, 0x6d, 0x3, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x2d, 0xab, 0x9, 0, 0x84, 0xc0, 0xf, 0x84, 0x3a, 0x2, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x4c, 0x61, 0xfd, 0xff, 0xe8, 0xab, 0x5f, 0xfd, 0xff, 0x8b, 0x5d, 0xf4, 0x83, 0xc3, 0x2, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x98, 0x6b, 0xfd, 0xff, 0x84, 0xc0, 0xf, 0x84, 0x9, 0x2, 0, 0, 0x8d, 0x45, 0xd0, 0xe8, 0x39, 0x1e, 0xfd, 0xff, 0x8d, 0x55, 0xd0, 0x8d, 0x45, 0xe0, 0xe8, 0x85, 0x61, 0xfd, 0xff, 0xe8, 0x2e, 0x1f, 0xfd, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x12, 0xe8, 0xaa, 0x1e, 0xfd, 0xff, 0x8d, 0x55, 0xd0, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x2a, 0xe8, 0x9c, 0x1e, 0xfd, 0xff, 0xbb, 0x1, 0, 0, 0, 0x8d, 0x55, 0xd0, 0x8d, 0x45, 0xe0, 0xe8, 0x55, 0x61, 0xfd, 0xff, 0xe8, 0xd0, 0x20, 0xfd, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x2a, 0xe8, 0x7a, 0x1e, 0xfd, 0xff, 0xf, 0xbf, 0x45, 0xd2, 0x85, 0xc0, 0x7e, 0xa, 0x8b, 0x45, 0xd2, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x20, 0xf, 0xbf, 0x45, 0xd4, 0x85, 0xc0, 0x7e, 0xa, 0x8b, 0x45, 0xd4, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x22, 0xf, 0xbf, 0x45, 0xd0, 0x85, 0xc0, 0x7e, 0xa, 0x8b, 0x45, 0xd0, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x1e, 0xf, 0xbf, 0x45, 0xd6, 0x85, 0xc0, 0x7e, 0xa, 0x8b, 0x45, 0xd6, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x24, 0xf, 0xbf, 0x45, 0xd8, 0x85, 0xc0, 0x7e, 0xa, 0x8b, 0x45, 0xd8, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x26, 0x8d, 0x45, 0xe0, 0xe8, 0x79, 0x60, 0xfd, 0xff, 0x66, 0x83, 0x78, 0x8, 0x2, 0x75, 0xe, 0x8d, 0x45, 0xe0, 0xe8, 0x6a, 0x60, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x1a, 0x75, 0x2, 0xeb, 0x22, 0x8d, 0x45, 0xe0, 0xe8, 0x5a, 0x60, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x7, 0x75, 0xa, 0x8b, 0x45, 0xf4, 0x66, 0xff, 0x80, 0x73, 0x3, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0xff, 0x80, 0x6f, 0x3, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x38, 0x60, 0xfd, 0xff, 0x66, 0x83, 0x78, 0x8, 0x1, 0x75, 0xe, 0x8d, 0x45, 0xe0, 0xe8, 0x29, 0x60, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x1a, 0x75, 0x2, 0xeb, 0x22, 0x8d, 0x45, 0xe0, 0xe8, 0x19, 0x60, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x7, 0x75, 0xa, 0x8b, 0x45, 0xf4, 0x66, 0xff, 0x80, 0x71, 0x3, 0, 0, 0x8b, 0x45, 0xf4, 0x66, 0xff, 0x80, 0x6d, 0x3, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0xf7, 0x5f, 0xfd, 0xff, 0x66, 0x83, 0x78, 0x8, 0x28, 0x75, 0x1e, 0x8d, 0x45, 0xe0, 0xe8, 0xe8, 0x5f, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x7, 0x74, 0xe, 0x8d, 0x45, 0xe0, 0xe8, 0xda, 0x5f, 0xfd, 0xff, 0x80, 0x78, 0x3d, 0x6, 0x75, 0x2, 0xeb, 0x5, 0xe9, 0xa6, 0, 0, 0, 0xba, 0x10, 0, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0xc0, 0x5f, 0xfd, 0xff, 0x8a, 0x40, 0x4a, 0x25, 0xff, 0, 0, 0, 0xe8, 0x97, 0x93, 0xfe, 0xff, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x38, 0xba, 0x10, 0, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x9f, 0x5f, 0xfd, 0xff, 0x8a, 0x40, 0x4c, 0x25, 0xff, 0, 0, 0, 0xe8, 0x76, 0x93, 0xfe, 0xff, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x3a, 0xba, 0x10, 0, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x7e, 0x5f, 0xfd, 0xff, 0x8a, 0x40, 0x4b, 0x25, 0xff, 0, 0, 0, 0xe8, 0x55, 0x93, 0xfe, 0xff, 0x8b, 0x55, 0xf4, 0x66, 0x1, 0x42, 0x36, 0x8d, 0x45, 0xe0, 0xe8, 0x62, 0x5f, 0xfd, 0xff, 0x31, 0xd2, 0x8a, 0x50, 0x4a, 0x8d, 0x45, 0xe0, 0xe8, 0x55, 0x5f, 0xfd, 0xff, 0x8a, 0x40, 0x4c, 0x30, 0xe4, 0x1, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x46, 0x5f, 0xfd, 0xff, 0x8a, 0x40, 0x4b, 0x30, 0xe4, 0x1, 0xc2, 0x89, 0x55, 0xcc, 0xba, 0x10, 0, 0, 0, 0xf, 0xbf, 0x45, 0xcc, 0xe8, 0x12, 0x93, 0xfe, 0xff, 0x8b, 0x55, 0xf4, 0x66, 0x89, 0x42, 0x42, 0x8d, 0x45, 0xe0, 0xe8, 0x77, 0x67, 0xfd, 0xff, 0xe9, 0xb4, 0xfd, 0xff, 0xff, 0x8b, 0x55, 0xf4, 0x83, 0xc2, 0x1e, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x6, 0xe8, 0xe1, 0x9a, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xcb, 0x5a, 0xfd, 0xff, 0x8b, 0x45, 0xf4, 0x89, 0x45, 0xc8, 0x8b, 0x45, 0xc8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x100a0104, 0x5)   pushd(0x4c);                          /* push dword 0x4c */
    II(0x100a0109, 0x5)   calld(sys_check_available_stack_size, 0xc5c44); /* call 0x10165d52 */
    II(0x100a010e, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a010f, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a0110, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a0111, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a0112, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a0114, 0x6)   sub(esp, 0x38);                       /* sub esp, 0x38 */
    II(0x100a011a, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a011d, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100a0120, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
//    II(0x100a0123, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0126, 0x3)   add(eax, 0x2);                        /* add eax, 0x2 */
    II(0x100a0129, 0x5)   calld(0x10076998, -0x29796);          /* call 0x10076998 */
    II(0x100a012e, 0x3)   sub(eax, 0x2);                        /* sub eax, 0x2 */
    II(0x100a0131, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a0134, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100a0137, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100a013a, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a013d, 0x3)   add(eax, 0x6);                        /* add eax, 0x6 */
    II(0x100a0140, 0x5)   calld(0x100720b1, -0x2e094);          /* call 0x100720b1 */
    II(0x100a0145, 0x3)   sub(eax, 0x6);                        /* sub eax, 0x6 */
    II(0x100a0148, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a014b, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a014e, 0x3)   add(eax, 0x12);                       /* add eax, 0x12 */
    II(0x100a0151, 0x5)   calld(0x100720b1, -0x2e0a5);          /* call 0x100720b1 */
    II(0x100a0156, 0x3)   sub(eax, 0x12);                       /* sub eax, 0x12 */
    II(0x100a0159, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a015c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a015f, 0x3)   add(eax, 0x1e);                       /* add eax, 0x1e */
    II(0x100a0162, 0x5)   calld(0x100720b1, -0x2e0b6);          /* call 0x100720b1 */
    II(0x100a0167, 0x3)   sub(eax, 0x1e);                       /* sub eax, 0x1e */
    II(0x100a016a, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a016d, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0170, 0x3)   add(eax, 0x2a);                       /* add eax, 0x2a */
    II(0x100a0173, 0x5)   calld(0x100720b1, -0x2e0c7);          /* call 0x100720b1 */
    II(0x100a0178, 0x3)   sub(eax, 0x2a);                       /* sub eax, 0x2a */
    II(0x100a017b, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a017e, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0181, 0x3)   add(eax, 0x36);                       /* add eax, 0x36 */
    II(0x100a0184, 0x5)   calld(0x100720b1, -0x2e0d8);          /* call 0x100720b1 */
    II(0x100a0189, 0x3)   sub(eax, 0x36);                       /* sub eax, 0x36 */
    II(0x100a018c, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100a018f, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0192, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a0195, 0x5)   calld(my_ctor_0x101b38f8, -0x29aaa);  /* call 0x100766f0 */
    II(0x100a019a, 0x3)   sub(eax, 0x44);                       /* sub eax, 0x44 */
    II(0x100a019d, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a01a0, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100a01a3, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100a01a6, 0x5)   calld(0x1008b3ec, -0x14dbf);          /* call 0x1008b3ec */
    II(0x100a01ab, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100a01ae, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a01b1, 0x3)   add(eax, 0x48);                       /* add eax, 0x48 */
    II(0x100a01b4, 0x5)   calld(0x1008b1e4, -0x14fd5);          /* call 0x1008b1e4 */
    II(0x100a01b9, 0x3)   sub(eax, 0x48);                       /* sub eax, 0x48 */
    II(0x100a01bc, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a01bf, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100a01c2, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100a01c5, 0x4)   or_(memb_a32(ss, ebp - 0x10), 0x1);   /* or byte [ebp-0x10], 0x1 */
    II(0x100a01c9, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a01cc, 0x5)   calld(0x100764fc, -0x29cd5);          /* call 0x100764fc */
    II(0x100a01d1, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
    II(0x100a01d4, 0x4)   and_(memb_a32(ss, ebp - 0x10), -0x2 /* 0xfe */); /* and byte [ebp-0x10], 0xfe */
    II(0x100a01d8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a01db, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a01de, 0x3)   mov(memw_a32(ds, edx), ax);           /* mov [edx], ax */
    II(0x100a01e1, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x100a01e4, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a01e7, 0x3)   add(eax, 0x2);                        /* add eax, 0x2 */
    II(0x100a01ea, 0x5)   calld(0x100ab2a8, 0xb0b9);            /* call 0x100ab2a8 */
    II(0x100a01ef, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a01f2, 0x4)   mov(memb_a32(ds, eax + 0x4d), 0);     /* mov byte [eax+0x4d], 0x0 */
    II(0x100a01f6, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a01fb, 0x5)   calld(0x10076338, -0x29ec8);          /* call 0x10076338 */
    II(0x100a0200, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a0202, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0205, 0x5)   calld(0x1007643c, -0x29dce);          /* call 0x1007643c */
    II(0x100a020a, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a020d, 0x9)   mov(memw_a32(ds, eax + 0x373), 0);    /* mov word [eax+0x373], 0x0 */
    II(0x100a0216, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0219, 0x9)   mov(memw_a32(ds, eax + 0x36f), 0);    /* mov word [eax+0x36f], 0x0 */
    II(0x100a0222, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0225, 0x9)   mov(memw_a32(ds, eax + 0x371), 0);    /* mov word [eax+0x371], 0x0 */
    II(0x100a022e, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0231, 0x9)   mov(memw_a32(ds, eax + 0x36d), 0);    /* mov word [eax+0x36d], 0x0 */
l_0x100a023a:
    II(0x100a023a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a023c, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a023f, 0x5)   calld(0x1013ad71, 0x9ab2d);           /* call 0x1013ad71 */
    II(0x100a0244, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a0246, 0x6)   jzd(0x100a0486, 0x23a);               /* jz dword 0x100a0486 */
    II(0x100a024c, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a024f, 0x5)   calld(0x100763a0, -0x29eb4);          /* call 0x100763a0 */
    II(0x100a0254, 0x5)   calld(0x10076204, -0x2a055);          /* call 0x10076204 */
    II(0x100a0259, 0x3)   mov(ebx, memd_a32(ss, ebp - 0xc));    /* mov ebx, [ebp-0xc] */
    II(0x100a025c, 0x3)   add(ebx, 0x2);                        /* add ebx, 0x2 */
    II(0x100a025f, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a0261, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a0263, 0x5)   calld(0x10076e00, -0x29468);          /* call 0x10076e00 */
    II(0x100a0268, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a026a, 0x6)   jzd(0x100a0479, 0x209);               /* jz dword 0x100a0479 */
    II(0x100a0270, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a0273, 0x5)   calld(0x100720b1, -0x2e1c7);          /* call 0x100720b1 */
    II(0x100a0278, 0x3)   lea(edx, ebp - 0x30);                 /* lea edx, [ebp-0x30] */
    II(0x100a027b, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a027e, 0x5)   calld(0x10076408, -0x29e7b);          /* call 0x10076408 */
    II(0x100a0283, 0x5)   calld(0x100721b6, -0x2e0d2);          /* call 0x100721b6 */
    II(0x100a0288, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a028a, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a028d, 0x3)   add(eax, 0x12);                       /* add eax, 0x12 */
    II(0x100a0290, 0x5)   calld(0x1007213f, -0x2e156);          /* call 0x1007213f */
    II(0x100a0295, 0x3)   lea(edx, ebp - 0x30);                 /* lea edx, [ebp-0x30] */
    II(0x100a0298, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a029b, 0x3)   add(eax, 0x2a);                       /* add eax, 0x2a */
    II(0x100a029e, 0x5)   calld(0x1007213f, -0x2e164);          /* call 0x1007213f */
    II(0x100a02a3, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100a02a8, 0x3)   lea(edx, ebp - 0x30);                 /* lea edx, [ebp-0x30] */
    II(0x100a02ab, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a02ae, 0x5)   calld(0x10076408, -0x29eab);          /* call 0x10076408 */
    II(0x100a02b3, 0x5)   calld(0x10072388, -0x2df30);          /* call 0x10072388 */
    II(0x100a02b8, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a02ba, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a02bd, 0x3)   add(eax, 0x2a);                       /* add eax, 0x2a */
    II(0x100a02c0, 0x5)   calld(0x1007213f, -0x2e186);          /* call 0x1007213f */
    II(0x100a02c5, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x2e)); /* movsx eax, word [ebp-0x2e] */
    II(0x100a02c9, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a02cb, 0x2)   jled(0x100a02d7, 0xa);                /* jle 0x100a02d7 */
    II(0x100a02cd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x2e));   /* mov eax, [ebp-0x2e] */
    II(0x100a02d0, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a02d3, 0x4)   add(memw_a32(ds, edx + 0x20), ax);    /* add [edx+0x20], ax */
l_0x100a02d7:
    II(0x100a02d7, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x2c)); /* movsx eax, word [ebp-0x2c] */
    II(0x100a02db, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a02dd, 0x2)   jled(0x100a02e9, 0xa);                /* jle 0x100a02e9 */
    II(0x100a02df, 0x3)   mov(eax, memd_a32(ss, ebp - 0x2c));   /* mov eax, [ebp-0x2c] */
    II(0x100a02e2, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a02e5, 0x4)   add(memw_a32(ds, edx + 0x22), ax);    /* add [edx+0x22], ax */
l_0x100a02e9:
    II(0x100a02e9, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x30)); /* movsx eax, word [ebp-0x30] */
    II(0x100a02ed, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a02ef, 0x2)   jled(0x100a02fb, 0xa);                /* jle 0x100a02fb */
    II(0x100a02f1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x30));   /* mov eax, [ebp-0x30] */
    II(0x100a02f4, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a02f7, 0x4)   add(memw_a32(ds, edx + 0x1e), ax);    /* add [edx+0x1e], ax */
l_0x100a02fb:
    II(0x100a02fb, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x2a)); /* movsx eax, word [ebp-0x2a] */
    II(0x100a02ff, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a0301, 0x2)   jled(0x100a030d, 0xa);                /* jle 0x100a030d */
    II(0x100a0303, 0x3)   mov(eax, memd_a32(ss, ebp - 0x2a));   /* mov eax, [ebp-0x2a] */
    II(0x100a0306, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a0309, 0x4)   add(memw_a32(ds, edx + 0x24), ax);    /* add [edx+0x24], ax */
l_0x100a030d:
    II(0x100a030d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100a0311, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a0313, 0x2)   jled(0x100a031f, 0xa);                /* jle 0x100a031f */
    II(0x100a0315, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100a0318, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a031b, 0x4)   add(memw_a32(ds, edx + 0x26), ax);    /* add [edx+0x26], ax */
l_0x100a031f:
    II(0x100a031f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0322, 0x5)   calld(0x100763a0, -0x29f87);          /* call 0x100763a0 */
    II(0x100a0327, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x2);    /* cmp word [eax+0x8], 0x2 */
    II(0x100a032c, 0x2)   jnzd(0x100a033c, 0xe);                /* jnz 0x100a033c */
    II(0x100a032e, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0331, 0x5)   calld(0x100763a0, -0x29f96);          /* call 0x100763a0 */
    II(0x100a0336, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1a);  /* cmp byte [eax+0x3d], 0x1a */
    II(0x100a033a, 0x2)   jnzd(0x100a033e, 0x2);                /* jnz 0x100a033e */
l_0x100a033c:
    II(0x100a033c, 0x2)   jmpd(0x100a0360, 0x22);               /* jmp 0x100a0360 */
l_0x100a033e:
    II(0x100a033e, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0341, 0x5)   calld(0x100763a0, -0x29fa6);          /* call 0x100763a0 */
    II(0x100a0346, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x7);   /* cmp byte [eax+0x3d], 0x7 */
    II(0x100a034a, 0x2)   jnzd(0x100a0356, 0xa);                /* jnz 0x100a0356 */
    II(0x100a034c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a034f, 0x7)   inc(memw_a32(ds, eax + 0x373));       /* inc word [eax+0x373] */
l_0x100a0356:
    II(0x100a0356, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0359, 0x7)   inc(memw_a32(ds, eax + 0x36f));       /* inc word [eax+0x36f] */
l_0x100a0360:
    II(0x100a0360, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0363, 0x5)   calld(0x100763a0, -0x29fc8);          /* call 0x100763a0 */
    II(0x100a0368, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x1);    /* cmp word [eax+0x8], 0x1 */
    II(0x100a036d, 0x2)   jnzd(0x100a037d, 0xe);                /* jnz 0x100a037d */
    II(0x100a036f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0372, 0x5)   calld(0x100763a0, -0x29fd7);          /* call 0x100763a0 */
    II(0x100a0377, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1a);  /* cmp byte [eax+0x3d], 0x1a */
    II(0x100a037b, 0x2)   jnzd(0x100a037f, 0x2);                /* jnz 0x100a037f */
l_0x100a037d:
    II(0x100a037d, 0x2)   jmpd(0x100a03a1, 0x22);               /* jmp 0x100a03a1 */
l_0x100a037f:
    II(0x100a037f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0382, 0x5)   calld(0x100763a0, -0x29fe7);          /* call 0x100763a0 */
    II(0x100a0387, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x7);   /* cmp byte [eax+0x3d], 0x7 */
    II(0x100a038b, 0x2)   jnzd(0x100a0397, 0xa);                /* jnz 0x100a0397 */
    II(0x100a038d, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a0390, 0x7)   inc(memw_a32(ds, eax + 0x371));       /* inc word [eax+0x371] */
l_0x100a0397:
    II(0x100a0397, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a039a, 0x7)   inc(memw_a32(ds, eax + 0x36d));       /* inc word [eax+0x36d] */
l_0x100a03a1:
    II(0x100a03a1, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a03a4, 0x5)   calld(0x100763a0, -0x2a009);          /* call 0x100763a0 */
    II(0x100a03a9, 0x5)   cmp(memw_a32(ds, eax + 0x8), 0x28);   /* cmp word [eax+0x8], 0x28 */
    II(0x100a03ae, 0x2)   jnzd(0x100a03ce, 0x1e);               /* jnz 0x100a03ce */
    II(0x100a03b0, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a03b3, 0x5)   calld(0x100763a0, -0x2a018);          /* call 0x100763a0 */
    II(0x100a03b8, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x7);   /* cmp byte [eax+0x3d], 0x7 */
    II(0x100a03bc, 0x2)   jzd(0x100a03cc, 0xe);                 /* jz 0x100a03cc */
    II(0x100a03be, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a03c1, 0x5)   calld(0x100763a0, -0x2a026);          /* call 0x100763a0 */
    II(0x100a03c6, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x6);   /* cmp byte [eax+0x3d], 0x6 */
    II(0x100a03ca, 0x2)   jnzd(0x100a03ce, 0x2);                /* jnz 0x100a03ce */
l_0x100a03cc:
    II(0x100a03cc, 0x2)   jmpd(0x100a03d3, 0x5);                /* jmp 0x100a03d3 */
l_0x100a03ce:
    II(0x100a03ce, 0x5)   jmpd(0x100a0479, 0xa6);               /* jmp 0x100a0479 */
l_0x100a03d3:
    II(0x100a03d3, 0x5)   mov(edx, 0x10);                       /* mov edx, 0x10 */
    II(0x100a03d8, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a03db, 0x5)   calld(0x100763a0, -0x2a040);          /* call 0x100763a0 */
    II(0x100a03e0, 0x3)   mov(al, memb_a32(ds, eax + 0x4a));    /* mov al, [eax+0x4a] */
    II(0x100a03e3, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a03e8, 0x5)   calld(my_min, -0x16c69);              /* call 0x10089784 */
    II(0x100a03ed, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a03f0, 0x4)   add(memw_a32(ds, edx + 0x38), ax);    /* add [edx+0x38], ax */
    II(0x100a03f4, 0x5)   mov(edx, 0x10);                       /* mov edx, 0x10 */
    II(0x100a03f9, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a03fc, 0x5)   calld(0x100763a0, -0x2a061);          /* call 0x100763a0 */
    II(0x100a0401, 0x3)   mov(al, memb_a32(ds, eax + 0x4c));    /* mov al, [eax+0x4c] */
    II(0x100a0404, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a0409, 0x5)   calld(my_min, -0x16c8a);              /* call 0x10089784 */
    II(0x100a040e, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a0411, 0x4)   add(memw_a32(ds, edx + 0x3a), ax);    /* add [edx+0x3a], ax */
    II(0x100a0415, 0x5)   mov(edx, 0x10);                       /* mov edx, 0x10 */
    II(0x100a041a, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a041d, 0x5)   calld(0x100763a0, -0x2a082);          /* call 0x100763a0 */
    II(0x100a0422, 0x3)   mov(al, memb_a32(ds, eax + 0x4b));    /* mov al, [eax+0x4b] */
    II(0x100a0425, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100a042a, 0x5)   calld(my_min, -0x16cab);              /* call 0x10089784 */
    II(0x100a042f, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a0432, 0x4)   add(memw_a32(ds, edx + 0x36), ax);    /* add [edx+0x36], ax */
    II(0x100a0436, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0439, 0x5)   calld(0x100763a0, -0x2a09e);          /* call 0x100763a0 */
    II(0x100a043e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a0440, 0x3)   mov(dl, memb_a32(ds, eax + 0x4a));    /* mov dl, [eax+0x4a] */
    II(0x100a0443, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0446, 0x5)   calld(0x100763a0, -0x2a0ab);          /* call 0x100763a0 */
    II(0x100a044b, 0x3)   mov(al, memb_a32(ds, eax + 0x4c));    /* mov al, [eax+0x4c] */
    II(0x100a044e, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x100a0450, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100a0452, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a0455, 0x5)   calld(0x100763a0, -0x2a0ba);          /* call 0x100763a0 */
    II(0x100a045a, 0x3)   mov(al, memb_a32(ds, eax + 0x4b));    /* mov al, [eax+0x4b] */
    II(0x100a045d, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x100a045f, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100a0461, 0x3)   mov(memd_a32(ss, ebp - 0x34), edx);   /* mov [ebp-0x34], edx */
    II(0x100a0464, 0x5)   mov(edx, 0x10);                       /* mov edx, 0x10 */
    II(0x100a0469, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x34)); /* movsx eax, word [ebp-0x34] */
    II(0x100a046d, 0x5)   calld(my_min, -0x16cee);              /* call 0x10089784 */
    II(0x100a0472, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a0475, 0x4)   mov(memw_a32(ds, edx + 0x42), ax);    /* mov [edx+0x42], ax */
l_0x100a0479:
    II(0x100a0479, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a047c, 0x5)   calld(0x10076bf8, -0x29889);          /* call 0x10076bf8 */
    II(0x100a0481, 0x5)   jmpd(0x100a023a, -0x24c);             /* jmp 0x100a023a */
l_0x100a0486:
    II(0x100a0486, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x100a0489, 0x3)   add(edx, 0x1e);                       /* add edx, 0x1e */
    II(0x100a048c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a048f, 0x3)   add(eax, 0x6);                        /* add eax, 0x6 */
    II(0x100a0492, 0x5)   calld(0x100a9f78, 0x9ae1);            /* call 0x100a9f78 */
    II(0x100a0497, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a0499, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100a049c, 0x5)   calld(0x10075f6c, -0x2a535);          /* call 0x10075f6c */
    II(0x100a04a1, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a04a4, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
//    II(0x100a04a7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x38));   /* mov eax, [ebp-0x38] */
    II(0x100a04aa, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a04ac, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a04ad, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a04ae, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a04af, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a04b0, 0x1)   retd();                               /* ret */
FUNC_END

