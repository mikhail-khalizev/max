FUNC_BEGIN(0x10112cdd, 0x4d270965bd98e946, 0x20, ({0x68, 0xb0, 0, 0, 0, 0xe8, 0x6b, 0x30, 0x5, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x84, 0, 0, 0, 0x89, 0x45, 0xfc, 0xc7, 0x45, 0xf8, 0, 0, 0, 0, 0xc7, 0x45, 0xf4, 0xa, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8b, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x80, 0xa5, 0x5, 0, 0, 0xe8, 0x53, 0x52, 0xfc, 0xff, 0xba, 0x26, 0x47, 0x1a, 0x10, 0x8d, 0x45, 0x98, 0xe8, 0xa9, 0x31, 0x5, 0, 0xb8, 0x1, 0, 0, 0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x2, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x80, 0xb8, 0x1f, 0x5, 0, 0, 0, 0xf, 0x84, 0x7c, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0xe, 0x5, 0, 0, 0x25, 0xff, 0, 0, 0, 0xc1, 0xe0, 0x2, 0xff, 0xb0, 0x94, 0x97, 0x1b, 0x10, 0xb8, 0x32, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x87, 0x31, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xae, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x5, 0xf0, 0x4, 0, 0, 0x50, 0xb8, 0x3a, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x51, 0x31, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x78, 0xfe, 0xff, 0xff, 0xeb, 0x69, 0x8b, 0x45, 0xfc, 0x5, 0xf0, 0x4, 0, 0, 0x50, 0xb8, 0x43, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x19, 0x31, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x40, 0xfe, 0xff, 0xff, 0xb8, 0x4b, 0x47, 0x1a, 0x10, 0x50, 0xb8, 0x4c, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0xe6, 0x30, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xd, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x80, 0xb8, 0xf, 0x5, 0, 0, 0, 0x74, 0x9, 0xc7, 0x45, 0x94, 0x55, 0x47, 0x1a, 0x10, 0xeb, 0x7, 0xc7, 0x45, 0x94, 0x62, 0x47, 0x1a, 0x10, 0xff, 0x75, 0x94, 0xb8, 0x6d, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x9a, 0x30, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xc1, 0xfd, 0xff, 0xff, 0xbb, 0xa, 0, 0, 0, 0x8d, 0x55, 0x88, 0x8b, 0x45, 0xfc, 0x8b, 0x80, 0xe, 0x5, 0, 0, 0xc1, 0xf8, 0x10, 0xe8, 0x5a, 0x65, 0x6, 0, 0xbb, 0xa, 0, 0, 0, 0x8d, 0x95, 0x7c, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x80, 0x10, 0x5, 0, 0, 0xc1, 0xf8, 0x10, 0xe8, 0x3e, 0x65, 0x6, 0, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x50, 0x8d, 0x45, 0x88, 0x50, 0xb8, 0x7b, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x2d, 0x30, 0x5, 0, 0x83, 0xc4, 0x10, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x54, 0xfd, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x80, 0x13, 0x5, 0, 0, 0xc1, 0xf8, 0x10, 0x50, 0xb8, 0x98, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0xf3, 0x2f, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x1a, 0xfd, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x17, 0x5, 0, 0, 0x25, 0xff, 0, 0, 0, 0x83, 0xc0, 0x2f, 0x6b, 0xc0, 0x14, 0xff, 0xb0, 0xbc, 0xa5, 0x1b, 0x10, 0xb8, 0xac, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0xac, 0x2f, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0xd3, 0xfc, 0xff, 0xff, 0x8b, 0x55, 0xfc, 0x31, 0xc0, 0x8a, 0x82, 0x18, 0x5, 0, 0, 0x83, 0xc0, 0x32, 0x6b, 0xc0, 0x14, 0xff, 0xb0, 0xbc, 0xa5, 0x1b, 0x10, 0xb8, 0xbe, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x68, 0x2f, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x8f, 0xfc, 0xff, 0xff, 0x8b, 0x55, 0xfc, 0x31, 0xc0, 0x8a, 0x82, 0x19, 0x5, 0, 0, 0x83, 0xc0, 0x35, 0x6b, 0xc0, 0x14, 0xff, 0xb0, 0xbc, 0xa5, 0x1b, 0x10, 0xb8, 0xd1, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0x24, 0x2f, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x4b, 0xfc, 0xff, 0xff, 0x8b, 0x55, 0xfc, 0x31, 0xc0, 0x8a, 0x82, 0x1a, 0x5, 0, 0, 0x83, 0xc0, 0x38, 0x6b, 0xc0, 0x14, 0xff, 0xb0, 0xbc, 0xa5, 0x1b, 0x10, 0xb8, 0xe4, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0xe0, 0x2e, 0x5, 0, 0x83, 0xc4, 0xc, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x7, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x8b, 0x80, 0x1a, 0x5, 0, 0, 0xc1, 0xf8, 0x10, 0x50, 0xb8, 0xf8, 0x47, 0x1a, 0x10, 0x50, 0x8d, 0x45, 0x98, 0x50, 0xe8, 0xa6, 0x2e, 0x5, 0, 0x83, 0xc4, 0xc, 0x8b, 0x45, 0xfc, 0x8a, 0x80, 0x1b, 0x5, 0, 0, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0x75, 0xf, 0xba, 0x5, 0x48, 0x1a, 0x10, 0x8d, 0x45, 0x98, 0xe8, 0xb4, 0x2e, 0x5, 0, 0xeb, 0xd, 0xba, 0xb, 0x48, 0x1a, 0x10, 0x8d, 0x45, 0x98, 0xe8, 0xa5, 0x2e, 0x5, 0, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x4d, 0xf4, 0x8d, 0x5d, 0x98, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x9f, 0xfb, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x8, 0, 0x74, 0x48, 0xbb, 0x1, 0, 0, 0, 0xba, 0x13, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x9b, 0xf7, 0xff, 0xff, 0xbb, 0x1, 0, 0, 0, 0xba, 0xa, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x89, 0xf7, 0xff, 0xff, 0xbb, 0x1, 0, 0, 0, 0xba, 0xb, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x77, 0xf7, 0xff, 0xff, 0xbb, 0x1, 0, 0, 0, 0xba, 0xc, 0, 0, 0, 0x8b, 0x45, 0xfc, 0xe8, 0x65, 0xf7, 0xff, 0xff, 0xc7, 0x45, 0xf8, 0x2, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0xf, 0xbf, 0x45, 0xf8, 0x83, 0xf8, 0x9, 0x7f, 0x10, 0x31, 0xdb, 0xf, 0xbe, 0x55, 0xf8, 0x8b, 0x45, 0xfc, 0xe8, 0x3f, 0xf7, 0xff, 0xff, 0xeb, 0xe1, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10112cdd, 0x5)   pushd(0xb0);                          /* push dword 0xb0 */
    II(0x10112ce2, 0x5)   calld(sys_check_available_stack_size, 0x5306b); /* call 0x10165d52 */
    II(0x10112ce7, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10112ce8, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10112ce9, 0x1)   pushd(edx);                           /* push edx */
    II(0x10112cea, 0x1)   pushd(esi);                           /* push esi */
    II(0x10112ceb, 0x1)   pushd(edi);                           /* push edi */
    II(0x10112cec, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10112ced, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10112cef, 0x6)   sub(esp, 0x84);                       /* sub esp, 0x84 */
    II(0x10112cf5, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10112cf8, 0x7)   mov(memd_a32(ss, ebp - 0x8), 0);      /* mov dword [ebp-0x8], 0x0 */
    II(0x10112cff, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0xa);    /* mov dword [ebp-0xc], 0xa */
//    II(0x10112d06, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d09, 0x2)   mov(edx, memd_a32(ds, eax));          /* mov edx, [eax] */
//    II(0x10112d0b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d0e, 0x6)   mov(eax, memd_a32(ds, eax + 0x5a5));  /* mov eax, [eax+0x5a5] */
    II(0x10112d14, 0x5)   calld(0x100d7f6c, -0x3adad);          /* call 0x100d7f6c */
    II(0x10112d19, 0x5)   mov(edx, 0x101a4726);                 /* mov edx, 0x101a4726 */ /* "Game Setup:" */
    II(0x10112d1e, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112d21, 0x5)   calld(sys_strcpy, 0x531a9);           /* call 0x10165ecf */
    II(0x10112d26, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x10112d2b, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112d2c, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112d30, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112d33, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112d36, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112d39, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112d3c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d3f, 0x5)   calld(0x10112c46, -0xfe);             /* call 0x10112c46 */
    II(0x10112d44, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d47, 0x7)   cmp(memb_a32(ds, eax + 0x51f), 0);    /* cmp byte [eax+0x51f], 0x0 */
    II(0x10112d4e, 0x6)   jzd(0x10112dd0, 0x7c);                /* jz dword 0x10112dd0 */
    II(0x10112d54, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d57, 0x6)   mov(al, memb_a32(ds, eax + 0x50e));   /* mov al, [eax+0x50e] */
    II(0x10112d5d, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10112d62, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x10112d65, 0x6)   pushd(memd_a32(ds, eax + 0x101b9794)); /* push dword [eax+0x101b9794] */
    II(0x10112d6b, 0x5)   mov(eax, 0x101a4732);                 /* mov eax, 0x101a4732 */ /* "Map: %s" */
    II(0x10112d70, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112d71, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112d74, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112d75, 0x5)   calld(sys_sprintf, 0x53187);          /* call 0x10165f01 */
    II(0x10112d7a, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112d7d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112d7f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112d80, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112d84, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112d87, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112d8a, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112d8d, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112d90, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d93, 0x5)   calld(0x10112c46, -0x152);            /* call 0x10112c46 */
    II(0x10112d98, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112d9b, 0x5)   add(eax, 0x4f0);                      /* add eax, 0x4f0 */
    II(0x10112da0, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112da1, 0x5)   mov(eax, 0x101a473a);                 /* mov eax, 0x101a473a */ /* "File: %s" */
    II(0x10112da6, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112da7, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112daa, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112dab, 0x5)   calld(sys_sprintf, 0x53151);          /* call 0x10165f01 */
    II(0x10112db0, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112db3, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112db5, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112db6, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112dba, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112dbd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112dc0, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112dc3, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112dc6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112dc9, 0x5)   calld(0x10112c46, -0x188);            /* call 0x10112c46 */
    II(0x10112dce, 0x2)   jmpd(0x10112e39, 0x69);               /* jmp 0x10112e39 */
l_0x10112dd0:
    II(0x10112dd0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112dd3, 0x5)   add(eax, 0x4f0);                      /* add eax, 0x4f0 */
    II(0x10112dd8, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112dd9, 0x5)   mov(eax, 0x101a4743);                 /* mov eax, 0x101a4743 */ /* "Map: %s" */
    II(0x10112dde, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112ddf, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112de2, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112de3, 0x5)   calld(sys_sprintf, 0x53119);          /* call 0x10165f01 */
    II(0x10112de8, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112deb, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112ded, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112dee, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112df2, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112df5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112df8, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112dfb, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112dfe, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112e01, 0x5)   calld(0x10112c46, -0x1c0);            /* call 0x10112c46 */
    II(0x10112e06, 0x5)   mov(eax, 0x101a474b);                 /* mov eax, 0x101a474b */ /* "" */
    II(0x10112e0b, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e0c, 0x5)   mov(eax, 0x101a474c);                 /* mov eax, 0x101a474c */ /* "File: %s" */
    II(0x10112e11, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e12, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112e15, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e16, 0x5)   calld(sys_sprintf, 0x530e6);          /* call 0x10165f01 */
    II(0x10112e1b, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112e1e, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112e20, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e21, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112e25, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112e28, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112e2b, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112e2e, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112e31, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112e34, 0x5)   calld(0x10112c46, -0x1f3);            /* call 0x10112c46 */
l_0x10112e39:
    II(0x10112e39, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112e3c, 0x7)   cmp(memb_a32(ds, eax + 0x50f), 0);    /* cmp byte [eax+0x50f], 0x0 */
    II(0x10112e43, 0x2)   jzd(0x10112e4e, 0x9);                 /* jz 0x10112e4e */
    II(0x10112e45, 0x7)   mov(memd_a32(ss, ebp - 0x6c), 0x101a4755); /* mov dword [ebp-0x6c], 0x101a4755 */ /* "Simultaneous" */
    II(0x10112e4c, 0x2)   jmpd(0x10112e55, 0x7);                /* jmp 0x10112e55 */
l_0x10112e4e:
    II(0x10112e4e, 0x7)   mov(memd_a32(ss, ebp - 0x6c), 0x101a4762); /* mov dword [ebp-0x6c], 0x101a4762 */ /* "Turn Based" */
l_0x10112e55:
    II(0x10112e55, 0x3)   pushd(memd_a32(ss, ebp - 0x6c));      /* push dword [ebp-0x6c] */
    II(0x10112e58, 0x5)   mov(eax, 0x101a476d);                 /* mov eax, 0x101a476d */ /* "Play Mode: %s" */
    II(0x10112e5d, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e5e, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112e61, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e62, 0x5)   calld(sys_sprintf, 0x5309a);          /* call 0x10165f01 */
    II(0x10112e67, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112e6a, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112e6c, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112e6d, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112e71, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112e74, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112e77, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112e7a, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112e7d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112e80, 0x5)   calld(0x10112c46, -0x23f);            /* call 0x10112c46 */
    II(0x10112e85, 0x5)   mov(ebx, 0xa);                        /* mov ebx, 0xa */
    II(0x10112e8a, 0x3)   lea(edx, ebp - 0x78);                 /* lea edx, [ebp-0x78] */
    II(0x10112e8d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112e90, 0x6)   mov(eax, memd_a32(ds, eax + 0x50e));  /* mov eax, [eax+0x50e] */
    II(0x10112e96, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10112e99, 0x5)   calld(/* sys */ 0x101793f8, 0x6655a); /* call 0x101793f8 */
    II(0x10112e9e, 0x5)   mov(ebx, 0xa);                        /* mov ebx, 0xa */
    II(0x10112ea3, 0x6)   lea(edx, ebp - 0x84);                 /* lea edx, [ebp+0xffffff7c] */
    II(0x10112ea9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112eac, 0x6)   mov(eax, memd_a32(ds, eax + 0x510));  /* mov eax, [eax+0x510] */
    II(0x10112eb2, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10112eb5, 0x5)   calld(/* sys */ 0x101793f8, 0x6653e); /* call 0x101793f8 */
    II(0x10112eba, 0x6)   lea(eax, ebp - 0x84);                 /* lea eax, [ebp+0xffffff7c] */
    II(0x10112ec0, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112ec1, 0x3)   lea(eax, ebp - 0x78);                 /* lea eax, [ebp-0x78] */
    II(0x10112ec4, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112ec5, 0x5)   mov(eax, 0x101a477b);                 /* mov eax, 0x101a477b */ /* "Turn Time: %s - End Turn: %s" */
    II(0x10112eca, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112ecb, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112ece, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112ecf, 0x5)   calld(sys_sprintf, 0x5302d);          /* call 0x10165f01 */
    II(0x10112ed4, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x10112ed7, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112ed9, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112eda, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112ede, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112ee1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112ee4, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112ee7, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112eea, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112eed, 0x5)   calld(0x10112c46, -0x2ac);            /* call 0x10112c46 */
    II(0x10112ef2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112ef5, 0x6)   mov(eax, memd_a32(ds, eax + 0x513));  /* mov eax, [eax+0x513] */
    II(0x10112efb, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10112efe, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112eff, 0x5)   mov(eax, 0x101a4798);                 /* mov eax, 0x101a4798 */ /* "Starting Credit: %i" */
    II(0x10112f04, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f05, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112f08, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f09, 0x5)   calld(sys_sprintf, 0x52ff3);          /* call 0x10165f01 */
    II(0x10112f0e, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112f11, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112f13, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f14, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112f18, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112f1b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112f1e, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112f21, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112f24, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112f27, 0x5)   calld(0x10112c46, -0x2e6);            /* call 0x10112c46 */
    II(0x10112f2c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112f2f, 0x6)   mov(al, memb_a32(ds, eax + 0x517));   /* mov al, [eax+0x517] */
    II(0x10112f35, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10112f3a, 0x3)   add(eax, 0x2f);                       /* add eax, 0x2f */
    II(0x10112f3d, 0x3)   imul(eax, eax, 0x14);                 /* imul eax, eax, 0x14 */
    II(0x10112f40, 0x6)   pushd(memd_a32(ds, eax + 0x101ba5bc)); /* push dword [eax+0x101ba5bc] */
    II(0x10112f46, 0x5)   mov(eax, 0x101a47ac);                 /* mov eax, 0x101a47ac */ /* "Raw Resources: %s" */
    II(0x10112f4b, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f4c, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112f4f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f50, 0x5)   calld(sys_sprintf, 0x52fac);          /* call 0x10165f01 */
    II(0x10112f55, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112f58, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112f5a, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f5b, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112f5f, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112f62, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112f65, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112f68, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112f6b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112f6e, 0x5)   calld(0x10112c46, -0x32d);            /* call 0x10112c46 */
    II(0x10112f73, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10112f76, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112f78, 0x6)   mov(al, memb_a32(ds, edx + 0x518));   /* mov al, [edx+0x518] */
    II(0x10112f7e, 0x3)   add(eax, 0x32);                       /* add eax, 0x32 */
    II(0x10112f81, 0x3)   imul(eax, eax, 0x14);                 /* imul eax, eax, 0x14 */
    II(0x10112f84, 0x6)   pushd(memd_a32(ds, eax + 0x101ba5bc)); /* push dword [eax+0x101ba5bc] */
    II(0x10112f8a, 0x5)   mov(eax, 0x101a47be);                 /* mov eax, 0x101a47be */ /* "Fuel Resources: %s" */
    II(0x10112f8f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f90, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112f93, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f94, 0x5)   calld(sys_sprintf, 0x52f68);          /* call 0x10165f01 */
    II(0x10112f99, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112f9c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112f9e, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112f9f, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112fa3, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112fa6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112fa9, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112fac, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112faf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112fb2, 0x5)   calld(0x10112c46, -0x371);            /* call 0x10112c46 */
    II(0x10112fb7, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10112fba, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112fbc, 0x6)   mov(al, memb_a32(ds, edx + 0x519));   /* mov al, [edx+0x519] */
    II(0x10112fc2, 0x3)   add(eax, 0x35);                       /* add eax, 0x35 */
    II(0x10112fc5, 0x3)   imul(eax, eax, 0x14);                 /* imul eax, eax, 0x14 */
    II(0x10112fc8, 0x6)   pushd(memd_a32(ds, eax + 0x101ba5bc)); /* push dword [eax+0x101ba5bc] */
    II(0x10112fce, 0x5)   mov(eax, 0x101a47d1);                 /* mov eax, 0x101a47d1 */ /* "Gold Resources: %s" */
    II(0x10112fd3, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112fd4, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10112fd7, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112fd8, 0x5)   calld(sys_sprintf, 0x52f24);          /* call 0x10165f01 */
    II(0x10112fdd, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10112fe0, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10112fe2, 0x1)   pushd(eax);                           /* push eax */
    II(0x10112fe3, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10112fe7, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10112fea, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10112fed, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10112ff0, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10112ff3, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10112ff6, 0x5)   calld(0x10112c46, -0x3b5);            /* call 0x10112c46 */
    II(0x10112ffb, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x10112ffe, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10113000, 0x6)   mov(al, memb_a32(ds, edx + 0x51a));   /* mov al, [edx+0x51a] */
    II(0x10113006, 0x3)   add(eax, 0x38);                       /* add eax, 0x38 */
    II(0x10113009, 0x3)   imul(eax, eax, 0x14);                 /* imul eax, eax, 0x14 */
    II(0x1011300c, 0x6)   pushd(memd_a32(ds, eax + 0x101ba5bc)); /* push dword [eax+0x101ba5bc] */
    II(0x10113012, 0x5)   mov(eax, 0x101a47e4);                 /* mov eax, 0x101a47e4 */ /* "Alien Derelicts: %s" */
    II(0x10113017, 0x1)   pushd(eax);                           /* push eax */
    II(0x10113018, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x1011301b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011301c, 0x5)   calld(sys_sprintf, 0x52ee0);          /* call 0x10165f01 */
    II(0x10113021, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x10113024, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10113026, 0x1)   pushd(eax);                           /* push eax */
    II(0x10113027, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x1011302b, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x1011302e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10113031, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x10113034, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x10113037, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1011303a, 0x5)   calld(0x10112c46, -0x3f9);            /* call 0x10112c46 */
    II(0x1011303f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10113042, 0x6)   mov(eax, memd_a32(ds, eax + 0x51a));  /* mov eax, [eax+0x51a] */
    II(0x10113048, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x1011304b, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011304c, 0x5)   mov(eax, 0x101a47f8);                 /* mov eax, 0x101a47f8 */ /* "Victory: %i " */
    II(0x10113051, 0x1)   pushd(eax);                           /* push eax */
    II(0x10113052, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10113055, 0x1)   pushd(eax);                           /* push eax */
    II(0x10113056, 0x5)   calld(sys_sprintf, 0x52ea6);          /* call 0x10165f01 */
    II(0x1011305b, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x1011305e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10113061, 0x6)   mov(al, memb_a32(ds, eax + 0x51b));   /* mov al, [eax+0x51b] */
    II(0x10113067, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1011306c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1011306e, 0x2)   jnzd(0x1011307f, 0xf);                /* jnz 0x1011307f */
    II(0x10113070, 0x5)   mov(edx, 0x101a4805);                 /* mov edx, 0x101a4805 */ /* "turns" */
    II(0x10113075, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10113078, 0x5)   calld(sys_strcat, 0x52eb4);           /* call 0x10165f31 */
    II(0x1011307d, 0x2)   jmpd(0x1011308c, 0xd);                /* jmp 0x1011308c */
l_0x1011307f:
    II(0x1011307f, 0x5)   mov(edx, 0x101a480b);                 /* mov edx, 0x101a480b */ /* "points" */
    II(0x10113084, 0x3)   lea(eax, ebp - 0x68);                 /* lea eax, [ebp-0x68] */
    II(0x10113087, 0x5)   calld(sys_strcat, 0x52ea5);           /* call 0x10165f31 */
l_0x1011308c:
    II(0x1011308c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1011308e, 0x1)   pushd(eax);                           /* push eax */
    II(0x1011308f, 0x4)   movsx(ecx, memw_a32(ss, ebp - 0xc));  /* movsx ecx, word [ebp-0xc] */
    II(0x10113093, 0x3)   lea(ebx, ebp - 0x68);                 /* lea ebx, [ebp-0x68] */
    II(0x10113096, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10113099, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
    II(0x1011309c, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1011309f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130a2, 0x5)   calld(0x10112c46, -0x461);            /* call 0x10112c46 */
    II(0x101130a7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130aa, 0x4)   cmp(memb_a32(ds, eax + 0x8), 0);      /* cmp byte [eax+0x8], 0x0 */
    II(0x101130ae, 0x2)   jzd(0x101130f8, 0x48);                /* jz 0x101130f8 */
    II(0x101130b0, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x101130b5, 0x5)   mov(edx, 0x13);                       /* mov edx, 0x13 */
    II(0x101130ba, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130bd, 0x5)   calld(0x1011285d, -0x865);            /* call 0x1011285d */
    II(0x101130c2, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x101130c7, 0x5)   mov(edx, 0xa);                        /* mov edx, 0xa */
    II(0x101130cc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130cf, 0x5)   calld(0x1011285d, -0x877);            /* call 0x1011285d */
    II(0x101130d4, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x101130d9, 0x5)   mov(edx, 0xb);                        /* mov edx, 0xb */
    II(0x101130de, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130e1, 0x5)   calld(0x1011285d, -0x889);            /* call 0x1011285d */
    II(0x101130e6, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x101130eb, 0x5)   mov(edx, 0xc);                        /* mov edx, 0xc */
    II(0x101130f0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x101130f3, 0x5)   calld(0x1011285d, -0x89b);            /* call 0x1011285d */
l_0x101130f8:
    II(0x101130f8, 0x7)   mov(memd_a32(ss, ebp - 0x8), 0x2);    /* mov dword [ebp-0x8], 0x2 */
    II(0x101130ff, 0x2)   jmpd(0x10113107, 0x6);                /* jmp 0x10113107 */
l_0x10113101:
    II(0x10113101, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10113104, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
l_0x10113107:
    II(0x10113107, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x1011310b, 0x3)   cmp(eax, 0x9);                        /* cmp eax, 0x9 */
    II(0x1011310e, 0x2)   jgd(0x10113120, 0x10);                /* jg 0x10113120 */
    II(0x10113110, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10113112, 0x4)   movsx(edx, memb_a32(ss, ebp - 0x8));  /* movsx edx, byte [ebp-0x8] */
    II(0x10113116, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10113119, 0x5)   calld(0x1011285d, -0x8c1);            /* call 0x1011285d */
    II(0x1011311e, 0x2)   jmpd(0x10113101, -0x1f);              /* jmp 0x10113101 */
l_0x10113120:
    II(0x10113120, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10113122, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10113123, 0x1)   popd(edi);                            /* pop edi */
    II(0x10113124, 0x1)   popd(esi);                            /* pop esi */
    II(0x10113125, 0x1)   popd(edx);                            /* pop edx */
    II(0x10113126, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10113127, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10113128, 0x1)   retd();                               /* ret */
FUNC_END

