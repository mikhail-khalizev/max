FUNC_BEGIN(0x1015c8f0, 0xf76b9a0db8ad9998, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0x58, 0x94, 0, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0xe8, 0x9, 0x98, 0xf1, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x8d, 0x9d, 0xf1, 0xff, 0x8d, 0x45, 0xf0, 0xe8, 0xd9, 0x9c, 0xf1, 0xff, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x3a, 0xc1, 0xfb, 0x18, 0x8b, 0x55, 0xf4, 0x8b, 0x45, 0xfc, 0xe8, 0x1c, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xf8, 0x8b, 0x45, 0xf4, 0x8a, 0x50, 0x26, 0x8b, 0x45, 0xfc, 0x3a, 0x50, 0x26, 0x75, 0x16, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xcc, 0x95, 0xf1, 0xff, 0xe9, 0x59, 0x2, 0, 0, 0x80, 0x3d, 0x15, 0x39, 0x1c, 0x10, 0, 0x75, 0x3c, 0x8b, 0x45, 0xfc, 0xfe, 0x48, 0x50, 0x8b, 0x45, 0xfc, 0x8a, 0x40, 0x50, 0x25, 0xff, 0, 0, 0, 0x85, 0xc0, 0x75, 0x7, 0x8b, 0x45, 0xfc, 0xc6, 0x40, 0x57, 0, 0xba, 0xbc, 0x37, 0x1c, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0x1, 0xa4, 0xf1, 0xff, 0x84, 0xc0, 0x74, 0xf, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x2b, 0x9c, 0xf1, 0xff, 0xe8, 0x8d, 0x2c, 0xfa, 0xff, 0x8b, 0x45, 0xfc, 0x66, 0x8b, 0x40, 0x41, 0x66, 0x3b, 0x45, 0xf8, 0x7f, 0x46, 0x8b, 0x45, 0xf4, 0x80, 0x78, 0x3d, 0x1a, 0x74, 0x7, 0x8b, 0x45, 0xfc, 0x66, 0xff, 0x40, 0x52, 0xba, 0xbc, 0x37, 0x1c, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0xc4, 0xa3, 0xf1, 0xff, 0x84, 0xc0, 0x74, 0xf, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0xee, 0x9b, 0xf1, 0xff, 0xe8, 0x50, 0x2c, 0xfa, 0xff, 0xc7, 0x45, 0xec, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x34, 0x95, 0xf1, 0xff, 0xe9, 0xc1, 0x1, 0, 0, 0x8d, 0x45, 0xf0, 0xe8, 0x6f, 0x9b, 0xf1, 0xff, 0x80, 0x78, 0x3d, 0x1a, 0xf, 0x85, 0x90, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x39, 0xc2, 0x75, 0x67, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x18, 0x75, 0x30, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xfc, 0x8b, 0x52, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe8, 0xe8, 0x67, 0xa0, 0xf1, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xfc, 0xba, 0x1, 0, 0, 0, 0xb8, 0x8a, 0x27, 0x1b, 0x10, 0xe8, 0x7, 0x91, 0xfb, 0xff, 0xeb, 0x2e, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xfc, 0x8b, 0x52, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe4, 0xe8, 0x37, 0xa0, 0xf1, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xfc, 0xba, 0x1, 0, 0, 0, 0xb8, 0xa8, 0x27, 0x1b, 0x10, 0xe8, 0xd7, 0x90, 0xfb, 0xff, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x92, 0x94, 0xf1, 0xff, 0xe9, 0x1f, 0x1, 0, 0, 0x8b, 0x45, 0xf4, 0x8a, 0x40, 0x26, 0x30, 0xe4, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xfc, 0xe8, 0x82, 0x2b, 0xff, 0xff, 0x8b, 0x45, 0xfc, 0xe8, 0x25, 0x4b, 0xf1, 0xff, 0x8b, 0x45, 0xfc, 0xe8, 0xe6, 0xd4, 0xfe, 0xff, 0x8b, 0x45, 0xf4, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x39, 0xc2, 0x75, 0x2a, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x18, 0x75, 0xf, 0xba, 0x4, 0, 0, 0, 0x8b, 0x45, 0xf4, 0xe8, 0x47, 0x71, 0xf9, 0xff, 0xeb, 0xd, 0xba, 0x5, 0, 0, 0, 0x8b, 0x45, 0xf4, 0xe8, 0x38, 0x71, 0xf9, 0xff, 0xe9, 0x9a, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0x31, 0xc0, 0xa0, 0xda, 0x37, 0x1c, 0x10, 0x39, 0xc2, 0xf, 0x85, 0x83, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x80, 0x78, 0x3d, 0x18, 0x75, 0x30, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xfc, 0x8b, 0x52, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xe0, 0xe8, 0x73, 0x9f, 0xf1, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xfc, 0xba, 0x1, 0, 0, 0, 0xb8, 0xc6, 0x27, 0x1b, 0x10, 0xe8, 0x13, 0x90, 0xfb, 0xff, 0xeb, 0x2e, 0x8b, 0x45, 0xfc, 0x8b, 0x58, 0x1a, 0xc1, 0xfb, 0x10, 0x8b, 0x55, 0xfc, 0x8b, 0x52, 0x18, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xdc, 0xe8, 0x43, 0x9f, 0xf1, 0xff, 0x8b, 0x8, 0x8b, 0x5d, 0xfc, 0xba, 0x1, 0, 0, 0, 0xb8, 0xe4, 0x27, 0x1b, 0x10, 0xe8, 0xe3, 0x8f, 0xfb, 0xff, 0xe8, 0xee, 0x88, 0xf7, 0xff, 0xf, 0xbf, 0xc8, 0xbb, 0xd0, 0x3, 0, 0, 0xba, 0xcb, 0x3, 0, 0, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x51, 0xf, 0xfe, 0xff, 0x8b, 0x45, 0xfc, 0xe8, 0x61, 0xfc, 0xff, 0xff, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x7a, 0x93, 0xf1, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x6e, 0x93, 0xf1, 0xff, 0x8b, 0x45, 0xec, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x1015c8f0, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x1015c8f5, 0x5)   calld(sys_check_available_stack_size, 0x9458); /* call 0x10165d52 */
    II(0x1015c8fa, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x1015c8fb, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1015c8fc, 0x1)   pushd(edx);                           /* push edx */
    II(0x1015c8fd, 0x1)   pushd(esi);                           /* push esi */
    II(0x1015c8fe, 0x1)   pushd(edi);                           /* push edi */
    II(0x1015c8ff, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x1015c900, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1015c902, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x1015c908, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x1015c90b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c90e, 0x5)   calld(0x1007611c, -0xe67f7);          /* call 0x1007611c */
    II(0x1015c913, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x1015c916, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x1015c918, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x1015c91a, 0x5)   calld(0x100766ac, -0xe6273);          /* call 0x100766ac */
    II(0x1015c91f, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015c922, 0x5)   calld(0x10076600, -0xe6327);          /* call 0x10076600 */
    II(0x1015c927, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x1015c92a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c92d, 0x3)   mov(ebx, memd_a32(ds, eax + 0x3a));   /* mov ebx, [eax+0x3a] */
    II(0x1015c930, 0x3)   sar(ebx, 0x18);                       /* sar ebx, 0x18 */
    II(0x1015c933, 0x3)   mov(edx, memd_a32(ss, ebp - 0xc));    /* mov edx, [ebp-0xc] */
    II(0x1015c936, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c939, 0x5)   calld(0x1015c75a, -0x1e4);            /* call 0x1015c75a */
    II(0x1015c93e, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x1015c941, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015c944, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1015c947, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c94a, 0x3)   cmp(dl, memb_a32(ds, eax + 0x26));    /* cmp dl, [eax+0x26] */
    II(0x1015c94d, 0x2)   jnzd(0x1015c965, 0x16);               /* jnz 0x1015c965 */
    II(0x1015c94f, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x1015c956, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015c958, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015c95b, 0x5)   calld(0x10075f2c, -0xe6a34);          /* call 0x10075f2c */
    II(0x1015c960, 0x5)   jmpd(0x1015cbbe, 0x259);              /* jmp 0x1015cbbe */
l_0x1015c965:
    II(0x1015c965, 0x7)   cmp(memb_a32(ds, 0x101c3915), 0);     /* cmp byte [0x101c3915], 0x0 */
    II(0x1015c96c, 0x2)   jnzd(0x1015c9aa, 0x3c);               /* jnz 0x1015c9aa */
    II(0x1015c96e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c971, 0x3)   dec(memb_a32(ds, eax + 0x50));        /* dec byte [eax+0x50] */
    II(0x1015c974, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c977, 0x3)   mov(al, memb_a32(ds, eax + 0x50));    /* mov al, [eax+0x50] */
    II(0x1015c97a, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x1015c97f, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x1015c981, 0x2)   jnzd(0x1015c98a, 0x7);                /* jnz 0x1015c98a */
    II(0x1015c983, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c986, 0x4)   mov(memb_a32(ds, eax + 0x57), 0);     /* mov byte [eax+0x57], 0x0 */
l_0x1015c98a:
    II(0x1015c98a, 0x5)   mov(edx, 0x101c37bc);                 /* mov edx, 0x101c37bc */
    II(0x1015c98f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c992, 0x5)   calld(0x10076d98, -0xe5bff);          /* call 0x10076d98 */
    II(0x1015c997, 0x2)   test(al, al);                         /* test al, al */
    II(0x1015c999, 0x2)   jzd(0x1015c9aa, 0xf);                 /* jz 0x1015c9aa */
    II(0x1015c99b, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x1015c9a0, 0x5)   calld(0x100765d0, -0xe63d5);          /* call 0x100765d0 */
    II(0x1015c9a5, 0x5)   calld(0x100ff637, -0x5d373);          /* call 0x100ff637 */
l_0x1015c9aa:
    II(0x1015c9aa, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c9ad, 0x4)   mov(ax, memw_a32(ds, eax + 0x41));    /* mov ax, [eax+0x41] */
    II(0x1015c9b1, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x1015c9b5, 0x2)   jgd(0x1015c9fd, 0x46);                /* jg 0x1015c9fd */
    II(0x1015c9b7, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015c9ba, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1a);  /* cmp byte [eax+0x3d], 0x1a */
    II(0x1015c9be, 0x2)   jzd(0x1015c9c7, 0x7);                 /* jz 0x1015c9c7 */
    II(0x1015c9c0, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c9c3, 0x4)   inc(memw_a32(ds, eax + 0x52));        /* inc word [eax+0x52] */
l_0x1015c9c7:
    II(0x1015c9c7, 0x5)   mov(edx, 0x101c37bc);                 /* mov edx, 0x101c37bc */
    II(0x1015c9cc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015c9cf, 0x5)   calld(0x10076d98, -0xe5c3c);          /* call 0x10076d98 */
    II(0x1015c9d4, 0x2)   test(al, al);                         /* test al, al */
    II(0x1015c9d6, 0x2)   jzd(0x1015c9e7, 0xf);                 /* jz 0x1015c9e7 */
    II(0x1015c9d8, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x1015c9dd, 0x5)   calld(0x100765d0, -0xe6412);          /* call 0x100765d0 */
    II(0x1015c9e2, 0x5)   calld(0x100ff637, -0x5d3b0);          /* call 0x100ff637 */
l_0x1015c9e7:
    II(0x1015c9e7, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0x1);   /* mov dword [ebp-0x14], 0x1 */
    II(0x1015c9ee, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015c9f0, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015c9f3, 0x5)   calld(0x10075f2c, -0xe6acc);          /* call 0x10075f2c */
    II(0x1015c9f8, 0x5)   jmpd(0x1015cbbe, 0x1c1);              /* jmp 0x1015cbbe */
l_0x1015c9fd:
    II(0x1015c9fd, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015ca00, 0x5)   calld(0x10076574, -0xe6491);          /* call 0x10076574 */
    II(0x1015ca05, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x1a);  /* cmp byte [eax+0x3d], 0x1a */
    II(0x1015ca09, 0x6)   jnzd(0x1015ca9f, 0x90);               /* jnz dword 0x1015ca9f */
    II(0x1015ca0f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015ca12, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015ca14, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1015ca17, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015ca19, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1015ca1e, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1015ca20, 0x2)   jnzd(0x1015ca89, 0x67);               /* jnz 0x1015ca89 */
    II(0x1015ca22, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015ca25, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x18);  /* cmp byte [eax+0x3d], 0x18 */
    II(0x1015ca29, 0x2)   jnzd(0x1015ca5b, 0x30);               /* jnz 0x1015ca5b */
    II(0x1015ca2b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015ca2e, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x1015ca31, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1015ca34, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1015ca37, 0x3)   mov(edx, memd_a32(ds, edx + 0x18));   /* mov edx, [edx+0x18] */
    II(0x1015ca3a, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1015ca3d, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1015ca40, 0x5)   calld(0x10076aac, -0xe5f99);          /* call 0x10076aac */
    II(0x1015ca45, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x1015ca47, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1015ca4a, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x1015ca4f, 0x5)   mov(eax, 0x101b278a);                 /* mov eax, 0x101b278a */ /* "Unable to capture enemy unit." */
    II(0x1015ca54, 0x5)   calld(0x10115b60, -0x46ef9);          /* call 0x10115b60 */
    II(0x1015ca59, 0x2)   jmpd(0x1015ca89, 0x2e);               /* jmp 0x1015ca89 */
l_0x1015ca5b:
    II(0x1015ca5b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015ca5e, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x1015ca61, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1015ca64, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1015ca67, 0x3)   mov(edx, memd_a32(ds, edx + 0x18));   /* mov edx, [edx+0x18] */
    II(0x1015ca6a, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1015ca6d, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x1015ca70, 0x5)   calld(0x10076aac, -0xe5fc9);          /* call 0x10076aac */
    II(0x1015ca75, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x1015ca77, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1015ca7a, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x1015ca7f, 0x5)   mov(eax, 0x101b27a8);                 /* mov eax, 0x101b27a8 */ /* "Unable to disable enemy unit." */
    II(0x1015ca84, 0x5)   calld(0x10115b60, -0x46f29);          /* call 0x10115b60 */
l_0x1015ca89:
    II(0x1015ca89, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x1015ca90, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015ca92, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015ca95, 0x5)   calld(0x10075f2c, -0xe6b6e);          /* call 0x10075f2c */
    II(0x1015ca9a, 0x5)   jmpd(0x1015cbbe, 0x11f);              /* jmp 0x1015cbbe */
l_0x1015ca9f:
    II(0x1015ca9f, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015caa2, 0x3)   mov(al, memb_a32(ds, eax + 0x26));    /* mov al, [eax+0x26] */
    II(0x1015caa5, 0x2)   xor_(ah, ah);                         /* xor ah, ah */
    II(0x1015caa7, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x1015caaa, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015caad, 0x5)   calld(0x1014f634, -0xd47e);           /* call 0x1014f634 */
    II(0x1015cab2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cab5, 0x5)   calld(0x100715df, -0xeb4db);          /* call 0x100715df */
    II(0x1015caba, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cabd, 0x5)   calld(0x10149fa8, -0x12b1a);          /* call 0x10149fa8 */
    II(0x1015cac2, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015cac5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015cac7, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1015caca, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015cacc, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1015cad1, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1015cad3, 0x2)   jnzd(0x1015caff, 0x2a);               /* jnz 0x1015caff */
    II(0x1015cad5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cad8, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x18);  /* cmp byte [eax+0x3d], 0x18 */
    II(0x1015cadc, 0x2)   jnzd(0x1015caed, 0xf);                /* jnz 0x1015caed */
    II(0x1015cade, 0x5)   mov(edx, 0x4);                        /* mov edx, 0x4 */
    II(0x1015cae3, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015cae6, 0x5)   calld(0x100f3c32, -0x68eb9);          /* call 0x100f3c32 */
    II(0x1015caeb, 0x2)   jmpd(0x1015cafa, 0xd);                /* jmp 0x1015cafa */
l_0x1015caed:
    II(0x1015caed, 0x5)   mov(edx, 0x5);                        /* mov edx, 0x5 */
    II(0x1015caf2, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1015caf5, 0x5)   calld(0x100f3c32, -0x68ec8);          /* call 0x100f3c32 */
l_0x1015cafa:
    II(0x1015cafa, 0x5)   jmpd(0x1015cb99, 0x9a);               /* jmp 0x1015cb99 */
l_0x1015caff:
    II(0x1015caff, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cb02, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015cb04, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x1015cb07, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1015cb09, 0x5)   mov(al, memb_a32(ds, 0x101c37da));    /* mov al, [0x101c37da] */
    II(0x1015cb0e, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x1015cb10, 0x6)   jnzd(0x1015cb99, 0x83);               /* jnz dword 0x1015cb99 */
    II(0x1015cb16, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cb19, 0x4)   cmp(memb_a32(ds, eax + 0x3d), 0x18);  /* cmp byte [eax+0x3d], 0x18 */
    II(0x1015cb1d, 0x2)   jnzd(0x1015cb4f, 0x30);               /* jnz 0x1015cb4f */
    II(0x1015cb1f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cb22, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x1015cb25, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1015cb28, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1015cb2b, 0x3)   mov(edx, memd_a32(ds, edx + 0x18));   /* mov edx, [edx+0x18] */
    II(0x1015cb2e, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1015cb31, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1015cb34, 0x5)   calld(0x10076aac, -0xe608d);          /* call 0x10076aac */
    II(0x1015cb39, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x1015cb3b, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1015cb3e, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x1015cb43, 0x5)   mov(eax, 0x101b27c6);                 /* mov eax, 0x101b27c6 */ /* "Unable to capture enemy unit." */
    II(0x1015cb48, 0x5)   calld(0x10115b60, -0x46fed);          /* call 0x10115b60 */
    II(0x1015cb4d, 0x2)   jmpd(0x1015cb7d, 0x2e);               /* jmp 0x1015cb7d */
l_0x1015cb4f:
    II(0x1015cb4f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cb52, 0x3)   mov(ebx, memd_a32(ds, eax + 0x1a));   /* mov ebx, [eax+0x1a] */
    II(0x1015cb55, 0x3)   sar(ebx, 0x10);                       /* sar ebx, 0x10 */
    II(0x1015cb58, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x1015cb5b, 0x3)   mov(edx, memd_a32(ds, edx + 0x18));   /* mov edx, [edx+0x18] */
    II(0x1015cb5e, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x1015cb61, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x1015cb64, 0x5)   calld(0x10076aac, -0xe60bd);          /* call 0x10076aac */
    II(0x1015cb69, 0x2)   mov(ecx, memd_a32(ds, eax));          /* mov ecx, [eax] */
    II(0x1015cb6b, 0x3)   mov(ebx, memd_a32(ss, ebp - 0x4));    /* mov ebx, [ebp-0x4] */
    II(0x1015cb6e, 0x5)   mov(edx, 0x1);                        /* mov edx, 0x1 */
    II(0x1015cb73, 0x5)   mov(eax, 0x101b27e4);                 /* mov eax, 0x101b27e4 */ /* "Unable to disable enemy unit." */
    II(0x1015cb78, 0x5)   calld(0x10115b60, -0x4701d);          /* call 0x10115b60 */
l_0x1015cb7d:
    II(0x1015cb7d, 0x5)   calld(0x100d5470, -0x87712);          /* call 0x100d5470 */
    II(0x1015cb82, 0x3)   movsx(ecx, ax);                       /* movsx ecx, ax */
    II(0x1015cb85, 0x5)   mov(ebx, 0x3d0);                      /* mov ebx, 0x3d0 */
    II(0x1015cb8a, 0x5)   mov(edx, 0x3cb);                      /* mov edx, 0x3cb */
    II(0x1015cb8f, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x1015cb94, 0x5)   calld(0x1013daea, -0x1f0af);          /* call 0x1013daea */
l_0x1015cb99:
    II(0x1015cb99, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x1015cb9c, 0x5)   calld(0x1015c802, -0x39f);            /* call 0x1015c802 */
    II(0x1015cba1, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x1015cba8, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1015cbaa, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x1015cbad, 0x5)   calld(0x10075f2c, -0xe6c86);          /* call 0x10075f2c */
    II(0x1015cbb2, 0x2)   jmpd(0x1015cbbe, 0xa);                /* jmp 0x1015cbbe */
//  II(0x1015cbb4, 0xa)   /* Недостижимый код. */
l_0x1015cbbe:
    II(0x1015cbbe, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x1015cbc1, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1015cbc3, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1015cbc4, 0x1)   popd(edi);                            /* pop edi */
    II(0x1015cbc5, 0x1)   popd(esi);                            /* pop esi */
    II(0x1015cbc6, 0x1)   popd(edx);                            /* pop edx */
    II(0x1015cbc7, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x1015cbc8, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x1015cbc9, 0x1)   retd();                               /* ret */
FUNC_END

