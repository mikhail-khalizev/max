FUNC_BEGIN(0x100fd3a7, 0xb7d92e59d0dae30c, 0x20, ({0x68, 0xd4, 0, 0, 0, 0xe8, 0xa1, 0x89, 0x6, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xa8, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x8d, 0x7d, 0xec, 0xbe, 0xd8, 0x8a, 0x1b, 0x10, 0xa5, 0x66, 0xa5, 0x8d, 0x7d, 0xe4, 0xbe, 0xde, 0x8a, 0x1b, 0x10, 0xa5, 0x66, 0xa5, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0xa, 0x93, 0xf7, 0xff, 0x89, 0x45, 0xdc, 0x80, 0x65, 0xf4, 0xfe, 0x8d, 0x45, 0xd8, 0xe8, 0xfb, 0x96, 0xf7, 0xff, 0xa1, 0x72, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x50, 0x8b, 0xd, 0x70, 0x81, 0x1c, 0x10, 0xc1, 0xf9, 0x10, 0x31, 0xdb, 0x31, 0xd2, 0x8d, 0x45, 0xc8, 0xe8, 0x35, 0xdd, 0xf8, 0xff, 0x8b, 0x45, 0xf8, 0xe8, 0xb1, 0xfd, 0xff, 0xff, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0x8b, 0x45, 0xf8, 0x8b, 0, 0xc1, 0xf8, 0x10, 0x50, 0x8b, 0x45, 0xf8, 0xf, 0xbf, 0, 0x50, 0x31, 0xc9, 0xbb, 0x4, 0, 0, 0, 0xba, 0x11, 0, 0, 0, 0x8d, 0x45, 0xc4, 0xe8, 0x8f, 0xce, 0x5, 0, 0x8d, 0x5d, 0xe0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xc1, 0xd7, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xc4, 0xe8, 0xcb, 0x8a, 0xf7, 0xff, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0x8b, 0x45, 0xf8, 0x8b, 0, 0xc1, 0xf8, 0x10, 0x50, 0x8b, 0x45, 0xf8, 0xf, 0xbf, 0, 0x50, 0x31, 0xc9, 0xbb, 0x4, 0, 0, 0, 0xe8, 0x12, 0x8a, 0x6, 0, 0x8d, 0x4, 0x40, 0xc1, 0xe8, 0xf, 0x1, 0xc0, 0x89, 0xc2, 0x8b, 0x54, 0x2a, 0xea, 0xc1, 0xfa, 0x10, 0x8d, 0x45, 0xc0, 0xe8, 0x38, 0xce, 0x5, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x6c, 0xd7, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xc0, 0xe8, 0x76, 0x8a, 0xf7, 0xff, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0, 0x48, 0x66, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0x2, 0x5, 0x2, 0, 0, 0, 0x66, 0x89, 0x45, 0xda, 0xc7, 0x45, 0xbc, 0, 0, 0, 0, 0xeb, 0x4, 0x83, 0x45, 0xbc, 0x2, 0xf, 0xbf, 0x45, 0xbc, 0x83, 0xf8, 0x8, 0xf, 0x8d, 0xac, 0, 0, 0, 0xc7, 0x45, 0xb8, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xb8, 0xff, 0x45, 0xb8, 0xf, 0xbf, 0x45, 0xb8, 0x83, 0xf8, 0x3, 0xf, 0x8d, 0x8b, 0, 0, 0, 0xf, 0xbf, 0x55, 0xbc, 0xc1, 0xe2, 0x2, 0xb8, 0x48, 0x53, 0x1c, 0x10, 0x1, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0x87, 0xdc, 0xf8, 0xff, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0xc8, 0xe8, 0xa6, 0xad, 0, 0, 0x84, 0xc0, 0x74, 0x61, 0xf, 0xbf, 0x55, 0xda, 0xf, 0xbf, 0x45, 0xd8, 0xe8, 0xc4, 0x67, 0xf7, 0xff, 0x25, 0xff, 0xff, 0, 0, 0x89, 0x45, 0xb4, 0x83, 0x7d, 0xb4, 0x2, 0x74, 0x6, 0x83, 0x7d, 0xb4, 0x4, 0x75, 0x40, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xda, 0x50, 0xf, 0xbf, 0x45, 0xd8, 0x50, 0x31, 0xc9, 0xbb, 0x4, 0, 0, 0, 0xba, 0x27, 0, 0, 0, 0x8d, 0x45, 0xb0, 0xe8, 0x63, 0xcd, 0x5, 0, 0x8d, 0x5d, 0xe0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x95, 0xd6, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xb0, 0xe8, 0x9f, 0x89, 0xf7, 0xff, 0xe9, 0x62, 0xff, 0xff, 0xff, 0xe9, 0x43, 0xff, 0xff, 0xff, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xa0, 0xe8, 0xc5, 0xca, 0xfc, 0xff, 0x89, 0x45, 0x9c, 0x80, 0x65, 0xf4, 0xfe, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0x8c, 0xe8, 0xb2, 0xca, 0xfc, 0xff, 0x89, 0x45, 0x88, 0x80, 0x65, 0xf4, 0xfe, 0xba, 0x51, 0, 0, 0, 0xb8, 0x84, 0xad, 0x1c, 0x10, 0xe8, 0x60, 0x27, 0xfe, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x89, 0x45, 0x84, 0xc7, 0x45, 0x80, 0x2, 0, 0, 0, 0x8b, 0x45, 0xfc, 0x66, 0x3b, 0x45, 0x84, 0x7c, 0x8, 0xf, 0xbf, 0x45, 0x80, 0x85, 0xc0, 0x7f, 0x5, 0xe9, 0x12, 0x4, 0, 0, 0x8d, 0x45, 0xa0, 0xe8, 0x9c, 0xf5, 0xf9, 0xff, 0x8d, 0x45, 0x8c, 0xe8, 0x94, 0xf5, 0xf9, 0xff, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0, 0x2b, 0x45, 0x80, 0x66, 0x89, 0x45, 0xd8, 0x8b, 0x45, 0xf8, 0x66, 0x8b, 0x40, 0x2, 0x3, 0x45, 0x80, 0x40, 0x66, 0x89, 0x45, 0xda, 0xc7, 0x45, 0xbc, 0, 0, 0, 0, 0xeb, 0x4, 0x83, 0x45, 0xbc, 0x2, 0xf, 0xbf, 0x45, 0xbc, 0x83, 0xf8, 0x8, 0xf, 0x8d, 0x83, 0, 0, 0, 0xc7, 0x45, 0xb8, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xb8, 0xff, 0x45, 0xb8, 0xf, 0xbf, 0x45, 0x80, 0x1, 0xc0, 0xf, 0xbf, 0x55, 0xb8, 0x40, 0x39, 0xc2, 0x7d, 0x60, 0xf, 0xbf, 0x55, 0xbc, 0xc1, 0xe2, 0x2, 0xb8, 0x48, 0x53, 0x1c, 0x10, 0x1, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0x3a, 0xdb, 0xf8, 0xff, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0xc8, 0xe8, 0x59, 0xac, 0, 0, 0x84, 0xc0, 0x74, 0x39, 0xf, 0xbf, 0x55, 0xda, 0xf, 0xbf, 0x45, 0xd8, 0xe8, 0xc2, 0x66, 0xf7, 0xff, 0x25, 0xff, 0xff, 0, 0, 0x89, 0x45, 0xb4, 0x83, 0x7d, 0xb4, 0x2, 0x75, 0xd, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0x8c, 0xe8, 0xc5, 0xd3, 0xfa, 0xff, 0xeb, 0x11, 0x83, 0x7d, 0xb4, 0x1, 0x75, 0xb, 0x8d, 0x55, 0xd8, 0x8d, 0x45, 0xa0, 0xe8, 0xb2, 0xd3, 0xfa, 0xff, 0xeb, 0x8b, 0xe9, 0x6c, 0xff, 0xff, 0xff, 0xba, 0x50, 0, 0, 0, 0xb8, 0x84, 0xad, 0x1c, 0x10, 0xe8, 0x64, 0x26, 0xfe, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x66, 0x3b, 0x42, 0x8, 0x7d, 0xc, 0xc7, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x1, 0, 0, 0, 0xeb, 0xa, 0xc7, 0x85, 0x7c, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x3b, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x7d, 0x8, 0x8d, 0x45, 0x8c, 0xe8, 0x97, 0xf4, 0xf9, 0xff, 0x8b, 0x45, 0xfc, 0x66, 0x3b, 0x45, 0x84, 0x7c, 0x1a, 0x8d, 0x45, 0xa0, 0xe8, 0x72, 0xdd, 0xf8, 0xff, 0xf, 0xbf, 0xd0, 0x8d, 0x45, 0x8c, 0xe8, 0x67, 0xdd, 0xf8, 0xff, 0x98, 0x1, 0xd0, 0x85, 0xc0, 0x7f, 0x5, 0xe9, 0xd2, 0x2, 0, 0, 0x8d, 0x45, 0xa0, 0xe8, 0x53, 0xdd, 0xf8, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0x8c, 0xe8, 0x49, 0xdd, 0xf8, 0xff, 0x1, 0xc2, 0x89, 0x95, 0x78, 0xff, 0xff, 0xff, 0xf, 0xbf, 0x95, 0x78, 0xff, 0xff, 0xff, 0xe8, 0x50, 0x87, 0x6, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x89, 0xc2, 0x8d, 0x45, 0x8c, 0xe8, 0x25, 0xdd, 0xf8, 0xff, 0x98, 0x42, 0x39, 0xc2, 0xf, 0x8e, 0x3f, 0x1, 0, 0, 0x8d, 0x45, 0xa0, 0xe8, 0x13, 0xdd, 0xf8, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0xc, 0xc7, 0x85, 0x74, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xeb, 0x1c, 0xb9, 0x1e, 0x19, 0, 0, 0xbb, 0x82, 0x29, 0x1a, 0x10, 0xba, 0x8e, 0x29, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xfe, 0x85, 0x6, 0, 0x89, 0x85, 0x74, 0xff, 0xff, 0xff, 0x8d, 0x45, 0xa0, 0xe8, 0xde, 0xdc, 0xf8, 0xff, 0xf, 0xbf, 0xd0, 0xe8, 0xf1, 0x86, 0x6, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x89, 0x45, 0xb8, 0xf, 0xbf, 0x45, 0xb8, 0x85, 0xc0, 0x7c, 0xe, 0x8d, 0x45, 0xa0, 0xe8, 0xbd, 0xdc, 0xf8, 0xff, 0x66, 0x3b, 0x45, 0xb8, 0x7f, 0x2, 0xeb, 0xc, 0xc7, 0x85, 0x70, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xeb, 0x1c, 0xb9, 0x20, 0x19, 0, 0, 0xbb, 0xa8, 0x29, 0x1a, 0x10, 0xba, 0xb4, 0x29, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xa5, 0x85, 0x6, 0, 0x89, 0x85, 0x70, 0xff, 0xff, 0xff, 0xf, 0xbf, 0x55, 0xb8, 0x8d, 0x45, 0xa0, 0xe8, 0x29, 0xd2, 0xfa, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0x3b, 0xb3, 0xf8, 0xff, 0xf, 0xbf, 0x55, 0xb8, 0x8d, 0x45, 0xa0, 0xe8, 0xff, 0x2, 0xfd, 0xff, 0xe8, 0x81, 0x86, 0x6, 0, 0x8d, 0x4, 0x40, 0xc1, 0xe8, 0xf, 0x1, 0xc0, 0x66, 0x8b, 0x44, 0x28, 0xe4, 0x89, 0x85, 0x6c, 0xff, 0xff, 0xff, 0xf, 0xbf, 0x95, 0x6c, 0xff, 0xff, 0xff, 0xb8, 0x84, 0xad, 0x1c, 0x10, 0xe8, 0xee, 0x24, 0xfe, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x66, 0x3b, 0x45, 0xfc, 0x7f, 0xcd, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xda, 0x50, 0xf, 0xbf, 0x45, 0xd8, 0x50, 0x31, 0xc9, 0xbb, 0x4, 0, 0, 0, 0xe8, 0x31, 0x86, 0x6, 0, 0x8d, 0x4, 0x40, 0xc1, 0xe8, 0xf, 0x1, 0xc0, 0x89, 0xc2, 0x8b, 0x54, 0x2a, 0xe2, 0xc1, 0xfa, 0x10, 0x8d, 0x85, 0x68, 0xff, 0xff, 0xff, 0xe8, 0x54, 0xca, 0x5, 0, 0x8d, 0x5d, 0xe0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x86, 0xd3, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0x68, 0xff, 0xff, 0xff, 0xe8, 0x8d, 0x86, 0xf7, 0xff, 0xe9, 0xf6, 0, 0, 0, 0x8d, 0x45, 0x8c, 0xe8, 0xd4, 0xdb, 0xf8, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0xc, 0xc7, 0x85, 0x64, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xeb, 0x1c, 0xb9, 0x2b, 0x19, 0, 0, 0xbb, 0xd8, 0x29, 0x1a, 0x10, 0xba, 0xe4, 0x29, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xbf, 0x84, 0x6, 0, 0x89, 0x85, 0x64, 0xff, 0xff, 0xff, 0x8d, 0x45, 0x8c, 0xe8, 0x9f, 0xdb, 0xf8, 0xff, 0xf, 0xbf, 0xd0, 0xe8, 0xb2, 0x85, 0x6, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x89, 0x45, 0xb8, 0xf, 0xbf, 0x45, 0xb8, 0x85, 0xc0, 0x7c, 0xe, 0x8d, 0x45, 0x8c, 0xe8, 0x7e, 0xdb, 0xf8, 0xff, 0x66, 0x3b, 0x45, 0xb8, 0x7f, 0x2, 0xeb, 0xc, 0xc7, 0x85, 0x60, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xeb, 0x1c, 0xb9, 0x2d, 0x19, 0, 0, 0xbb, 0xff, 0x29, 0x1a, 0x10, 0xba, 0xb, 0x2a, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0x66, 0x84, 0x6, 0, 0x89, 0x85, 0x60, 0xff, 0xff, 0xff, 0xf, 0xbf, 0x55, 0xb8, 0x8d, 0x45, 0x8c, 0xe8, 0xea, 0xd0, 0xfa, 0xff, 0x8d, 0x5d, 0xd8, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xfa, 0xb1, 0xf8, 0xff, 0xf, 0xbf, 0x55, 0xb8, 0x8d, 0x45, 0x8c, 0xe8, 0xbe, 0x1, 0xfd, 0xff, 0xb8, 0x1, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xda, 0x50, 0xf, 0xbf, 0x45, 0xd8, 0x50, 0x31, 0xc9, 0xbb, 0x4, 0, 0, 0, 0xba, 0x50, 0, 0, 0, 0x8d, 0x85, 0x5c, 0xff, 0xff, 0xff, 0xe8, 0x57, 0xc9, 0x5, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x8b, 0xd2, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0x5c, 0xff, 0xff, 0xff, 0xe8, 0x92, 0x85, 0xf7, 0xff, 0x8d, 0x45, 0xe0, 0xe8, 0xd2, 0x8b, 0xf7, 0xff, 0xe8, 0x95, 0x88, 0xf7, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x29, 0x45, 0xfc, 0xba, 0x50, 0, 0, 0, 0xb8, 0x84, 0xad, 0x1c, 0x10, 0xe8, 0x6f, 0x23, 0xfe, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xfc, 0x66, 0x3b, 0x42, 0x8, 0x7d, 0xc, 0xc7, 0x85, 0x58, 0xff, 0xff, 0xff, 0x1, 0, 0, 0, 0xeb, 0xa, 0xc7, 0x85, 0x58, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x3b, 0x85, 0x58, 0xff, 0xff, 0xff, 0x7d, 0x8, 0x8d, 0x45, 0x8c, 0xe8, 0xa2, 0xf1, 0xf9, 0xff, 0xe9, 0x6, 0xfd, 0xff, 0xff, 0x8b, 0x45, 0x80, 0xff, 0x4d, 0x80, 0xe9, 0xd8, 0xfb, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0x8c, 0xe8, 0xb4, 0xc9, 0xfa, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xa0, 0xe8, 0xaa, 0xc9, 0xfa, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xc, 0x85, 0xf7, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100fd3a7, 0x5)   pushd(0xd4);                          /* push dword 0xd4 */
    II(0x100fd3ac, 0x5)   calld(sys_check_available_stack_size, 0x689a1); /* call 0x10165d52 */
    II(0x100fd3b1, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100fd3b2, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100fd3b3, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fd3b4, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fd3b5, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fd3b6, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fd3b8, 0x6)   sub(esp, 0xa8);                       /* sub esp, 0xa8 */
    II(0x100fd3be, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100fd3c1, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100fd3c4, 0x3)   lea(edi, ebp - 0x14);                 /* lea edi, [ebp-0x14] */
    II(0x100fd3c7, 0x5)   mov(esi, 0x101b8ad8);                 /* mov esi, 0x101b8ad8 */
    II(0x100fd3cc, 0x1)   movsd_a32();                          /* movsd */
    II(0x100fd3cd, 0x2)   movsw_a32();                          /* movsw */
    II(0x100fd3cf, 0x3)   lea(edi, ebp - 0x1c);                 /* lea edi, [ebp-0x1c] */
    II(0x100fd3d2, 0x5)   mov(esi, 0x101b8ade);                 /* mov esi, 0x101b8ade */
    II(0x100fd3d7, 0x1)   movsd_a32();                          /* movsd */
    II(0x100fd3d8, 0x2)   movsw_a32();                          /* movsw */
    II(0x100fd3da, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100fd3de, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100fd3e1, 0x5)   calld(my_ctor_0x101b38f8, -0x86cf6);  /* call 0x100766f0 */
    II(0x100fd3e6, 0x3)   mov(memd_a32(ss, ebp - 0x24), eax);   /* mov [ebp-0x24], eax */
    II(0x100fd3e9, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100fd3ed, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100fd3f0, 0x5)   calld(my_ctor_0x101b4184, -0x86905);  /* call 0x10076af0 */
    II(0x100fd3f5, 0x5)   mov(eax, memd_a32(ds, 0x101c8172));   /* mov eax, [0x101c8172] */
    II(0x100fd3fa, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100fd3fd, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd3fe, 0x6)   mov(ecx, memd_a32(ds, 0x101c8170));   /* mov ecx, [0x101c8170] */
    II(0x100fd404, 0x3)   sar(ecx, 0x10);                       /* sar ecx, 0x10 */
    II(0x100fd407, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fd409, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd40b, 0x3)   lea(eax, ebp - 0x38);                 /* lea eax, [ebp-0x38] */
    II(0x100fd40e, 0x5)   calld(0x1008b148, -0x722cb);          /* call 0x1008b148 */
    II(0x100fd413, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd416, 0x5)   calld(0x100fd1cc, -0x24f);            /* call 0x100fd1cc */
    II(0x100fd41b, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fd420, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd421, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd423, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd424, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd426, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd427, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd42a, 0x2)   mov(eax, memd_a32(ds, eax));          /* mov eax, [eax] */
    II(0x100fd42c, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100fd42f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd430, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd433, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100fd436, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd437, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fd439, 0x5)   mov(ebx, 0x4);                        /* mov ebx, 0x4 */
    II(0x100fd43e, 0x5)   mov(edx, 0x11);                       /* mov edx, 0x11 */
    II(0x100fd443, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x100fd446, 0x5)   calld(0x1015a2da, 0x5ce8f);           /* call 0x1015a2da */
    II(0x100fd44b, 0x3)   lea(ebx, ebp - 0x20);                 /* lea ebx, [ebp-0x20] */
    II(0x100fd44e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd450, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100fd452, 0x5)   calld(0x1008ac18, -0x7283f);          /* call 0x1008ac18 */
    II(0x100fd457, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd459, 0x3)   lea(eax, ebp - 0x3c);                 /* lea eax, [ebp-0x3c] */
    II(0x100fd45c, 0x5)   calld(0x10075f2c, -0x87535);          /* call 0x10075f2c */
    II(0x100fd461, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fd466, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd467, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd469, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd46a, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd46c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd46d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd470, 0x2)   mov(eax, memd_a32(ds, eax));          /* mov eax, [eax] */
    II(0x100fd472, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100fd475, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd476, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd479, 0x3)   movsx(eax, memw_a32(ds, eax));        /* movsx eax, word [eax] */
    II(0x100fd47c, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd47d, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fd47f, 0x5)   mov(ebx, 0x4);                        /* mov ebx, 0x4 */
    II(0x100fd484, 0x5)   calld(/* sys */ 0x10165e9b, 0x68a12); /* call 0x10165e9b */
    II(0x100fd489, 0x3)   lea(eax, eax + eax * 0x2);            /* lea eax, [eax+eax*2] */
    II(0x100fd48c, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd48f, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100fd491, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd493, 0x4)   mov(edx, memd_a32(ds, edx + ebp - 0x16)); /* mov edx, [edx+ebp-0x16] */
    II(0x100fd497, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100fd49a, 0x3)   lea(eax, ebp - 0x40);                 /* lea eax, [ebp-0x40] */
    II(0x100fd49d, 0x5)   calld(0x1015a2da, 0x5ce38);           /* call 0x1015a2da */
    II(0x100fd4a2, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd4a4, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100fd4a7, 0x5)   calld(0x1008ac18, -0x72894);          /* call 0x1008ac18 */
    II(0x100fd4ac, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd4ae, 0x3)   lea(eax, ebp - 0x40);                 /* lea eax, [ebp-0x40] */
    II(0x100fd4b1, 0x5)   calld(0x10075f2c, -0x8758a);          /* call 0x10075f2c */
    II(0x100fd4b6, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd4b9, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x100fd4bc, 0x1)   dec(eax);                             /* dec eax */
    II(0x100fd4bd, 0x4)   mov(memw_a32(ss, ebp - 0x28), ax);    /* mov [ebp-0x28], ax */
    II(0x100fd4c1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd4c4, 0x4)   mov(ax, memw_a32(ds, eax + 0x2));     /* mov ax, [eax+0x2] */
    II(0x100fd4c8, 0x5)   add(eax, 0x2);                        /* add eax, 0x2 */
    II(0x100fd4cd, 0x4)   mov(memw_a32(ss, ebp - 0x26), ax);    /* mov [ebp-0x26], ax */
    II(0x100fd4d1, 0x7)   mov(memd_a32(ss, ebp - 0x44), 0);     /* mov dword [ebp-0x44], 0x0 */
    II(0x100fd4d8, 0x2)   jmpd(0x100fd4de, 0x4);                /* jmp 0x100fd4de */
l_0x100fd4da:
    II(0x100fd4da, 0x4)   add(memd_a32(ss, ebp - 0x44), 0x2);   /* add dword [ebp-0x44], 0x2 */
l_0x100fd4de:
    II(0x100fd4de, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x44)); /* movsx eax, word [ebp-0x44] */
    II(0x100fd4e2, 0x3)   cmp(eax, 0x8);                        /* cmp eax, 0x8 */
    II(0x100fd4e5, 0x6)   jged(0x100fd597, 0xac);               /* jge dword 0x100fd597 */
    II(0x100fd4eb, 0x7)   mov(memd_a32(ss, ebp - 0x48), 0);     /* mov dword [ebp-0x48], 0x0 */
    II(0x100fd4f2, 0x2)   jmpd(0x100fd4fa, 0x6);                /* jmp 0x100fd4fa */
l_0x100fd4f4:
    II(0x100fd4f4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x48));   /* mov eax, [ebp-0x48] */
    II(0x100fd4f7, 0x3)   inc(memd_a32(ss, ebp - 0x48));        /* inc dword [ebp-0x48] */
l_0x100fd4fa:
    II(0x100fd4fa, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x48)); /* movsx eax, word [ebp-0x48] */
    II(0x100fd4fe, 0x3)   cmp(eax, 0x3);                        /* cmp eax, 0x3 */
    II(0x100fd501, 0x6)   jged(0x100fd592, 0x8b);               /* jge dword 0x100fd592 */
    II(0x100fd507, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x44)); /* movsx edx, word [ebp-0x44] */
    II(0x100fd50b, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x100fd50e, 0x5)   mov(eax, 0x101c5348);                 /* mov eax, 0x101c5348 */
    II(0x100fd513, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100fd515, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100fd518, 0x5)   calld(0x1008b1a4, -0x72379);          /* call 0x1008b1a4 */
    II(0x100fd51d, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100fd520, 0x3)   lea(eax, ebp - 0x38);                 /* lea eax, [ebp-0x38] */
    II(0x100fd523, 0x5)   calld(0x101082ce, 0xada6);            /* call 0x101082ce */
    II(0x100fd528, 0x2)   test(al, al);                         /* test al, al */
    II(0x100fd52a, 0x2)   jzd(0x100fd58d, 0x61);                /* jz 0x100fd58d */
    II(0x100fd52c, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x26)); /* movsx edx, word [ebp-0x26] */
    II(0x100fd530, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fd534, 0x5)   calld(0x10073cfd, -0x8983c);          /* call 0x10073cfd */
    II(0x100fd539, 0x5)   and_(eax, 0xffff);                    /* and eax, 0xffff */
    II(0x100fd53e, 0x3)   mov(memd_a32(ss, ebp - 0x4c), eax);   /* mov [ebp-0x4c], eax */
    II(0x100fd541, 0x4)   cmp(memd_a32(ss, ebp - 0x4c), 0x2);   /* cmp dword [ebp-0x4c], 0x2 */
    II(0x100fd545, 0x2)   jzd(0x100fd54d, 0x6);                 /* jz 0x100fd54d */
    II(0x100fd547, 0x4)   cmp(memd_a32(ss, ebp - 0x4c), 0x4);   /* cmp dword [ebp-0x4c], 0x4 */
    II(0x100fd54b, 0x2)   jnzd(0x100fd58d, 0x40);               /* jnz 0x100fd58d */
l_0x100fd54d:
    II(0x100fd54d, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fd552, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd553, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd555, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd556, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd558, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd559, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x26)); /* movsx eax, word [ebp-0x26] */
    II(0x100fd55d, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd55e, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fd562, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd563, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fd565, 0x5)   mov(ebx, 0x4);                        /* mov ebx, 0x4 */
    II(0x100fd56a, 0x5)   mov(edx, 0x27);                       /* mov edx, 0x27 */
    II(0x100fd56f, 0x3)   lea(eax, ebp - 0x50);                 /* lea eax, [ebp-0x50] */
    II(0x100fd572, 0x5)   calld(0x1015a2da, 0x5cd63);           /* call 0x1015a2da */
    II(0x100fd577, 0x3)   lea(ebx, ebp - 0x20);                 /* lea ebx, [ebp-0x20] */
    II(0x100fd57a, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd57c, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100fd57e, 0x5)   calld(0x1008ac18, -0x7296b);          /* call 0x1008ac18 */
    II(0x100fd583, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd585, 0x3)   lea(eax, ebp - 0x50);                 /* lea eax, [ebp-0x50] */
    II(0x100fd588, 0x5)   calld(0x10075f2c, -0x87661);          /* call 0x10075f2c */
l_0x100fd58d:
    II(0x100fd58d, 0x5)   jmpd(0x100fd4f4, -0x9e);              /* jmp 0x100fd4f4 */
l_0x100fd592:
    II(0x100fd592, 0x5)   jmpd(0x100fd4da, -0xbd);              /* jmp 0x100fd4da */
l_0x100fd597:
    II(0x100fd597, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100fd59b, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd59e, 0x5)   calld(0x100ca068, -0x3353b);          /* call 0x100ca068 */
    II(0x100fd5a3, 0x3)   mov(memd_a32(ss, ebp - 0x64), eax);   /* mov [ebp-0x64], eax */
    II(0x100fd5a6, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100fd5aa, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100fd5ae, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd5b1, 0x5)   calld(0x100ca068, -0x3354e);          /* call 0x100ca068 */
    II(0x100fd5b6, 0x3)   mov(memd_a32(ss, ebp - 0x78), eax);   /* mov [ebp-0x78], eax */
    II(0x100fd5b9, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100fd5bd, 0x5)   mov(edx, 0x51);                       /* mov edx, 0x51 */
    II(0x100fd5c2, 0x5)   mov(eax, 0x101cad84);                 /* mov eax, 0x101cad84 */
    II(0x100fd5c7, 0x5)   calld(0x100dfd2c, -0x1d8a0);          /* call 0x100dfd2c */
    II(0x100fd5cc, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100fd5d0, 0x3)   mov(memd_a32(ss, ebp - 0x7c), eax);   /* mov [ebp-0x7c], eax */
    II(0x100fd5d3, 0x7)   mov(memd_a32(ss, ebp - 0x80), 0x2);   /* mov dword [ebp-0x80], 0x2 */
l_0x100fd5da:
    II(0x100fd5da, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100fd5dd, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x7c));    /* cmp ax, [ebp-0x7c] */
    II(0x100fd5e1, 0x2)   jld(0x100fd5eb, 0x8);                 /* jl 0x100fd5eb */
    II(0x100fd5e3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x80)); /* movsx eax, word [ebp-0x80] */
    II(0x100fd5e7, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd5e9, 0x2)   jgd(0x100fd5f0, 0x5);                 /* jg 0x100fd5f0 */
l_0x100fd5eb:
    II(0x100fd5eb, 0x5)   jmpd(0x100fda02, 0x412);              /* jmp 0x100fda02 */
l_0x100fd5f0:
    II(0x100fd5f0, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd5f3, 0x5)   calld(0x1009cb94, -0x60a64);          /* call 0x1009cb94 */
    II(0x100fd5f8, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd5fb, 0x5)   calld(0x1009cb94, -0x60a6c);          /* call 0x1009cb94 */
    II(0x100fd600, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd603, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x100fd606, 0x3)   sub(eax, memd_a32(ss, ebp - 0x80));   /* sub eax, [ebp-0x80] */
    II(0x100fd609, 0x4)   mov(memw_a32(ss, ebp - 0x28), ax);    /* mov [ebp-0x28], ax */
    II(0x100fd60d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fd610, 0x4)   mov(ax, memw_a32(ds, eax + 0x2));     /* mov ax, [eax+0x2] */
    II(0x100fd614, 0x3)   add(eax, memd_a32(ss, ebp - 0x80));   /* add eax, [ebp-0x80] */
    II(0x100fd617, 0x1)   inc(eax);                             /* inc eax */
    II(0x100fd618, 0x4)   mov(memw_a32(ss, ebp - 0x26), ax);    /* mov [ebp-0x26], ax */
    II(0x100fd61c, 0x7)   mov(memd_a32(ss, ebp - 0x44), 0);     /* mov dword [ebp-0x44], 0x0 */
    II(0x100fd623, 0x2)   jmpd(0x100fd629, 0x4);                /* jmp 0x100fd629 */
l_0x100fd625:
    II(0x100fd625, 0x4)   add(memd_a32(ss, ebp - 0x44), 0x2);   /* add dword [ebp-0x44], 0x2 */
l_0x100fd629:
    II(0x100fd629, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x44)); /* movsx eax, word [ebp-0x44] */
    II(0x100fd62d, 0x3)   cmp(eax, 0x8);                        /* cmp eax, 0x8 */
    II(0x100fd630, 0x6)   jged(0x100fd6b9, 0x83);               /* jge dword 0x100fd6b9 */
    II(0x100fd636, 0x7)   mov(memd_a32(ss, ebp - 0x48), 0);     /* mov dword [ebp-0x48], 0x0 */
    II(0x100fd63d, 0x2)   jmpd(0x100fd645, 0x6);                /* jmp 0x100fd645 */
l_0x100fd63f:
    II(0x100fd63f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x48));   /* mov eax, [ebp-0x48] */
    II(0x100fd642, 0x3)   inc(memd_a32(ss, ebp - 0x48));        /* inc dword [ebp-0x48] */
l_0x100fd645:
    II(0x100fd645, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x80)); /* movsx eax, word [ebp-0x80] */
    II(0x100fd649, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100fd64b, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x48)); /* movsx edx, word [ebp-0x48] */
    II(0x100fd64f, 0x1)   inc(eax);                             /* inc eax */
    II(0x100fd650, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100fd652, 0x2)   jged(0x100fd6b4, 0x60);               /* jge 0x100fd6b4 */
    II(0x100fd654, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x44)); /* movsx edx, word [ebp-0x44] */
    II(0x100fd658, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x100fd65b, 0x5)   mov(eax, 0x101c5348);                 /* mov eax, 0x101c5348 */
    II(0x100fd660, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100fd662, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100fd665, 0x5)   calld(0x1008b1a4, -0x724c6);          /* call 0x1008b1a4 */
    II(0x100fd66a, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100fd66d, 0x3)   lea(eax, ebp - 0x38);                 /* lea eax, [ebp-0x38] */
    II(0x100fd670, 0x5)   calld(0x101082ce, 0xac59);            /* call 0x101082ce */
    II(0x100fd675, 0x2)   test(al, al);                         /* test al, al */
    II(0x100fd677, 0x2)   jzd(0x100fd6b2, 0x39);                /* jz 0x100fd6b2 */
    II(0x100fd679, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x26)); /* movsx edx, word [ebp-0x26] */
    II(0x100fd67d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fd681, 0x5)   calld(0x10073d48, -0x8993e);          /* call 0x10073d48 */
    II(0x100fd686, 0x5)   and_(eax, 0xffff);                    /* and eax, 0xffff */
    II(0x100fd68b, 0x3)   mov(memd_a32(ss, ebp - 0x4c), eax);   /* mov [ebp-0x4c], eax */
    II(0x100fd68e, 0x4)   cmp(memd_a32(ss, ebp - 0x4c), 0x2);   /* cmp dword [ebp-0x4c], 0x2 */
    II(0x100fd692, 0x2)   jnzd(0x100fd6a1, 0xd);                /* jnz 0x100fd6a1 */
    II(0x100fd694, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100fd697, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd69a, 0x5)   calld(0x100aaa64, -0x52c3b);          /* call 0x100aaa64 */
    II(0x100fd69f, 0x2)   jmpd(0x100fd6b2, 0x11);               /* jmp 0x100fd6b2 */
l_0x100fd6a1:
    II(0x100fd6a1, 0x4)   cmp(memd_a32(ss, ebp - 0x4c), 0x1);   /* cmp dword [ebp-0x4c], 0x1 */
    II(0x100fd6a5, 0x2)   jnzd(0x100fd6b2, 0xb);                /* jnz 0x100fd6b2 */
    II(0x100fd6a7, 0x3)   lea(edx, ebp - 0x28);                 /* lea edx, [ebp-0x28] */
    II(0x100fd6aa, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd6ad, 0x5)   calld(0x100aaa64, -0x52c4e);          /* call 0x100aaa64 */
l_0x100fd6b2:
    II(0x100fd6b2, 0x2)   jmpd(0x100fd63f, -0x75);              /* jmp 0x100fd63f */
l_0x100fd6b4:
    II(0x100fd6b4, 0x5)   jmpd(0x100fd625, -0x94);              /* jmp 0x100fd625 */
l_0x100fd6b9:
    II(0x100fd6b9, 0x5)   mov(edx, 0x50);                       /* mov edx, 0x50 */
    II(0x100fd6be, 0x5)   mov(eax, 0x101cad84);                 /* mov eax, 0x101cad84 */
    II(0x100fd6c3, 0x5)   calld(0x100dfd2c, -0x1d99c);          /* call 0x100dfd2c */
    II(0x100fd6c8, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd6ca, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100fd6cd, 0x4)   cmp(ax, memw_a32(ds, edx + 0x8));     /* cmp ax, [edx+0x8] */
    II(0x100fd6d1, 0x2)   jged(0x100fd6df, 0xc);                /* jge 0x100fd6df */
    II(0x100fd6d3, 0xa)   mov(memd_a32(ss, ebp - 0x84), 0x1);   /* mov dword [ebp+0xffffff7c], 0x1 */
    II(0x100fd6dd, 0x2)   jmpd(0x100fd6e9, 0xa);                /* jmp 0x100fd6e9 */
l_0x100fd6df:
    II(0x100fd6df, 0xa)   mov(memd_a32(ss, ebp - 0x84), 0);     /* mov dword [ebp+0xffffff7c], 0x0 */
l_0x100fd6e9:
    II(0x100fd6e9, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fd6ed, 0x6)   cmp(eax, memd_a32(ss, ebp - 0x84));   /* cmp eax, [ebp+0xffffff7c] */
    II(0x100fd6f3, 0x2)   jged(0x100fd6fd, 0x8);                /* jge 0x100fd6fd */
    II(0x100fd6f5, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd6f8, 0x5)   calld(0x1009cb94, -0x60b69);          /* call 0x1009cb94 */
l_0x100fd6fd:
    II(0x100fd6fd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100fd700, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x7c));    /* cmp ax, [ebp-0x7c] */
    II(0x100fd704, 0x2)   jld(0x100fd720, 0x1a);                /* jl 0x100fd720 */
    II(0x100fd706, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd709, 0x5)   calld(my_3_get_count, -0x7228e);      /* call 0x1008b480 */
    II(0x100fd70e, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100fd711, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd714, 0x5)   calld(my_3_get_count, -0x72299);      /* call 0x1008b480 */
    II(0x100fd719, 0x1)   cwde();                               /* cwde */
    II(0x100fd71a, 0x2)   add(eax, edx);                        /* add eax, edx */
    II(0x100fd71c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd71e, 0x2)   jgd(0x100fd725, 0x5);                 /* jg 0x100fd725 */
l_0x100fd720:
    II(0x100fd720, 0x5)   jmpd(0x100fd9f7, 0x2d2);              /* jmp 0x100fd9f7 */
l_0x100fd725:
    II(0x100fd725, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd728, 0x5)   calld(my_3_get_count, -0x722ad);      /* call 0x1008b480 */
    II(0x100fd72d, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd72f, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd732, 0x5)   calld(my_3_get_count, -0x722b7);      /* call 0x1008b480 */
    II(0x100fd737, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x100fd739, 0x6)   mov(memd_a32(ss, ebp - 0x88), edx);   /* mov [ebp+0xffffff78], edx */
    II(0x100fd73f, 0x7)   movsx(edx, memw_a32(ss, ebp - 0x88)); /* movsx edx, word [ebp+0xffffff78] */
    II(0x100fd746, 0x5)   calld(/* sys */ 0x10165e9b, 0x68750); /* call 0x10165e9b */
    II(0x100fd74b, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x100fd74e, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd751, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd753, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd756, 0x5)   calld(my_3_get_count, -0x722db);      /* call 0x1008b480 */
    II(0x100fd75b, 0x1)   cwde();                               /* cwde */
    II(0x100fd75c, 0x1)   inc(edx);                             /* inc edx */
    II(0x100fd75d, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100fd75f, 0x6)   jled(0x100fd8a4, 0x13f);              /* jle dword 0x100fd8a4 */
    II(0x100fd765, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd768, 0x5)   calld(my_3_get_count, -0x722ed);      /* call 0x1008b480 */
    II(0x100fd76d, 0x1)   cwde();                               /* cwde */
    II(0x100fd76e, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd770, 0x2)   jled(0x100fd77e, 0xc);                /* jle 0x100fd77e */
    II(0x100fd772, 0xa)   mov(memd_a32(ss, ebp - 0x8c), 0);     /* mov dword [ebp+0xffffff74], 0x0 */
    II(0x100fd77c, 0x2)   jmpd(0x100fd79a, 0x1c);               /* jmp 0x100fd79a */
l_0x100fd77e:
    II(0x100fd77e, 0x5)   mov(ecx, 0x191e);                     /* mov ecx, 0x191e */
    II(0x100fd783, 0x5)   mov(ebx, 0x101a2982);                 /* mov ebx, 0x101a2982 */ /* "gamemgr.cpp" */
    II(0x100fd788, 0x5)   mov(edx, 0x101a298e);                 /* mov edx, 0x101a298e */ /* "land_tiles.GetCount() > 0" */
    II(0x100fd78d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd78f, 0x5)   calld(sys_assert, 0x685fe);           /* call 0x10165d92 */
    II(0x100fd794, 0x6)   mov(memd_a32(ss, ebp - 0x8c), eax);   /* mov [ebp+0xffffff74], eax */
l_0x100fd79a:
    II(0x100fd79a, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd79d, 0x5)   calld(my_3_get_count, -0x72322);      /* call 0x1008b480 */
    II(0x100fd7a2, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100fd7a5, 0x5)   calld(/* sys */ 0x10165e9b, 0x686f1); /* call 0x10165e9b */
    II(0x100fd7aa, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x100fd7ad, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd7b0, 0x3)   mov(memd_a32(ss, ebp - 0x48), eax);   /* mov [ebp-0x48], eax */
    II(0x100fd7b3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x48)); /* movsx eax, word [ebp-0x48] */
    II(0x100fd7b7, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd7b9, 0x2)   jld(0x100fd7c9, 0xe);                 /* jl 0x100fd7c9 */
    II(0x100fd7bb, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd7be, 0x5)   calld(my_3_get_count, -0x72343);      /* call 0x1008b480 */
    II(0x100fd7c3, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x48));    /* cmp ax, [ebp-0x48] */
    II(0x100fd7c7, 0x2)   jgd(0x100fd7cb, 0x2);                 /* jg 0x100fd7cb */
l_0x100fd7c9:
    II(0x100fd7c9, 0x2)   jmpd(0x100fd7d7, 0xc);                /* jmp 0x100fd7d7 */
l_0x100fd7cb:
    II(0x100fd7cb, 0xa)   mov(memd_a32(ss, ebp - 0x90), 0);     /* mov dword [ebp+0xffffff70], 0x0 */
    II(0x100fd7d5, 0x2)   jmpd(0x100fd7f3, 0x1c);               /* jmp 0x100fd7f3 */
l_0x100fd7d7:
    II(0x100fd7d7, 0x5)   mov(ecx, 0x1920);                     /* mov ecx, 0x1920 */
    II(0x100fd7dc, 0x5)   mov(ebx, 0x101a29a8);                 /* mov ebx, 0x101a29a8 */ /* "gamemgr.cpp" */
    II(0x100fd7e1, 0x5)   mov(edx, 0x101a29b4);                 /* mov edx, 0x101a29b4 */ /* "i >= 0 && i < land_tiles.GetCount()" */
    II(0x100fd7e6, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd7e8, 0x5)   calld(sys_assert, 0x685a5);           /* call 0x10165d92 */
    II(0x100fd7ed, 0x6)   mov(memd_a32(ss, ebp - 0x90), eax);   /* mov [ebp+0xffffff70], eax */
l_0x100fd7f3:
    II(0x100fd7f3, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x48)); /* movsx edx, word [ebp-0x48] */
    II(0x100fd7f7, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd7fa, 0x5)   calld(0x100aaa28, -0x52dd7);          /* call 0x100aaa28 */
    II(0x100fd7ff, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd801, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100fd804, 0x5)   calld(0x10088b44, -0x74cc5);          /* call 0x10088b44 */
    II(0x100fd809, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x48)); /* movsx edx, word [ebp-0x48] */
    II(0x100fd80d, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fd810, 0x5)   calld(0x100cdb14, -0x2fd01);          /* call 0x100cdb14 */
l_0x100fd815:
    II(0x100fd815, 0x5)   calld(/* sys */ 0x10165e9b, 0x68681); /* call 0x10165e9b */
    II(0x100fd81a, 0x3)   lea(eax, eax + eax * 0x2);            /* lea eax, [eax+eax*2] */
    II(0x100fd81d, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd820, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100fd822, 0x5)   mov(ax, memw_a32(ds, eax + ebp - 0x1c)); /* mov ax, [eax+ebp-0x1c] */
    II(0x100fd827, 0x6)   mov(memd_a32(ss, ebp - 0x94), eax);   /* mov [ebp+0xffffff6c], eax */
    II(0x100fd82d, 0x7)   movsx(edx, memw_a32(ss, ebp - 0x94)); /* movsx edx, word [ebp+0xffffff6c] */
    II(0x100fd834, 0x5)   mov(eax, 0x101cad84);                 /* mov eax, 0x101cad84 */
    II(0x100fd839, 0x5)   calld(0x100dfd2c, -0x1db12);          /* call 0x100dfd2c */
    II(0x100fd83e, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100fd842, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x100fd846, 0x2)   jgd(0x100fd815, -0x33);               /* jg 0x100fd815 */
    II(0x100fd848, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fd84d, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd84e, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd850, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd851, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd853, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd854, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x26)); /* movsx eax, word [ebp-0x26] */
    II(0x100fd858, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd859, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fd85d, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd85e, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fd860, 0x5)   mov(ebx, 0x4);                        /* mov ebx, 0x4 */
    II(0x100fd865, 0x5)   calld(/* sys */ 0x10165e9b, 0x68631); /* call 0x10165e9b */
    II(0x100fd86a, 0x3)   lea(eax, eax + eax * 0x2);            /* lea eax, [eax+eax*2] */
    II(0x100fd86d, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd870, 0x2)   add(eax, eax);                        /* add eax, eax */
    II(0x100fd872, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd874, 0x4)   mov(edx, memd_a32(ds, edx + ebp - 0x1e)); /* mov edx, [edx+ebp-0x1e] */
    II(0x100fd878, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x100fd87b, 0x6)   lea(eax, ebp - 0x98);                 /* lea eax, [ebp+0xffffff68] */
    II(0x100fd881, 0x5)   calld(0x1015a2da, 0x5ca54);           /* call 0x1015a2da */
    II(0x100fd886, 0x3)   lea(ebx, ebp - 0x20);                 /* lea ebx, [ebp-0x20] */
    II(0x100fd889, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd88b, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100fd88d, 0x5)   calld(0x1008ac18, -0x72c7a);          /* call 0x1008ac18 */
    II(0x100fd892, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd894, 0x6)   lea(eax, ebp - 0x98);                 /* lea eax, [ebp+0xffffff68] */
    II(0x100fd89a, 0x5)   calld(0x10075f2c, -0x87973);          /* call 0x10075f2c */
    II(0x100fd89f, 0x5)   jmpd(0x100fd99a, 0xf6);               /* jmp 0x100fd99a */
l_0x100fd8a4:
    II(0x100fd8a4, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd8a7, 0x5)   calld(my_3_get_count, -0x7242c);      /* call 0x1008b480 */
    II(0x100fd8ac, 0x1)   cwde();                               /* cwde */
    II(0x100fd8ad, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd8af, 0x2)   jled(0x100fd8bd, 0xc);                /* jle 0x100fd8bd */
    II(0x100fd8b1, 0xa)   mov(memd_a32(ss, ebp - 0x9c), 0);     /* mov dword [ebp+0xffffff64], 0x0 */
    II(0x100fd8bb, 0x2)   jmpd(0x100fd8d9, 0x1c);               /* jmp 0x100fd8d9 */
l_0x100fd8bd:
    II(0x100fd8bd, 0x5)   mov(ecx, 0x192b);                     /* mov ecx, 0x192b */
    II(0x100fd8c2, 0x5)   mov(ebx, 0x101a29d8);                 /* mov ebx, 0x101a29d8 */ /* "gamemgr.cpp" */
    II(0x100fd8c7, 0x5)   mov(edx, 0x101a29e4);                 /* mov edx, 0x101a29e4 */ /* "water_tiles.GetCount() > 0" */
    II(0x100fd8cc, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd8ce, 0x5)   calld(sys_assert, 0x684bf);           /* call 0x10165d92 */
    II(0x100fd8d3, 0x6)   mov(memd_a32(ss, ebp - 0x9c), eax);   /* mov [ebp+0xffffff64], eax */
l_0x100fd8d9:
    II(0x100fd8d9, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd8dc, 0x5)   calld(my_3_get_count, -0x72461);      /* call 0x1008b480 */
    II(0x100fd8e1, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100fd8e4, 0x5)   calld(/* sys */ 0x10165e9b, 0x685b2); /* call 0x10165e9b */
    II(0x100fd8e9, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x100fd8ec, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x100fd8ef, 0x3)   mov(memd_a32(ss, ebp - 0x48), eax);   /* mov [ebp-0x48], eax */
    II(0x100fd8f2, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x48)); /* movsx eax, word [ebp-0x48] */
    II(0x100fd8f6, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100fd8f8, 0x2)   jld(0x100fd908, 0xe);                 /* jl 0x100fd908 */
    II(0x100fd8fa, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd8fd, 0x5)   calld(my_3_get_count, -0x72482);      /* call 0x1008b480 */
    II(0x100fd902, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x48));    /* cmp ax, [ebp-0x48] */
    II(0x100fd906, 0x2)   jgd(0x100fd90a, 0x2);                 /* jg 0x100fd90a */
l_0x100fd908:
    II(0x100fd908, 0x2)   jmpd(0x100fd916, 0xc);                /* jmp 0x100fd916 */
l_0x100fd90a:
    II(0x100fd90a, 0xa)   mov(memd_a32(ss, ebp - 0xa0), 0);     /* mov dword [ebp+0xffffff60], 0x0 */
    II(0x100fd914, 0x2)   jmpd(0x100fd932, 0x1c);               /* jmp 0x100fd932 */
l_0x100fd916:
    II(0x100fd916, 0x5)   mov(ecx, 0x192d);                     /* mov ecx, 0x192d */
    II(0x100fd91b, 0x5)   mov(ebx, 0x101a29ff);                 /* mov ebx, 0x101a29ff */ /* "gamemgr.cpp" */
    II(0x100fd920, 0x5)   mov(edx, 0x101a2a0b);                 /* mov edx, 0x101a2a0b */ /* "i >= 0 && i < water_tiles.GetCount()" */
    II(0x100fd925, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd927, 0x5)   calld(sys_assert, 0x68466);           /* call 0x10165d92 */
    II(0x100fd92c, 0x6)   mov(memd_a32(ss, ebp - 0xa0), eax);   /* mov [ebp+0xffffff60], eax */
l_0x100fd932:
    II(0x100fd932, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x48)); /* movsx edx, word [ebp-0x48] */
    II(0x100fd936, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd939, 0x5)   calld(0x100aaa28, -0x52f16);          /* call 0x100aaa28 */
    II(0x100fd93e, 0x3)   lea(ebx, ebp - 0x28);                 /* lea ebx, [ebp-0x28] */
    II(0x100fd941, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd943, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100fd945, 0x5)   calld(0x10088b44, -0x74e06);          /* call 0x10088b44 */
    II(0x100fd94a, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x48)); /* movsx edx, word [ebp-0x48] */
    II(0x100fd94e, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd951, 0x5)   calld(0x100cdb14, -0x2fe42);          /* call 0x100cdb14 */
    II(0x100fd956, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fd95b, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd95c, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd95e, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd95f, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fd961, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd962, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x26)); /* movsx eax, word [ebp-0x26] */
    II(0x100fd966, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd967, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x28)); /* movsx eax, word [ebp-0x28] */
    II(0x100fd96b, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fd96c, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fd96e, 0x5)   mov(ebx, 0x4);                        /* mov ebx, 0x4 */
    II(0x100fd973, 0x5)   mov(edx, 0x50);                       /* mov edx, 0x50 */
    II(0x100fd978, 0x6)   lea(eax, ebp - 0xa4);                 /* lea eax, [ebp+0xffffff5c] */
    II(0x100fd97e, 0x5)   calld(0x1015a2da, 0x5c957);           /* call 0x1015a2da */
    II(0x100fd983, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd985, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100fd988, 0x5)   calld(0x1008ac18, -0x72d75);          /* call 0x1008ac18 */
    II(0x100fd98d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fd98f, 0x6)   lea(eax, ebp - 0xa4);                 /* lea eax, [ebp+0xffffff5c] */
    II(0x100fd995, 0x5)   calld(0x10075f2c, -0x87a6e);          /* call 0x10075f2c */
l_0x100fd99a:
    II(0x100fd99a, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100fd99d, 0x5)   calld(0x10076574, -0x8742e);          /* call 0x10076574 */
    II(0x100fd9a2, 0x5)   calld(0x1007623c, -0x8776b);          /* call 0x1007623c */
    II(0x100fd9a7, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100fd9ab, 0x3)   sub(memd_a32(ss, ebp - 0x4), eax);    /* sub [ebp-0x4], eax */
    II(0x100fd9ae, 0x5)   mov(edx, 0x50);                       /* mov edx, 0x50 */
    II(0x100fd9b3, 0x5)   mov(eax, 0x101cad84);                 /* mov eax, 0x101cad84 */
    II(0x100fd9b8, 0x5)   calld(0x100dfd2c, -0x1dc91);          /* call 0x100dfd2c */
    II(0x100fd9bd, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fd9bf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100fd9c2, 0x4)   cmp(ax, memw_a32(ds, edx + 0x8));     /* cmp ax, [edx+0x8] */
    II(0x100fd9c6, 0x2)   jged(0x100fd9d4, 0xc);                /* jge 0x100fd9d4 */
    II(0x100fd9c8, 0xa)   mov(memd_a32(ss, ebp - 0xa8), 0x1);   /* mov dword [ebp+0xffffff58], 0x1 */
    II(0x100fd9d2, 0x2)   jmpd(0x100fd9de, 0xa);                /* jmp 0x100fd9de */
l_0x100fd9d4:
    II(0x100fd9d4, 0xa)   mov(memd_a32(ss, ebp - 0xa8), 0);     /* mov dword [ebp+0xffffff58], 0x0 */
l_0x100fd9de:
    II(0x100fd9de, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fd9e2, 0x6)   cmp(eax, memd_a32(ss, ebp - 0xa8));   /* cmp eax, [ebp+0xffffff58] */
    II(0x100fd9e8, 0x2)   jged(0x100fd9f2, 0x8);                /* jge 0x100fd9f2 */
    II(0x100fd9ea, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fd9ed, 0x5)   calld(0x1009cb94, -0x60e5e);          /* call 0x1009cb94 */
l_0x100fd9f2:
    II(0x100fd9f2, 0x5)   jmpd(0x100fd6fd, -0x2fa);             /* jmp 0x100fd6fd */
l_0x100fd9f7:
    II(0x100fd9f7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x80));   /* mov eax, [ebp-0x80] */
    II(0x100fd9fa, 0x3)   dec(memd_a32(ss, ebp - 0x80));        /* dec dword [ebp-0x80] */
    II(0x100fd9fd, 0x5)   jmpd(0x100fd5da, -0x428);             /* jmp 0x100fd5da */
l_0x100fda02:
    II(0x100fda02, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fda04, 0x3)   lea(eax, ebp - 0x74);                 /* lea eax, [ebp-0x74] */
    II(0x100fda07, 0x5)   calld(0x100aa3c0, -0x5364c);          /* call 0x100aa3c0 */
    II(0x100fda0c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fda0e, 0x3)   lea(eax, ebp - 0x60);                 /* lea eax, [ebp-0x60] */
    II(0x100fda11, 0x5)   calld(0x100aa3c0, -0x53656);          /* call 0x100aa3c0 */
    II(0x100fda16, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fda18, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100fda1b, 0x5)   calld(0x10075f2c, -0x87af4);          /* call 0x10075f2c */
    II(0x100fda20, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100fda22, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100fda23, 0x1)   popd(edi);                            /* pop edi */
    II(0x100fda24, 0x1)   popd(esi);                            /* pop esi */
    II(0x100fda25, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100fda26, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100fda27, 0x1)   retd();                               /* ret */
FUNC_END

