FUNC_BEGIN(0x100a1c16, 0x71f986db9a902f84, 0x20, ({0x68, 0x30, 0, 0, 0, 0xe8, 0x32, 0x41, 0xc, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x1c, 0, 0, 0, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xf8, 0x88, 0x5d, 0xfc, 0x80, 0x4d, 0xf0, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0xbb, 0x48, 0xfd, 0xff, 0x89, 0x45, 0xe8, 0x80, 0x65, 0xf0, 0xfe, 0x31, 0xd2, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x44, 0xe8, 0x1c, 0x91, 0x9, 0, 0x84, 0xc0, 0x74, 0x15, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x44, 0xe8, 0x10, 0x49, 0xfd, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x66, 0x3b, 0x45, 0xf8, 0x74, 0x2, 0xeb, 0x20, 0x31, 0xdb, 0x8a, 0x5d, 0xfc, 0x8b, 0x45, 0xf4, 0x83, 0xc0, 0x44, 0xe8, 0x80, 0x49, 0xfd, 0xff, 0x8b, 0x4d, 0xf4, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0xf8, 0xfc, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x16, 0xc7, 0x45, 0xe4, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xc9, 0x42, 0xfd, 0xff, 0xe9, 0x8f, 0, 0, 0, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x86, 0x46, 0xfd, 0xff, 0x8d, 0x5d, 0xec, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x7e, 0x47, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xa9, 0x90, 0x9, 0, 0x84, 0xc0, 0x74, 0x4e, 0x8d, 0x45, 0xec, 0xe8, 0xcc, 0x46, 0xfd, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x66, 0x3b, 0x45, 0xf8, 0x75, 0x1d, 0x31, 0xdb, 0x8a, 0x5d, 0xfc, 0x8d, 0x45, 0xec, 0xe8, 0x1d, 0x47, 0xfd, 0xff, 0x8b, 0x4d, 0xf4, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0x8d, 0xfc, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x13, 0xc7, 0x45, 0xe4, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x5e, 0x42, 0xfd, 0xff, 0xeb, 0x27, 0x8d, 0x45, 0xec, 0xe8, 0xe0, 0x4e, 0xfd, 0xff, 0xeb, 0xa4, 0xc7, 0x45, 0xe4, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x41, 0x42, 0xfd, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x35, 0x42, 0xfd, 0xff, 0x8b, 0x45, 0xe4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x100a1c16, 0x5)   pushd(0x30);                          /* push dword 0x30 */
    II(0x100a1c1b, 0x5)   calld(sys_check_available_stack_size, 0xc4132); /* call 0x10165d52 */
    II(0x100a1c20, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100a1c21, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a1c22, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a1c23, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a1c24, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a1c26, 0x6)   sub(esp, 0x1c);                       /* sub esp, 0x1c */
    II(0x100a1c2c, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100a1c2f, 0x3)   mov(memd_a32(ss, ebp - 0x8), edx);    /* mov [ebp-0x8], edx */
    II(0x100a1c32, 0x3)   mov(memb_a32(ss, ebp - 0x4), bl);     /* mov [ebp-0x4], bl */
    II(0x100a1c35, 0x4)   or_(memb_a32(ss, ebp - 0x10), 0x1);   /* or byte [ebp-0x10], 0x1 */
    II(0x100a1c39, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1c3c, 0x5)   calld(0x100764fc, -0x2b745);          /* call 0x100764fc */
    II(0x100a1c41, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100a1c44, 0x4)   and_(memb_a32(ss, ebp - 0x10), -0x2 /* 0xfe */); /* and byte [ebp-0x10], 0xfe */
    II(0x100a1c48, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1c4a, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a1c4d, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1c50, 0x5)   calld(0x1013ad71, 0x9911c);           /* call 0x1013ad71 */
    II(0x100a1c55, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a1c57, 0x2)   jzd(0x100a1c6e, 0x15);                /* jz 0x100a1c6e */
    II(0x100a1c59, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a1c5c, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1c5f, 0x5)   calld(0x10076574, -0x2b6f0);          /* call 0x10076574 */
    II(0x100a1c64, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100a1c68, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x100a1c6c, 0x2)   jzd(0x100a1c70, 0x2);                 /* jz 0x100a1c70 */
l_0x100a1c6e:
    II(0x100a1c6e, 0x2)   jmpd(0x100a1c90, 0x20);               /* jmp 0x100a1c90 */
l_0x100a1c70:
    II(0x100a1c70, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100a1c72, 0x3)   mov(bl, memb_a32(ss, ebp - 0x4));     /* mov bl, [ebp-0x4] */
    II(0x100a1c75, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100a1c78, 0x3)   add(eax, 0x44);                       /* add eax, 0x44 */
    II(0x100a1c7b, 0x5)   calld(0x10076600, -0x2b680);          /* call 0x10076600 */
    II(0x100a1c80, 0x3)   mov(ecx, memd_a32(ss, ebp - 0xc));    /* mov ecx, [ebp-0xc] */
    II(0x100a1c83, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a1c85, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x100a1c87, 0x5)   calld(0x100a1984, -0x308);            /* call 0x100a1984 */
    II(0x100a1c8c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a1c8e, 0x2)   jnzd(0x100a1c92, 0x2);                /* jnz 0x100a1c92 */
l_0x100a1c90:
    II(0x100a1c90, 0x2)   jmpd(0x100a1ca8, 0x16);               /* jmp 0x100a1ca8 */
l_0x100a1c92:
    II(0x100a1c92, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0x1);   /* mov dword [ebp-0x1c], 0x1 */
    II(0x100a1c99, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1c9b, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1c9e, 0x5)   calld(0x10075f6c, -0x2bd37);          /* call 0x10075f6c */
    II(0x100a1ca3, 0x5)   jmpd(0x100a1d37, 0x8f);               /* jmp 0x100a1d37 */
l_0x100a1ca8:
    II(0x100a1ca8, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a1cad, 0x5)   calld(0x10076338, -0x2b97a);          /* call 0x10076338 */
    II(0x100a1cb2, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x100a1cb5, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a1cb7, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a1cb9, 0x5)   calld(0x1007643c, -0x2b882);          /* call 0x1007643c */
l_0x100a1cbe:
    II(0x100a1cbe, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1cc0, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1cc3, 0x5)   calld(0x1013ad71, 0x990a9);           /* call 0x1013ad71 */
    II(0x100a1cc8, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a1cca, 0x2)   jzd(0x100a1d1a, 0x4e);                /* jz 0x100a1d1a */
    II(0x100a1ccc, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1ccf, 0x5)   calld(0x100763a0, -0x2b934);          /* call 0x100763a0 */
    II(0x100a1cd4, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100a1cd8, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x100a1cdc, 0x2)   jnzd(0x100a1cfb, 0x1d);               /* jnz 0x100a1cfb */
    II(0x100a1cde, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100a1ce0, 0x3)   mov(bl, memb_a32(ss, ebp - 0x4));     /* mov bl, [ebp-0x4] */
    II(0x100a1ce3, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1ce6, 0x5)   calld(0x10076408, -0x2b8e3);          /* call 0x10076408 */
    II(0x100a1ceb, 0x3)   mov(ecx, memd_a32(ss, ebp - 0xc));    /* mov ecx, [ebp-0xc] */
    II(0x100a1cee, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a1cf0, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x100a1cf2, 0x5)   calld(0x100a1984, -0x373);            /* call 0x100a1984 */
    II(0x100a1cf7, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a1cf9, 0x2)   jnzd(0x100a1cfd, 0x2);                /* jnz 0x100a1cfd */
l_0x100a1cfb:
    II(0x100a1cfb, 0x2)   jmpd(0x100a1d10, 0x13);               /* jmp 0x100a1d10 */
l_0x100a1cfd:
    II(0x100a1cfd, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0x1);   /* mov dword [ebp-0x1c], 0x1 */
    II(0x100a1d04, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1d06, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1d09, 0x5)   calld(0x10075f6c, -0x2bda2);          /* call 0x10075f6c */
    II(0x100a1d0e, 0x2)   jmpd(0x100a1d37, 0x27);               /* jmp 0x100a1d37 */
l_0x100a1d10:
    II(0x100a1d10, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1d13, 0x5)   calld(0x10076bf8, -0x2b120);          /* call 0x10076bf8 */
    II(0x100a1d18, 0x2)   jmpd(0x100a1cbe, -0x5c);              /* jmp 0x100a1cbe */
l_0x100a1d1a:
    II(0x100a1d1a, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0);     /* mov dword [ebp-0x1c], 0x0 */
    II(0x100a1d21, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a1d23, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100a1d26, 0x5)   calld(0x10075f6c, -0x2bdbf);          /* call 0x10075f6c */
    II(0x100a1d2b, 0x2)   jmpd(0x100a1d37, 0xa);                /* jmp 0x100a1d37 */
//  II(0x100a1d2d, 0xa)   /* Недостижимый код. */
l_0x100a1d37:
    II(0x100a1d37, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x100a1d3a, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a1d3c, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a1d3d, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a1d3e, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a1d3f, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100a1d40, 0x1)   retd();                               /* ret */
FUNC_END

