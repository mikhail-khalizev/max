FUNC_BEGIN(0x100fe1cd, 0x6b4aac427e6810db, 0x20, ({0x68, 0x4, 0x1, 0, 0, 0xe8, 0x7b, 0x7b, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xd0, 0, 0, 0, 0x89, 0x45, 0xfc, 0x31, 0xd2, 0x31, 0xc0, 0xe8, 0xc, 0xd3, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0xf0, 0xc5, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0xe5, 0x65, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x78, 0x66, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0xbe, 0x66, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x51, 0x67, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x16, 0x66, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x7e, 0x69, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x2c, 0x6d, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0x82, 0x67, 0xff, 0xff, 0x31, 0xc0, 0xe8, 0xc8, 0x67, 0xff, 0xff, 0xe8, 0xf9, 0xc5, 0xff, 0xff, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0xb8, 0x6, 0, 0, 0, 0xe8, 0x56, 0x1a, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0xb8, 0x9, 0, 0, 0, 0xe8, 0x45, 0x1a, 0, 0, 0x31, 0xd2, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x7, 0xcb, 0x3, 0, 0x84, 0xc0, 0x74, 0x21, 0xe8, 0x85, 0x49, 0, 0, 0x31, 0xc9, 0x88, 0xc1, 0x31, 0xdb, 0xb8, 0xbc, 0x37, 0x1c, 0x10, 0xe8, 0x7d, 0x83, 0xf7, 0xff, 0x89, 0xc2, 0xb8, 0x78, 0x72, 0x1c, 0x10, 0xe8, 0x31, 0xf3, 0x3, 0, 0xb9, 0x1, 0, 0, 0, 0x31, 0xdb, 0xba, 0x4, 0, 0, 0, 0x31, 0xc0, 0xe8, 0x7e, 0x33, 0, 0, 0xb8, 0x1, 0, 0, 0, 0xe8, 0x52, 0x2c, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0xf, 0xbf, 0x45, 0xfc, 0xe8, 0x9d, 0x3a, 0xf7, 0xff, 0xb8, 0x23, 0, 0, 0, 0xe8, 0x77, 0xa5, 0xfe, 0xff, 0x89, 0x45, 0xf8, 0x68, 0x80, 0x2, 0, 0, 0x8b, 0x45, 0xf8, 0xff, 0x70, 0x16, 0x6a, 0x70, 0x6a, 0x70, 0x6a, 0x70, 0xff, 0x35, 0xe0, 0x70, 0x1c, 0x10, 0xe8, 0xd7, 0xc8, 0x6, 0, 0x83, 0xc4, 0x18, 0x8b, 0x55, 0xf8, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x12, 0xe8, 0xb2, 0x91, 0x6, 0, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x2, 0xff, 0xb0, 0x44, 0xb4, 0x1b, 0x10, 0xb8, 0x30, 0x2a, 0x1a, 0x10, 0x50, 0x8d, 0x85, 0x30, 0xff, 0xff, 0xff, 0x50, 0xe8, 0xec, 0x7b, 0x6, 0, 0x83, 0xc4, 0xc, 0xe8, 0xe3, 0xc6, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xb9, 0x1, 0, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x85, 0x30, 0xff, 0xff, 0xff, 0xe8, 0xe9, 0x79, 0x1, 0, 0x8a, 0x45, 0xfc, 0xa2, 0xda, 0x37, 0x1c, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0xe8, 0xb5, 0x54, 0xff, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100fe1cd, 0x5)   pushd(0x104);                         /* push dword 0x104 */
    II(0x100fe1d2, 0x5)   calld(sys_check_available_stack_size, 0x67b7b); /* call 0x10165d52 */
    II(0x100fe1d7, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100fe1d8, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100fe1d9, 0x1)   pushd(edx);                           /* push edx */
    II(0x100fe1da, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fe1db, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fe1dc, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fe1dd, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fe1df, 0x6)   sub(esp, 0xd0);                       /* sub esp, 0xd0 */
    II(0x100fe1e5, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100fe1e8, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe1ea, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe1ec, 0x5)   calld(0x100fb4fd, -0x2cf4);           /* call 0x100fb4fd */
    II(0x100fe1f1, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe1f3, 0x5)   calld(0x100fa7e8, -0x3a10);           /* call 0x100fa7e8 */
    II(0x100fe1f8, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe1fa, 0x5)   calld(0x100f47e4, -0x9a1b);           /* call 0x100f47e4 */
    II(0x100fe1ff, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe201, 0x5)   calld(0x100f487e, -0x9988);           /* call 0x100f487e */
    II(0x100fe206, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe208, 0x5)   calld(0x100f48cb, -0x9942);           /* call 0x100f48cb */
    II(0x100fe20d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe20f, 0x5)   calld(0x100f4965, -0x98af);           /* call 0x100f4965 */
    II(0x100fe214, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe216, 0x5)   calld(0x100f4831, -0x99ea);           /* call 0x100f4831 */
    II(0x100fe21b, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe21d, 0x5)   calld(0x100f4ba0, -0x9682);           /* call 0x100f4ba0 */
    II(0x100fe222, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe224, 0x5)   calld(0x100f4f55, -0x92d4);           /* call 0x100f4f55 */
    II(0x100fe229, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe22b, 0x5)   calld(0x100f49b2, -0x987e);           /* call 0x100f49b2 */
    II(0x100fe230, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe232, 0x5)   calld(0x100f49ff, -0x9838);           /* call 0x100f49ff */
    II(0x100fe237, 0x5)   calld(0x100fa835, -0x3a07);           /* call 0x100fa835 */
    II(0x100fe23c, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fe241, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe243, 0x5)   mov(eax, 0x6);                        /* mov eax, 0x6 */
    II(0x100fe248, 0x5)   calld(0x100ffca3, 0x1a56);            /* call 0x100ffca3 */
    II(0x100fe24d, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fe252, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe254, 0x5)   mov(eax, 0x9);                        /* mov eax, 0x9 */
    II(0x100fe259, 0x5)   calld(0x100ffca3, 0x1a45);            /* call 0x100ffca3 */
    II(0x100fe25e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe260, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fe265, 0x5)   calld(0x1013ad71, 0x3cb07);           /* call 0x1013ad71 */
    II(0x100fe26a, 0x2)   test(al, al);                         /* test al, al */
    II(0x100fe26c, 0x2)   jzd(0x100fe28f, 0x21);                /* jz 0x100fe28f */
    II(0x100fe26e, 0x5)   calld(0x10102bf8, 0x4985);            /* call 0x10102bf8 */
    II(0x100fe273, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x100fe275, 0x2)   mov(cl, al);                          /* mov cl, al */
    II(0x100fe277, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fe279, 0x5)   mov(eax, 0x101c37bc);                 /* mov eax, 0x101c37bc */
    II(0x100fe27e, 0x5)   calld(0x10076600, -0x87c83);          /* call 0x10076600 */
    II(0x100fe283, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100fe285, 0x5)   mov(eax, 0x101c7278);                 /* mov eax, 0x101c7278 */
    II(0x100fe28a, 0x5)   calld(0x1013d5c0, 0x3f331);           /* call 0x1013d5c0 */
l_0x100fe28f:
    II(0x100fe28f, 0x5)   mov(ecx, 0x1);                        /* mov ecx, 0x1 */
    II(0x100fe294, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100fe296, 0x5)   mov(edx, 0x4);                        /* mov edx, 0x4 */
    II(0x100fe29b, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x100fe29d, 0x5)   calld(0x10101620, 0x337e);            /* call 0x10101620 */
    II(0x100fe2a2, 0x5)   mov(eax, 0x1);                        /* mov eax, 0x1 */
    II(0x100fe2a7, 0x5)   calld(0x10100efe, 0x2c52);            /* call 0x10100efe */
    II(0x100fe2ac, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fe2b1, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe2b3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fe2b7, 0x5)   calld(0x10071d59, -0x8c563);          /* call 0x10071d59 */
    II(0x100fe2bc, 0x5)   mov(eax, 0x23);                       /* mov eax, 0x23 */
    II(0x100fe2c1, 0x5)   calld(0x100e883d, -0x15a89);          /* call 0x100e883d */
    II(0x100fe2c6, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100fe2c9, 0x5)   pushd(0x280);                         /* push dword 0x280 */
    II(0x100fe2ce, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fe2d1, 0x3)   pushd(memd_a32(ds, eax + 0x16));      /* push dword [eax+0x16] */
    II(0x100fe2d4, 0x2)   pushd(0x70);                          /* push 0x70 */
    II(0x100fe2d6, 0x2)   pushd(0x70);                          /* push 0x70 */
    II(0x100fe2d8, 0x2)   pushd(0x70);                          /* push 0x70 */
    II(0x100fe2da, 0x6)   pushd(memd_a32(ds, 0x101c70e0));      /* push dword [0x101c70e0] */
    II(0x100fe2e0, 0x5)   calld(/* sys */ 0x1016abbc, 0x6c8d7); /* call 0x1016abbc */
    II(0x100fe2e5, 0x3)   add(esp, 0x18);                       /* add esp, 0x18 */
    II(0x100fe2e8, 0x3)   mov(edx, memd_a32(ss, ebp - 0x8));    /* mov edx, [ebp-0x8] */
    II(0x100fe2eb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100fe2ee, 0x3)   mov(eax, memd_a32(ds, eax + 0x12));   /* mov eax, [eax+0x12] */
    II(0x100fe2f1, 0x5)   calld(sys_display_draw_1, 0x691b2);   /* call 0x101674a8 */
    II(0x100fe2f6, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fe2fa, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100fe2fd, 0x6)   pushd(memd_a32(ds, eax + 0x101bb444)); /* push dword [eax+0x101bb444] */
    II(0x100fe303, 0x5)   mov(eax, 0x101a2a30);                 /* mov eax, 0x101a2a30 */ /* "%s:\nBegin turn." */
    II(0x100fe308, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fe309, 0x6)   lea(eax, ebp - 0xd0);                 /* lea eax, [ebp+0xffffff30] */
    II(0x100fe30f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fe310, 0x5)   calld(sys_sprintf, 0x67bec);          /* call 0x10165f01 */
    II(0x100fe315, 0x3)   add(esp, 0xc);                        /* add esp, 0xc */
    II(0x100fe318, 0x5)   calld(0x100caa00, -0x3391d);          /* call 0x100caa00 */
    II(0x100fe31d, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fe322, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fe323, 0x5)   mov(ecx, 0x1);                        /* mov ecx, 0x1 */
    II(0x100fe328, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fe32d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fe32f, 0x6)   lea(eax, ebp - 0xd0);                 /* lea eax, [ebp+0xffffff30] */
    II(0x100fe335, 0x5)   calld(0x10115d23, 0x179e9);           /* call 0x10115d23 */
    II(0x100fe33a, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x100fe33d, 0x5)   mov(memb_a32(ds, 0x101c37da), al);    /* mov [0x101c37da], al */
    II(0x100fe342, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fe346, 0x5)   calld(0x100f3800, -0xab4b);           /* call 0x100f3800 */
    II(0x100fe34b, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100fe34d, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100fe34e, 0x1)   popd(edi);                            /* pop edi */
    II(0x100fe34f, 0x1)   popd(esi);                            /* pop esi */
    II(0x100fe350, 0x1)   popd(edx);                            /* pop edx */
    II(0x100fe351, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100fe352, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100fe353, 0x1)   retd();                               /* ret */
FUNC_END

