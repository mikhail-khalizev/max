FUNC_BEGIN(0x10102ff9, 0x1769ac0c34f19957, 0x20, ({0x68, 0x24, 0, 0, 0, 0xe8, 0x4f, 0x2d, 0x6, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0xc, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0xe8, 0x1a, 0x33, 0xf7, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xf4, 0xe8, 0x90, 0x34, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0x3f, 0x7d, 0x3, 0, 0x84, 0xc0, 0x74, 0x21, 0x8d, 0x45, 0xf4, 0xe8, 0xca, 0x33, 0xf7, 0xff, 0x89, 0xc3, 0xba, 0x51, 0x31, 0x1a, 0x10, 0x8b, 0x45, 0xfc, 0xe8, 0x1d, 0x45, 0x4, 0, 0x8d, 0x45, 0xf4, 0xe8, 0xa3, 0x3b, 0xf7, 0xff, 0xeb, 0xd1, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0xb, 0x2f, 0xf7, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x10102ff9, 0x5)   pushd(0x24);                          /* push dword 0x24 */
    II(0x10102ffe, 0x5)   calld(sys_check_available_stack_size, 0x62d4f); /* call 0x10165d52 */
    II(0x10103003, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10103004, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10103005, 0x1)   pushd(esi);                           /* push esi */
    II(0x10103006, 0x1)   pushd(edi);                           /* push edi */
    II(0x10103007, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10103008, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x1010300a, 0x6)   sub(esp, 0xc);                        /* sub esp, 0xc */
    II(0x10103010, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x10103013, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
//    II(0x10103016, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x10103019, 0x5)   calld(0x10076338, -0x8cce6);          /* call 0x10076338 */
    II(0x1010301e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10103020, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x10103023, 0x5)   calld(0x100764b8, -0x8cb70);          /* call 0x100764b8 */
l_0x10103028:
    II(0x10103028, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1010302a, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1010302d, 0x5)   calld(0x1013ad71, 0x37d3f);           /* call 0x1013ad71 */
    II(0x10103032, 0x2)   test(al, al);                         /* test al, al */
    II(0x10103034, 0x2)   jzd(0x10103057, 0x21);                /* jz 0x10103057 */
    II(0x10103036, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x10103039, 0x5)   calld(0x10076408, -0x8cc36);          /* call 0x10076408 */
    II(0x1010303e, 0x2)   mov(ebx, eax);                        /* mov ebx, eax */
    II(0x10103040, 0x5)   mov(edx, 0x101a3151);                 /* mov edx, 0x101a3151 */ /* "unit" */
    II(0x10103045, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10103048, 0x5)   calld(0x1014756a, 0x4451d);           /* call 0x1014756a */
    II(0x1010304d, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x10103050, 0x5)   calld(0x10076bf8, -0x8c45d);          /* call 0x10076bf8 */
    II(0x10103055, 0x2)   jmpd(0x10103028, -0x2f);              /* jmp 0x10103028 */
l_0x10103057:
    II(0x10103057, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10103059, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x1010305c, 0x5)   calld(0x10075f6c, -0x8d0f5);          /* call 0x10075f6c */
    II(0x10103061, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10103063, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10103064, 0x1)   popd(edi);                            /* pop edi */
    II(0x10103065, 0x1)   popd(esi);                            /* pop esi */
    II(0x10103066, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10103067, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10103068, 0x1)   retd();                               /* ret */
FUNC_END

