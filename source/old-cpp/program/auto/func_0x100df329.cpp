FUNC_BEGIN(0x100df329, 0x55539965f3125d48, 0x20, ({0x68, 0x30, 0, 0, 0, 0xe8, 0x1f, 0x6a, 0x8, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x18, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xf0, 0xe8, 0xb6, 0x12, 0, 0, 0x89, 0x45, 0xec, 0x80, 0x65, 0xf4, 0xfe, 0x8b, 0x45, 0xf8, 0x5, 0xf0, 0x2, 0, 0, 0xe8, 0x8a, 0x19, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xf0, 0xe8, 0xd8, 0x11, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xf0, 0xe8, 0x7e, 0x78, 0xf9, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0xed, 0xb9, 0x5, 0, 0x84, 0xc0, 0x74, 0x2c, 0x8d, 0x45, 0xf0, 0xe8, 0xec, 0x10, 0, 0, 0xe8, 0xcf, 0x19, 0, 0, 0x66, 0x3b, 0x45, 0xfc, 0x75, 0x17, 0x8d, 0x45, 0xf0, 0xe8, 0x41, 0x11, 0, 0, 0x89, 0x45, 0xe8, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x8c, 0x10, 0, 0, 0xeb, 0x1f, 0xeb, 0xbe, 0xc7, 0x45, 0xe8, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x77, 0x10, 0, 0, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x6b, 0x10, 0, 0, 0x8b, 0x45, 0xe8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100df329, 0x5)   pushd(0x30);                          /* push dword 0x30 */
    II(0x100df32e, 0x5)   calld(sys_check_available_stack_size, 0x86a1f); /* call 0x10165d52 */
    II(0x100df333, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100df334, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100df335, 0x1)   pushd(esi);                           /* push esi */
    II(0x100df336, 0x1)   pushd(edi);                           /* push edi */
    II(0x100df337, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100df338, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100df33a, 0x6)   sub(esp, 0x18);                       /* sub esp, 0x18 */
    II(0x100df340, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100df343, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100df346, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100df34a, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df34d, 0x5)   calld(0x100e0608, 0x12b6);            /* call 0x100e0608 */
    II(0x100df352, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x100df355, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100df359, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100df35c, 0x5)   add(eax, 0x2f0);                      /* add eax, 0x2f0 */
    II(0x100df361, 0x5)   calld(0x100e0cf0, 0x198a);            /* call 0x100e0cf0 */
    II(0x100df366, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100df368, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df36b, 0x5)   calld(0x100e0548, 0x11d8);            /* call 0x100e0548 */
    II(0x100df370, 0x2)   jmpd(0x100df37a, 0x8);                /* jmp 0x100df37a */
l_0x100df372:
    II(0x100df372, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df375, 0x5)   calld(0x10076bf8, -0x68782);          /* call 0x10076bf8 */
l_0x100df37a:
    II(0x100df37a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100df37c, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df37f, 0x5)   calld(0x1013ad71, 0x5b9ed);           /* call 0x1013ad71 */
    II(0x100df384, 0x2)   test(al, al);                         /* test al, al */
    II(0x100df386, 0x2)   jzd(0x100df3b4, 0x2c);                /* jz 0x100df3b4 */
    II(0x100df388, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df38b, 0x5)   calld(0x100e047c, 0x10ec);            /* call 0x100e047c */
    II(0x100df390, 0x5)   calld(0x100e0d64, 0x19cf);            /* call 0x100e0d64 */
    II(0x100df395, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x4));     /* cmp ax, [ebp-0x4] */
    II(0x100df399, 0x2)   jnzd(0x100df3b2, 0x17);               /* jnz 0x100df3b2 */
    II(0x100df39b, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df39e, 0x5)   calld(0x100e04e4, 0x1141);            /* call 0x100e04e4 */
    II(0x100df3a3, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100df3a6, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100df3a8, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df3ab, 0x5)   calld(0x100e043c, 0x108c);            /* call 0x100e043c */
    II(0x100df3b0, 0x2)   jmpd(0x100df3d1, 0x1f);               /* jmp 0x100df3d1 */
l_0x100df3b2:
    II(0x100df3b2, 0x2)   jmpd(0x100df372, -0x42);              /* jmp 0x100df372 */
l_0x100df3b4:
    II(0x100df3b4, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0);     /* mov dword [ebp-0x18], 0x0 */
    II(0x100df3bb, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100df3bd, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100df3c0, 0x5)   calld(0x100e043c, 0x1077);            /* call 0x100e043c */
    II(0x100df3c5, 0x2)   jmpd(0x100df3d1, 0xa);                /* jmp 0x100df3d1 */
//  II(0x100df3c7, 0xa)   /* Недостижимый код. */
l_0x100df3d1:
    II(0x100df3d1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100df3d4, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100df3d6, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100df3d7, 0x1)   popd(edi);                            /* pop edi */
    II(0x100df3d8, 0x1)   popd(esi);                            /* pop esi */
    II(0x100df3d9, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100df3da, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100df3db, 0x1)   retd();                               /* ret */
FUNC_END

