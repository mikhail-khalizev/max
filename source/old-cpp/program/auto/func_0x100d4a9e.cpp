FUNC_BEGIN(0x100d4a9e, 0xac698e527fad8ae4, 0x20, ({0x68, 0x68, 0x1, 0, 0, 0xe8, 0xaa, 0x12, 0x9, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x4c, 0x1, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0xf6, 0x40, 0x13, 0x2, 0x74, 0x49, 0x80, 0x4d, 0xf8, 0x1, 0x8b, 0x55, 0xfc, 0x8d, 0x85, 0x44, 0xff, 0xff, 0xff, 0xe8, 0xc1, 0xe8, 0xff, 0xff, 0x89, 0x85, 0x40, 0xff, 0xff, 0xff, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x85, 0x44, 0xff, 0xff, 0xff, 0xe8, 0xef, 0xf7, 0xff, 0xff, 0x8d, 0x85, 0x44, 0xff, 0xff, 0xff, 0xe8, 0x10, 0xda, 0xff, 0xff, 0x25, 0xff, 0, 0, 0, 0x89, 0x45, 0xf0, 0x31, 0xd2, 0x8d, 0x85, 0x44, 0xff, 0xff, 0xff, 0xe8, 0x2a, 0xf6, 0xff, 0xff, 0xeb, 0x47, 0x80, 0x4d, 0xf8, 0x1, 0x8b, 0x55, 0xfc, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0xb7, 0xda, 0xff, 0xff, 0x89, 0x85, 0xb4, 0xfe, 0xff, 0xff, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0x15, 0xc9, 0xff, 0xff, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0xc7, 0xd9, 0xff, 0xff, 0x25, 0xff, 0, 0, 0, 0x89, 0x45, 0xf0, 0x31, 0xd2, 0x8d, 0x85, 0xb8, 0xfe, 0xff, 0xff, 0xe8, 0xae, 0x2, 0, 0, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100d4a9e, 0x5)   pushd(0x168);                         /* push dword 0x168 */
    II(0x100d4aa3, 0x5)   calld(sys_check_available_stack_size, 0x912aa); /* call 0x10165d52 */
    II(0x100d4aa8, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100d4aa9, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100d4aaa, 0x1)   pushd(edx);                           /* push edx */
    II(0x100d4aab, 0x1)   pushd(esi);                           /* push esi */
    II(0x100d4aac, 0x1)   pushd(edi);                           /* push edi */
    II(0x100d4aad, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100d4aae, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100d4ab0, 0x6)   sub(esp, 0x14c);                      /* sub esp, 0x14c */
    II(0x100d4ab6, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x100d4ab9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100d4abc, 0x4)   test(memb_a32(ds, eax + 0x13), 0x2);  /* test byte [eax+0x13], 0x2 */
    II(0x100d4ac0, 0x2)   jzd(0x100d4b0b, 0x49);                /* jz 0x100d4b0b */
    II(0x100d4ac2, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100d4ac6, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100d4ac9, 0x6)   lea(eax, ebp - 0xbc);                 /* lea eax, [ebp+0xffffff44] */
    II(0x100d4acf, 0x5)   calld(0x100d3395, -0x173f);           /* call 0x100d3395 */
    II(0x100d4ad4, 0x6)   mov(memd_a32(ss, ebp - 0xc0), eax);   /* mov [ebp+0xffffff40], eax */
    II(0x100d4ada, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100d4ade, 0x6)   lea(eax, ebp - 0xbc);                 /* lea eax, [ebp+0xffffff44] */
    II(0x100d4ae4, 0x5)   calld(0x100d42d8, -0x811);            /* call 0x100d42d8 */
    II(0x100d4ae9, 0x6)   lea(eax, ebp - 0xbc);                 /* lea eax, [ebp+0xffffff44] */
    II(0x100d4aef, 0x5)   calld(0x100d2504, -0x25f0);           /* call 0x100d2504 */
    II(0x100d4af4, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d4af9, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100d4afc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d4afe, 0x6)   lea(eax, ebp - 0xbc);                 /* lea eax, [ebp+0xffffff44] */
    II(0x100d4b04, 0x5)   calld(0x100d4133, -0x9d6);            /* call 0x100d4133 */
    II(0x100d4b09, 0x2)   jmpd(0x100d4b52, 0x47);               /* jmp 0x100d4b52 */
l_0x100d4b0b:
    II(0x100d4b0b, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100d4b0f, 0x3)   mov(edx, memd_a32(ss, ebp - 0x4));    /* mov edx, [ebp-0x4] */
    II(0x100d4b12, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100d4b18, 0x5)   calld(0x100d25d4, -0x2549);           /* call 0x100d25d4 */
    II(0x100d4b1d, 0x6)   mov(memd_a32(ss, ebp - 0x14c), eax);  /* mov [ebp+0xfffffeb4], eax */
    II(0x100d4b23, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100d4b27, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100d4b2d, 0x5)   calld(0x100d1447, -0x36eb);           /* call 0x100d1447 */
    II(0x100d4b32, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100d4b38, 0x5)   calld(0x100d2504, -0x2639);           /* call 0x100d2504 */
    II(0x100d4b3d, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100d4b42, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100d4b45, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100d4b47, 0x6)   lea(eax, ebp - 0x148);                /* lea eax, [ebp+0xfffffeb8] */
    II(0x100d4b4d, 0x5)   calld(0x100d4e00, 0x2ae);             /* call 0x100d4e00 */
l_0x100d4b52:
    II(0x100d4b52, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100d4b55, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
//    II(0x100d4b58, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100d4b5b, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100d4b5d, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100d4b5e, 0x1)   popd(edi);                            /* pop edi */
    II(0x100d4b5f, 0x1)   popd(esi);                            /* pop esi */
    II(0x100d4b60, 0x1)   popd(edx);                            /* pop edx */
    II(0x100d4b61, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100d4b62, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100d4b63, 0x1)   retd();                               /* ret */
FUNC_END

