FUNC_BEGIN(0x10085dbd, 0xa6d094e0306da66, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0x8b, 0xff, 0xd, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x20, 0xe8, 0x25, 0x3f, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xdc, 0xe8, 0xf7, 0x3d, 0, 0, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xe0, 0xe8, 0x3, 0x7, 0xff, 0xff, 0x89, 0x45, 0xe4, 0x80, 0x65, 0xf4, 0xfe, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xe8, 0xe8, 0x1c, 0x3e, 0, 0, 0x89, 0x45, 0xec, 0x80, 0x65, 0xf4, 0xfe, 0xeb, 0x8, 0x8d, 0x45, 0xdc, 0xe8, 0xdb, 0xd, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x4a, 0x4f, 0xb, 0, 0x84, 0xc0, 0xf, 0x84, 0xd0, 0, 0, 0, 0x8d, 0x45, 0xdc, 0xe8, 0x95, 0x3c, 0, 0, 0xe8, 0x88, 0x41, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0xf6, 0x5, 0xff, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xe0, 0xe8, 0xa8, 0xd, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x17, 0x4f, 0xb, 0, 0x84, 0xc0, 0xf, 0x84, 0x98, 0, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0x36, 0x5, 0xff, 0xff, 0xe8, 0xcd, 0x3, 0xff, 0xff, 0x66, 0x8b, 0x40, 0x12, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf0, 0xf, 0xaf, 0x45, 0xf0, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xfc, 0x83, 0xc0, 0x20, 0xe8, 0x7d, 0x3e, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe8, 0xe8, 0xd3, 0x3c, 0, 0, 0xeb, 0x8, 0x8d, 0x45, 0xe8, 0xe8, 0x59, 0xd, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xc8, 0x4e, 0xb, 0, 0x84, 0xc0, 0x74, 0x48, 0x8d, 0x45, 0xdc, 0xe8, 0x17, 0x3c, 0, 0, 0xe8, 0xb6, 0x40, 0, 0, 0x89, 0xc2, 0x8d, 0x45, 0xe0, 0xe8, 0x10, 0x5, 0xff, 0xff, 0xe8, 0x38, 0xae, 0xfe, 0xff, 0x66, 0x3b, 0x45, 0xf0, 0x7f, 0x24, 0xc6, 0x45, 0xf8, 0x1, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0x67, 0x31, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x85, 0, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x53, 0x31, 0, 0, 0xeb, 0x4e, 0xeb, 0xa2, 0xe9, 0x4e, 0xff, 0xff, 0xff, 0xe9, 0x16, 0xff, 0xff, 0xff, 0xc6, 0x45, 0xf8, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0x37, 0x31, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x55, 0, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x23, 0x31, 0, 0, 0xeb, 0x1e, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0x17, 0x31, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x35, 0, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x3, 0x31, 0, 0, 0x8a, 0x45, 0xf8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10085dbd, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x10085dc2, 0x5)   calld(sys_check_available_stack_size, 0xdff8b); /* call 0x10165d52 */
    II(0x10085dc7, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10085dc8, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10085dc9, 0x1)   pushd(edx);                           /* push edx */
    II(0x10085dca, 0x1)   pushd(esi);                           /* push esi */
    II(0x10085dcb, 0x1)   pushd(edi);                           /* push edi */
    II(0x10085dcc, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10085dcd, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10085dcf, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x10085dd5, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
//    II(0x10085dd8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10085ddb, 0x3)   add(eax, 0x20);                       /* add eax, 0x20 */
    II(0x10085dde, 0x5)   calld(0x10089d08, 0x3f25);            /* call 0x10089d08 */
    II(0x10085de3, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10085de5, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085de8, 0x5)   calld(0x10089be4, 0x3df7);            /* call 0x10089be4 */
    II(0x10085ded, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x10085df1, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085df4, 0x5)   calld(0x100764fc, -0xf8fd);           /* call 0x100764fc */
    II(0x10085df9, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x10085dfc, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x10085e00, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x10085e04, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085e07, 0x5)   calld(0x10089c28, 0x3e1c);            /* call 0x10089c28 */
    II(0x10085e0c, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x10085e0f, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x10085e13, 0x2)   jmpd(0x10085e1d, 0x8);                /* jmp 0x10085e1d */
l_0x10085e15:
    II(0x10085e15, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085e18, 0x5)   calld(0x10076bf8, -0xf225);           /* call 0x10076bf8 */
l_0x10085e1d:
    II(0x10085e1d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085e1f, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085e22, 0x5)   calld(0x1013ad71, 0xb4f4a);           /* call 0x1013ad71 */
    II(0x10085e27, 0x2)   test(al, al);                         /* test al, al */
    II(0x10085e29, 0x6)   jzd(0x10085eff, 0xd0);                /* jz dword 0x10085eff */
    II(0x10085e2f, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085e32, 0x5)   calld(0x10089acc, 0x3c95);            /* call 0x10089acc */
    II(0x10085e37, 0x5)   calld(0x10089fc4, 0x4188);            /* call 0x10089fc4 */
    II(0x10085e3c, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10085e3e, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085e41, 0x5)   calld(0x1007643c, -0xfa0a);           /* call 0x1007643c */
    II(0x10085e46, 0x2)   jmpd(0x10085e50, 0x8);                /* jmp 0x10085e50 */
l_0x10085e48:
    II(0x10085e48, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085e4b, 0x5)   calld(0x10076bf8, -0xf258);           /* call 0x10076bf8 */
l_0x10085e50:
    II(0x10085e50, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085e52, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085e55, 0x5)   calld(0x1013ad71, 0xb4f17);           /* call 0x1013ad71 */
    II(0x10085e5a, 0x2)   test(al, al);                         /* test al, al */
    II(0x10085e5c, 0x6)   jzd(0x10085efa, 0x98);                /* jz dword 0x10085efa */
    II(0x10085e62, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085e65, 0x5)   calld(0x100763a0, -0xfaca);           /* call 0x100763a0 */
    II(0x10085e6a, 0x5)   calld(0x1007623c, -0xfc33);           /* call 0x1007623c */
    II(0x10085e6f, 0x4)   mov(ax, memw_a32(ds, eax + 0x12));    /* mov ax, [eax+0x12] */
    II(0x10085e73, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
//    II(0x10085e76, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10085e79, 0x4)   imul(eax, memd_a32(ss, ebp - 0x10));  /* imul eax, [ebp-0x10] */
    II(0x10085e7d, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x10085e80, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10085e83, 0x3)   add(eax, 0x20);                       /* add eax, 0x20 */
    II(0x10085e86, 0x5)   calld(0x10089d08, 0x3e7d);            /* call 0x10089d08 */
    II(0x10085e8b, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10085e8d, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085e90, 0x5)   calld(0x10089b68, 0x3cd3);            /* call 0x10089b68 */
    II(0x10085e95, 0x2)   jmpd(0x10085e9f, 0x8);                /* jmp 0x10085e9f */
l_0x10085e97:
    II(0x10085e97, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085e9a, 0x5)   calld(0x10076bf8, -0xf2a7);           /* call 0x10076bf8 */
l_0x10085e9f:
    II(0x10085e9f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085ea1, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085ea4, 0x5)   calld(0x1013ad71, 0xb4ec8);           /* call 0x1013ad71 */
    II(0x10085ea9, 0x2)   test(al, al);                         /* test al, al */
    II(0x10085eab, 0x2)   jzd(0x10085ef5, 0x48);                /* jz 0x10085ef5 */
    II(0x10085ead, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085eb0, 0x5)   calld(0x10089acc, 0x3c17);            /* call 0x10089acc */
    II(0x10085eb5, 0x5)   calld(0x10089f70, 0x40b6);            /* call 0x10089f70 */
    II(0x10085eba, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10085ebc, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085ebf, 0x5)   calld(0x100763d4, -0xfaf0);           /* call 0x100763d4 */
    II(0x10085ec4, 0x5)   calld(0x10070d01, -0x151c8);          /* call 0x10070d01 */
    II(0x10085ec9, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x10));    /* cmp ax, [ebp-0x10] */
    II(0x10085ecd, 0x2)   jgd(0x10085ef3, 0x24);                /* jg 0x10085ef3 */
    II(0x10085ecf, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0x1);    /* mov byte [ebp-0x8], 0x1 */
    II(0x10085ed3, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085ed5, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085ed8, 0x5)   calld(0x10089044, 0x3167);            /* call 0x10089044 */
    II(0x10085edd, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085edf, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085ee2, 0x5)   calld(0x10075f6c, -0xff7b);           /* call 0x10075f6c */
    II(0x10085ee7, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085ee9, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085eec, 0x5)   calld(0x10089044, 0x3153);            /* call 0x10089044 */
    II(0x10085ef1, 0x2)   jmpd(0x10085f41, 0x4e);               /* jmp 0x10085f41 */
l_0x10085ef3:
    II(0x10085ef3, 0x2)   jmpd(0x10085e97, -0x5e);              /* jmp 0x10085e97 */
l_0x10085ef5:
    II(0x10085ef5, 0x5)   jmpd(0x10085e48, -0xb2);              /* jmp 0x10085e48 */
l_0x10085efa:
    II(0x10085efa, 0x5)   jmpd(0x10085e15, -0xea);              /* jmp 0x10085e15 */
l_0x10085eff:
    II(0x10085eff, 0x4)   mov(memb_a32(ss, ebp - 0x8), 0);      /* mov byte [ebp-0x8], 0x0 */
    II(0x10085f03, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085f05, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10085f08, 0x5)   calld(0x10089044, 0x3137);            /* call 0x10089044 */
    II(0x10085f0d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085f0f, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10085f12, 0x5)   calld(0x10075f6c, -0xffab);           /* call 0x10075f6c */
    II(0x10085f17, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10085f19, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10085f1c, 0x5)   calld(0x10089044, 0x3123);            /* call 0x10089044 */
    II(0x10085f21, 0x2)   jmpd(0x10085f41, 0x1e);               /* jmp 0x10085f41 */
//  II(0x10085f23, 0x1e)  /* Недостижимый код. */
l_0x10085f41:
    II(0x10085f41, 0x3)   mov(al, memb_a32(ss, ebp - 0x8));     /* mov al, [ebp-0x8] */
    II(0x10085f44, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10085f46, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10085f47, 0x1)   popd(edi);                            /* pop edi */
    II(0x10085f48, 0x1)   popd(esi);                            /* pop esi */
    II(0x10085f49, 0x1)   popd(edx);                            /* pop edx */
    II(0x10085f4a, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10085f4b, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10085f4c, 0x1)   retd();                               /* ret */
FUNC_END

