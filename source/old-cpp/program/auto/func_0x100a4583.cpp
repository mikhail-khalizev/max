FUNC_BEGIN(0x100a4583, 0xcede35f0bebb2d50, 0x20, ({0x68, 0x50, 0, 0, 0, 0xe8, 0xc5, 0x17, 0xc, 0, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x40, 0, 0, 0, 0x89, 0x45, 0xf0, 0x89, 0x55, 0xf4, 0x89, 0x5d, 0xf8, 0x89, 0x4d, 0xfc, 0x80, 0x4d, 0xe8, 0x1, 0x8d, 0x45, 0xe4, 0xe8, 0x4c, 0x1f, 0xfd, 0xff, 0x89, 0x45, 0xe0, 0x80, 0x65, 0xe8, 0xfe, 0xc7, 0x45, 0xdc, 0, 0, 0, 0, 0x8b, 0x45, 0xf0, 0x83, 0xc0, 0xa, 0xe8, 0xe3, 0x6a, 0, 0, 0x8d, 0x5d, 0xd8, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xeb, 0x69, 0, 0, 0xc7, 0x45, 0xd4, 0, 0, 0, 0, 0x8b, 0x45, 0xf0, 0xe8, 0x10, 0x69, 0xfe, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd0, 0xe8, 0x82, 0x68, 0xfe, 0xff, 0xe8, 0x59, 0xeb, 0xff, 0xff, 0x89, 0x45, 0xcc, 0xf, 0xbf, 0x55, 0xf4, 0xf, 0xbf, 0x45, 0xf8, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0xbb, 0x68, 0xa4, 0x1c, 0x10, 0x1, 0xd8, 0xe8, 0x1c, 0xb7, 0x3, 0, 0x8b, 0x40, 0x6, 0xc1, 0xf8, 0x10, 0xf, 0xbf, 0x55, 0xcc, 0x83, 0xc0, 0x5, 0x39, 0xc2, 0x7d, 0x27, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x8d, 0x45, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x37, 0x5a, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x29, 0x19, 0xfd, 0xff, 0xe9, 0x3, 0x3, 0, 0, 0x66, 0x83, 0x7d, 0xf4, 0x31, 0x75, 0x9, 0xf, 0xbf, 0x45, 0xcc, 0x83, 0xf8, 0x19, 0x7c, 0x2, 0xeb, 0x27, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x54, 0x45, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0xfe, 0x59, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0xf0, 0x18, 0xfd, 0xff, 0xe9, 0xca, 0x2, 0, 0, 0xf, 0xbf, 0x45, 0xf4, 0x6b, 0xc0, 0x33, 0xf6, 0x80, 0xc1, 0x81, 0x1c, 0x10, 0x2, 0x74, 0x18, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x9d, 0x1c, 0xfd, 0xff, 0x8d, 0x5d, 0xe4, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x95, 0x1d, 0xfd, 0xff, 0xeb, 0x16, 0xb8, 0x84, 0x81, 0x1c, 0x10, 0xe8, 0x85, 0x1c, 0xfd, 0xff, 0x8d, 0x5d, 0xe4, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x7d, 0x1d, 0xfd, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xe4, 0xe8, 0x2f, 0x25, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x9e, 0x66, 0x9, 0, 0x84, 0xc0, 0x74, 0x69, 0x8d, 0x45, 0xe4, 0xe8, 0xc1, 0x1c, 0xfd, 0xff, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0xf, 0xbf, 0x45, 0xf8, 0x39, 0xc2, 0x75, 0x12, 0x8d, 0x45, 0xe4, 0xe8, 0xac, 0x1c, 0xfd, 0xff, 0x66, 0x8b, 0x40, 0x8, 0x66, 0x3b, 0x45, 0xf4, 0x74, 0x2, 0xeb, 0x3e, 0x8b, 0x45, 0xdc, 0xff, 0x45, 0xdc, 0x8d, 0x45, 0xe4, 0xe8, 0x92, 0x1c, 0xfd, 0xff, 0xe8, 0x99, 0xdf, 0xa, 0, 0x85, 0xc0, 0x75, 0x27, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x97, 0x44, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x41, 0x59, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x33, 0x18, 0xfd, 0xff, 0xe9, 0xd, 0x2, 0, 0, 0xeb, 0x81, 0xeb, 0x8, 0x8d, 0x45, 0xd8, 0xe8, 0xae, 0x24, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x1d, 0x66, 0x9, 0, 0x84, 0xc0, 0x74, 0x60, 0x8d, 0x45, 0xd8, 0xe8, 0x7c, 0x67, 0, 0, 0xe8, 0x2b, 0x66, 0xfe, 0xff, 0x66, 0x3b, 0x45, 0xf8, 0x75, 0x16, 0xf, 0xbf, 0x55, 0xf4, 0x8d, 0x45, 0xd8, 0xe8, 0x65, 0x67, 0, 0, 0xe8, 0xa9, 0x19, 0, 0, 0x66, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x1d, 0x8b, 0x45, 0xfc, 0x5, 0xfa, 0, 0, 0, 0xf, 0xbf, 0xd0, 0x8d, 0x45, 0xd8, 0xe8, 0x46, 0x67, 0, 0, 0xe8, 0x29, 0xe4, 0xff, 0xff, 0x98, 0x85, 0xc0, 0x7e, 0x2, 0xeb, 0x14, 0xf, 0xbf, 0x55, 0xf4, 0x8d, 0x45, 0xd8, 0xe8, 0x2e, 0x67, 0, 0, 0xe8, 0x72, 0x19, 0, 0, 0x1, 0x45, 0xd4, 0xeb, 0x8a, 0xeb, 0x8, 0x8d, 0x45, 0xd0, 0xe8, 0x36, 0x24, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0xa5, 0x65, 0x9, 0, 0x84, 0xc0, 0xf, 0x84, 0xca, 0, 0, 0, 0x8d, 0x45, 0xd0, 0xe8, 0xe8, 0x65, 0xfe, 0xff, 0xe8, 0xaf, 0x65, 0xfe, 0xff, 0x66, 0x3b, 0x45, 0xf8, 0x75, 0x38, 0x8d, 0x45, 0xd0, 0xe8, 0xd5, 0x65, 0xfe, 0xff, 0x89, 0x45, 0xc8, 0x8b, 0x45, 0xc8, 0x8b, 0x50, 0x2, 0x8b, 0x45, 0xc8, 0xff, 0x52, 0x20, 0x3c, 0x9, 0x74, 0x1b, 0x8d, 0x45, 0xd0, 0xe8, 0xba, 0x65, 0xfe, 0xff, 0x89, 0x45, 0xc4, 0x8b, 0x45, 0xc4, 0x8b, 0x50, 0x2, 0x8b, 0x45, 0xc4, 0xff, 0x52, 0x20, 0x3c, 0x8, 0x75, 0x2, 0xeb, 0x2, 0xeb, 0x13, 0x8d, 0x45, 0xd0, 0xe8, 0xcf, 0x65, 0xfe, 0xff, 0xe8, 0x96, 0x7c, 0xff, 0xff, 0x66, 0x3b, 0x45, 0xf4, 0x74, 0x2, 0xeb, 0x3a, 0x8d, 0x45, 0xd0, 0xe8, 0xba, 0x65, 0xfe, 0xff, 0x89, 0x45, 0xc0, 0x8b, 0x45, 0xc0, 0x8b, 0x50, 0x2, 0x8b, 0x45, 0xc0, 0xff, 0x52, 0x70, 0x84, 0xc0, 0x75, 0x1d, 0x8b, 0x45, 0xfc, 0x5, 0xfa, 0, 0, 0, 0xf, 0xbf, 0xd0, 0x8d, 0x45, 0xd0, 0xe8, 0x60, 0x65, 0xfe, 0xff, 0xe8, 0x5b, 0xe3, 0xff, 0xff, 0x98, 0x85, 0xc0, 0x7f, 0x2, 0xeb, 0x2, 0xeb, 0x27, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x3c, 0x43, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0xe6, 0x57, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0xd8, 0x16, 0xfd, 0xff, 0xe9, 0xb2, 0, 0, 0, 0xe9, 0x1c, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xd4, 0x66, 0x3b, 0x45, 0xdc, 0x7d, 0x27, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x7, 0x43, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0xb1, 0x57, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0xa3, 0x16, 0xfd, 0xff, 0xe9, 0x7d, 0, 0, 0, 0xf, 0xbf, 0x45, 0xdc, 0x85, 0xc0, 0x7e, 0xd, 0xf, 0xbf, 0x45, 0xf8, 0xe8, 0x8a, 0x13, 0, 0, 0x84, 0xc0, 0x75, 0x2, 0xeb, 0x24, 0xc6, 0x45, 0xec, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0xc9, 0x42, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x73, 0x57, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x65, 0x16, 0xfd, 0xff, 0xeb, 0x42, 0xc6, 0x45, 0xec, 0x1, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0xa5, 0x42, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x4f, 0x57, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x41, 0x16, 0xfd, 0xff, 0xeb, 0x1e, 0x31, 0xd2, 0x8d, 0x45, 0xd0, 0xe8, 0x85, 0x42, 0xfe, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x2f, 0x57, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x21, 0x16, 0xfd, 0xff, 0x8a, 0x45, 0xec, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0xc3}))
    II(0x100a4583, 0x5)   pushd(0x50);                          /* push dword 0x50 */
    II(0x100a4588, 0x5)   calld(sys_check_available_stack_size, 0xc17c5); /* call 0x10165d52 */
    II(0x100a458d, 0x1)   pushd(esi);                           /* push esi */
    II(0x100a458e, 0x1)   pushd(edi);                           /* push edi */
    II(0x100a458f, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100a4590, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100a4592, 0x6)   sub(esp, 0x40);                       /* sub esp, 0x40 */
    II(0x100a4598, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100a459b, 0x3)   mov(memd_a32(ss, ebp - 0xc), edx);    /* mov [ebp-0xc], edx */
    II(0x100a459e, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x100a45a1, 0x3)   mov(memd_a32(ss, ebp - 0x4), ecx);    /* mov [ebp-0x4], ecx */
    II(0x100a45a4, 0x4)   or_(memb_a32(ss, ebp - 0x18), 0x1);   /* or byte [ebp-0x18], 0x1 */
    II(0x100a45a8, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a45ab, 0x5)   calld(0x100764fc, -0x2e0b4);          /* call 0x100764fc */
    II(0x100a45b0, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x100a45b3, 0x4)   and_(memb_a32(ss, ebp - 0x18), -0x2 /* 0xfe */); /* and byte [ebp-0x18], 0xfe */
    II(0x100a45b7, 0x7)   mov(memd_a32(ss, ebp - 0x24), 0);     /* mov dword [ebp-0x24], 0x0 */
    II(0x100a45be, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100a45c1, 0x3)   add(eax, 0xa);                        /* add eax, 0xa */
    II(0x100a45c4, 0x5)   calld(0x100ab0ac, 0x6ae3);            /* call 0x100ab0ac */
    II(0x100a45c9, 0x3)   lea(ebx, ebp - 0x28);                 /* lea ebx, [ebp-0x28] */
    II(0x100a45cc, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a45ce, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a45d0, 0x5)   calld(0x100aafc0, 0x69eb);            /* call 0x100aafc0 */
    II(0x100a45d5, 0x7)   mov(memd_a32(ss, ebp - 0x2c), 0);     /* mov dword [ebp-0x2c], 0x0 */
    II(0x100a45dc, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x100a45df, 0x5)   calld(0x1008aef4, -0x196f0);          /* call 0x1008aef4 */
    II(0x100a45e4, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a45e6, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a45e9, 0x5)   calld(0x1008ae70, -0x1977e);          /* call 0x1008ae70 */
    II(0x100a45ee, 0x5)   calld(0x100a314c, -0x14a7);           /* call 0x100a314c */
    II(0x100a45f3, 0x3)   mov(memd_a32(ss, ebp - 0x34), eax);   /* mov [ebp-0x34], eax */
    II(0x100a45f6, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x100a45fa, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a45fe, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x100a4604, 0x5)   mov(ebx, 0x101ca468);                 /* mov ebx, 0x101ca468 */
    II(0x100a4609, 0x2)   add(eax, ebx);                        /* add eax, ebx */
    II(0x100a460b, 0x5)   calld(0x100dfd2c, 0x3b71c);           /* call 0x100dfd2c */
    II(0x100a4610, 0x3)   mov(eax, memd_a32(ds, eax + 0x6));    /* mov eax, [eax+0x6] */
    II(0x100a4613, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100a4616, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x34)); /* movsx edx, word [ebp-0x34] */
    II(0x100a461a, 0x3)   add(eax, 0x5);                        /* add eax, 0x5 */
    II(0x100a461d, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100a461f, 0x2)   jged(0x100a4648, 0x27);               /* jge 0x100a4648 */
    II(0x100a4621, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a4625, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4627, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a462a, 0x5)   calld(0x10088bbc, -0x1ba73);          /* call 0x10088bbc */
    II(0x100a462f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4631, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a4634, 0x5)   calld(0x100aa070, 0x5a37);            /* call 0x100aa070 */
    II(0x100a4639, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a463b, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a463e, 0x5)   calld(0x10075f6c, -0x2e6d7);          /* call 0x10075f6c */
    II(0x100a4643, 0x5)   jmpd(0x100a494b, 0x303);              /* jmp 0x100a494b */
l_0x100a4648:
    II(0x100a4648, 0x5)   cmp(memw_a32(ss, ebp - 0xc), 0x31);   /* cmp word [ebp-0xc], 0x31 */
    II(0x100a464d, 0x2)   jnzd(0x100a4658, 0x9);                /* jnz 0x100a4658 */
    II(0x100a464f, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x34)); /* movsx eax, word [ebp-0x34] */
    II(0x100a4653, 0x3)   cmp(eax, 0x19);                       /* cmp eax, 0x19 */
    II(0x100a4656, 0x2)   jld(0x100a465a, 0x2);                 /* jl 0x100a465a */
l_0x100a4658:
    II(0x100a4658, 0x2)   jmpd(0x100a4681, 0x27);               /* jmp 0x100a4681 */
l_0x100a465a:
    II(0x100a465a, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a465e, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4660, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4663, 0x5)   calld(0x10088bbc, -0x1baac);          /* call 0x10088bbc */
    II(0x100a4668, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a466a, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a466d, 0x5)   calld(0x100aa070, 0x59fe);            /* call 0x100aa070 */
    II(0x100a4672, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4674, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a4677, 0x5)   calld(0x10075f6c, -0x2e710);          /* call 0x10075f6c */
    II(0x100a467c, 0x5)   jmpd(0x100a494b, 0x2ca);              /* jmp 0x100a494b */
l_0x100a4681:
    II(0x100a4681, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x100a4685, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100a4688, 0x7)   test(memb_a32(ds, eax + 0x101c81c1), 0x2); /* test byte [eax+0x101c81c1], 0x2 */
    II(0x100a468f, 0x2)   jzd(0x100a46a9, 0x18);                /* jz 0x100a46a9 */
    II(0x100a4691, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100a4696, 0x5)   calld(0x10076338, -0x2e363);          /* call 0x10076338 */
    II(0x100a469b, 0x3)   lea(ebx, ebp - 0x1c);                 /* lea ebx, [ebp-0x1c] */
    II(0x100a469e, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a46a0, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a46a2, 0x5)   calld(0x1007643c, -0x2e26b);          /* call 0x1007643c */
    II(0x100a46a7, 0x2)   jmpd(0x100a46bf, 0x16);               /* jmp 0x100a46bf */
l_0x100a46a9:
    II(0x100a46a9, 0x5)   mov(eax, 0x101c8184);                 /* mov eax, 0x101c8184 */
    II(0x100a46ae, 0x5)   calld(0x10076338, -0x2e37b);          /* call 0x10076338 */
    II(0x100a46b3, 0x3)   lea(ebx, ebp - 0x1c);                 /* lea ebx, [ebp-0x1c] */
    II(0x100a46b6, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100a46b8, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100a46ba, 0x5)   calld(0x1007643c, -0x2e283);          /* call 0x1007643c */
l_0x100a46bf:
    II(0x100a46bf, 0x2)   jmpd(0x100a46c9, 0x8);                /* jmp 0x100a46c9 */
l_0x100a46c1:
    II(0x100a46c1, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a46c4, 0x5)   calld(0x10076bf8, -0x2dad1);          /* call 0x10076bf8 */
l_0x100a46c9:
    II(0x100a46c9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a46cb, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a46ce, 0x5)   calld(0x1013ad71, 0x9669e);           /* call 0x1013ad71 */
    II(0x100a46d3, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a46d5, 0x2)   jzd(0x100a4740, 0x69);                /* jz 0x100a4740 */
    II(0x100a46d7, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a46da, 0x5)   calld(0x100763a0, -0x2e33f);          /* call 0x100763a0 */
    II(0x100a46df, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a46e1, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100a46e4, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a46e8, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100a46ea, 0x2)   jnzd(0x100a46fe, 0x12);               /* jnz 0x100a46fe */
    II(0x100a46ec, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a46ef, 0x5)   calld(0x100763a0, -0x2e354);          /* call 0x100763a0 */
    II(0x100a46f4, 0x4)   mov(ax, memw_a32(ds, eax + 0x8));     /* mov ax, [eax+0x8] */
    II(0x100a46f8, 0x4)   cmp(ax, memw_a32(ss, ebp - 0xc));     /* cmp ax, [ebp-0xc] */
    II(0x100a46fc, 0x2)   jzd(0x100a4700, 0x2);                 /* jz 0x100a4700 */
l_0x100a46fe:
    II(0x100a46fe, 0x2)   jmpd(0x100a473e, 0x3e);               /* jmp 0x100a473e */
l_0x100a4700:
    II(0x100a4700, 0x3)   mov(eax, memd_a32(ss, ebp - 0x24));   /* mov eax, [ebp-0x24] */
    II(0x100a4703, 0x3)   inc(memd_a32(ss, ebp - 0x24));        /* inc dword [ebp-0x24] */
    II(0x100a4706, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a4709, 0x5)   calld(0x100763a0, -0x2e36e);          /* call 0x100763a0 */
    II(0x100a470e, 0x5)   calld(0x101526ac, 0xadf99);           /* call 0x101526ac */
    II(0x100a4713, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a4715, 0x2)   jnzd(0x100a473e, 0x27);               /* jnz 0x100a473e */
    II(0x100a4717, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a471b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a471d, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4720, 0x5)   calld(0x10088bbc, -0x1bb69);          /* call 0x10088bbc */
    II(0x100a4725, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4727, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a472a, 0x5)   calld(0x100aa070, 0x5941);            /* call 0x100aa070 */
    II(0x100a472f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4731, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a4734, 0x5)   calld(0x10075f6c, -0x2e7cd);          /* call 0x10075f6c */
    II(0x100a4739, 0x5)   jmpd(0x100a494b, 0x20d);              /* jmp 0x100a494b */
l_0x100a473e:
    II(0x100a473e, 0x2)   jmpd(0x100a46c1, -0x7f);              /* jmp 0x100a46c1 */
l_0x100a4740:
    II(0x100a4740, 0x2)   jmpd(0x100a474a, 0x8);                /* jmp 0x100a474a */
l_0x100a4742:
    II(0x100a4742, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a4745, 0x5)   calld(0x10076bf8, -0x2db52);          /* call 0x10076bf8 */
l_0x100a474a:
    II(0x100a474a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a474c, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a474f, 0x5)   calld(0x1013ad71, 0x9661d);           /* call 0x1013ad71 */
    II(0x100a4754, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a4756, 0x2)   jzd(0x100a47b8, 0x60);                /* jz 0x100a47b8 */
    II(0x100a4758, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a475b, 0x5)   calld(0x100aaedc, 0x677c);            /* call 0x100aaedc */
    II(0x100a4760, 0x5)   calld(0x1008ad90, -0x199d5);          /* call 0x1008ad90 */
    II(0x100a4765, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x100a4769, 0x2)   jnzd(0x100a4781, 0x16);               /* jnz 0x100a4781 */
    II(0x100a476b, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x100a476f, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a4772, 0x5)   calld(0x100aaedc, 0x6765);            /* call 0x100aaedc */
    II(0x100a4777, 0x5)   calld(0x100a6125, 0x19a9);            /* call 0x100a6125 */
    II(0x100a477c, 0x3)   test(ax, ax);                         /* test ax, ax */
    II(0x100a477f, 0x2)   jnzd(0x100a4783, 0x2);                /* jnz 0x100a4783 */
l_0x100a4781:
    II(0x100a4781, 0x2)   jmpd(0x100a47a0, 0x1d);               /* jmp 0x100a47a0 */
l_0x100a4783:
    II(0x100a4783, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a4786, 0x5)   add(eax, 0xfa);                       /* add eax, 0xfa */
    II(0x100a478b, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100a478e, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a4791, 0x5)   calld(0x100aaedc, 0x6746);            /* call 0x100aaedc */
    II(0x100a4796, 0x5)   calld(0x100a2bc4, -0x1bd7);           /* call 0x100a2bc4 */
    II(0x100a479b, 0x1)   cwde();                               /* cwde */
    II(0x100a479c, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a479e, 0x2)   jled(0x100a47a2, 0x2);                /* jle 0x100a47a2 */
l_0x100a47a0:
    II(0x100a47a0, 0x2)   jmpd(0x100a47b6, 0x14);               /* jmp 0x100a47b6 */
l_0x100a47a2:
    II(0x100a47a2, 0x4)   movsx(edx, memw_a32(ss, ebp - 0xc));  /* movsx edx, word [ebp-0xc] */
    II(0x100a47a6, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a47a9, 0x5)   calld(0x100aaedc, 0x672e);            /* call 0x100aaedc */
    II(0x100a47ae, 0x5)   calld(0x100a6125, 0x1972);            /* call 0x100a6125 */
    II(0x100a47b3, 0x3)   add(memd_a32(ss, ebp - 0x2c), eax);   /* add [ebp-0x2c], eax */
l_0x100a47b6:
    II(0x100a47b6, 0x2)   jmpd(0x100a4742, -0x76);              /* jmp 0x100a4742 */
l_0x100a47b8:
    II(0x100a47b8, 0x2)   jmpd(0x100a47c2, 0x8);                /* jmp 0x100a47c2 */
l_0x100a47ba:
    II(0x100a47ba, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a47bd, 0x5)   calld(0x10076bf8, -0x2dbca);          /* call 0x10076bf8 */
l_0x100a47c2:
    II(0x100a47c2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a47c4, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a47c7, 0x5)   calld(0x1013ad71, 0x965a5);           /* call 0x1013ad71 */
    II(0x100a47cc, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a47ce, 0x6)   jzd(0x100a489e, 0xca);                /* jz dword 0x100a489e */
    II(0x100a47d4, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a47d7, 0x5)   calld(0x1008adc4, -0x19a18);          /* call 0x1008adc4 */
    II(0x100a47dc, 0x5)   calld(0x1008ad90, -0x19a51);          /* call 0x1008ad90 */
    II(0x100a47e1, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x100a47e5, 0x2)   jnzd(0x100a481f, 0x38);               /* jnz 0x100a481f */
    II(0x100a47e7, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a47ea, 0x5)   calld(0x1008adc4, -0x19a2b);          /* call 0x1008adc4 */
    II(0x100a47ef, 0x3)   mov(memd_a32(ss, ebp - 0x38), eax);   /* mov [ebp-0x38], eax */
//    II(0x100a47f2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x38));   /* mov eax, [ebp-0x38] */
    II(0x100a47f5, 0x3)   mov(edx, memd_a32(ds, eax + 0x2));    /* mov edx, [eax+0x2] */
//    II(0x100a47f8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x38));   /* mov eax, [ebp-0x38] */
    II(0x100a47fb, 0x3)   calld_abs(memd_a32(ds, edx + 0x20));  /* call dword near [edx+0x20] */
    II(0x100a47fe, 0x2)   cmp(al, 0x9);                         /* cmp al, 0x9 */
    II(0x100a4800, 0x2)   jzd(0x100a481d, 0x1b);                /* jz 0x100a481d */
    II(0x100a4802, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4805, 0x5)   calld(0x1008adc4, -0x19a46);          /* call 0x1008adc4 */
    II(0x100a480a, 0x3)   mov(memd_a32(ss, ebp - 0x3c), eax);   /* mov [ebp-0x3c], eax */
//    II(0x100a480d, 0x3)   mov(eax, memd_a32(ss, ebp - 0x3c));   /* mov eax, [ebp-0x3c] */
    II(0x100a4810, 0x3)   mov(edx, memd_a32(ds, eax + 0x2));    /* mov edx, [eax+0x2] */
//    II(0x100a4813, 0x3)   mov(eax, memd_a32(ss, ebp - 0x3c));   /* mov eax, [ebp-0x3c] */
    II(0x100a4816, 0x3)   calld_abs(memd_a32(ds, edx + 0x20));  /* call dword near [edx+0x20] */
    II(0x100a4819, 0x2)   cmp(al, 0x8);                         /* cmp al, 0x8 */
    II(0x100a481b, 0x2)   jnzd(0x100a481f, 0x2);                /* jnz 0x100a481f */
l_0x100a481d:
    II(0x100a481d, 0x2)   jmpd(0x100a4821, 0x2);                /* jmp 0x100a4821 */
l_0x100a481f:
    II(0x100a481f, 0x2)   jmpd(0x100a4834, 0x13);               /* jmp 0x100a4834 */
l_0x100a4821:
    II(0x100a4821, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4824, 0x5)   calld(0x1008adf8, -0x19a31);          /* call 0x1008adf8 */
    II(0x100a4829, 0x5)   calld(0x1009c4c4, -0x836a);           /* call 0x1009c4c4 */
    II(0x100a482e, 0x4)   cmp(ax, memw_a32(ss, ebp - 0xc));     /* cmp ax, [ebp-0xc] */
    II(0x100a4832, 0x2)   jzd(0x100a4836, 0x2);                 /* jz 0x100a4836 */
l_0x100a4834:
    II(0x100a4834, 0x2)   jmpd(0x100a4870, 0x3a);               /* jmp 0x100a4870 */
l_0x100a4836:
    II(0x100a4836, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4839, 0x5)   calld(0x1008adf8, -0x19a46);          /* call 0x1008adf8 */
    II(0x100a483e, 0x3)   mov(memd_a32(ss, ebp - 0x40), eax);   /* mov [ebp-0x40], eax */
//    II(0x100a4841, 0x3)   mov(eax, memd_a32(ss, ebp - 0x40));   /* mov eax, [ebp-0x40] */
    II(0x100a4844, 0x3)   mov(edx, memd_a32(ds, eax + 0x2));    /* mov edx, [eax+0x2] */
//    II(0x100a4847, 0x3)   mov(eax, memd_a32(ss, ebp - 0x40));   /* mov eax, [ebp-0x40] */
    II(0x100a484a, 0x3)   calld_abs(memd_a32(ds, edx + 0x70));  /* call dword near [edx+0x70] */
    II(0x100a484d, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a484f, 0x2)   jnzd(0x100a486e, 0x1d);               /* jnz 0x100a486e */
    II(0x100a4851, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100a4854, 0x5)   add(eax, 0xfa);                       /* add eax, 0xfa */
    II(0x100a4859, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100a485c, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a485f, 0x5)   calld(0x1008adc4, -0x19aa0);          /* call 0x1008adc4 */
    II(0x100a4864, 0x5)   calld(0x100a2bc4, -0x1ca5);           /* call 0x100a2bc4 */
    II(0x100a4869, 0x1)   cwde();                               /* cwde */
    II(0x100a486a, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a486c, 0x2)   jgd(0x100a4870, 0x2);                 /* jg 0x100a4870 */
l_0x100a486e:
    II(0x100a486e, 0x2)   jmpd(0x100a4872, 0x2);                /* jmp 0x100a4872 */
l_0x100a4870:
    II(0x100a4870, 0x2)   jmpd(0x100a4899, 0x27);               /* jmp 0x100a4899 */
l_0x100a4872:
    II(0x100a4872, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a4876, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4878, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a487b, 0x5)   calld(0x10088bbc, -0x1bcc4);          /* call 0x10088bbc */
    II(0x100a4880, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4882, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a4885, 0x5)   calld(0x100aa070, 0x57e6);            /* call 0x100aa070 */
    II(0x100a488a, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a488c, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a488f, 0x5)   calld(0x10075f6c, -0x2e928);          /* call 0x10075f6c */
    II(0x100a4894, 0x5)   jmpd(0x100a494b, 0xb2);               /* jmp 0x100a494b */
l_0x100a4899:
    II(0x100a4899, 0x5)   jmpd(0x100a47ba, -0xe4);              /* jmp 0x100a47ba */
l_0x100a489e:
    II(0x100a489e, 0x3)   mov(eax, memd_a32(ss, ebp - 0x2c));   /* mov eax, [ebp-0x2c] */
    II(0x100a48a1, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x24));    /* cmp ax, [ebp-0x24] */
    II(0x100a48a5, 0x2)   jged(0x100a48ce, 0x27);               /* jge 0x100a48ce */
    II(0x100a48a7, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a48ab, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48ad, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a48b0, 0x5)   calld(0x10088bbc, -0x1bcf9);          /* call 0x10088bbc */
    II(0x100a48b5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48b7, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a48ba, 0x5)   calld(0x100aa070, 0x57b1);            /* call 0x100aa070 */
    II(0x100a48bf, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48c1, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a48c4, 0x5)   calld(0x10075f6c, -0x2e95d);          /* call 0x10075f6c */
    II(0x100a48c9, 0x5)   jmpd(0x100a494b, 0x7d);               /* jmp 0x100a494b */
l_0x100a48ce:
    II(0x100a48ce, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x24)); /* movsx eax, word [ebp-0x24] */
    II(0x100a48d2, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100a48d4, 0x2)   jled(0x100a48e3, 0xd);                /* jle 0x100a48e3 */
    II(0x100a48d6, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x8));  /* movsx eax, word [ebp-0x8] */
    II(0x100a48da, 0x5)   calld(0x100a5c69, 0x138a);            /* call 0x100a5c69 */
    II(0x100a48df, 0x2)   test(al, al);                         /* test al, al */
    II(0x100a48e1, 0x2)   jnzd(0x100a48e5, 0x2);                /* jnz 0x100a48e5 */
l_0x100a48e3:
    II(0x100a48e3, 0x2)   jmpd(0x100a4909, 0x24);               /* jmp 0x100a4909 */
l_0x100a48e5:
    II(0x100a48e5, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0);     /* mov byte [ebp-0x14], 0x0 */
    II(0x100a48e9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48eb, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a48ee, 0x5)   calld(0x10088bbc, -0x1bd37);          /* call 0x10088bbc */
    II(0x100a48f3, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48f5, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a48f8, 0x5)   calld(0x100aa070, 0x5773);            /* call 0x100aa070 */
    II(0x100a48fd, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a48ff, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a4902, 0x5)   calld(0x10075f6c, -0x2e99b);          /* call 0x10075f6c */
    II(0x100a4907, 0x2)   jmpd(0x100a494b, 0x42);               /* jmp 0x100a494b */
l_0x100a4909:
    II(0x100a4909, 0x4)   mov(memb_a32(ss, ebp - 0x14), 0x1);   /* mov byte [ebp-0x14], 0x1 */
    II(0x100a490d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a490f, 0x3)   lea(eax, ebp - 0x30);                 /* lea eax, [ebp-0x30] */
    II(0x100a4912, 0x5)   calld(0x10088bbc, -0x1bd5b);          /* call 0x10088bbc */
    II(0x100a4917, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4919, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x100a491c, 0x5)   calld(0x100aa070, 0x574f);            /* call 0x100aa070 */
    II(0x100a4921, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100a4923, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x100a4926, 0x5)   calld(0x10075f6c, -0x2e9bf);          /* call 0x10075f6c */
    II(0x100a492b, 0x2)   jmpd(0x100a494b, 0x1e);               /* jmp 0x100a494b */
//  II(0x100a492d, 0x1e)  /* Недостижимый код. */
l_0x100a494b:
    II(0x100a494b, 0x3)   mov(al, memb_a32(ss, ebp - 0x14));    /* mov al, [ebp-0x14] */
    II(0x100a494e, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100a4950, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100a4951, 0x1)   popd(edi);                            /* pop edi */
    II(0x100a4952, 0x1)   popd(esi);                            /* pop esi */
    II(0x100a4953, 0x1)   retd();                               /* ret */
FUNC_END

