FUNC_BEGIN(0x10133743, 0xca7d7ac9bd58008f, 0x20, ({0x68, 0x38, 0, 0, 0, 0xe8, 0x5, 0x26, 0x3, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x24, 0, 0, 0, 0x89, 0x45, 0xf4, 0x88, 0x55, 0xfc, 0x89, 0x5d, 0xf8, 0xf, 0xbf, 0x45, 0xf4, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0xba, 0x68, 0xa4, 0x1c, 0x10, 0x1, 0xc2, 0xf, 0xbe, 0x45, 0xfc, 0x6b, 0xc0, 0xc, 0x81, 0xc2, 0x88, 0, 0, 0, 0x1, 0xc2, 0x89, 0x55, 0xf0, 0x8b, 0x45, 0xf0, 0x83, 0x38, 0, 0x75, 0xc, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xe9, 0x18, 0x1, 0, 0, 0xf, 0xbf, 0x55, 0xf8, 0xf, 0xbf, 0x45, 0xf4, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8b, 0x80, 0x62, 0xa5, 0x1c, 0x10, 0xe8, 0xfe, 0x7e, 0xf9, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xe4, 0xe8, 0x44, 0x30, 0xf4, 0xff, 0x8a, 0x45, 0xfc, 0x88, 0x45, 0xe8, 0xe9, 0xa1, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x61, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0xe, 0x89, 0x45, 0xe0, 0xe9, 0xa8, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x4d, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0x14, 0x89, 0x45, 0xe0, 0xe9, 0x94, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x39, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0x12, 0x89, 0x45, 0xe0, 0xe9, 0x80, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x25, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0xc, 0x89, 0x45, 0xe0, 0xe9, 0x6c, 0, 0, 0, 0x8d, 0x45, 0xe4, 0xe8, 0x11, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0xa, 0x89, 0x45, 0xe0, 0xeb, 0x5b, 0x8d, 0x45, 0xe4, 0xe8, 0, 0x2f, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0x10, 0x89, 0x45, 0xe0, 0xeb, 0x4a, 0x8d, 0x45, 0xe4, 0xe8, 0xef, 0x2e, 0xf4, 0xff, 0x66, 0x8b, 0x40, 0x17, 0x89, 0x45, 0xe0, 0xeb, 0x39, 0xeb, 0x37, 0xc7, 0x37, 0x13, 0x10, 0xdb, 0x37, 0x13, 0x10, 0xef, 0x37, 0x13, 0x10, 0x3, 0x38, 0x13, 0x10, 0x17, 0x38, 0x13, 0x10, 0x28, 0x38, 0x13, 0x10, 0x39, 0x38, 0x13, 0x10, 0x8a, 0x45, 0xe8, 0x88, 0x45, 0xdc, 0x80, 0x7d, 0xdc, 0x6, 0x77, 0xd6, 0x31, 0xc0, 0x8a, 0x45, 0xdc, 0xc1, 0xe0, 0x2, 0x2e, 0xff, 0xa0, 0x4c, 0x38, 0x13, 0x10, 0xf, 0xbf, 0x55, 0xe0, 0x8b, 0x45, 0xf0, 0x8b, 0, 0xf, 0xaf, 0xc2, 0xbb, 0xa, 0, 0, 0, 0x31, 0xd2, 0xf7, 0xf3, 0x89, 0x45, 0xec, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x47, 0x26, 0xf4, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xe4, 0xe8, 0x3b, 0x26, 0xf4, 0xff, 0x8b, 0x45, 0xec, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x10133743, 0x5)   pushd(0x38);                          /* push dword 0x38 */
    II(0x10133748, 0x5)   calld(sys_check_available_stack_size, 0x32605); /* call 0x10165d52 */
    II(0x1013374d, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x1013374e, 0x1)   pushd(esi);                           /* push esi */
    II(0x1013374f, 0x1)   pushd(edi);                           /* push edi */
    II(0x10133750, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10133751, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10133753, 0x6)   sub(esp, 0x24);                       /* sub esp, 0x24 */
    II(0x10133759, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x1013375c, 0x3)   mov(memb_a32(ss, ebp - 0x4), dl);     /* mov [ebp-0x4], dl */
    II(0x1013375f, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x10133762, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10133766, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x1013376c, 0x5)   mov(edx, 0x101ca468);                 /* mov edx, 0x101ca468 */
    II(0x10133771, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10133773, 0x4)   movsx(eax, memb_a32(ss, ebp - 0x4));  /* movsx eax, byte [ebp-0x4] */
    II(0x10133777, 0x3)   imul(eax, eax, 0xc);                  /* imul eax, eax, 0xc */
    II(0x1013377a, 0x6)   add(edx, 0x88);                       /* add edx, 0x88 */
    II(0x10133780, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10133782, 0x3)   mov(memd_a32(ss, ebp - 0x10), edx);   /* mov [ebp-0x10], edx */
    II(0x10133785, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10133788, 0x3)   cmp(memd_a32(ds, eax), 0);            /* cmp dword [eax], 0x0 */
    II(0x1013378b, 0x2)   jnzd(0x10133799, 0xc);                /* jnz 0x10133799 */
    II(0x1013378d, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x10133794, 0x5)   jmpd(0x101338b1, 0x118);              /* jmp 0x101338b1 */
l_0x10133799:
    II(0x10133799, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x1013379d, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x101337a1, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x101337a7, 0x6)   mov(eax, memd_a32(ds, eax + 0x101ca562)); /* mov eax, [eax+0x101ca562] */
    II(0x101337ad, 0x5)   calld(0x100cb6b0, -0x68102);          /* call 0x100cb6b0 */
    II(0x101337b2, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x101337b4, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x101337b7, 0x5)   calld(0x10076800, -0xbcfbc);          /* call 0x10076800 */
    II(0x101337bc, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x101337bf, 0x3)   mov(memb_a32(ss, ebp - 0x18), al);    /* mov [ebp-0x18], al */
    II(0x101337c2, 0x5)   jmpd(0x10133868, 0xa1);               /* jmp 0x10133868 */
l_0x101337c7:
    II(0x101337c7, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x101337ca, 0x5)   calld(0x10076730, -0xbd09f);          /* call 0x10076730 */
    II(0x101337cf, 0x4)   mov(ax, memw_a32(ds, eax + 0xe));     /* mov ax, [eax+0xe] */
    II(0x101337d3, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x101337d6, 0x5)   jmpd(0x10133883, 0xa8);               /* jmp 0x10133883 */
l_0x101337db:
    II(0x101337db, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x101337de, 0x5)   calld(0x10076730, -0xbd0b3);          /* call 0x10076730 */
    II(0x101337e3, 0x4)   mov(ax, memw_a32(ds, eax + 0x14));    /* mov ax, [eax+0x14] */
    II(0x101337e7, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x101337ea, 0x5)   jmpd(0x10133883, 0x94);               /* jmp 0x10133883 */
l_0x101337ef:
    II(0x101337ef, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x101337f2, 0x5)   calld(0x10076730, -0xbd0c7);          /* call 0x10076730 */
    II(0x101337f7, 0x4)   mov(ax, memw_a32(ds, eax + 0x12));    /* mov ax, [eax+0x12] */
    II(0x101337fb, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x101337fe, 0x5)   jmpd(0x10133883, 0x80);               /* jmp 0x10133883 */
l_0x10133803:
    II(0x10133803, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x10133806, 0x5)   calld(0x10076730, -0xbd0db);          /* call 0x10076730 */
    II(0x1013380b, 0x4)   mov(ax, memw_a32(ds, eax + 0xc));     /* mov ax, [eax+0xc] */
    II(0x1013380f, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10133812, 0x5)   jmpd(0x10133883, 0x6c);               /* jmp 0x10133883 */
l_0x10133817:
    II(0x10133817, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x1013381a, 0x5)   calld(0x10076730, -0xbd0ef);          /* call 0x10076730 */
    II(0x1013381f, 0x4)   mov(ax, memw_a32(ds, eax + 0xa));     /* mov ax, [eax+0xa] */
    II(0x10133823, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10133826, 0x2)   jmpd(0x10133883, 0x5b);               /* jmp 0x10133883 */
l_0x10133828:
    II(0x10133828, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x1013382b, 0x5)   calld(0x10076730, -0xbd100);          /* call 0x10076730 */
    II(0x10133830, 0x4)   mov(ax, memw_a32(ds, eax + 0x10));    /* mov ax, [eax+0x10] */
    II(0x10133834, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10133837, 0x2)   jmpd(0x10133883, 0x4a);               /* jmp 0x10133883 */
l_0x10133839:
    II(0x10133839, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x1013383c, 0x5)   calld(0x10076730, -0xbd111);          /* call 0x10076730 */
    II(0x10133841, 0x4)   mov(ax, memw_a32(ds, eax + 0x17));    /* mov ax, [eax+0x17] */
    II(0x10133845, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x10133848, 0x2)   jmpd(0x10133883, 0x39);               /* jmp 0x10133883 */
l_0x1013384a:
    II(0x1013384a, 0x2)   jmpd(0x10133883, 0x37);               /* jmp 0x10133883 */
//    II(0x1013384c, 0x1c)  /* Служебная область с абсолютными адресами переходов. {0x101337c7, 0x101337db, 0x101337ef, 0x10133803, 0x10133817, 0x10133828, 0x10133839}. */
l_0x10133868:
    II(0x10133868, 0x3)   mov(al, memb_a32(ss, ebp - 0x18));    /* mov al, [ebp-0x18] */
    II(0x1013386b, 0x3)   mov(memb_a32(ss, ebp - 0x24), al);    /* mov [ebp-0x24], al */
    II(0x1013386e, 0x4)   cmp(memb_a32(ss, ebp - 0x24), 0x6);   /* cmp byte [ebp-0x24], 0x6 */
    II(0x10133872, 0x2)   jad(0x1013384a, -0x2a);               /* ja 0x1013384a */
    II(0x10133874, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10133876, 0x3)   mov(al, memb_a32(ss, ebp - 0x24));    /* mov al, [ebp-0x24] */
    II(0x10133879, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x1013387c, 0x7)   jmpd_abs_switch(memd_a32(cs, eax + 0x1013384c), (0x101337c7)(0x101337db)(0x101337ef)(0x10133803)(0x10133817)(0x10133828)(0x10133839)); /* jmp dword near [cs:eax+0x1013384c] */
l_0x10133883:
    II(0x10133883, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x20)); /* movsx edx, word [ebp-0x20] */
    II(0x10133887, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x1013388a, 0x2)   mov(eax, memd_a32(ds, eax));          /* mov eax, [eax] */
    II(0x1013388c, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x1013388f, 0x5)   mov(ebx, 0xa);                        /* mov ebx, 0xa */
    II(0x10133894, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10133896, 0x2)   div(ebx);                             /* div ebx */
    II(0x10133898, 0x3)   mov(memd_a32(ss, ebp - 0x14), eax);   /* mov [ebp-0x14], eax */
    II(0x1013389b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x1013389d, 0x3)   lea(eax, ebp - 0x1c);                 /* lea eax, [ebp-0x1c] */
    II(0x101338a0, 0x5)   calld(0x10075eec, -0xbd9b9);          /* call 0x10075eec */
    II(0x101338a5, 0x2)   jmpd(0x101338b1, 0xa);                /* jmp 0x101338b1 */
//  II(0x101338a7, 0xa)   /* Недостижимый код. */
l_0x101338b1:
    II(0x101338b1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x101338b4, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x101338b6, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x101338b7, 0x1)   popd(edi);                            /* pop edi */
    II(0x101338b8, 0x1)   popd(esi);                            /* pop esi */
    II(0x101338b9, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x101338ba, 0x1)   retd();                               /* ret */
FUNC_END

