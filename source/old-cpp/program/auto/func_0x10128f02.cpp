FUNC_BEGIN(0x10128f02, 0x1cc76b7ff522b331, 0x20, ({0x68, 0x38, 0, 0, 0, 0xe8, 0x46, 0xce, 0x3, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x1c, 0, 0, 0, 0x89, 0x45, 0xfc, 0xc7, 0x45, 0xf4, 0x21, 0x5c, 0x1c, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0xba, 0xb4, 0x35, 0x1c, 0x10, 0x1, 0xc2, 0x89, 0x55, 0xf0, 0xe8, 0x3a, 0x3c, 0xf7, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8b, 0x55, 0xf0, 0x8d, 0x45, 0xec, 0xe8, 0x67, 0x3b, 0xf7, 0xff, 0xe8, 0xb2, 0x7a, 0xfb, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8b, 0x55, 0xf0, 0x83, 0xc2, 0x4, 0x8d, 0x45, 0xe8, 0xe8, 0x10, 0x7a, 0xfb, 0xff, 0xc6, 0x5, 0x1c, 0x5c, 0x1c, 0x10, 0xc, 0x8b, 0x45, 0xfc, 0x66, 0xa3, 0x1d, 0x5c, 0x1c, 0x10, 0x8d, 0x45, 0xec, 0xe8, 0xf0, 0x23, 0xf6, 0xff, 0xc1, 0xe0, 0x2, 0x5, 0xd, 0, 0, 0, 0x66, 0xa3, 0x1f, 0x5c, 0x1c, 0x10, 0xa1, 0x1d, 0x5c, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x3d, 0x26, 0x2, 0, 0, 0x7f, 0x9, 0xc7, 0x45, 0xe4, 0, 0, 0, 0, 0xeb, 0x19, 0xb9, 0x75, 0xb, 0, 0, 0xbb, 0xb, 0x83, 0x1a, 0x10, 0xba, 0x16, 0x83, 0x1a, 0x10, 0x31, 0xc0, 0xe8, 0xde, 0xcd, 0x3, 0, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xf0, 0x66, 0x8b, 0x50, 0xc, 0x8b, 0x45, 0xf4, 0x66, 0x89, 0x10, 0x8b, 0x45, 0xf0, 0xe8, 0x9c, 0x23, 0xf6, 0xff, 0x89, 0xc2, 0x8b, 0x45, 0xf4, 0x66, 0x89, 0x50, 0x4, 0x8b, 0x45, 0xf0, 0x8b, 0x50, 0x8, 0x8b, 0x45, 0xf4, 0x89, 0x50, 0x8, 0x8b, 0x45, 0xf0, 0x66, 0x8b, 0x50, 0x10, 0x8b, 0x45, 0xf4, 0x66, 0x89, 0x50, 0x2, 0x8b, 0x45, 0xf0, 0x8a, 0x50, 0x12, 0x8b, 0x45, 0xf4, 0x88, 0x50, 0xc, 0xf, 0xbf, 0x45, 0xfc, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x66, 0x8b, 0x90, 0x83, 0xa5, 0x1c, 0x10, 0x8b, 0x45, 0xf4, 0x66, 0x89, 0x50, 0x6, 0xc7, 0x45, 0xf8, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xf8, 0xff, 0x45, 0xf8, 0x8d, 0x45, 0xec, 0xe8, 0x3e, 0x23, 0xf6, 0xff, 0x66, 0x3b, 0x45, 0xf8, 0x7e, 0x3c, 0xf, 0xbf, 0x55, 0xf8, 0x8d, 0x45, 0xec, 0xe8, 0xec, 0x21, 0xf6, 0xff, 0xf, 0xbf, 0x55, 0xf8, 0xc1, 0xe2, 0x2, 0x3, 0x55, 0xf4, 0x66, 0x8b, 0, 0x66, 0x89, 0x42, 0xd, 0xf, 0xbf, 0x55, 0xf8, 0x8d, 0x45, 0xe8, 0xe8, 0x63, 0x78, 0xfb, 0xff, 0xf, 0xbf, 0x55, 0xf8, 0xc1, 0xe2, 0x2, 0x3, 0x55, 0xf4, 0x66, 0x8b, 0, 0x66, 0x89, 0x42, 0xf, 0xeb, 0xb0, 0xb8, 0x4, 0, 0, 0, 0xe8, 0x73, 0xcb, 0xff, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe8, 0xe8, 0xc4, 0x71, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x7a, 0xfa, 0xf5, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10128f02, 0x5)   pushd(0x38);                          /* push dword 0x38 */
    II(0x10128f07, 0x5)   calld(sys_check_available_stack_size, 0x3ce46); /* call 0x10165d52 */
    II(0x10128f0c, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10128f0d, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10128f0e, 0x1)   pushd(edx);                           /* push edx */
    II(0x10128f0f, 0x1)   pushd(esi);                           /* push esi */
    II(0x10128f10, 0x1)   pushd(edi);                           /* push edi */
    II(0x10128f11, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10128f12, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10128f14, 0x6)   sub(esp, 0x1c);                       /* sub esp, 0x1c */
    II(0x10128f1a, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10128f1d, 0x7)   mov(memd_a32(ss, ebp - 0xc), 0x101c5c21); /* mov dword [ebp-0xc], 0x101c5c21 */
    II(0x10128f24, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10128f28, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x10128f2b, 0x5)   mov(edx, 0x101c35b4);                 /* mov edx, 0x101c35b4 */
    II(0x10128f30, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10128f32, 0x3)   mov(memd_a32(ss, ebp - 0x10), edx);   /* mov [ebp-0x10], edx */
    II(0x10128f35, 0x5)   calld(0x1009cb74, -0x8c3c6);          /* call 0x1009cb74 */
    II(0x10128f3a, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10128f3c, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x10128f3e, 0x3)   mov(edx, memd_a32(ss, ebp - 0x10));   /* mov edx, [ebp-0x10] */
    II(0x10128f41, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10128f44, 0x5)   calld(0x1009cab0, -0x8c499);          /* call 0x1009cab0 */
    II(0x10128f49, 0x5)   calld(0x100e0a00, -0x4854e);          /* call 0x100e0a00 */
    II(0x10128f4e, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10128f50, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x10128f52, 0x3)   mov(edx, memd_a32(ss, ebp - 0x10));   /* mov edx, [ebp-0x10] */
    II(0x10128f55, 0x3)   add(edx, 0x4);                        /* add edx, 0x4 */
    II(0x10128f58, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10128f5b, 0x5)   calld(0x100e0970, -0x485f0);          /* call 0x100e0970 */
    II(0x10128f60, 0x7)   mov(memb_a32(ds, 0x101c5c1c), 0xc);   /* mov byte [0x101c5c1c], 0xc */
    II(0x10128f67, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x10128f6a, 0x6)   mov(memw_a32(ds, 0x101c5c1d), ax);    /* mov [0x101c5c1d], ax */
    II(0x10128f70, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10128f73, 0x5)   calld(my_2_get_count, -0x9dc10);      /* call 0x1008b368 */
    II(0x10128f78, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x10128f7b, 0x5)   add(eax, 0xd);                        /* add eax, 0xd */
    II(0x10128f80, 0x6)   mov(memw_a32(ds, 0x101c5c1f), ax);    /* mov [0x101c5c1f], ax */
    II(0x10128f86, 0x5)   mov(eax, memd_a32(ds, 0x101c5c1d));   /* mov eax, [0x101c5c1d] */
    II(0x10128f8b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10128f8e, 0x5)   cmp(eax, 0x226);                      /* cmp eax, 0x226 */
    II(0x10128f93, 0x2)   jgd(0x10128f9e, 0x9);                 /* jg 0x10128f9e */
    II(0x10128f95, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0);     /* mov dword [ebp-0x1c], 0x0 */
    II(0x10128f9c, 0x2)   jmpd(0x10128fb7, 0x19);               /* jmp 0x10128fb7 */
l_0x10128f9e:
    II(0x10128f9e, 0x5)   mov(ecx, 0xb75);                      /* mov ecx, 0xb75 */
    II(0x10128fa3, 0x5)   mov(ebx, 0x101a830b);                 /* mov ebx, 0x101a830b */ /* "remote.cpp" */
    II(0x10128fa8, 0x5)   mov(edx, 0x101a8316);                 /* mov edx, 0x101a8316 */ /* "outStream.pktHdr.pktLength <= MAXDATALEN" */
    II(0x10128fad, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10128faf, 0x5)   calld(sys_assert, 0x3cdde);           /* call 0x10165d92 */
    II(0x10128fb4, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
l_0x10128fb7:
    II(0x10128fb7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10128fba, 0x4)   mov(dx, memw_a32(ds, eax + 0xc));     /* mov dx, [eax+0xc] */
    II(0x10128fbe, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10128fc1, 0x3)   mov(memw_a32(ds, eax), dx);           /* mov [eax], dx */
    II(0x10128fc4, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10128fc7, 0x5)   calld(my_2_get_count, -0x9dc64);      /* call 0x1008b368 */
    II(0x10128fcc, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10128fce, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10128fd1, 0x4)   mov(memw_a32(ds, eax + 0x4), dx);     /* mov [eax+0x4], dx */
    II(0x10128fd5, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10128fd8, 0x3)   mov(edx, memd_a32(ds, eax + 0x8));    /* mov edx, [eax+0x8] */
    II(0x10128fdb, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10128fde, 0x3)   mov(memd_a32(ds, eax + 0x8), edx);    /* mov [eax+0x8], edx */
    II(0x10128fe1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10128fe4, 0x4)   mov(dx, memw_a32(ds, eax + 0x10));    /* mov dx, [eax+0x10] */
    II(0x10128fe8, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10128feb, 0x4)   mov(memw_a32(ds, eax + 0x2), dx);     /* mov [eax+0x2], dx */
    II(0x10128fef, 0x3)   mov(eax, memd_a32(ss, ebp - 0x10));   /* mov eax, [ebp-0x10] */
    II(0x10128ff2, 0x3)   mov(dl, memb_a32(ds, eax + 0x12));    /* mov dl, [eax+0x12] */
    II(0x10128ff5, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x10128ff8, 0x3)   mov(memb_a32(ds, eax + 0xc), dl);     /* mov [eax+0xc], dl */
    II(0x10128ffb, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10128fff, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x10129005, 0x7)   mov(dx, memw_a32(ds, eax + 0x101ca583)); /* mov dx, [eax+0x101ca583] */
    II(0x1012900c, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x1012900f, 0x4)   mov(memw_a32(ds, eax + 0x6), dx);     /* mov [eax+0x6], dx */
    II(0x10129013, 0x7)   mov(memd_a32(ss, ebp - 0x8), 0);      /* mov dword [ebp-0x8], 0x0 */
    II(0x1012901a, 0x2)   jmpd(0x10129022, 0x6);                /* jmp 0x10129022 */
l_0x1012901c:
    II(0x1012901c, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x1012901f, 0x3)   inc(memd_a32(ss, ebp - 0x8));         /* inc dword [ebp-0x8] */
l_0x10129022:
    II(0x10129022, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10129025, 0x5)   calld(my_2_get_count, -0x9dcc2);      /* call 0x1008b368 */
    II(0x1012902a, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x8));     /* cmp ax, [ebp-0x8] */
    II(0x1012902e, 0x2)   jled(0x1012906c, 0x3c);               /* jle 0x1012906c */
    II(0x10129030, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10129034, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10129037, 0x5)   calld(0x1008b228, -0x9de14);          /* call 0x1008b228 */
    II(0x1012903c, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10129040, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x10129043, 0x3)   add(edx, memd_a32(ss, ebp - 0xc));    /* add edx, [ebp-0xc] */
    II(0x10129046, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x10129049, 0x4)   mov(memw_a32(ds, edx + 0xd), ax);     /* mov [edx+0xd], ax */
    II(0x1012904d, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x10129051, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x10129054, 0x5)   calld(0x100e08bc, -0x4879d);          /* call 0x100e08bc */
    II(0x10129059, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x8));  /* movsx edx, word [ebp-0x8] */
    II(0x1012905d, 0x3)   shl(edx, 0x2);                        /* shl edx, 0x2 */
    II(0x10129060, 0x3)   add(edx, memd_a32(ss, ebp - 0xc));    /* add edx, [ebp-0xc] */
    II(0x10129063, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x10129066, 0x4)   mov(memw_a32(ds, edx + 0xf), ax);     /* mov [edx+0xf], ax */
    II(0x1012906a, 0x2)   jmpd(0x1012901c, -0x50);              /* jmp 0x1012901c */
l_0x1012906c:
    II(0x1012906c, 0x5)   mov(eax, 0x4);                        /* mov eax, 0x4 */
    II(0x10129071, 0x5)   calld(0x10125be9, -0x348d);           /* call 0x10125be9 */
    II(0x10129076, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10129078, 0x3)   lea(eax, ebp - 0x18);                 /* lea eax, [ebp-0x18] */
    II(0x1012907b, 0x5)   calld(0x100e0244, -0x48e3c);          /* call 0x100e0244 */
    II(0x10129080, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10129082, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x10129085, 0x5)   calld(0x10088b04, -0xa0586);          /* call 0x10088b04 */
    II(0x1012908a, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x1012908c, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x1012908d, 0x1)   popd(edi);                            /* pop edi */
    II(0x1012908e, 0x1)   popd(esi);                            /* pop esi */
    II(0x1012908f, 0x1)   popd(edx);                            /* pop edx */
    II(0x10129090, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10129091, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10129092, 0x1)   retd();                               /* ret */
FUNC_END

