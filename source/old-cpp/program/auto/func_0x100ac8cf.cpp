FUNC_BEGIN(0x100ac8cf, 0x7ee59ed8a542416b, 0x20, ({0x68, 0x44, 0, 0, 0, 0xe8, 0x79, 0x94, 0xb, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x31, 0xd2, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x13, 0xe8, 0x18, 0xe4, 0x8, 0, 0x84, 0xc0, 0x74, 0x1d, 0xb8, 0x1c, 0xe, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xe8, 0xf5, 0x95, 0xb, 0, 0x83, 0xc4, 0x8, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf4, 0xe9, 0xf, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x2c, 0xe8, 0x5b, 0xeb, 0xfd, 0xff, 0x98, 0x85, 0xc0, 0x75, 0x61, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x24, 0xc1, 0xf8, 0x10, 0x83, 0xf8, 0xff, 0x74, 0x3c, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x24, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x28, 0xc1, 0xf8, 0x10, 0x40, 0x50, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x26, 0xc1, 0xf8, 0x10, 0x40, 0x50, 0xb8, 0x2c, 0xe, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xe8, 0x92, 0x95, 0xb, 0, 0x83, 0xc4, 0x14, 0xeb, 0x12, 0xb8, 0x45, 0xe, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xe8, 0x7e, 0x95, 0xb, 0, 0x83, 0xc4, 0x8, 0xe9, 0x98, 0, 0, 0, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x2c, 0xe8, 0xea, 0xea, 0xfd, 0xff, 0x48, 0xf, 0xbf, 0xd0, 0x8b, 0x45, 0xf8, 0x83, 0xc0, 0x2c, 0xe8, 0x83, 0xe0, 0xff, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xf0, 0xe8, 0xb5, 0x94, 0xfc, 0xff, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x24, 0xc1, 0xf8, 0x10, 0x83, 0xf8, 0xff, 0x75, 0x20, 0xf, 0xbf, 0x45, 0xf2, 0x40, 0x50, 0xf, 0xbf, 0x45, 0xf0, 0x40, 0x50, 0xb8, 0x58, 0xe, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xe8, 0x29, 0x95, 0xb, 0, 0x83, 0xc4, 0x10, 0xeb, 0x46, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x24, 0xc1, 0xf8, 0x10, 0x6b, 0xc0, 0x33, 0xff, 0xb0, 0xd7, 0x81, 0x1c, 0x10, 0xf, 0xbf, 0x45, 0xf2, 0x40, 0x50, 0xf, 0xbf, 0x45, 0xf0, 0x40, 0x50, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x28, 0xc1, 0xf8, 0x10, 0x40, 0x50, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x26, 0xc1, 0xf8, 0x10, 0x40, 0x50, 0xb8, 0x68, 0xe, 0x1a, 0x10, 0x50, 0x8b, 0x45, 0xfc, 0x50, 0xe8, 0xe1, 0x94, 0xb, 0, 0x83, 0xc4, 0x1c, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf4, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100ac8cf, 0x5)   pushd(0x44);                          /* push dword 0x44 */
    II(0x100ac8d4, 0x5)   calld(sys_check_available_stack_size, 0xb9479); /* call 0x10165d52 */
    II(0x100ac8d9, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100ac8da, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100ac8db, 0x1)   pushd(esi);                           /* push esi */
    II(0x100ac8dc, 0x1)   pushd(edi);                           /* push edi */
    II(0x100ac8dd, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100ac8de, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100ac8e0, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x100ac8e6, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100ac8e9, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100ac8ec, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100ac8ee, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac8f1, 0x3)   add(eax, 0x13);                       /* add eax, 0x13 */
    II(0x100ac8f4, 0x5)   calld(0x1013ad11, 0x8e418);           /* call 0x1013ad11 */
    II(0x100ac8f9, 0x2)   test(al, al);                         /* test al, al */
    II(0x100ac8fb, 0x2)   jzd(0x100ac91a, 0x1d);                /* jz 0x100ac91a */
    II(0x100ac8fd, 0x5)   mov(eax, 0x101a0e1c);                 /* mov eax, 0x101a0e1c */ /* "Move: finished." */
    II(0x100ac902, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac903, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ac906, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac907, 0x5)   calld(sys_sprintf, 0xb95f5);          /* call 0x10165f01 */
    II(0x100ac90c, 0x3)   add(esp, 0x8);                        /* add esp, 0x8 */
    II(0x100ac90f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ac912, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100ac915, 0x5)   jmpd(0x100aca29, 0x10f);              /* jmp 0x100aca29 */
l_0x100ac91a:
    II(0x100ac91a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac91d, 0x3)   add(eax, 0x2c);                       /* add eax, 0x2c */
    II(0x100ac920, 0x5)   calld(my_3_get_count, -0x214a5);      /* call 0x1008b480 */
    II(0x100ac925, 0x1)   cwde();                               /* cwde */
    II(0x100ac926, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100ac928, 0x2)   jnzd(0x100ac98b, 0x61);               /* jnz 0x100ac98b */
    II(0x100ac92a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac92d, 0x3)   mov(eax, memd_a32(ds, eax + 0x24));   /* mov eax, [eax+0x24] */
    II(0x100ac930, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac933, 0x3)   cmp(eax, -0x1 /* 0xff */);            /* cmp eax, 0xff */
    II(0x100ac936, 0x2)   jzd(0x100ac974, 0x3c);                /* jz 0x100ac974 */
    II(0x100ac938, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac93b, 0x3)   mov(eax, memd_a32(ds, eax + 0x24));   /* mov eax, [eax+0x24] */
    II(0x100ac93e, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac941, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100ac944, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100ac94a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac94d, 0x3)   mov(eax, memd_a32(ds, eax + 0x28));   /* mov eax, [eax+0x28] */
    II(0x100ac950, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac953, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac954, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac955, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac958, 0x3)   mov(eax, memd_a32(ds, eax + 0x26));   /* mov eax, [eax+0x26] */
    II(0x100ac95b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac95e, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac95f, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac960, 0x5)   mov(eax, 0x101a0e2c);                 /* mov eax, 0x101a0e2c */ /* "Move to [%i,%i] using %s" */
    II(0x100ac965, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac966, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ac969, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac96a, 0x5)   calld(sys_sprintf, 0xb9592);          /* call 0x10165f01 */
    II(0x100ac96f, 0x3)   add(esp, 0x14);                       /* add esp, 0x14 */
    II(0x100ac972, 0x2)   jmpd(0x100ac986, 0x12);               /* jmp 0x100ac986 */
l_0x100ac974:
    II(0x100ac974, 0x5)   mov(eax, 0x101a0e45);                 /* mov eax, 0x101a0e45 */ /* "Move: calculating." */
    II(0x100ac979, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac97a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ac97d, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac97e, 0x5)   calld(sys_sprintf, 0xb957e);          /* call 0x10165f01 */
    II(0x100ac983, 0x3)   add(esp, 0x8);                        /* add esp, 0x8 */
l_0x100ac986:
    II(0x100ac986, 0x5)   jmpd(0x100aca23, 0x98);               /* jmp 0x100aca23 */
l_0x100ac98b:
    II(0x100ac98b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac98e, 0x3)   add(eax, 0x2c);                       /* add eax, 0x2c */
    II(0x100ac991, 0x5)   calld(my_3_get_count, -0x21516);      /* call 0x1008b480 */
    II(0x100ac996, 0x1)   dec(eax);                             /* dec eax */
    II(0x100ac997, 0x3)   movsx(edx, ax);                       /* movsx edx, ax */
    II(0x100ac99a, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac99d, 0x3)   add(eax, 0x2c);                       /* add eax, 0x2c */
    II(0x100ac9a0, 0x5)   calld(0x100aaa28, -0x1f7d);           /* call 0x100aaa28 */
    II(0x100ac9a5, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100ac9a7, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100ac9aa, 0x5)   calld(0x10075e64, -0x36b4b);          /* call 0x10075e64 */
    II(0x100ac9af, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac9b2, 0x3)   mov(eax, memd_a32(ds, eax + 0x24));   /* mov eax, [eax+0x24] */
    II(0x100ac9b5, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac9b8, 0x3)   cmp(eax, -0x1 /* 0xff */);            /* cmp eax, 0xff */
    II(0x100ac9bb, 0x2)   jnzd(0x100ac9dd, 0x20);               /* jnz 0x100ac9dd */
    II(0x100ac9bd, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xe));  /* movsx eax, word [ebp-0xe] */
    II(0x100ac9c1, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac9c2, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9c3, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x100ac9c7, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac9c8, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9c9, 0x5)   mov(eax, 0x101a0e58);                 /* mov eax, 0x101a0e58 */ /* "Move to [%i,%i]" */
    II(0x100ac9ce, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9cf, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100ac9d2, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9d3, 0x5)   calld(sys_sprintf, 0xb9529);          /* call 0x10165f01 */
    II(0x100ac9d8, 0x3)   add(esp, 0x10);                       /* add esp, 0x10 */
    II(0x100ac9db, 0x2)   jmpd(0x100aca23, 0x46);               /* jmp 0x100aca23 */
l_0x100ac9dd:
    II(0x100ac9dd, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac9e0, 0x3)   mov(eax, memd_a32(ds, eax + 0x24));   /* mov eax, [eax+0x24] */
    II(0x100ac9e3, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100ac9e6, 0x3)   imul(eax, eax, 0x33);                 /* imul eax, eax, 0x33 */
    II(0x100ac9e9, 0x6)   pushd(memd_a32(ds, eax + 0x101c81d7)); /* push dword [eax+0x101c81d7] */
    II(0x100ac9ef, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xe));  /* movsx eax, word [ebp-0xe] */
    II(0x100ac9f3, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac9f4, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9f5, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x100ac9f9, 0x1)   inc(eax);                             /* inc eax */
    II(0x100ac9fa, 0x1)   pushd(eax);                           /* push eax */
    II(0x100ac9fb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100ac9fe, 0x3)   mov(eax, memd_a32(ds, eax + 0x28));   /* mov eax, [eax+0x28] */
    II(0x100aca01, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100aca04, 0x1)   inc(eax);                             /* inc eax */
    II(0x100aca05, 0x1)   pushd(eax);                           /* push eax */
    II(0x100aca06, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100aca09, 0x3)   mov(eax, memd_a32(ds, eax + 0x26));   /* mov eax, [eax+0x26] */
    II(0x100aca0c, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100aca0f, 0x1)   inc(eax);                             /* inc eax */
    II(0x100aca10, 0x1)   pushd(eax);                           /* push eax */
    II(0x100aca11, 0x5)   mov(eax, 0x101a0e68);                 /* mov eax, 0x101a0e68 */ /* "Move to [%i,%i] via [%i,%i] using %s" */
    II(0x100aca16, 0x1)   pushd(eax);                           /* push eax */
    II(0x100aca17, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100aca1a, 0x1)   pushd(eax);                           /* push eax */
    II(0x100aca1b, 0x5)   calld(sys_sprintf, 0xb94e1);          /* call 0x10165f01 */
    II(0x100aca20, 0x3)   add(esp, 0x1c);                       /* add esp, 0x1c */
l_0x100aca23:
    II(0x100aca23, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100aca26, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
l_0x100aca29:
    II(0x100aca29, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100aca2c, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100aca2e, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100aca2f, 0x1)   popd(edi);                            /* pop edi */
    II(0x100aca30, 0x1)   popd(esi);                            /* pop esi */
    II(0x100aca31, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100aca32, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100aca33, 0x1)   retd();                               /* ret */
FUNC_END

