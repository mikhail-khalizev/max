FUNC_BEGIN(0x100fbfde, 0x4c00db2aeaee5ea1, 0x20, ({0x68, 0x30, 0, 0, 0, 0xe8, 0x6a, 0x9d, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x10, 0, 0, 0, 0x89, 0x45, 0xfc, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xf4, 0xe8, 0xe3, 0x5a, 0x4, 0, 0x89, 0x45, 0xf0, 0x80, 0x65, 0xf8, 0xfe, 0xf, 0xbf, 0x45, 0xfc, 0xc1, 0xe0, 0x2, 0x8b, 0x90, 0x44, 0xb4, 0x1b, 0x10, 0x8d, 0x45, 0xf4, 0xe8, 0xaa, 0x61, 0x4, 0, 0xba, 0x65, 0x29, 0x1a, 0x10, 0x8d, 0x45, 0xf4, 0xe8, 0x11, 0x5d, 0x4, 0, 0xba, 0x68, 0x29, 0x1a, 0x10, 0x8d, 0x45, 0xf4, 0xe8, 0x4, 0x5d, 0x4, 0, 0xe8, 0xc0, 0xe9, 0xfc, 0xff, 0x25, 0xff, 0, 0, 0, 0x50, 0xb9, 0x1, 0, 0, 0, 0xbb, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0x6e, 0xd7, 0xf8, 0xff, 0xe8, 0xc4, 0x9c, 0x1, 0, 0x31, 0xd2, 0x8d, 0x45, 0xf4, 0xe8, 0xc1, 0x5a, 0x4, 0, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x100fbfde, 0x5)   pushd(0x30);                          /* push dword 0x30 */
    II(0x100fbfe3, 0x5)   calld(sys_check_available_stack_size, 0x69d6a); /* call 0x10165d52 */
    II(0x100fbfe8, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100fbfe9, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100fbfea, 0x1)   pushd(edx);                           /* push edx */
    II(0x100fbfeb, 0x1)   pushd(esi);                           /* push esi */
    II(0x100fbfec, 0x1)   pushd(edi);                           /* push edi */
    II(0x100fbfed, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100fbfee, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100fbff0, 0x6)   sub(esp, 0x10);                       /* sub esp, 0x10 */
    II(0x100fbff6, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x100fbff9, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x100fbffd, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc000, 0x5)   calld(my_string_ctor, 0x45ae3);       /* call 0x10141ae8 */
    II(0x100fc005, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100fc008, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x100fc00c, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100fc010, 0x3)   shl(eax, 0x2);                        /* shl eax, 0x2 */
    II(0x100fc013, 0x6)   mov(edx, memd_a32(ds, eax + 0x101bb444)); /* mov edx, [eax+0x101bb444] */
    II(0x100fc019, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc01c, 0x5)   calld(0x101421cb, 0x461aa);           /* call 0x101421cb */
    II(0x100fc021, 0x5)   mov(edx, 0x101a2965);                 /* mov edx, 0x101a2965 */ /* ":\n" */
    II(0x100fc026, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc029, 0x5)   calld(my_string_append_char_ptr, 0x45d11); /* call 0x10141d3f */
    II(0x100fc02e, 0x5)   mov(edx, 0x101a2968);                 /* mov edx, 0x101a2968 */ /* "Select starting location." */
    II(0x100fc033, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc036, 0x5)   calld(my_string_append_char_ptr, 0x45d04); /* call 0x10141d3f */
    II(0x100fc03b, 0x5)   calld(0x100caa00, -0x31640);          /* call 0x100caa00 */
    II(0x100fc040, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x100fc045, 0x1)   pushd(eax);                           /* push eax */
    II(0x100fc046, 0x5)   mov(ecx, 0x1);                        /* mov ecx, 0x1 */
    II(0x100fc04b, 0x5)   mov(ebx, 0x1);                        /* mov ebx, 0x1 */
    II(0x100fc050, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fc052, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc055, 0x5)   calld(my_strobj_c_str_v2, -0x72892);  /* call 0x100897c8 */
    II(0x100fc05a, 0x5)   calld(0x10115d23, 0x19cc4);           /* call 0x10115d23 */
    II(0x100fc05f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100fc061, 0x3)   lea(eax, ebp - 0xc);                  /* lea eax, [ebp-0xc] */
    II(0x100fc064, 0x5)   calld(my_string_dtor, 0x45ac1);       /* call 0x10141b2a */
    II(0x100fc069, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100fc06b, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100fc06c, 0x1)   popd(edi);                            /* pop edi */
    II(0x100fc06d, 0x1)   popd(esi);                            /* pop esi */
    II(0x100fc06e, 0x1)   popd(edx);                            /* pop edx */
    II(0x100fc06f, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100fc070, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100fc071, 0x1)   retd();                               /* ret */
FUNC_END

