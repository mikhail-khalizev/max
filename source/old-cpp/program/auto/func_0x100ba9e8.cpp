FUNC_BEGIN(0x100ba9e8, 0x5258ba1111957810, 0x20, ({0x68, 0x34, 0, 0, 0, 0xe8, 0x60, 0xb3, 0xa, 0, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x20, 0, 0, 0, 0x89, 0x45, 0xf4, 0x89, 0x55, 0xfc, 0x89, 0x5d, 0xf8, 0x8b, 0x45, 0xf8, 0xe8, 0x29, 0xb9, 0xfb, 0xff, 0x8d, 0x5d, 0xf0, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x9d, 0xba, 0xfb, 0xff, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xc7, 0x45, 0xe8, 0, 0, 0, 0, 0xc7, 0x45, 0xe4, 0, 0, 0, 0, 0x31, 0xdb, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0x70, 0xc0, 0xfb, 0xff, 0xeb, 0x8, 0x8d, 0x45, 0xf0, 0xe8, 0xb2, 0xc1, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x21, 0x3, 0x8, 0, 0x84, 0xc0, 0x74, 0x3f, 0x8d, 0x45, 0xf0, 0xe8, 0x44, 0xb9, 0xfb, 0xff, 0x31, 0xd2, 0x8a, 0x50, 0x26, 0xf, 0xbf, 0x45, 0xfc, 0x39, 0xc2, 0x75, 0x28, 0x8b, 0x45, 0xec, 0xff, 0x45, 0xec, 0x8d, 0x45, 0xf0, 0xe8, 0x29, 0xb9, 0xfb, 0xff, 0x8b, 0x40, 0x18, 0xc1, 0xf8, 0x10, 0x1, 0x45, 0xe8, 0x8d, 0x45, 0xf0, 0xe8, 0x18, 0xb9, 0xfb, 0xff, 0x8b, 0x40, 0x1a, 0xc1, 0xf8, 0x10, 0x1, 0x45, 0xe4, 0xeb, 0xab, 0xf, 0xbf, 0x45, 0xec, 0x85, 0xc0, 0x7e, 0x26, 0xf, 0xbf, 0x5d, 0xec, 0x8b, 0x45, 0xe8, 0x8b, 0x55, 0xe8, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x66, 0x89, 0x45, 0xe0, 0xf, 0xbf, 0x5d, 0xec, 0x8b, 0x45, 0xe4, 0x8b, 0x55, 0xe4, 0xc1, 0xfa, 0x1f, 0xf7, 0xfb, 0x66, 0x89, 0x45, 0xe2, 0x8d, 0x55, 0xe0, 0x8b, 0x45, 0xf4, 0xe8, 0x98, 0xb3, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x96, 0xb4, 0xfb, 0xff, 0xeb, 0xa, 0x31, 0xd2, 0x8d, 0x45, 0xf0, 0xe8, 0x8a, 0xb4, 0xfb, 0xff, 0x8b, 0x45, 0xf4, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0xc3}))
    II(0x100ba9e8, 0x5)   pushd(0x34);                          /* push dword 0x34 */
    II(0x100ba9ed, 0x5)   calld(sys_check_available_stack_size, 0xab360); /* call 0x10165d52 */
    II(0x100ba9f2, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100ba9f3, 0x1)   pushd(esi);                           /* push esi */
    II(0x100ba9f4, 0x1)   pushd(edi);                           /* push edi */
    II(0x100ba9f5, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100ba9f6, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100ba9f8, 0x6)   sub(esp, 0x20);                       /* sub esp, 0x20 */
    II(0x100ba9fe, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x100baa01, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100baa04, 0x3)   mov(memd_a32(ss, ebp - 0x8), ebx);    /* mov [ebp-0x8], ebx */
    II(0x100baa07, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100baa0a, 0x5)   calld(0x10076338, -0x446d7);          /* call 0x10076338 */
    II(0x100baa0f, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x100baa12, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100baa14, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100baa16, 0x5)   calld(0x100764b8, -0x44563);          /* call 0x100764b8 */
    II(0x100baa1b, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x100baa22, 0x7)   mov(memd_a32(ss, ebp - 0x18), 0);     /* mov dword [ebp-0x18], 0x0 */
    II(0x100baa29, 0x7)   mov(memd_a32(ss, ebp - 0x1c), 0);     /* mov dword [ebp-0x1c], 0x0 */
    II(0x100baa30, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x100baa32, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100baa34, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x100baa37, 0x5)   calld(0x10076aac, -0x43f90);          /* call 0x10076aac */
    II(0x100baa3c, 0x2)   jmpd(0x100baa46, 0x8);                /* jmp 0x100baa46 */
l_0x100baa3e:
    II(0x100baa3e, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baa41, 0x5)   calld(0x10076bf8, -0x43e4e);          /* call 0x10076bf8 */
l_0x100baa46:
    II(0x100baa46, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100baa48, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baa4b, 0x5)   calld(0x1013ad71, 0x80321);           /* call 0x1013ad71 */
    II(0x100baa50, 0x2)   test(al, al);                         /* test al, al */
    II(0x100baa52, 0x2)   jzd(0x100baa93, 0x3f);                /* jz 0x100baa93 */
    II(0x100baa54, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baa57, 0x5)   calld(0x100763a0, -0x446bc);          /* call 0x100763a0 */
    II(0x100baa5c, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100baa5e, 0x3)   mov(dl, memb_a32(ds, eax + 0x26));    /* mov dl, [eax+0x26] */
    II(0x100baa61, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x100baa65, 0x2)   cmp(edx, eax);                        /* cmp edx, eax */
    II(0x100baa67, 0x2)   jnzd(0x100baa91, 0x28);               /* jnz 0x100baa91 */
    II(0x100baa69, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x100baa6c, 0x3)   inc(memd_a32(ss, ebp - 0x14));        /* inc dword [ebp-0x14] */
    II(0x100baa6f, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baa72, 0x5)   calld(0x100763a0, -0x446d7);          /* call 0x100763a0 */
    II(0x100baa77, 0x3)   mov(eax, memd_a32(ds, eax + 0x18));   /* mov eax, [eax+0x18] */
    II(0x100baa7a, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100baa7d, 0x3)   add(memd_a32(ss, ebp - 0x18), eax);   /* add [ebp-0x18], eax */
    II(0x100baa80, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baa83, 0x5)   calld(0x100763a0, -0x446e8);          /* call 0x100763a0 */
    II(0x100baa88, 0x3)   mov(eax, memd_a32(ds, eax + 0x1a));   /* mov eax, [eax+0x1a] */
    II(0x100baa8b, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100baa8e, 0x3)   add(memd_a32(ss, ebp - 0x1c), eax);   /* add [ebp-0x1c], eax */
l_0x100baa91:
    II(0x100baa91, 0x2)   jmpd(0x100baa3e, -0x55);              /* jmp 0x100baa3e */
l_0x100baa93:
    II(0x100baa93, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x14)); /* movsx eax, word [ebp-0x14] */
    II(0x100baa97, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100baa99, 0x2)   jled(0x100baac1, 0x26);               /* jle 0x100baac1 */
    II(0x100baa9b, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x100baa9f, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x100baaa2, 0x3)   mov(edx, memd_a32(ss, ebp - 0x18));   /* mov edx, [ebp-0x18] */
    II(0x100baaa5, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x100baaa8, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x100baaaa, 0x4)   mov(memw_a32(ss, ebp - 0x20), ax);    /* mov [ebp-0x20], ax */
    II(0x100baaae, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x14)); /* movsx ebx, word [ebp-0x14] */
    II(0x100baab2, 0x3)   mov(eax, memd_a32(ss, ebp - 0x1c));   /* mov eax, [ebp-0x1c] */
    II(0x100baab5, 0x3)   mov(edx, memd_a32(ss, ebp - 0x1c));   /* mov edx, [ebp-0x1c] */
    II(0x100baab8, 0x3)   sar(edx, 0x1f);                       /* sar edx, 0x1f */
    II(0x100baabb, 0x2)   idiv(ebx);                            /* idiv ebx */
    II(0x100baabd, 0x4)   mov(memw_a32(ss, ebp - 0x1e), ax);    /* mov [ebp-0x1e], ax */
l_0x100baac1:
    II(0x100baac1, 0x3)   lea(edx, ebp - 0x20);                 /* lea edx, [ebp-0x20] */
    II(0x100baac4, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100baac7, 0x5)   calld(0x10075e64, -0x44c68);          /* call 0x10075e64 */
    II(0x100baacc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100baace, 0x3)   lea(eax, ebp - 0x10);                 /* lea eax, [ebp-0x10] */
    II(0x100baad1, 0x5)   calld(0x10075f6c, -0x44b6a);          /* call 0x10075f6c */
    II(0x100baad6, 0x2)   jmpd(0x100baae2, 0xa);                /* jmp 0x100baae2 */
//  II(0x100baad8, 0xa)   /* Недостижимый код. */
l_0x100baae2:
    II(0x100baae2, 0x3)   mov(eax, memd_a32(ss, ebp - 0xc));    /* mov eax, [ebp-0xc] */
    II(0x100baae5, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100baae7, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100baae8, 0x1)   popd(edi);                            /* pop edi */
    II(0x100baae9, 0x1)   popd(esi);                            /* pop esi */
    II(0x100baaea, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100baaeb, 0x1)   retd();                               /* ret */
FUNC_END

