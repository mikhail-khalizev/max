FUNC_BEGIN(0x10101cf8, 0xb19dd6ca3b991ae3, 0x20, ({0x68, 0x68, 0x1, 0, 0, 0xe8, 0x50, 0x40, 0x6, 0, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x38, 0x1, 0, 0, 0x89, 0x45, 0xfc, 0xf, 0xbf, 0x45, 0xfc, 0x6b, 0xc0, 0x13, 0xba, 0xb4, 0x35, 0x1c, 0x10, 0x1, 0xc2, 0x89, 0x55, 0xe4, 0xe8, 0x4b, 0xae, 0xf9, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8b, 0x55, 0xe4, 0x8d, 0x45, 0xe0, 0xe8, 0x78, 0xad, 0xf9, 0xff, 0xe8, 0xc3, 0xec, 0xfd, 0xff, 0x31, 0xdb, 0x88, 0xc3, 0x8b, 0x55, 0xe4, 0x83, 0xc2, 0x4, 0x8d, 0x45, 0xdc, 0xe8, 0x21, 0xec, 0xfd, 0xff, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x45, 0xd8, 0xe8, 0x95, 0x49, 0xf7, 0xff, 0x89, 0x45, 0xd4, 0x80, 0x65, 0xf8, 0xfe, 0x80, 0x4d, 0xf8, 0x1, 0x8d, 0x85, 0xf0, 0xfe, 0xff, 0xff, 0xe8, 0x89, 0x6c, 0x4, 0, 0x89, 0x85, 0xec, 0xfe, 0xff, 0xff, 0x80, 0x65, 0xf8, 0xfe, 0x8d, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0xe8, 0x6a, 0x4d, 0xf7, 0xff, 0xc6, 0x5, 0x1e, 0x39, 0x1c, 0x10, 0xc, 0x8b, 0x55, 0xe4, 0x8b, 0x52, 0xe, 0xc1, 0xfa, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x8b, 0x80, 0x62, 0xa5, 0x1c, 0x10, 0xe8, 0x61, 0x98, 0xfc, 0xff, 0xf, 0xbf, 0x55, 0xfc, 0x69, 0xd2, 0x47, 0x2, 0, 0, 0x8d, 0x45, 0xe0, 0xe8, 0xab, 0x95, 0xf8, 0xff, 0x66, 0x1, 0x82, 0x81, 0xa5, 0x1c, 0x10, 0xf, 0xbf, 0x55, 0xfc, 0x8d, 0x85, 0xe4, 0xfe, 0xff, 0xff, 0xe8, 0x53, 0xfc, 0xff, 0xff, 0x8d, 0x9d, 0xe8, 0xfe, 0xff, 0xff, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x62, 0x6d, 0xf8, 0xff, 0xe8, 0x9d, 0xd, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0xb2, 0xd, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x85, 0xea, 0xfe, 0xff, 0xff, 0x50, 0xf, 0xbf, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xfc, 0xba, 0x28, 0, 0, 0, 0x8d, 0x85, 0xe0, 0xfe, 0xff, 0xff, 0xe8, 0xb9, 0x84, 0x5, 0, 0x89, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0xed, 0x8d, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0xe0, 0xfe, 0xff, 0xff, 0xe8, 0xf4, 0x40, 0xf7, 0xff, 0x8d, 0x45, 0xd8, 0xe8, 0x34, 0x47, 0xf7, 0xff, 0x66, 0xc7, 0x40, 0x52, 0, 0, 0xf, 0xbf, 0x45, 0xfc, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x66, 0xff, 0x80, 0x7d, 0xa5, 0x1c, 0x10, 0xf, 0xbf, 0x45, 0xfc, 0x69, 0xc0, 0x47, 0x2, 0, 0, 0x66, 0xff, 0x80, 0x7f, 0xa5, 0x1c, 0x10, 0xe8, 0x17, 0xd, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x2c, 0xd, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xa1, 0x29, 0x85, 0x1c, 0x10, 0x31, 0xd2, 0x8a, 0x50, 0x1, 0xe8, 0xe, 0x40, 0x6, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x98, 0x50, 0xf, 0xbf, 0x85, 0xea, 0xfe, 0xff, 0xff, 0x50, 0xf, 0xbf, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xfc, 0xba, 0x11, 0, 0, 0, 0x8d, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0xe8, 0x1f, 0x84, 0x5, 0, 0x31, 0xd2, 0x8d, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0xe8, 0x64, 0x40, 0xf7, 0xff, 0xf, 0xbf, 0x9d, 0xea, 0xfe, 0xff, 0xff, 0xf, 0xbf, 0x95, 0xe8, 0xfe, 0xff, 0xff, 0x8d, 0x45, 0xd8, 0xe8, 0xde, 0x8c, 0xf8, 0xff, 0xe8, 0x80, 0x13, 0x6, 0, 0xf, 0xbf, 0x5d, 0xfc, 0x8d, 0x95, 0xe8, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0xd8, 0xfe, 0xff, 0xff, 0xe8, 0x6c, 0x3f, 0xf7, 0xff, 0x8d, 0x8d, 0xd4, 0xfe, 0xff, 0xff, 0x89, 0xc2, 0x89, 0xc8, 0xe8, 0xf, 0xfd, 0xff, 0xff, 0xe8, 0x78, 0xc, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x8d, 0xc, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x85, 0xd6, 0xfe, 0xff, 0xff, 0x50, 0xf, 0xbf, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x50, 0x8d, 0x45, 0xd8, 0xe8, 0x3c, 0x46, 0xf7, 0xff, 0xe8, 0xc7, 0x42, 0xf7, 0xff, 0x89, 0xc1, 0xf, 0xbf, 0x5d, 0xfc, 0xba, 0x2, 0, 0, 0, 0x8d, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0xe8, 0x87, 0x83, 0x5, 0, 0x89, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0xbb, 0x8c, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0xe8, 0xc2, 0x3f, 0xf7, 0xff, 0x8d, 0x45, 0xd8, 0xe8, 0x2, 0x46, 0xf7, 0xff, 0xc6, 0x40, 0x3d, 0x7, 0x8d, 0x45, 0xd8, 0xe8, 0xf6, 0x45, 0xf7, 0xff, 0xc6, 0x40, 0x3e, 0, 0xe8, 0xfd, 0xb, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x12, 0xc, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xa1, 0x5c, 0x85, 0x1c, 0x10, 0x31, 0xd2, 0x8a, 0x50, 0x1, 0xe8, 0xf4, 0x3e, 0x6, 0, 0xf, 0xaf, 0xc2, 0xc1, 0xe8, 0xf, 0x98, 0x50, 0xf, 0xbf, 0x85, 0xd6, 0xfe, 0xff, 0xff, 0x50, 0xf, 0xbf, 0x85, 0xd4, 0xfe, 0xff, 0xff, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xfc, 0xba, 0x12, 0, 0, 0, 0x8d, 0x85, 0xcc, 0xfe, 0xff, 0xff, 0xe8, 0x5, 0x83, 0x5, 0, 0x31, 0xd2, 0x8d, 0x85, 0xcc, 0xfe, 0xff, 0xff, 0xe8, 0x4a, 0x3f, 0xf7, 0xff, 0x8d, 0x45, 0xd8, 0xe8, 0xd2, 0x8b, 0xf8, 0xff, 0xe8, 0x84, 0xcc, 0x5, 0, 0xc7, 0x45, 0xec, 0, 0, 0, 0, 0xeb, 0x6, 0x8b, 0x45, 0xec, 0xff, 0x45, 0xec, 0x8d, 0x45, 0xe0, 0xe8, 0x62, 0x93, 0xf8, 0xff, 0x66, 0x3b, 0x45, 0xec, 0xf, 0x8e, 0xce, 0, 0, 0, 0xf, 0xbf, 0x55, 0xec, 0x8d, 0x45, 0xe0, 0xe8, 0xc, 0x92, 0xf8, 0xff, 0x66, 0x8b, 0, 0x89, 0x45, 0xe8, 0x8a, 0x45, 0xfc, 0x88, 0x85, 0x16, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xe8, 0x66, 0x89, 0x85, 0xf8, 0xfe, 0xff, 0xff, 0x8b, 0x85, 0xe8, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xf0, 0x8b, 0x85, 0xea, 0xfe, 0xff, 0xff, 0x89, 0x45, 0xf4, 0x31, 0xc0, 0x50, 0x31, 0xc0, 0x50, 0xa1, 0x70, 0x81, 0x1c, 0x10, 0xc1, 0xf8, 0x10, 0x50, 0x8d, 0x4d, 0xf4, 0x8d, 0x5d, 0xf0, 0x8d, 0x95, 0xf0, 0xfe, 0xff, 0xff, 0xf, 0xbf, 0x45, 0xe8, 0xe8, 0x8f, 0xee, 0xf6, 0xff, 0xe8, 0x14, 0xb, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0xe8, 0x29, 0xb, 0, 0, 0x25, 0xff, 0, 0, 0, 0x50, 0x31, 0xc0, 0x50, 0xf, 0xbf, 0x45, 0xf4, 0x50, 0xf, 0xbf, 0x45, 0xf0, 0x50, 0x31, 0xc9, 0xf, 0xbf, 0x5d, 0xfc, 0xf, 0xbf, 0x55, 0xe8, 0x8d, 0x85, 0xc8, 0xfe, 0xff, 0xff, 0xe8, 0x37, 0x82, 0x5, 0, 0x8d, 0x5d, 0xd8, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x69, 0x8b, 0xf8, 0xff, 0x31, 0xd2, 0x8d, 0x85, 0xc8, 0xfe, 0xff, 0xff, 0xe8, 0x70, 0x3e, 0xf7, 0xff, 0xf, 0xbf, 0x55, 0xec, 0x8d, 0x45, 0xdc, 0xe8, 0xf4, 0xe7, 0xfd, 0xff, 0x89, 0xc2, 0x8d, 0x45, 0xd8, 0xe8, 0xa2, 0x44, 0xf7, 0xff, 0x66, 0x8b, 0x12, 0x66, 0x89, 0x50, 0x52, 0xe9, 0x1a, 0xff, 0xff, 0xff, 0xc6, 0x5, 0x1e, 0x39, 0x1c, 0x10, 0x7, 0x31, 0xd2, 0x8d, 0x85, 0xf0, 0xfe, 0xff, 0xff, 0xe8, 0xbd, 0x76, 0x4, 0, 0x31, 0xd2, 0x8d, 0x45, 0xd8, 0xe8, 0x30, 0x3e, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x3e, 0xe1, 0xfd, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xe0, 0xe8, 0xf4, 0x69, 0xf8, 0xff, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x5a, 0x59, 0x5b, 0xc3}))
    II(0x10101cf8, 0x5)   pushd(0x168);                         /* push dword 0x168 */
    II(0x10101cfd, 0x5)   calld(sys_check_available_stack_size, 0x64050); /* call 0x10165d52 */
    II(0x10101d02, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x10101d03, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x10101d04, 0x1)   pushd(edx);                           /* push edx */
    II(0x10101d05, 0x1)   pushd(esi);                           /* push esi */
    II(0x10101d06, 0x1)   pushd(edi);                           /* push edi */
    II(0x10101d07, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x10101d08, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x10101d0a, 0x6)   sub(esp, 0x138);                      /* sub esp, 0x138 */
    II(0x10101d10, 0x3)   mov(memd_a32(ss, ebp - 0x4), eax);    /* mov [ebp-0x4], eax */
    II(0x10101d13, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10101d17, 0x3)   imul(eax, eax, 0x13);                 /* imul eax, eax, 0x13 */
    II(0x10101d1a, 0x5)   mov(edx, 0x101c35b4);                 /* mov edx, 0x101c35b4 */
    II(0x10101d1f, 0x2)   add(edx, eax);                        /* add edx, eax */
    II(0x10101d21, 0x3)   mov(memd_a32(ss, ebp - 0x1c), edx);   /* mov [ebp-0x1c], edx */
    II(0x10101d24, 0x5)   calld(0x1009cb74, -0x651b5);          /* call 0x1009cb74 */
    II(0x10101d29, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10101d2b, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x10101d2d, 0x3)   mov(edx, memd_a32(ss, ebp - 0x1c));   /* mov edx, [ebp-0x1c] */
    II(0x10101d30, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10101d33, 0x5)   calld(0x1009cab0, -0x65288);          /* call 0x1009cab0 */
    II(0x10101d38, 0x5)   calld(0x100e0a00, -0x2133d);          /* call 0x100e0a00 */
    II(0x10101d3d, 0x2)   xor_(ebx, ebx);                       /* xor ebx, ebx */
    II(0x10101d3f, 0x2)   mov(bl, al);                          /* mov bl, al */
    II(0x10101d41, 0x3)   mov(edx, memd_a32(ss, ebp - 0x1c));   /* mov edx, [ebp-0x1c] */
    II(0x10101d44, 0x3)   add(edx, 0x4);                        /* add edx, 0x4 */
    II(0x10101d47, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10101d4a, 0x5)   calld(0x100e0970, -0x213df);          /* call 0x100e0970 */
    II(0x10101d4f, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x10101d53, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101d56, 0x5)   calld(my_ctor_0x101b38f8, -0x8b66b);  /* call 0x100766f0 */
    II(0x10101d5b, 0x3)   mov(memd_a32(ss, ebp - 0x2c), eax);   /* mov [ebp-0x2c], eax */
    II(0x10101d5e, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x10101d62, 0x4)   or_(memb_a32(ss, ebp - 0x8), 0x1);    /* or byte [ebp-0x8], 0x1 */
    II(0x10101d66, 0x6)   lea(eax, ebp - 0x110);                /* lea eax, [ebp+0xfffffef0] */
    II(0x10101d6c, 0x5)   calld(0x101489fa, 0x46c89);           /* call 0x101489fa */
    II(0x10101d71, 0x6)   mov(memd_a32(ss, ebp - 0x114), eax);  /* mov [ebp+0xfffffeec], eax */
    II(0x10101d77, 0x4)   and_(memb_a32(ss, ebp - 0x8), -0x2 /* 0xfe */); /* and byte [ebp-0x8], 0xfe */
    II(0x10101d7b, 0x6)   lea(eax, ebp - 0x118);                /* lea eax, [ebp+0xfffffee8] */
    II(0x10101d81, 0x5)   calld(my_ctor_0x101b4184, -0x8b296);  /* call 0x10076af0 */
    II(0x10101d86, 0x7)   mov(memb_a32(ds, 0x101c391e), 0xc);   /* mov byte [0x101c391e], 0xc */
    II(0x10101d8d, 0x3)   mov(edx, memd_a32(ss, ebp - 0x1c));   /* mov edx, [ebp-0x1c] */
    II(0x10101d90, 0x3)   mov(edx, memd_a32(ds, edx + 0xe));    /* mov edx, [edx+0xe] */
    II(0x10101d93, 0x3)   sar(edx, 0x10);                       /* sar edx, 0x10 */
    II(0x10101d96, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10101d9a, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x10101da0, 0x6)   mov(eax, memd_a32(ds, eax + 0x101ca562)); /* mov eax, [eax+0x101ca562] */
    II(0x10101da6, 0x5)   calld(0x100cb60c, -0x3679f);          /* call 0x100cb60c */
    II(0x10101dab, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x10101daf, 0x6)   imul(edx, edx, 0x247);                /* imul edx, edx, 0x247 */
    II(0x10101db5, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10101db8, 0x5)   calld(my_2_get_count, -0x76a55);      /* call 0x1008b368 */
    II(0x10101dbd, 0x7)   add(memw_a32(ds, edx + 0x101ca581), ax); /* add [edx+0x101ca581], ax */
    II(0x10101dc4, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x4));  /* movsx edx, word [ebp-0x4] */
    II(0x10101dc8, 0x6)   lea(eax, ebp - 0x11c);                /* lea eax, [ebp+0xfffffee4] */
    II(0x10101dce, 0x5)   calld(0x10101a26, -0x3ad);            /* call 0x10101a26 */
    II(0x10101dd3, 0x6)   lea(ebx, ebp - 0x118);                /* lea ebx, [ebp+0xfffffee8] */
    II(0x10101dd9, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10101ddb, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x10101ddd, 0x5)   calld(0x10088b44, -0x7929e);          /* call 0x10088b44 */
    II(0x10101de2, 0x5)   calld(0x10102b84, 0xd9d);             /* call 0x10102b84 */
    II(0x10101de7, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101dec, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101ded, 0x5)   calld(0x10102ba4, 0xdb2);             /* call 0x10102ba4 */
    II(0x10101df2, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101df7, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101df8, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10101dfa, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101dfb, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x116)); /* movsx eax, word [ebp+0xfffffeea] */
    II(0x10101e02, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e03, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x118)); /* movsx eax, word [ebp+0xfffffee8] */
    II(0x10101e0a, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e0b, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10101e0d, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10101e11, 0x5)   mov(edx, 0x28);                       /* mov edx, 0x28 */
    II(0x10101e16, 0x6)   lea(eax, ebp - 0x120);                /* lea eax, [ebp+0xfffffee0] */
    II(0x10101e1c, 0x5)   calld(0x1015a2da, 0x584b9);           /* call 0x1015a2da */
    II(0x10101e21, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10101e23, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101e26, 0x5)   calld(0x1008ac18, -0x77213);          /* call 0x1008ac18 */
    II(0x10101e2b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101e2d, 0x6)   lea(eax, ebp - 0x120);                /* lea eax, [ebp+0xfffffee0] */
    II(0x10101e33, 0x5)   calld(0x10075f2c, -0x8bf0c);          /* call 0x10075f2c */
    II(0x10101e38, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101e3b, 0x5)   calld(0x10076574, -0x8b8cc);          /* call 0x10076574 */
    II(0x10101e40, 0x6)   mov(memw_a32(ds, eax + 0x52), 0);     /* mov word [eax+0x52], 0x0 */
    II(0x10101e46, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10101e4a, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x10101e50, 0x7)   inc(memw_a32(ds, eax + 0x101ca57d));  /* inc word [eax+0x101ca57d] */
    II(0x10101e57, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x4));  /* movsx eax, word [ebp-0x4] */
    II(0x10101e5b, 0x6)   imul(eax, eax, 0x247);                /* imul eax, eax, 0x247 */
    II(0x10101e61, 0x7)   inc(memw_a32(ds, eax + 0x101ca57f));  /* inc word [eax+0x101ca57f] */
    II(0x10101e68, 0x5)   calld(0x10102b84, 0xd17);             /* call 0x10102b84 */
    II(0x10101e6d, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101e72, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e73, 0x5)   calld(0x10102ba4, 0xd2c);             /* call 0x10102ba4 */
    II(0x10101e78, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101e7d, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e7e, 0x5)   mov(eax, memd_a32(ds, 0x101c8529));   /* mov eax, [0x101c8529] */
    II(0x10101e83, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101e85, 0x3)   mov(dl, memb_a32(ds, eax + 0x1));     /* mov dl, [eax+0x1] */
    II(0x10101e88, 0x5)   calld(/* sys */ 0x10165e9b, 0x6400e); /* call 0x10165e9b */
    II(0x10101e8d, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x10101e90, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x10101e93, 0x1)   cwde();                               /* cwde */
    II(0x10101e94, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e95, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x116)); /* movsx eax, word [ebp+0xfffffeea] */
    II(0x10101e9c, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101e9d, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x118)); /* movsx eax, word [ebp+0xfffffee8] */
    II(0x10101ea4, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101ea5, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10101ea7, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10101eab, 0x5)   mov(edx, 0x11);                       /* mov edx, 0x11 */
    II(0x10101eb0, 0x6)   lea(eax, ebp - 0x124);                /* lea eax, [ebp+0xfffffedc] */
    II(0x10101eb6, 0x5)   calld(0x1015a2da, 0x5841f);           /* call 0x1015a2da */
    II(0x10101ebb, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101ebd, 0x6)   lea(eax, ebp - 0x124);                /* lea eax, [ebp+0xfffffedc] */
    II(0x10101ec3, 0x5)   calld(0x10075f2c, -0x8bf9c);          /* call 0x10075f2c */
    II(0x10101ec8, 0x7)   movsx(ebx, memw_a32(ss, ebp - 0x116)); /* movsx ebx, word [ebp+0xfffffeea] */
    II(0x10101ecf, 0x7)   movsx(edx, memw_a32(ss, ebp - 0x118)); /* movsx edx, word [ebp+0xfffffee8] */
    II(0x10101ed6, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101ed9, 0x5)   calld(0x1008abbc, -0x77322);          /* call 0x1008abbc */
    II(0x10101ede, 0x5)   calld(0x10163263, 0x61380);           /* call 0x10163263 */
    II(0x10101ee3, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10101ee7, 0x6)   lea(edx, ebp - 0x118);                /* lea edx, [ebp+0xfffffee8] */
    II(0x10101eed, 0x6)   lea(eax, ebp - 0x128);                /* lea eax, [ebp+0xfffffed8] */
    II(0x10101ef3, 0x5)   calld(0x10075e64, -0x8c094);          /* call 0x10075e64 */
    II(0x10101ef8, 0x6)   lea(ecx, ebp - 0x12c);                /* lea ecx, [ebp+0xfffffed4] */
    II(0x10101efe, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10101f00, 0x2)   mov(eax, ecx);                        /* mov eax, ecx */
    II(0x10101f02, 0x5)   calld(0x10101c16, -0x2f1);            /* call 0x10101c16 */
    II(0x10101f07, 0x5)   calld(0x10102b84, 0xc78);             /* call 0x10102b84 */
    II(0x10101f0c, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101f11, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f12, 0x5)   calld(0x10102ba4, 0xc8d);             /* call 0x10102ba4 */
    II(0x10101f17, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101f1c, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f1d, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10101f1f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f20, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x12a)); /* movsx eax, word [ebp+0xfffffed6] */
    II(0x10101f27, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f28, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x12c)); /* movsx eax, word [ebp+0xfffffed4] */
    II(0x10101f2f, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f30, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101f33, 0x5)   calld(0x10076574, -0x8b9c4);          /* call 0x10076574 */
    II(0x10101f38, 0x5)   calld(0x10076204, -0x8bd39);          /* call 0x10076204 */
    II(0x10101f3d, 0x2)   mov(ecx, eax);                        /* mov ecx, eax */
    II(0x10101f3f, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10101f43, 0x5)   mov(edx, 0x2);                        /* mov edx, 0x2 */
    II(0x10101f48, 0x6)   lea(eax, ebp - 0x130);                /* lea eax, [ebp+0xfffffed0] */
    II(0x10101f4e, 0x5)   calld(0x1015a2da, 0x58387);           /* call 0x1015a2da */
    II(0x10101f53, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x10101f55, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101f58, 0x5)   calld(0x1008ac18, -0x77345);          /* call 0x1008ac18 */
    II(0x10101f5d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101f5f, 0x6)   lea(eax, ebp - 0x130);                /* lea eax, [ebp+0xfffffed0] */
    II(0x10101f65, 0x5)   calld(0x10075f2c, -0x8c03e);          /* call 0x10075f2c */
    II(0x10101f6a, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101f6d, 0x5)   calld(0x10076574, -0x8b9fe);          /* call 0x10076574 */
    II(0x10101f72, 0x4)   mov(memb_a32(ds, eax + 0x3d), 0x7);   /* mov byte [eax+0x3d], 0x7 */
    II(0x10101f76, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101f79, 0x5)   calld(0x10076574, -0x8ba0a);          /* call 0x10076574 */
    II(0x10101f7e, 0x4)   mov(memb_a32(ds, eax + 0x3e), 0);     /* mov byte [eax+0x3e], 0x0 */
    II(0x10101f82, 0x5)   calld(0x10102b84, 0xbfd);             /* call 0x10102b84 */
    II(0x10101f87, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101f8c, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f8d, 0x5)   calld(0x10102ba4, 0xc12);             /* call 0x10102ba4 */
    II(0x10101f92, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10101f97, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101f98, 0x5)   mov(eax, memd_a32(ds, 0x101c855c));   /* mov eax, [0x101c855c] */
    II(0x10101f9d, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101f9f, 0x3)   mov(dl, memb_a32(ds, eax + 0x1));     /* mov dl, [eax+0x1] */
    II(0x10101fa2, 0x5)   calld(/* sys */ 0x10165e9b, 0x63ef4); /* call 0x10165e9b */
    II(0x10101fa7, 0x3)   imul(eax, edx);                       /* imul eax, edx */
    II(0x10101faa, 0x3)   shr(eax, 0xf);                        /* shr eax, 0xf */
    II(0x10101fad, 0x1)   cwde();                               /* cwde */
    II(0x10101fae, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101faf, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x12a)); /* movsx eax, word [ebp+0xfffffed6] */
    II(0x10101fb6, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101fb7, 0x7)   movsx(eax, memw_a32(ss, ebp - 0x12c)); /* movsx eax, word [ebp+0xfffffed4] */
    II(0x10101fbe, 0x1)   pushd(eax);                           /* push eax */
    II(0x10101fbf, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10101fc1, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10101fc5, 0x5)   mov(edx, 0x12);                       /* mov edx, 0x12 */
    II(0x10101fca, 0x6)   lea(eax, ebp - 0x134);                /* lea eax, [ebp+0xfffffecc] */
    II(0x10101fd0, 0x5)   calld(0x1015a2da, 0x58305);           /* call 0x1015a2da */
    II(0x10101fd5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10101fd7, 0x6)   lea(eax, ebp - 0x134);                /* lea eax, [ebp+0xfffffecc] */
    II(0x10101fdd, 0x5)   calld(0x10075f2c, -0x8c0b6);          /* call 0x10075f2c */
    II(0x10101fe2, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x10101fe5, 0x5)   calld(0x1008abbc, -0x7742e);          /* call 0x1008abbc */
    II(0x10101fea, 0x5)   calld(0x1015ec73, 0x5cc84);           /* call 0x1015ec73 */
    II(0x10101fef, 0x7)   mov(memd_a32(ss, ebp - 0x14), 0);     /* mov dword [ebp-0x14], 0x0 */
    II(0x10101ff6, 0x2)   jmpd(0x10101ffe, 0x6);                /* jmp 0x10101ffe */
l_0x10101ff8:
    II(0x10101ff8, 0x3)   mov(eax, memd_a32(ss, ebp - 0x14));   /* mov eax, [ebp-0x14] */
    II(0x10101ffb, 0x3)   inc(memd_a32(ss, ebp - 0x14));        /* inc dword [ebp-0x14] */
l_0x10101ffe:
    II(0x10101ffe, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10102001, 0x5)   calld(my_2_get_count, -0x76c9e);      /* call 0x1008b368 */
    II(0x10102006, 0x4)   cmp(ax, memw_a32(ss, ebp - 0x14));    /* cmp ax, [ebp-0x14] */
    II(0x1010200a, 0x6)   jled(0x101020de, 0xce);               /* jle dword 0x101020de */
    II(0x10102010, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x10102014, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x10102017, 0x5)   calld(0x1008b228, -0x76df4);          /* call 0x1008b228 */
    II(0x1010201c, 0x3)   mov(ax, memw_a32(ds, eax));           /* mov ax, [eax] */
    II(0x1010201f, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x10102022, 0x3)   mov(al, memb_a32(ss, ebp - 0x4));     /* mov al, [ebp-0x4] */
    II(0x10102025, 0x6)   mov(memb_a32(ss, ebp - 0xea), al);    /* mov [ebp+0xffffff16], al */
    II(0x1010202b, 0x3)   mov(eax, memd_a32(ss, ebp - 0x18));   /* mov eax, [ebp-0x18] */
    II(0x1010202e, 0x7)   mov(memw_a32(ss, ebp - 0x108), ax);   /* mov [ebp+0xfffffef8], ax */
    II(0x10102035, 0x6)   mov(eax, memd_a32(ss, ebp - 0x118));  /* mov eax, [ebp+0xfffffee8] */
    II(0x1010203b, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x1010203e, 0x6)   mov(eax, memd_a32(ss, ebp - 0x116));  /* mov eax, [ebp+0xfffffeea] */
    II(0x10102044, 0x3)   mov(memd_a32(ss, ebp - 0xc), eax);    /* mov [ebp-0xc], eax */
    II(0x10102047, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10102049, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010204a, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x1010204c, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010204d, 0x5)   mov(eax, memd_a32(ds, 0x101c8170));   /* mov eax, [0x101c8170] */
    II(0x10102052, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x10102055, 0x1)   pushd(eax);                           /* push eax */
    II(0x10102056, 0x3)   lea(ecx, ebp - 0xc);                  /* lea ecx, [ebp-0xc] */
    II(0x10102059, 0x3)   lea(ebx, ebp - 0x10);                 /* lea ebx, [ebp-0x10] */
    II(0x1010205c, 0x6)   lea(edx, ebp - 0x110);                /* lea edx, [ebp+0xfffffef0] */
    II(0x10102062, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x18)); /* movsx eax, word [ebp-0x18] */
    II(0x10102066, 0x5)   calld(0x10070efa, -0x91171);          /* call 0x10070efa */
    II(0x1010206b, 0x5)   calld(0x10102b84, 0xb14);             /* call 0x10102b84 */
    II(0x10102070, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10102075, 0x1)   pushd(eax);                           /* push eax */
    II(0x10102076, 0x5)   calld(0x10102ba4, 0xb29);             /* call 0x10102ba4 */
    II(0x1010207b, 0x5)   and_(eax, 0xff);                      /* and eax, 0xff */
    II(0x10102080, 0x1)   pushd(eax);                           /* push eax */
    II(0x10102081, 0x2)   xor_(eax, eax);                       /* xor eax, eax */
    II(0x10102083, 0x1)   pushd(eax);                           /* push eax */
    II(0x10102084, 0x4)   movsx(eax, memw_a32(ss, ebp - 0xc));  /* movsx eax, word [ebp-0xc] */
    II(0x10102088, 0x1)   pushd(eax);                           /* push eax */
    II(0x10102089, 0x4)   movsx(eax, memw_a32(ss, ebp - 0x10)); /* movsx eax, word [ebp-0x10] */
    II(0x1010208d, 0x1)   pushd(eax);                           /* push eax */
    II(0x1010208e, 0x2)   xor_(ecx, ecx);                       /* xor ecx, ecx */
    II(0x10102090, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x4));  /* movsx ebx, word [ebp-0x4] */
    II(0x10102094, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x18)); /* movsx edx, word [ebp-0x18] */
    II(0x10102098, 0x6)   lea(eax, ebp - 0x138);                /* lea eax, [ebp+0xfffffec8] */
    II(0x1010209e, 0x5)   calld(0x1015a2da, 0x58237);           /* call 0x1015a2da */
    II(0x101020a3, 0x3)   lea(ebx, ebp - 0x28);                 /* lea ebx, [ebp-0x28] */
    II(0x101020a6, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x101020a8, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x101020aa, 0x5)   calld(0x1008ac18, -0x77497);          /* call 0x1008ac18 */
    II(0x101020af, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101020b1, 0x6)   lea(eax, ebp - 0x138);                /* lea eax, [ebp+0xfffffec8] */
    II(0x101020b7, 0x5)   calld(0x10075f2c, -0x8c190);          /* call 0x10075f2c */
    II(0x101020bc, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x14)); /* movsx edx, word [ebp-0x14] */
    II(0x101020c0, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x101020c3, 0x5)   calld(0x100e08bc, -0x2180c);          /* call 0x100e08bc */
    II(0x101020c8, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x101020ca, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x101020cd, 0x5)   calld(0x10076574, -0x8bb5e);          /* call 0x10076574 */
    II(0x101020d2, 0x3)   mov(dx, memw_a32(ds, edx));           /* mov dx, [edx] */
    II(0x101020d5, 0x4)   mov(memw_a32(ds, eax + 0x52), dx);    /* mov [eax+0x52], dx */
    II(0x101020d9, 0x5)   jmpd(0x10101ff8, -0xe6);              /* jmp 0x10101ff8 */
l_0x101020de:
    II(0x101020de, 0x7)   mov(memb_a32(ds, 0x101c391e), 0x7);   /* mov byte [0x101c391e], 0x7 */
    II(0x101020e5, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101020e7, 0x6)   lea(eax, ebp - 0x110);                /* lea eax, [ebp+0xfffffef0] */
    II(0x101020ed, 0x5)   calld(0x101497af, 0x476bd);           /* call 0x101497af */
    II(0x101020f2, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101020f4, 0x3)   lea(eax, ebp - 0x28);                 /* lea eax, [ebp-0x28] */
    II(0x101020f7, 0x5)   calld(0x10075f2c, -0x8c1d0);          /* call 0x10075f2c */
    II(0x101020fc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x101020fe, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x10102101, 0x5)   calld(0x100e0244, -0x21ec2);          /* call 0x100e0244 */
    II(0x10102106, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x10102108, 0x3)   lea(eax, ebp - 0x20);                 /* lea eax, [ebp-0x20] */
    II(0x1010210b, 0x5)   calld(0x10088b04, -0x7960c);          /* call 0x10088b04 */
    II(0x10102110, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x10102112, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x10102113, 0x1)   popd(edi);                            /* pop edi */
    II(0x10102114, 0x1)   popd(esi);                            /* pop esi */
    II(0x10102115, 0x1)   popd(edx);                            /* pop edx */
    II(0x10102116, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x10102117, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x10102118, 0x1)   retd();                               /* ret */
FUNC_END

