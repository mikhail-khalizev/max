FUNC_BEGIN(0x100f7844, 0x2da678a5647eae55, 0x20, ({0x68, 0x40, 0, 0, 0, 0xe8, 0x4, 0xe5, 0x6, 0, 0x53, 0x51, 0x56, 0x57, 0x55, 0x89, 0xe5, 0x81, 0xec, 0x28, 0, 0, 0, 0x89, 0x45, 0xf8, 0x89, 0x55, 0xfc, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xdc, 0xe8, 0x8f, 0xec, 0xf7, 0xff, 0x89, 0x45, 0xe0, 0x80, 0x65, 0xf4, 0xfe, 0x80, 0x4d, 0xf4, 0x1, 0x8d, 0x45, 0xec, 0xe8, 0x18, 0xf1, 0xf7, 0xff, 0x89, 0x45, 0xf0, 0x80, 0x65, 0xf4, 0xfe, 0x8b, 0x45, 0xfc, 0x3b, 0x45, 0xf8, 0x75, 0x20, 0xc7, 0x45, 0xd8, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xc, 0xe6, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xc2, 0xe6, 0xf7, 0xff, 0xe9, 0x1a, 0x1, 0, 0, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x18, 0xc1, 0xf8, 0x10, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xf8, 0x8b, 0x40, 0x1a, 0xc1, 0xf8, 0x10, 0x89, 0x45, 0xe8, 0x8b, 0x45, 0xfc, 0xe8, 0x35, 0xe9, 0xf7, 0xff, 0x8d, 0x5d, 0xec, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xcd, 0x39, 0xfb, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x2c, 0x34, 0x4, 0, 0x84, 0xc0, 0x74, 0x2c, 0xf, 0xbf, 0x5d, 0xe8, 0xf, 0xbf, 0x55, 0xe4, 0x8b, 0x45, 0xfc, 0xe8, 0x48, 0xa6, 0xff, 0xff, 0x89, 0x45, 0xd8, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xa6, 0xe5, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x5c, 0xe6, 0xf7, 0xff, 0xe9, 0xb4, 0, 0, 0, 0xb8, 0x9c, 0x81, 0x1c, 0x10, 0xe8, 0x19, 0xea, 0xf7, 0xff, 0x8d, 0x5d, 0xdc, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0x11, 0xeb, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0x3c, 0x34, 0x4, 0, 0x84, 0xc0, 0x74, 0x5f, 0x8d, 0x45, 0xdc, 0xe8, 0x5f, 0xea, 0xf7, 0xff, 0xe8, 0xbe, 0xe8, 0xf7, 0xff, 0x8d, 0x5d, 0xec, 0x89, 0xc2, 0x89, 0xd8, 0xe8, 0xae, 0xf4, 0xf7, 0xff, 0x84, 0xc0, 0x74, 0x19, 0xf, 0xbf, 0x5d, 0xe8, 0xf, 0xbf, 0x55, 0xe4, 0x8d, 0x45, 0xdc, 0xe8, 0xa2, 0xea, 0xf7, 0xff, 0xe8, 0xd6, 0xa5, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x2, 0xeb, 0x1d, 0xc7, 0x45, 0xd8, 0x1, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x2a, 0xe5, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xe0, 0xe5, 0xf7, 0xff, 0xeb, 0x3b, 0x8d, 0x45, 0xdc, 0xe8, 0x62, 0xf2, 0xf7, 0xff, 0xeb, 0x93, 0xc7, 0x45, 0xd8, 0, 0, 0, 0, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0x3, 0xe5, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xb9, 0xe5, 0xf7, 0xff, 0xeb, 0x14, 0x31, 0xd2, 0x8d, 0x45, 0xec, 0xe8, 0xed, 0xe4, 0xf7, 0xff, 0x31, 0xd2, 0x8d, 0x45, 0xdc, 0xe8, 0xa3, 0xe5, 0xf7, 0xff, 0x8b, 0x45, 0xd8, 0x89, 0xec, 0x5d, 0x5f, 0x5e, 0x59, 0x5b, 0xc3}))
    II(0x100f7844, 0x5)   pushd(0x40);                          /* push dword 0x40 */
    II(0x100f7849, 0x5)   calld(sys_check_available_stack_size, 0x6e504); /* call 0x10165d52 */
    II(0x100f784e, 0x1)   pushd(ebx);                           /* push ebx */
    II(0x100f784f, 0x1)   pushd(ecx);                           /* push ecx */
    II(0x100f7850, 0x1)   pushd(esi);                           /* push esi */
    II(0x100f7851, 0x1)   pushd(edi);                           /* push edi */
    II(0x100f7852, 0x1)   pushd(ebp);                           /* push ebp */
    II(0x100f7853, 0x2)   mov(ebp, esp);                        /* mov ebp, esp */
    II(0x100f7855, 0x6)   sub(esp, 0x28);                       /* sub esp, 0x28 */
    II(0x100f785b, 0x3)   mov(memd_a32(ss, ebp - 0x8), eax);    /* mov [ebp-0x8], eax */
    II(0x100f785e, 0x3)   mov(memd_a32(ss, ebp - 0x4), edx);    /* mov [ebp-0x4], edx */
    II(0x100f7861, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100f7865, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f7868, 0x5)   calld(0x100764fc, -0x81371);          /* call 0x100764fc */
    II(0x100f786d, 0x3)   mov(memd_a32(ss, ebp - 0x20), eax);   /* mov [ebp-0x20], eax */
    II(0x100f7870, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100f7874, 0x4)   or_(memb_a32(ss, ebp - 0xc), 0x1);    /* or byte [ebp-0xc], 0x1 */
    II(0x100f7878, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f787b, 0x5)   calld(0x10076998, -0x80ee8);          /* call 0x10076998 */
    II(0x100f7880, 0x3)   mov(memd_a32(ss, ebp - 0x10), eax);   /* mov [ebp-0x10], eax */
    II(0x100f7883, 0x4)   and_(memb_a32(ss, ebp - 0xc), -0x2 /* 0xfe */); /* and byte [ebp-0xc], 0xfe */
    II(0x100f7887, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f788a, 0x3)   cmp(eax, memd_a32(ss, ebp - 0x8));    /* cmp eax, [ebp-0x8] */
    II(0x100f788d, 0x2)   jnzd(0x100f78af, 0x20);               /* jnz 0x100f78af */
    II(0x100f788f, 0x7)   mov(memd_a32(ss, ebp - 0x28), 0);     /* mov dword [ebp-0x28], 0x0 */
    II(0x100f7896, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f7898, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f789b, 0x5)   calld(0x10075eac, -0x819f4);          /* call 0x10075eac */
    II(0x100f78a0, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f78a2, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f78a5, 0x5)   calld(0x10075f6c, -0x8193e);          /* call 0x10075f6c */
    II(0x100f78aa, 0x5)   jmpd(0x100f79c9, 0x11a);              /* jmp 0x100f79c9 */
l_0x100f78af:
    II(0x100f78af, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f78b2, 0x3)   mov(eax, memd_a32(ds, eax + 0x18));   /* mov eax, [eax+0x18] */
    II(0x100f78b5, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f78b8, 0x3)   mov(memd_a32(ss, ebp - 0x1c), eax);   /* mov [ebp-0x1c], eax */
    II(0x100f78bb, 0x3)   mov(eax, memd_a32(ss, ebp - 0x8));    /* mov eax, [ebp-0x8] */
    II(0x100f78be, 0x3)   mov(eax, memd_a32(ds, eax + 0x1a));   /* mov eax, [eax+0x1a] */
    II(0x100f78c1, 0x3)   sar(eax, 0x10);                       /* sar eax, 0x10 */
    II(0x100f78c4, 0x3)   mov(memd_a32(ss, ebp - 0x18), eax);   /* mov [ebp-0x18], eax */
    II(0x100f78c7, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f78ca, 0x5)   calld(0x10076204, -0x816cb);          /* call 0x10076204 */
    II(0x100f78cf, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x100f78d2, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100f78d4, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100f78d6, 0x5)   calld(0x100ab2a8, -0x4c633);          /* call 0x100ab2a8 */
    II(0x100f78db, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f78dd, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f78e0, 0x5)   calld(0x1013ad11, 0x4342c);           /* call 0x1013ad11 */
    II(0x100f78e5, 0x2)   test(al, al);                         /* test al, al */
    II(0x100f78e7, 0x2)   jzd(0x100f7915, 0x2c);                /* jz 0x100f7915 */
    II(0x100f78e9, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x18)); /* movsx ebx, word [ebp-0x18] */
    II(0x100f78ed, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x1c)); /* movsx edx, word [ebp-0x1c] */
    II(0x100f78f1, 0x3)   mov(eax, memd_a32(ss, ebp - 0x4));    /* mov eax, [ebp-0x4] */
    II(0x100f78f4, 0x5)   calld(0x100f1f41, -0x59b8);           /* call 0x100f1f41 */
    II(0x100f78f9, 0x3)   mov(memd_a32(ss, ebp - 0x28), eax);   /* mov [ebp-0x28], eax */
    II(0x100f78fc, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f78fe, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f7901, 0x5)   calld(0x10075eac, -0x81a5a);          /* call 0x10075eac */
    II(0x100f7906, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f7908, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f790b, 0x5)   calld(0x10075f6c, -0x819a4);          /* call 0x10075f6c */
    II(0x100f7910, 0x5)   jmpd(0x100f79c9, 0xb4);               /* jmp 0x100f79c9 */
l_0x100f7915:
    II(0x100f7915, 0x5)   mov(eax, 0x101c819c);                 /* mov eax, 0x101c819c */
    II(0x100f791a, 0x5)   calld(0x10076338, -0x815e7);          /* call 0x10076338 */
    II(0x100f791f, 0x3)   lea(ebx, ebp - 0x24);                 /* lea ebx, [ebp-0x24] */
    II(0x100f7922, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100f7924, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100f7926, 0x5)   calld(0x1007643c, -0x814ef);          /* call 0x1007643c */
l_0x100f792b:
    II(0x100f792b, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f792d, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f7930, 0x5)   calld(0x1013ad71, 0x4343c);           /* call 0x1013ad71 */
    II(0x100f7935, 0x2)   test(al, al);                         /* test al, al */
    II(0x100f7937, 0x2)   jzd(0x100f7998, 0x5f);                /* jz 0x100f7998 */
    II(0x100f7939, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f793c, 0x5)   calld(0x100763a0, -0x815a1);          /* call 0x100763a0 */
    II(0x100f7941, 0x5)   calld(0x10076204, -0x81742);          /* call 0x10076204 */
    II(0x100f7946, 0x3)   lea(ebx, ebp - 0x14);                 /* lea ebx, [ebp-0x14] */
    II(0x100f7949, 0x2)   mov(edx, eax);                        /* mov edx, eax */
    II(0x100f794b, 0x2)   mov(eax, ebx);                        /* mov eax, ebx */
    II(0x100f794d, 0x5)   calld(0x10076e00, -0x80b52);          /* call 0x10076e00 */
    II(0x100f7952, 0x2)   test(al, al);                         /* test al, al */
    II(0x100f7954, 0x2)   jzd(0x100f796f, 0x19);                /* jz 0x100f796f */
    II(0x100f7956, 0x4)   movsx(ebx, memw_a32(ss, ebp - 0x18)); /* movsx ebx, word [ebp-0x18] */
    II(0x100f795a, 0x4)   movsx(edx, memw_a32(ss, ebp - 0x1c)); /* movsx edx, word [ebp-0x1c] */
    II(0x100f795e, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f7961, 0x5)   calld(0x10076408, -0x8155e);          /* call 0x10076408 */
    II(0x100f7966, 0x5)   calld(0x100f1f41, -0x5a2a);           /* call 0x100f1f41 */
    II(0x100f796b, 0x2)   test(eax, eax);                       /* test eax, eax */
    II(0x100f796d, 0x2)   jnzd(0x100f7971, 0x2);                /* jnz 0x100f7971 */
l_0x100f796f:
    II(0x100f796f, 0x2)   jmpd(0x100f798e, 0x1d);               /* jmp 0x100f798e */
l_0x100f7971:
    II(0x100f7971, 0x7)   mov(memd_a32(ss, ebp - 0x28), 0x1);   /* mov dword [ebp-0x28], 0x1 */
    II(0x100f7978, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f797a, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f797d, 0x5)   calld(0x10075eac, -0x81ad6);          /* call 0x10075eac */
    II(0x100f7982, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f7984, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f7987, 0x5)   calld(0x10075f6c, -0x81a20);          /* call 0x10075f6c */
    II(0x100f798c, 0x2)   jmpd(0x100f79c9, 0x3b);               /* jmp 0x100f79c9 */
l_0x100f798e:
    II(0x100f798e, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f7991, 0x5)   calld(0x10076bf8, -0x80d9e);          /* call 0x10076bf8 */
    II(0x100f7996, 0x2)   jmpd(0x100f792b, -0x6d);              /* jmp 0x100f792b */
l_0x100f7998:
    II(0x100f7998, 0x7)   mov(memd_a32(ss, ebp - 0x28), 0);     /* mov dword [ebp-0x28], 0x0 */
    II(0x100f799f, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f79a1, 0x3)   lea(eax, ebp - 0x14);                 /* lea eax, [ebp-0x14] */
    II(0x100f79a4, 0x5)   calld(0x10075eac, -0x81afd);          /* call 0x10075eac */
    II(0x100f79a9, 0x2)   xor_(edx, edx);                       /* xor edx, edx */
    II(0x100f79ab, 0x3)   lea(eax, ebp - 0x24);                 /* lea eax, [ebp-0x24] */
    II(0x100f79ae, 0x5)   calld(0x10075f6c, -0x81a47);          /* call 0x10075f6c */
    II(0x100f79b3, 0x2)   jmpd(0x100f79c9, 0x14);               /* jmp 0x100f79c9 */
//  II(0x100f79b5, 0x14)  /* Недостижимый код. */
l_0x100f79c9:
    II(0x100f79c9, 0x3)   mov(eax, memd_a32(ss, ebp - 0x28));   /* mov eax, [ebp-0x28] */
    II(0x100f79cc, 0x2)   mov(esp, ebp);                        /* mov esp, ebp */
    II(0x100f79ce, 0x1)   popd(ebp);                            /* pop ebp */
    II(0x100f79cf, 0x1)   popd(edi);                            /* pop edi */
    II(0x100f79d0, 0x1)   popd(esi);                            /* pop esi */
    II(0x100f79d1, 0x1)   popd(ecx);                            /* pop ecx */
    II(0x100f79d2, 0x1)   popd(ebx);                            /* pop ebx */
    II(0x100f79d3, 0x1)   retd();                               /* ret */
FUNC_END

