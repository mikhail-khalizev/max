{
  "Instructions": [
    {
      "Mnemonic": "AAA",
      "Description": "ASCII Adjust After Addition",
      "Url": "https://www.felixcloutier.com/x86/AAA.html",
      "Table": [
        {
          "Opcode": "37",
          "Instruction": "AAA",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "ASCII adjust AL after addition."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "AAD",
      "Description": "ASCII Adjust AX Before Division",
      "Url": "https://www.felixcloutier.com/x86/AAD.html",
      "Table": [
        {
          "Opcode": "D5 0A",
          "Instruction": "AAD",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "ASCII adjust AX before division."
        },
        {
          "Opcode": "D5 ib",
          "Instruction": "AAD imm8",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Adjust AX before division to number base imm8."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "AAM",
      "Description": "ASCII Adjust AX After Multiply",
      "Url": "https://www.felixcloutier.com/x86/AAM.html",
      "Table": [
        {
          "Opcode": "D4 0A",
          "Instruction": "AAM",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "ASCII adjust AX after multiply."
        },
        {
          "Opcode": "D4 ib",
          "Instruction": "AAM imm8",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Adjust AX after multiply to number base imm8."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "AAS",
      "Description": "ASCII Adjust AL After Subtraction",
      "Url": "https://www.felixcloutier.com/x86/AAS.html",
      "Table": [
        {
          "Opcode": "3F",
          "Instruction": "AAS",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "ASCII adjust AL after subtraction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "ADC",
      "Description": "Add with Carry",
      "Url": "https://www.felixcloutier.com/x86/ADC.html",
      "Table": [
        {
          "Opcode": "14 ib",
          "Instruction": "ADC AL, imm8",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry imm8 to AL."
        },
        {
          "Opcode": "15 iw",
          "Instruction": "ADC AX, imm16",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry imm16 to AX."
        },
        {
          "Opcode": "15 id",
          "Instruction": "ADC EAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry imm32 to EAX."
        },
        {
          "Opcode": "REX.W + 15 id",
          "Instruction": "ADC RAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with carry imm32 sign extended to 64-bits to RAX."
        },
        {
          "Opcode": "80 /2 ib",
          "Instruction": "ADC r/m8, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry imm8 to r/m8."
        },
        {
          "Opcode": "REX + 80 /2 ib",
          "Instruction": "ADC r/m8*, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with carry imm8 to r/m8."
        },
        {
          "Opcode": "81 /2 iw",
          "Instruction": "ADC r/m16, imm16",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry imm16 to r/m16."
        },
        {
          "Opcode": "81 /2 id",
          "Instruction": "ADC r/m32, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with CF imm32 to r/m32."
        },
        {
          "Opcode": "REX.W + 81 /2 id",
          "Instruction": "ADC r/m64, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with CF imm32 sign extended to 64-bits to r/m64."
        },
        {
          "Opcode": "83 /2 ib",
          "Instruction": "ADC r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with CF sign-extended imm8 to r/m16."
        },
        {
          "Opcode": "83 /2 ib",
          "Instruction": "ADC r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with CF sign-extended imm8 into r/m32."
        },
        {
          "Opcode": "REX.W + 83 /2 ib",
          "Instruction": "ADC r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with CF sign-extended imm8 into r/m64."
        },
        {
          "Opcode": "10 /r",
          "Instruction": "ADC r/m8, r8",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry byte register to r/m8."
        },
        {
          "Opcode": "REX + 10 /r",
          "Instruction": "ADC r/m8*, r8*",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with carry byte register to r/m64."
        },
        {
          "Opcode": "11 /r",
          "Instruction": "ADC r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry r16 to r/m16."
        },
        {
          "Opcode": "11 /r",
          "Instruction": "ADC r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with CF r32 to r/m32."
        },
        {
          "Opcode": "REX.W + 11 /r",
          "Instruction": "ADC r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with CF r64 to r/m64."
        },
        {
          "Opcode": "12 /r",
          "Instruction": "ADC r8, r/m8",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry r/m8 to byte register."
        },
        {
          "Opcode": "REX + 12 /r",
          "Instruction": "ADC r8*, r/m8*",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with carry r/m64 to byte register."
        },
        {
          "Opcode": "13 /r",
          "Instruction": "ADC r16, r/m16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with carry r/m16 to r16."
        },
        {
          "Opcode": "13 /r",
          "Instruction": "ADC r32, r/m32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add with CF r/m32 to r32."
        },
        {
          "Opcode": "REX.W + 13 /r",
          "Instruction": "ADC r64, r/m64",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add with CF r/m64 to r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ADCX",
      "Description": "Unsigned Integer Addition of Two Operands with Carry Flag",
      "Url": "https://www.felixcloutier.com/x86/ADCX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ADD",
      "Description": "Add",
      "Url": "https://www.felixcloutier.com/x86/ADD.html",
      "Table": [
        {
          "Opcode": "04 ib",
          "Instruction": "ADD AL, imm8",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm8 to AL."
        },
        {
          "Opcode": "05 iw",
          "Instruction": "ADD AX, imm16",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm16 to AX."
        },
        {
          "Opcode": "05 id",
          "Instruction": "ADD EAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm32 to EAX."
        },
        {
          "Opcode": "REX.W + 05 id",
          "Instruction": "ADD RAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add imm32 sign-extended to 64-bits to RAX."
        },
        {
          "Opcode": "80 /0 ib",
          "Instruction": "ADD r/m8, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm8 to r/m8."
        },
        {
          "Opcode": "REX + 80 /0 ib",
          "Instruction": "ADD r/m8*, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add sign-extended imm8 to r/m8."
        },
        {
          "Opcode": "81 /0 iw",
          "Instruction": "ADD r/m16, imm16",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm16 to r/m16."
        },
        {
          "Opcode": "81 /0 id",
          "Instruction": "ADD r/m32, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add imm32 to r/m32."
        },
        {
          "Opcode": "REX.W + 81 /0 id",
          "Instruction": "ADD r/m64, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add imm32 sign-extended to 64-bits to r/m64."
        },
        {
          "Opcode": "83 /0 ib",
          "Instruction": "ADD r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add sign-extended imm8 to r/m16."
        },
        {
          "Opcode": "83 /0 ib",
          "Instruction": "ADD r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add sign-extended imm8 to r/m32."
        },
        {
          "Opcode": "REX.W + 83 /0 ib",
          "Instruction": "ADD r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add sign-extended imm8 to r/m64."
        },
        {
          "Opcode": "00 /r",
          "Instruction": "ADD r/m8, r8",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r8 to r/m8."
        },
        {
          "Opcode": "REX + 00 /r",
          "Instruction": "ADD r/m8*, r8*",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add r8 to r/m8."
        },
        {
          "Opcode": "01 /r",
          "Instruction": "ADD r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r16 to r/m16."
        },
        {
          "Opcode": "01 /r",
          "Instruction": "ADD r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r32 to r/m32."
        },
        {
          "Opcode": "REX.W + 01 /r",
          "Instruction": "ADD r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add r64 to r/m64."
        },
        {
          "Opcode": "02 /r",
          "Instruction": "ADD r8, r/m8",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r/m8 to r8."
        },
        {
          "Opcode": "REX + 02 /r",
          "Instruction": "ADD r8*, r/m8*",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add r/m8 to r8."
        },
        {
          "Opcode": "03 /r",
          "Instruction": "ADD r16, r/m16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r/m16 to r16."
        },
        {
          "Opcode": "03 /r",
          "Instruction": "ADD r32, r/m32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Add r/m32 to r32."
        },
        {
          "Opcode": "REX.W + 03 /r",
          "Instruction": "ADD r64, r/m64",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Add r/m64 to r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ADDPD",
      "Description": "Add Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ADDPD.html"
    },
    {
      "Mnemonic": "ADDPS",
      "Description": "Add Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ADDPS.html"
    },
    {
      "Mnemonic": "ADDSD",
      "Description": "Add Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ADDSD.html"
    },
    {
      "Mnemonic": "ADDSS",
      "Description": "Add Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ADDSS.html"
    },
    {
      "Mnemonic": "ADDSUBPD",
      "Description": "Packed Double-FP Add/Subtract",
      "Url": "https://www.felixcloutier.com/x86/ADDSUBPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ADDSUBPS",
      "Description": "Packed Single-FP Add/Subtract",
      "Url": "https://www.felixcloutier.com/x86/ADDSUBPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ADOX",
      "Description": "Unsigned Integer Addition of Two Operands with Overflow Flag",
      "Url": "https://www.felixcloutier.com/x86/ADOX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESDEC",
      "Description": "Perform One Round of an AES Decryption Flow",
      "Url": "https://www.felixcloutier.com/x86/AESDEC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESDECLAST",
      "Description": "Perform Last Round of an AES Decryption Flow",
      "Url": "https://www.felixcloutier.com/x86/AESDECLAST.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESENC",
      "Description": "Perform One Round of an AES Encryption Flow",
      "Url": "https://www.felixcloutier.com/x86/AESENC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESENCLAST",
      "Description": "Perform Last Round of an AES Encryption Flow",
      "Url": "https://www.felixcloutier.com/x86/AESENCLAST.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESIMC",
      "Description": "Perform the AES InvMixColumn Transformation",
      "Url": "https://www.felixcloutier.com/x86/AESIMC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AESKEYGENASSIST",
      "Description": "AES Round Key Generation Assist",
      "Url": "https://www.felixcloutier.com/x86/AESKEYGENASSIST.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "AND",
      "Description": "Logical AND",
      "Url": "https://www.felixcloutier.com/x86/AND.html",
      "Table": [
        {
          "Opcode": "24 ib",
          "Instruction": "AND AL, imm8",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "AL AND imm8."
        },
        {
          "Opcode": "25 iw",
          "Instruction": "AND AX, imm16",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "AX AND imm16."
        },
        {
          "Opcode": "25 id",
          "Instruction": "AND EAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "EAX AND imm32."
        },
        {
          "Opcode": "REX.W + 25 id",
          "Instruction": "AND RAX, imm32",
          "OperandEncoding": "I",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "RAX AND imm32 sign-extended to 64-bits."
        },
        {
          "Opcode": "80 /4 ib",
          "Instruction": "AND r/m8, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m8 AND imm8."
        },
        {
          "Opcode": "REX + 80 /4 ib",
          "Instruction": "AND r/m8*, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m8 AND imm8."
        },
        {
          "Opcode": "81 /4 iw",
          "Instruction": "AND r/m16, imm16",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m16 AND imm16."
        },
        {
          "Opcode": "81 /4 id",
          "Instruction": "AND r/m32, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m32 AND imm32."
        },
        {
          "Opcode": "REX.W + 81 /4 id",
          "Instruction": "AND r/m64, imm32",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 AND imm32 sign extended to 64-bits."
        },
        {
          "Opcode": "83 /4 ib",
          "Instruction": "AND r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m16 AND imm8 (sign-extended)."
        },
        {
          "Opcode": "83 /4 ib",
          "Instruction": "AND r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m32 AND imm8 (sign-extended)."
        },
        {
          "Opcode": "REX.W + 83 /4 ib",
          "Instruction": "AND r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 AND imm8 (sign-extended)."
        },
        {
          "Opcode": "20 /r",
          "Instruction": "AND r/m8, r8",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m8 AND r8."
        },
        {
          "Opcode": "REX + 20 /r",
          "Instruction": "AND r/m8*, r8*",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 AND r8 (sign-extended)."
        },
        {
          "Opcode": "21 /r",
          "Instruction": "AND r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m16 AND r16."
        },
        {
          "Opcode": "21 /r",
          "Instruction": "AND r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r/m32 AND r32."
        },
        {
          "Opcode": "REX.W + 21 /r",
          "Instruction": "AND r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 AND r32."
        },
        {
          "Opcode": "22 /r",
          "Instruction": "AND r8, r/m8",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r8 AND r/m8."
        },
        {
          "Opcode": "REX + 22 /r",
          "Instruction": "AND r8*, r/m8*",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 AND r8 (sign-extended)."
        },
        {
          "Opcode": "23 /r",
          "Instruction": "AND r16, r/m16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r16 AND r/m16."
        },
        {
          "Opcode": "23 /r",
          "Instruction": "AND r32, r/m32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "r32 AND r/m32."
        },
        {
          "Opcode": "REX.W + 23 /r",
          "Instruction": "AND r64, r/m64",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "r64 AND r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ANDN",
      "Description": "Logical AND NOT",
      "Url": "https://www.felixcloutier.com/x86/ANDN.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ANDNPD",
      "Description": "Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ANDNPD.html"
    },
    {
      "Mnemonic": "ANDNPS",
      "Description": "Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ANDNPS.html"
    },
    {
      "Mnemonic": "ANDPD",
      "Description": "Bitwise Logical AND of Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ANDPD.html"
    },
    {
      "Mnemonic": "ANDPS",
      "Description": "Bitwise Logical AND of Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ANDPS.html"
    },
    {
      "Mnemonic": "ARPL",
      "Description": "Adjust RPL Field of Segment Selector",
      "Url": "https://www.felixcloutier.com/x86/ARPL.html",
      "Table": [
        {
          "Opcode": "63 /r",
          "Instruction": "ARPL r/m16, r16",
          "OperandEncoding": "ZO",
          "Bit64Mode": "N. E.",
          "CompatLegMode": "Valid",
          "Description": "Adjust RPL of r/m16 to not less than RPL of r16."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BEXTR",
      "Description": "Bit Field Extract",
      "Url": "https://www.felixcloutier.com/x86/BEXTR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "VEX.vvvv (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLENDPD",
      "Description": "Blend Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/BLENDPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8[3:0]"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLENDPS",
      "Description": "Blend Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/BLENDPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLENDVPD",
      "Description": "Variable Blend Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/BLENDVPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM0",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "implicit XMM0"
          ]
        },
        {
          "OperandEncoding": "RVMR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8[7:4]"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLENDVPS",
      "Description": "Variable Blend Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/BLENDVPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM0",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "implicit XMM0"
          ]
        },
        {
          "OperandEncoding": "RVMR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8[7:4]"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLSI",
      "Description": "Extract Lowest Set Isolated Bit",
      "Url": "https://www.felixcloutier.com/x86/BLSI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "VM",
          "Operands": [
            "VEX.vvvv (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLSMSK",
      "Description": "Get Mask Up to Lowest Set Bit",
      "Url": "https://www.felixcloutier.com/x86/BLSMSK.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "VM",
          "Operands": [
            "VEX.vvvv (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BLSR",
      "Description": "Reset Lowest Set Bit",
      "Url": "https://www.felixcloutier.com/x86/BLSR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "VM",
          "Operands": [
            "VEX.vvvv (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDCL",
      "Description": "Check Lower Bound",
      "Url": "https://www.felixcloutier.com/x86/BNDCL.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDCN",
      "Description": "Check Upper Bound",
      "Url": "https://www.felixcloutier.com/x86/BNDCU:BNDCN.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDCU",
      "Description": "Check Upper Bound",
      "Url": "https://www.felixcloutier.com/x86/BNDCU:BNDCN.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDLDX",
      "Description": "Load Extended Bounds Using Address Translation",
      "Url": "https://www.felixcloutier.com/x86/BNDLDX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "SIB.base (r): Address of pointer SIB.index(r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDMK",
      "Description": "Make Bounds",
      "Url": "https://www.felixcloutier.com/x86/BNDMK.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDMOV",
      "Description": "Move Bounds",
      "Url": "https://www.felixcloutier.com/x86/BNDMOV.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BNDSTX",
      "Description": "Store Extended Bounds Using Address Translation",
      "Url": "https://www.felixcloutier.com/x86/BNDSTX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "SIB.base (r): Address of pointer SIB.index(r)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BOUND",
      "Description": "Check Array Index Against Bounds",
      "Url": "https://www.felixcloutier.com/x86/BOUND.html",
      "Table": [
        {
          "Opcode": "62 /r",
          "Instruction": "BOUND r16, m16&amp;16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Check if r16 (array index) is within bounds specified by m16&amp;16."
        },
        {
          "Opcode": "62 /r",
          "Instruction": "BOUND r32, m32&amp;32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Check if r32 (array index) is within bounds specified by m32&amp;32."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BSF",
      "Description": "Bit Scan Forward",
      "Url": "https://www.felixcloutier.com/x86/BSF.html",
      "Table": [
        {
          "Opcode": "0F BC /r",
          "Instruction": "BSF r16, r/m16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Bit scan forward on r/m16."
        },
        {
          "Opcode": "0F BC /r",
          "Instruction": "BSF r32, r/m32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Bit scan forward on r/m32."
        },
        {
          "Opcode": "REX.W + 0F BC /r",
          "Instruction": "BSF r64, r/m64",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Bit scan forward on r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BSR",
      "Description": "Bit Scan Reverse",
      "Url": "https://www.felixcloutier.com/x86/BSR.html",
      "Table": [
        {
          "Opcode": "0F BD /r",
          "Instruction": "BSR r16, r/m16",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Bit scan reverse on r/m16."
        },
        {
          "Opcode": "0F BD /r",
          "Instruction": "BSR r32, r/m32",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Bit scan reverse on r/m32."
        },
        {
          "Opcode": "REX.W + 0F BD /r",
          "Instruction": "BSR r64, r/m64",
          "OperandEncoding": "RM",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Bit scan reverse on r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BSWAP",
      "Description": "Byte Swap",
      "Url": "https://www.felixcloutier.com/x86/BSWAP.html",
      "Table": [
        {
          "Opcode": "0F C8+rd",
          "Instruction": "BSWAP r32",
          "OperandEncoding": "O",
          "Bit64Mode": "Valid*",
          "CompatLegMode": "Valid",
          "Description": "Reverses the byte order of a 32-bit register."
        },
        {
          "Opcode": "REX.W + 0F C8+rd",
          "Instruction": "BSWAP r64",
          "OperandEncoding": "O",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Reverses the byte order of a 64-bit register."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BT",
      "Description": "Bit Test",
      "Url": "https://www.felixcloutier.com/x86/BT.html",
      "Table": [
        {
          "Opcode": "0F A3 /r",
          "Instruction": "BT r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag."
        },
        {
          "Opcode": "0F A3 /r",
          "Instruction": "BT r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag."
        },
        {
          "Opcode": "REX.W + 0F A3 /r",
          "Instruction": "BT r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag."
        },
        {
          "Opcode": "0F BA /4 ib",
          "Instruction": "BT r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag."
        },
        {
          "Opcode": "0F BA /4 ib",
          "Instruction": "BT r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag."
        },
        {
          "Opcode": "REX.W + 0F BA /4 ib",
          "Instruction": "BT r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BTC",
      "Description": "Bit Test and Complement",
      "Url": "https://www.felixcloutier.com/x86/BTC.html",
      "Table": [
        {
          "Opcode": "0F BB /r",
          "Instruction": "BTC r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and complement."
        },
        {
          "Opcode": "0F BB /r",
          "Instruction": "BTC r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and complement."
        },
        {
          "Opcode": "REX.W + 0F BB /r",
          "Instruction": "BTC r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and complement."
        },
        {
          "Opcode": "0F BA /7 ib",
          "Instruction": "BTC r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and complement."
        },
        {
          "Opcode": "0F BA /7 ib",
          "Instruction": "BTC r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and complement."
        },
        {
          "Opcode": "REX.W + 0F BA /7 ib",
          "Instruction": "BTC r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and complement."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BTR",
      "Description": "Bit Test and Reset",
      "Url": "https://www.felixcloutier.com/x86/BTR.html",
      "Table": [
        {
          "Opcode": "0F B3 /r",
          "Instruction": "BTR r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and clear."
        },
        {
          "Opcode": "0F B3 /r",
          "Instruction": "BTR r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and clear."
        },
        {
          "Opcode": "REX.W + 0F B3 /r",
          "Instruction": "BTR r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and clear."
        },
        {
          "Opcode": "0F BA /6 ib",
          "Instruction": "BTR r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and clear."
        },
        {
          "Opcode": "0F BA /6 ib",
          "Instruction": "BTR r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and clear."
        },
        {
          "Opcode": "REX.W + 0F BA /6 ib",
          "Instruction": "BTR r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and clear."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BTS",
      "Description": "Bit Test and Set",
      "Url": "https://www.felixcloutier.com/x86/BTS.html",
      "Table": [
        {
          "Opcode": "0F AB /r",
          "Instruction": "BTS r/m16, r16",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and set."
        },
        {
          "Opcode": "0F AB /r",
          "Instruction": "BTS r/m32, r32",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and set."
        },
        {
          "Opcode": "REX.W + 0F AB /r",
          "Instruction": "BTS r/m64, r64",
          "OperandEncoding": "MR",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and set."
        },
        {
          "Opcode": "0F BA /5 ib",
          "Instruction": "BTS r/m16, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and set."
        },
        {
          "Opcode": "0F BA /5 ib",
          "Instruction": "BTS r/m32, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Store selected bit in CF flag and set."
        },
        {
          "Opcode": "REX.W + 0F BA /5 ib",
          "Instruction": "BTS r/m64, imm8",
          "OperandEncoding": "MI",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Store selected bit in CF flag and set."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "BZHI",
      "Description": "Zero High Bits Starting with Specified Bit Position",
      "Url": "https://www.felixcloutier.com/x86/BZHI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "VEX.vvvv (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CALL",
      "Description": "Call Procedure",
      "Url": "https://www.felixcloutier.com/x86/CALL.html",
      "Table": [
        {
          "Opcode": "E8 cw",
          "Instruction": "CALL rel16",
          "OperandEncoding": "M",
          "Bit64Mode": "N.S.",
          "CompatLegMode": "Valid",
          "Description": "Call near, relative, displacement relative to next instruction."
        },
        {
          "Opcode": "E8 cd",
          "Instruction": "CALL rel32",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode."
        },
        {
          "Opcode": "FF /2",
          "Instruction": "CALL r/m16",
          "OperandEncoding": "M",
          "Bit64Mode": "N.E.",
          "CompatLegMode": "Valid",
          "Description": "Call near, absolute indirect, address given in r/m16."
        },
        {
          "Opcode": "FF /2",
          "Instruction": "CALL r/m32",
          "OperandEncoding": "M",
          "Bit64Mode": "N.E.",
          "CompatLegMode": "Valid",
          "Description": "Call near, absolute indirect, address given in r/m32."
        },
        {
          "Opcode": "FF /2",
          "Instruction": "CALL r/m64",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "Call near, absolute indirect, address given in r/m64."
        },
        {
          "Opcode": "9A cd",
          "Instruction": "CALL ptr16:16",
          "OperandEncoding": "D",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Call far, absolute, address given in operand."
        },
        {
          "Opcode": "9A cp",
          "Instruction": "CALL ptr16:32",
          "OperandEncoding": "D",
          "Bit64Mode": "Invalid",
          "CompatLegMode": "Valid",
          "Description": "Call far, absolute, address given in operand."
        },
        {
          "Opcode": "FF /3",
          "Instruction": "CALL m16:16",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction."
        },
        {
          "Opcode": "FF /3",
          "Instruction": "CALL m16:32",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction."
        },
        {
          "Opcode": "REX.W + FF /3",
          "Instruction": "CALL m16:64",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "D",
          "Operands": [
            "Offset"
          ]
        },
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CBW",
      "Description": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html",
      "Table": [
        {
          "Opcode": "98",
          "Instruction": "CBW",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "AX ← sign-extend of AL."
        },
        {
          "Opcode": "98",
          "Instruction": "CWDE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "EAX ← sign-extend of AX."
        },
        {
          "Opcode": "REX.W + 98",
          "Instruction": "CDQE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "RAX ← sign-extend of EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CDQ",
      "Description": "Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CWD:CDQ:CQO.html",
      "Table": [
        {
          "Opcode": "99",
          "Instruction": "CWD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "DX:AX ← sign-extend of AX."
        },
        {
          "Opcode": "99",
          "Instruction": "CDQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "EDX:EAX ← sign-extend of EAX."
        },
        {
          "Opcode": "REX.W + 99",
          "Instruction": "CQO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "RDX:RAX← sign-extend of RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CDQE",
      "Description": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html",
      "Table": [
        {
          "Opcode": "98",
          "Instruction": "CBW",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "AX ← sign-extend of AL."
        },
        {
          "Opcode": "98",
          "Instruction": "CWDE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "EAX ← sign-extend of AX."
        },
        {
          "Opcode": "REX.W + 98",
          "Instruction": "CDQE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "RAX ← sign-extend of EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLAC",
      "Description": "Clear AC Flag in EFLAGS Register",
      "Url": "https://www.felixcloutier.com/x86/CLAC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLC",
      "Description": "Clear Carry Flag",
      "Url": "https://www.felixcloutier.com/x86/CLC.html",
      "Table": [
        {
          "Opcode": "F8",
          "Instruction": "CLC",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Clear CF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLD",
      "Description": "Clear Direction Flag",
      "Url": "https://www.felixcloutier.com/x86/CLD.html",
      "Table": [
        {
          "Opcode": "FC",
          "Instruction": "CLD",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Clear DF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLFLUSH",
      "Description": "Flush Cache Line",
      "Url": "https://www.felixcloutier.com/x86/CLFLUSH.html",
      "Table": [
        {
          "Opcode": "NP 0F AE /7",
          "Instruction": "CLFLUSH m8",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Flushes cache line containing m8."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CLFLUSHOPT",
      "Description": "Flush Cache Line Optimized",
      "Url": "https://www.felixcloutier.com/x86/CLFLUSHOPT.html",
      "Table": [
        {
          "Opcode": "66 0F AE /7",
          "Instruction": "CLFLUSHOPT m8",
          "OperandEncoding": "M",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Flushes cache line containing m8."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CLI",
      "Description": "Clear Interrupt Flag",
      "Url": "https://www.felixcloutier.com/x86/CLI.html",
      "Table": [
        {
          "Opcode": "FA",
          "Instruction": "CLI",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Clear interrupt flag; interrupts disabled when interrupt flag cleared."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLTS",
      "Description": "Clear Task-Switched Flag in CR0",
      "Url": "https://www.felixcloutier.com/x86/CLTS.html",
      "Table": [
        {
          "Opcode": "0F 06",
          "Instruction": "CLTS",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Clears TS flag in CR0."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CLWB",
      "Description": "Cache Line Write Back",
      "Url": "https://www.felixcloutier.com/x86/CLWB.html"
    },
    {
      "Mnemonic": "CMC",
      "Description": "Complement Carry Flag",
      "Url": "https://www.felixcloutier.com/x86/CMC.html",
      "Table": [
        {
          "Opcode": "F5",
          "Instruction": "CMC",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Complement CF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMOVcc",
      "Description": "Conditional Move",
      "Url": "https://www.felixcloutier.com/x86/CMOVcc.html",
      "Table": [
        {
          "Opcode": "0F 47 /r",
          "Instruction": "CMOVA r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 47 /r",
          "Instruction": "CMOVA r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "REX.W + 0F 47 /r",
          "Instruction": "CMOVA r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVAE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if above or equal (CF=0)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVAE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if above or equal (CF=0)."
        },
        {
          "Opcode": "REX.W + 0F 43 /r",
          "Instruction": "CMOVAE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if above or equal (CF=0)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVB r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if below (CF=1)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVB r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if below (CF=1)."
        },
        {
          "Opcode": "REX.W + 0F 42 /r",
          "Instruction": "CMOVB r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if below (CF=1)."
        },
        {
          "Opcode": "0F 46 /r",
          "Instruction": "CMOVBE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 46 /r",
          "Instruction": "CMOVBE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "REX.W + 0F 46 /r",
          "Instruction": "CMOVBE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVC r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if carry (CF=1)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVC r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if carry (CF=1)."
        },
        {
          "Opcode": "REX.W + 0F 42 /r",
          "Instruction": "CMOVC r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if carry (CF=1)."
        },
        {
          "Opcode": "0F 44 /r",
          "Instruction": "CMOVE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if equal (ZF=1)."
        },
        {
          "Opcode": "0F 44 /r",
          "Instruction": "CMOVE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if equal (ZF=1)."
        },
        {
          "Opcode": "REX.W + 0F 44 /r",
          "Instruction": "CMOVE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if equal (ZF=1)."
        },
        {
          "Opcode": "0F 4F /r",
          "Instruction": "CMOVG r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 4F /r",
          "Instruction": "CMOVG r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "REX.W + 0F 4F /r",
          "Instruction": "CMOVG r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "NA",
          "Description": "Move if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 4D /r",
          "Instruction": "CMOVGE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if greater or equal (SF=OF)."
        },
        {
          "Opcode": "0F 4D /r",
          "Instruction": "CMOVGE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if greater or equal (SF=OF)."
        },
        {
          "Opcode": "REX.W + 0F 4D /r",
          "Instruction": "CMOVGE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if greater or equal (SF=OF)."
        },
        {
          "Opcode": "0F 4C /r",
          "Instruction": "CMOVL r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if less (SF≠ OF)."
        },
        {
          "Opcode": "0F 4C /r",
          "Instruction": "CMOVL r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if less (SF≠ OF)."
        },
        {
          "Opcode": "REX.W + 0F 4C /r",
          "Instruction": "CMOVL r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if less (SF≠ OF)."
        },
        {
          "Opcode": "0F 4E /r",
          "Instruction": "CMOVLE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 4E /r",
          "Instruction": "CMOVLE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "REX.W + 0F 4E /r",
          "Instruction": "CMOVLE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 46 /r",
          "Instruction": "CMOVNA r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 46 /r",
          "Instruction": "CMOVNA r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "REX.W + 0F 46 /r",
          "Instruction": "CMOVNA r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVNAE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not above or equal (CF=1)."
        },
        {
          "Opcode": "0F 42 /r",
          "Instruction": "CMOVNAE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not above or equal (CF=1)."
        },
        {
          "Opcode": "REX.W + 0F 42 /r",
          "Instruction": "CMOVNAE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not above or equal (CF=1)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVNB r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not below (CF=0)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVNB r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not below (CF=0)."
        },
        {
          "Opcode": "REX.W + 0F 43 /r",
          "Instruction": "CMOVNB r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not below (CF=0)."
        },
        {
          "Opcode": "0F 47 /r",
          "Instruction": "CMOVNBE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 47 /r",
          "Instruction": "CMOVNBE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "REX.W + 0F 47 /r",
          "Instruction": "CMOVNBE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVNC r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not carry (CF=0)."
        },
        {
          "Opcode": "0F 43 /r",
          "Instruction": "CMOVNC r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not carry (CF=0)."
        },
        {
          "Opcode": "REX.W + 0F 43 /r",
          "Instruction": "CMOVNC r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not carry (CF=0)."
        },
        {
          "Opcode": "0F 45 /r",
          "Instruction": "CMOVNE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not equal (ZF=0)."
        },
        {
          "Opcode": "0F 45 /r",
          "Instruction": "CMOVNE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not equal (ZF=0)."
        },
        {
          "Opcode": "REX.W + 0F 45 /r",
          "Instruction": "CMOVNE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not equal (ZF=0)."
        },
        {
          "Opcode": "0F 4E /r",
          "Instruction": "CMOVNG r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 4E /r",
          "Instruction": "CMOVNG r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "REX.W + 0F 4E /r",
          "Instruction": "CMOVNG r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 4C /r",
          "Instruction": "CMOVNGE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "0F 4C /r",
          "Instruction": "CMOVNGE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "REX.W + 0F 4C /r",
          "Instruction": "CMOVNGE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "0F 4D /r",
          "Instruction": "CMOVNL r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not less (SF=OF)."
        },
        {
          "Opcode": "0F 4D /r",
          "Instruction": "CMOVNL r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not less (SF=OF)."
        },
        {
          "Opcode": "REX.W + 0F 4D /r",
          "Instruction": "CMOVNL r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not less (SF=OF)."
        },
        {
          "Opcode": "0F 4F /r",
          "Instruction": "CMOVNLE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 4F /r",
          "Instruction": "CMOVNLE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "REX.W + 0F 4F /r",
          "Instruction": "CMOVNLE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 41 /r",
          "Instruction": "CMOVNO r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not overflow (OF=0)."
        },
        {
          "Opcode": "0F 41 /r",
          "Instruction": "CMOVNO r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not overflow (OF=0)."
        },
        {
          "Opcode": "REX.W + 0F 41 /r",
          "Instruction": "CMOVNO r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not overflow (OF=0)."
        },
        {
          "Opcode": "0F 4B /r",
          "Instruction": "CMOVNP r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not parity (PF=0)."
        },
        {
          "Opcode": "0F 4B /r",
          "Instruction": "CMOVNP r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not parity (PF=0)."
        },
        {
          "Opcode": "REX.W + 0F 4B /r",
          "Instruction": "CMOVNP r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not parity (PF=0)."
        },
        {
          "Opcode": "0F 49 /r",
          "Instruction": "CMOVNS r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not sign (SF=0)."
        },
        {
          "Opcode": "0F 49 /r",
          "Instruction": "CMOVNS r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not sign (SF=0)."
        },
        {
          "Opcode": "REX.W + 0F 49 /r",
          "Instruction": "CMOVNS r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not sign (SF=0)."
        },
        {
          "Opcode": "0F 45 /r",
          "Instruction": "CMOVNZ r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not zero (ZF=0)."
        },
        {
          "Opcode": "0F 45 /r",
          "Instruction": "CMOVNZ r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if not zero (ZF=0)."
        },
        {
          "Opcode": "REX.W + 0F 45 /r",
          "Instruction": "CMOVNZ r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if not zero (ZF=0)."
        },
        {
          "Opcode": "0F 40 /r",
          "Instruction": "CMOVO r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if overflow (OF=1)."
        },
        {
          "Opcode": "0F 40 /r",
          "Instruction": "CMOVO r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if overflow (OF=1)."
        },
        {
          "Opcode": "REX.W + 0F 40 /r",
          "Instruction": "CMOVO r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if overflow (OF=1)."
        },
        {
          "Opcode": "0F 4A /r",
          "Instruction": "CMOVP r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity (PF=1)."
        },
        {
          "Opcode": "0F 4A /r",
          "Instruction": "CMOVP r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity (PF=1)."
        },
        {
          "Opcode": "REX.W + 0F 4A /r",
          "Instruction": "CMOVP r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if parity (PF=1)."
        },
        {
          "Opcode": "0F 4A /r",
          "Instruction": "CMOVPE r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity even (PF=1)."
        },
        {
          "Opcode": "0F 4A /r",
          "Instruction": "CMOVPE r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity even (PF=1)."
        },
        {
          "Opcode": "REX.W + 0F 4A /r",
          "Instruction": "CMOVPE r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if parity even (PF=1)."
        },
        {
          "Opcode": "0F 4B /r",
          "Instruction": "CMOVPO r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity odd (PF=0)."
        },
        {
          "Opcode": "0F 4B /r",
          "Instruction": "CMOVPO r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if parity odd (PF=0)."
        },
        {
          "Opcode": "REX.W + 0F 4B /r",
          "Instruction": "CMOVPO r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if parity odd (PF=0)."
        },
        {
          "Opcode": "0F 48 /r",
          "Instruction": "CMOVS r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if sign (SF=1)."
        },
        {
          "Opcode": "0F 48 /r",
          "Instruction": "CMOVS r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if sign (SF=1)."
        },
        {
          "Opcode": "REX.W + 0F 48 /r",
          "Instruction": "CMOVS r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if sign (SF=1)."
        },
        {
          "Opcode": "0F 44 /r",
          "Instruction": "CMOVZ r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if zero (ZF=1)."
        },
        {
          "Opcode": "0F 44 /r",
          "Instruction": "CMOVZ r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move if zero (ZF=1)."
        },
        {
          "Opcode": "REX.W + 0F 44 /r",
          "Instruction": "CMOVZ r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move if zero (ZF=1)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CMP",
      "Description": "Compare Two Operands",
      "Url": "https://www.felixcloutier.com/x86/CMP.html",
      "Table": [
        {
          "Opcode": "3C ib",
          "Instruction": "CMP AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Compare imm8 with AL."
        },
        {
          "Opcode": "3D iw",
          "Instruction": "CMP AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Compare imm16 with AX."
        },
        {
          "Opcode": "3D id",
          "Instruction": "CMP EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Compare imm32 with EAX."
        },
        {
          "Opcode": "REX.W + 3D id",
          "Instruction": "CMP RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "Compare imm32 sign-extended to 64-bits with RAX."
        },
        {
          "Opcode": "80 /7 ib",
          "Instruction": "CMP r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Compare imm8 with r/m8."
        },
        {
          "Opcode": "REX + 80 /7 ib",
          "Instruction": "CMP r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Compare imm8 with r/m8."
        },
        {
          "Opcode": "81 /7 iw",
          "Instruction": "CMP r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Compare imm16 with r/m16."
        },
        {
          "Opcode": "81 /7 id",
          "Instruction": "CMP r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Compare imm32 with r/m32."
        },
        {
          "Opcode": "REX.W + 81 /7 id",
          "Instruction": "CMP r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Compare imm32 sign-extended to 64-bits with r/m64."
        },
        {
          "Opcode": "83 /7 ib",
          "Instruction": "CMP r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Compare imm8 with r/m16."
        },
        {
          "Opcode": "83 /7 ib",
          "Instruction": "CMP r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Compare imm8 with r/m32."
        },
        {
          "Opcode": "REX.W + 83 /7 ib",
          "Instruction": "CMP r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Compare imm8 with r/m64."
        },
        {
          "Opcode": "38 /r",
          "Instruction": "CMP r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Compare r8 with r/m8."
        },
        {
          "Opcode": "REX + 38 /r",
          "Instruction": "CMP r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Compare r8 with r/m8."
        },
        {
          "Opcode": "39 /r",
          "Instruction": "CMP r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Compare r16 with r/m16."
        },
        {
          "Opcode": "39 /r",
          "Instruction": "CMP r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Compare r32 with r/m32."
        },
        {
          "Opcode": "REX.W + 39 /r",
          "Instruction": "CMP r/m64,r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Compare r64 with r/m64."
        },
        {
          "Opcode": "3A /r",
          "Instruction": "CMP r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Compare r/m8 with r8."
        },
        {
          "Opcode": "REX + 3A /r",
          "Instruction": "CMP r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Compare r/m8 with r8."
        },
        {
          "Opcode": "3B /r",
          "Instruction": "CMP r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Compare r/m16 with r16."
        },
        {
          "Opcode": "3B /r",
          "Instruction": "CMP r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Compare r/m32 with r32."
        },
        {
          "Opcode": "REX.W + 3B /r",
          "Instruction": "CMP r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Compare r/m64 with r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX (r)",
            "imm8/16/32"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CMPPD",
      "Description": "Compare Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CMPPD.html"
    },
    {
      "Mnemonic": "CMPPS",
      "Description": "Compare Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CMPPS.html"
    },
    {
      "Mnemonic": "CMPS",
      "Description": "Compare String Operands",
      "Url": "https://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html",
      "Table": [
        {
          "Opcode": "A6",
          "Instruction": "CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        },
        {
          "Opcode": "A6",
          "Instruction": "CMPSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMPSB",
      "Description": "Compare String Operands",
      "Url": "https://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html",
      "Table": [
        {
          "Opcode": "A6",
          "Instruction": "CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        },
        {
          "Opcode": "A6",
          "Instruction": "CMPSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMPSD",
      "Description": "Compare String Operands",
      "Url": "https://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html",
      "Table": [
        {
          "Opcode": "A6",
          "Instruction": "CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        },
        {
          "Opcode": "A6",
          "Instruction": "CMPSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMPSD",
      "UniqueName": "cmpsd_fp",
      "Description": "Compare Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CMPSD.html"
    },
    {
      "Mnemonic": "CMPSQ",
      "Description": "Compare String Operands",
      "Url": "https://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html",
      "Table": [
        {
          "Opcode": "A6",
          "Instruction": "CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        },
        {
          "Opcode": "A6",
          "Instruction": "CMPSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMPSS",
      "Description": "Compare Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CMPSS.html"
    },
    {
      "Mnemonic": "CMPSW",
      "Description": "Compare String Operands",
      "Url": "https://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html",
      "Table": [
        {
          "Opcode": "A6",
          "Instruction": "CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        },
        {
          "Opcode": "A6",
          "Instruction": "CMPSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "A7",
          "Instruction": "CMPSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly."
        },
        {
          "Opcode": "REX.W + A7",
          "Instruction": "CMPSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CMPXCHG",
      "Description": "Compare and Exchange",
      "Url": "https://www.felixcloutier.com/x86/CMPXCHG.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CMPXCHG16B",
      "Description": "Compare and Exchange Bytes",
      "Url": "https://www.felixcloutier.com/x86/CMPXCHG8B:CMPXCHG16B.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CMPXCHG8B",
      "Description": "Compare and Exchange Bytes",
      "Url": "https://www.felixcloutier.com/x86/CMPXCHG8B:CMPXCHG16B.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "COMISD",
      "Description": "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/COMISD.html"
    },
    {
      "Mnemonic": "COMISS",
      "Description": "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/COMISS.html"
    },
    {
      "Mnemonic": "CPUID",
      "Description": "CPU Identification",
      "Url": "https://www.felixcloutier.com/x86/CPUID.html",
      "Table": [
        {
          "Opcode": "0F A2",
          "Instruction": "CPUID",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CQO",
      "Description": "Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CWD:CDQ:CQO.html",
      "Table": [
        {
          "Opcode": "99",
          "Instruction": "CWD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "DX:AX ← sign-extend of AX."
        },
        {
          "Opcode": "99",
          "Instruction": "CDQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "EDX:EAX ← sign-extend of EAX."
        },
        {
          "Opcode": "REX.W + 99",
          "Instruction": "CQO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "RDX:RAX← sign-extend of RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CRC32",
      "Description": "Accumulate CRC32 Value",
      "Url": "https://www.felixcloutier.com/x86/CRC32.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTDQ2PD",
      "Description": "Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CVTDQ2PD.html"
    },
    {
      "Mnemonic": "CVTDQ2PS",
      "Description": "Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CVTDQ2PS.html"
    },
    {
      "Mnemonic": "CVTPD2DQ",
      "Description": "Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTPD2DQ.html"
    },
    {
      "Mnemonic": "CVTPD2PI",
      "Description": "Convert Packed Double-Precision FP Values to Packed Dword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTPD2PI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTPD2PS",
      "Description": "Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CVTPD2PS.html"
    },
    {
      "Mnemonic": "CVTPI2PD",
      "Description": "Convert Packed Dword Integers to Packed Double-Precision FP Values",
      "Url": "https://www.felixcloutier.com/x86/CVTPI2PD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTPI2PS",
      "Description": "Convert Packed Dword Integers to Packed Single-Precision FP Values",
      "Url": "https://www.felixcloutier.com/x86/CVTPI2PS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTPS2DQ",
      "Description": "Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/CVTPS2DQ.html"
    },
    {
      "Mnemonic": "CVTPS2PD",
      "Description": "Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/CVTPS2PD.html"
    },
    {
      "Mnemonic": "CVTPS2PI",
      "Description": "Convert Packed Single-Precision FP Values to Packed Dword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTPS2PI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTSD2SI",
      "Description": "Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer",
      "Url": "https://www.felixcloutier.com/x86/CVTSD2SI.html"
    },
    {
      "Mnemonic": "CVTSD2SS",
      "Description": "Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CVTSD2SS.html"
    },
    {
      "Mnemonic": "CVTSI2SD",
      "Description": "Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CVTSI2SD.html"
    },
    {
      "Mnemonic": "CVTSI2SS",
      "Description": "Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CVTSI2SS.html"
    },
    {
      "Mnemonic": "CVTSS2SD",
      "Description": "Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/CVTSS2SD.html"
    },
    {
      "Mnemonic": "CVTSS2SI",
      "Description": "Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer",
      "Url": "https://www.felixcloutier.com/x86/CVTSS2SI.html"
    },
    {
      "Mnemonic": "CVTTPD2DQ",
      "Description": "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTTPD2DQ.html"
    },
    {
      "Mnemonic": "CVTTPD2PI",
      "Description": "Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTTPD2PI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTTPS2DQ",
      "Description": "Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/CVTTPS2DQ.html"
    },
    {
      "Mnemonic": "CVTTPS2PI",
      "Description": "Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers",
      "Url": "https://www.felixcloutier.com/x86/CVTTPS2PI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "CVTTSD2SI",
      "Description": "Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer",
      "Url": "https://www.felixcloutier.com/x86/CVTTSD2SI.html"
    },
    {
      "Mnemonic": "CVTTSS2SI",
      "Description": "Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer",
      "Url": "https://www.felixcloutier.com/x86/CVTTSS2SI.html"
    },
    {
      "Mnemonic": "CWD",
      "Description": "Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CWD:CDQ:CQO.html",
      "Table": [
        {
          "Opcode": "99",
          "Instruction": "CWD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "DX:AX ← sign-extend of AX."
        },
        {
          "Opcode": "99",
          "Instruction": "CDQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "EDX:EAX ← sign-extend of EAX."
        },
        {
          "Opcode": "REX.W + 99",
          "Instruction": "CQO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "RDX:RAX← sign-extend of RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "CWDE",
      "Description": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword",
      "Url": "https://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html",
      "Table": [
        {
          "Opcode": "98",
          "Instruction": "CBW",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "AX ← sign-extend of AL."
        },
        {
          "Opcode": "98",
          "Instruction": "CWDE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "EAX ← sign-extend of AX."
        },
        {
          "Opcode": "REX.W + 98",
          "Instruction": "CDQE",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "N.E.",
          "Description": "RAX ← sign-extend of EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "DAA",
      "Description": "Decimal Adjust AL after Addition",
      "Url": "https://www.felixcloutier.com/x86/DAA.html",
      "Table": [
        {
          "Opcode": "27",
          "Instruction": "DAA",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Decimal adjust AL after addition."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "DAS",
      "Description": "Decimal Adjust AL after Subtraction",
      "Url": "https://www.felixcloutier.com/x86/DAS.html",
      "Table": [
        {
          "Opcode": "2F",
          "Instruction": "DAS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Decimal adjust AL after subtraction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "DEC",
      "Description": "Decrement by 1",
      "Url": "https://www.felixcloutier.com/x86/DEC.html",
      "Table": [
        {
          "Opcode": "FE /1",
          "Instruction": "DEC r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Decrement r/m8 by 1."
        },
        {
          "Opcode": "REX + FE /1",
          "Instruction": "DEC r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Decrement r/m8 by 1."
        },
        {
          "Opcode": "FF /1",
          "Instruction": "DEC r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Decrement r/m16 by 1."
        },
        {
          "Opcode": "FF /1",
          "Instruction": "DEC r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Decrement r/m32 by 1."
        },
        {
          "Opcode": "REX.W + FF /1",
          "Instruction": "DEC r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Decrement r/m64 by 1."
        },
        {
          "Opcode": "48+rw",
          "Instruction": "DEC r16",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Decrement r16 by 1."
        },
        {
          "Opcode": "48+rd",
          "Instruction": "DEC r32",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Decrement r32 by 1."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        },
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "DIV",
      "Description": "Unsigned Divide",
      "Url": "https://www.felixcloutier.com/x86/DIV.html",
      "Table": [
        {
          "Opcode": "F6 /6",
          "Instruction": "DIV r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder."
        },
        {
          "Opcode": "REX + F6 /6",
          "Instruction": "DIV r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder."
        },
        {
          "Opcode": "F7 /6",
          "Instruction": "DIV r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder."
        },
        {
          "Opcode": "F7 /6",
          "Instruction": "DIV r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder."
        },
        {
          "Opcode": "REX.W + F7 /6",
          "Instruction": "DIV r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "DIVPD",
      "Description": "Divide Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/DIVPD.html"
    },
    {
      "Mnemonic": "DIVPS",
      "Description": "Divide Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/DIVPS.html"
    },
    {
      "Mnemonic": "DIVSD",
      "Description": "Divide Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/DIVSD.html"
    },
    {
      "Mnemonic": "DIVSS",
      "Description": "Divide Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/DIVSS.html"
    },
    {
      "Mnemonic": "DPPD",
      "Description": "Dot Product of Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/DPPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "DPPS",
      "Description": "Dot Product of Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/DPPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "EMMS",
      "Description": "Empty MMX Technology State",
      "Url": "https://www.felixcloutier.com/x86/EMMS.html",
      "Table": [
        {
          "Opcode": "NP 0F 77",
          "Instruction": "EMMS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set the x87 FPU tag word to empty."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "ENTER",
      "Description": "Make Stack Frame for Procedure Parameters",
      "Url": "https://www.felixcloutier.com/x86/ENTER.html",
      "Table": [
        {
          "Opcode": "C8 iw 00",
          "Instruction": "ENTER imm16, 0",
          "OperandEncoding": "II",
          "CompatLegMode": "Valid",
          "Description": "Create a stack frame for a procedure."
        },
        {
          "Opcode": "C8 iw 01",
          "Instruction": "ENTER imm16,1",
          "OperandEncoding": "II",
          "CompatLegMode": "Valid",
          "Description": "Create a stack frame with a nested pointer for a procedure."
        },
        {
          "Opcode": "C8 iw ib",
          "Instruction": "ENTER imm16, imm8",
          "OperandEncoding": "II",
          "CompatLegMode": "Valid",
          "Description": "Create a stack frame with nested pointers for a procedure."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "II",
          "Operands": [
            "iw",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "EXTRACTPS",
      "Description": "Extract Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/EXTRACTPS.html"
    },
    {
      "Mnemonic": "F2XM1",
      "Description": "Compute 2x–1",
      "Url": "https://www.felixcloutier.com/x86/F2XM1.html",
      "Table": [
        {
          "Opcode": "D9 F0",
          "Instruction": "F2XM1",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with (2ST(0) – 1)."
        }
      ]
    },
    {
      "Mnemonic": "FABS",
      "Description": "Absolute Value",
      "Url": "https://www.felixcloutier.com/x86/FABS.html",
      "Table": [
        {
          "Opcode": "D9 E1",
          "Instruction": "FABS",
          "CompatLegMode": "Valid",
          "Description": "Replace ST with its absolute value."
        }
      ]
    },
    {
      "Mnemonic": "FADD",
      "Description": "Add",
      "Url": "https://www.felixcloutier.com/x86/FADD:FADDP:FIADD.html",
      "Table": [
        {
          "Opcode": "D8 /0",
          "Instruction": "FADD m32fp",
          "CompatLegMode": "Valid",
          "Description": "Add m32fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /0",
          "Instruction": "FADD m64fp",
          "CompatLegMode": "Valid",
          "Description": "Add m64fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 C0+i",
          "Instruction": "FADD ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C0+i",
          "Instruction": "FADD ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(i) to ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C0+i",
          "Instruction": "FADDP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C1",
          "Instruction": "FADDP",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /0",
          "Instruction": "FIADD m32int",
          "CompatLegMode": "Valid",
          "Description": "Add m32int to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /0",
          "Instruction": "FIADD m16int",
          "CompatLegMode": "Valid",
          "Description": "Add m16int to ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FADDP",
      "Description": "Add",
      "Url": "https://www.felixcloutier.com/x86/FADD:FADDP:FIADD.html",
      "Table": [
        {
          "Opcode": "D8 /0",
          "Instruction": "FADD m32fp",
          "CompatLegMode": "Valid",
          "Description": "Add m32fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /0",
          "Instruction": "FADD m64fp",
          "CompatLegMode": "Valid",
          "Description": "Add m64fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 C0+i",
          "Instruction": "FADD ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C0+i",
          "Instruction": "FADD ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(i) to ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C0+i",
          "Instruction": "FADDP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C1",
          "Instruction": "FADDP",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /0",
          "Instruction": "FIADD m32int",
          "CompatLegMode": "Valid",
          "Description": "Add m32int to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /0",
          "Instruction": "FIADD m16int",
          "CompatLegMode": "Valid",
          "Description": "Add m16int to ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FBLD",
      "Description": "Load Binary Coded Decimal",
      "Url": "https://www.felixcloutier.com/x86/FBLD.html",
      "Table": [
        {
          "Opcode": "DF /4",
          "Instruction": "FBLD m80bcd",
          "CompatLegMode": "Valid",
          "Description": "Convert BCD value to floating-point and push onto the FPU stack."
        }
      ]
    },
    {
      "Mnemonic": "FBSTP",
      "Description": "Store BCD Integer and Pop",
      "Url": "https://www.felixcloutier.com/x86/FBSTP.html",
      "Table": [
        {
          "Opcode": "DF /6",
          "Instruction": "FBSTP m80bcd",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m80bcd and pop ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FCHS",
      "Description": "Change Sign",
      "Url": "https://www.felixcloutier.com/x86/FCHS.html",
      "Table": [
        {
          "Opcode": "D9 E0",
          "Instruction": "FCHS",
          "CompatLegMode": "Valid",
          "Description": "Complements sign of ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FCLEX",
      "Description": "Clear Exceptions",
      "Url": "https://www.felixcloutier.com/x86/FCLEX:FNCLEX.html"
    },
    {
      "Mnemonic": "FCMOVcc",
      "Description": "Floating-Point Conditional Move",
      "Url": "https://www.felixcloutier.com/x86/FCMOVcc.html"
    },
    {
      "Mnemonic": "FCOM",
      "Description": "Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FCOM:FCOMP:FCOMPP.html",
      "Table": [
        {
          "Opcode": "D8 /2",
          "Instruction": "FCOM m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp."
        },
        {
          "Opcode": "DC /2",
          "Instruction": "FCOM m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp."
        },
        {
          "Opcode": "D8 D0+i",
          "Instruction": "FCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "D8 D1",
          "Instruction": "FCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "D8 /3",
          "Instruction": "FCOMP m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp and pop register stack."
        },
        {
          "Opcode": "DC /3",
          "Instruction": "FCOMP m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp and pop register stack."
        },
        {
          "Opcode": "D8 D8+i",
          "Instruction": "FCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "D8 D9",
          "Instruction": "FCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DE D9",
          "Instruction": "FCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FCOMI",
      "Description": "Compare Floating Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/FCOMI:FCOMIP:FUCOMI:FUCOMIP.html",
      "Table": [
        {
          "Opcode": "DB F0+i",
          "Instruction": "FCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and set status flags accordingly."
        },
        {
          "Opcode": "DF F0+i",
          "Instruction": "FCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), set status flags accordingly, and pop register stack."
        },
        {
          "Opcode": "DB E8+i",
          "Instruction": "FUCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly."
        },
        {
          "Opcode": "DF E8+i",
          "Instruction": "FUCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FCOMIP",
      "Description": "Compare Floating Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/FCOMI:FCOMIP:FUCOMI:FUCOMIP.html",
      "Table": [
        {
          "Opcode": "DB F0+i",
          "Instruction": "FCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and set status flags accordingly."
        },
        {
          "Opcode": "DF F0+i",
          "Instruction": "FCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), set status flags accordingly, and pop register stack."
        },
        {
          "Opcode": "DB E8+i",
          "Instruction": "FUCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly."
        },
        {
          "Opcode": "DF E8+i",
          "Instruction": "FUCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FCOMP",
      "Description": "Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FCOM:FCOMP:FCOMPP.html",
      "Table": [
        {
          "Opcode": "D8 /2",
          "Instruction": "FCOM m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp."
        },
        {
          "Opcode": "DC /2",
          "Instruction": "FCOM m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp."
        },
        {
          "Opcode": "D8 D0+i",
          "Instruction": "FCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "D8 D1",
          "Instruction": "FCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "D8 /3",
          "Instruction": "FCOMP m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp and pop register stack."
        },
        {
          "Opcode": "DC /3",
          "Instruction": "FCOMP m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp and pop register stack."
        },
        {
          "Opcode": "D8 D8+i",
          "Instruction": "FCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "D8 D9",
          "Instruction": "FCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DE D9",
          "Instruction": "FCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FCOMPP",
      "Description": "Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FCOM:FCOMP:FCOMPP.html",
      "Table": [
        {
          "Opcode": "D8 /2",
          "Instruction": "FCOM m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp."
        },
        {
          "Opcode": "DC /2",
          "Instruction": "FCOM m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp."
        },
        {
          "Opcode": "D8 D0+i",
          "Instruction": "FCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "D8 D1",
          "Instruction": "FCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "D8 /3",
          "Instruction": "FCOMP m32fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32fp and pop register stack."
        },
        {
          "Opcode": "DC /3",
          "Instruction": "FCOMP m64fp",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m64fp and pop register stack."
        },
        {
          "Opcode": "D8 D8+i",
          "Instruction": "FCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "D8 D9",
          "Instruction": "FCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DE D9",
          "Instruction": "FCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FCOS",
      "Description": "Cosine",
      "Url": "https://www.felixcloutier.com/x86/FCOS.html",
      "Table": [
        {
          "Opcode": "D9 FF",
          "Instruction": "FCOS",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with its approximate cosine."
        }
      ]
    },
    {
      "Mnemonic": "FDECSTP",
      "Description": "Decrement Stack-Top Pointer",
      "Url": "https://www.felixcloutier.com/x86/FDECSTP.html",
      "Table": [
        {
          "Opcode": "D9 F6",
          "Instruction": "FDECSTP",
          "CompatLegMode": "Valid",
          "Description": "Decrement TOP field in FPU status word."
        }
      ]
    },
    {
      "Mnemonic": "FDIV",
      "Description": "Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIV:FDIVP:FIDIV.html",
      "Table": [
        {
          "Opcode": "D8 /6",
          "Instruction": "FDIV m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /6",
          "Instruction": "FDIV m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 F0+i",
          "Instruction": "FDIV ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC F8+i",
          "Instruction": "FDIV ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE F8+i",
          "Instruction": "FDIVP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F9",
          "Instruction": "FDIVP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /6",
          "Instruction": "FIDIV m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /6",
          "Instruction": "FIDIV m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FDIVP",
      "Description": "Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIV:FDIVP:FIDIV.html",
      "Table": [
        {
          "Opcode": "D8 /6",
          "Instruction": "FDIV m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /6",
          "Instruction": "FDIV m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 F0+i",
          "Instruction": "FDIV ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC F8+i",
          "Instruction": "FDIV ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE F8+i",
          "Instruction": "FDIVP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F9",
          "Instruction": "FDIVP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /6",
          "Instruction": "FIDIV m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /6",
          "Instruction": "FIDIV m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FDIVR",
      "Description": "Reverse Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIVR:FDIVRP:FIDIVR.html",
      "Table": [
        {
          "Opcode": "D8 /7",
          "Instruction": "FDIVR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m32fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /7",
          "Instruction": "FDIVR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m64fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 F8+i",
          "Instruction": "FDIVR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC F0+i",
          "Instruction": "FDIVR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE F0+i",
          "Instruction": "FDIVRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F1",
          "Instruction": "FDIVRP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /7",
          "Instruction": "FIDIVR m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide m32int by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /7",
          "Instruction": "FIDIVR m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide m16int by ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FDIVRP",
      "Description": "Reverse Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIVR:FDIVRP:FIDIVR.html",
      "Table": [
        {
          "Opcode": "D8 /7",
          "Instruction": "FDIVR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m32fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /7",
          "Instruction": "FDIVR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m64fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 F8+i",
          "Instruction": "FDIVR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC F0+i",
          "Instruction": "FDIVR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE F0+i",
          "Instruction": "FDIVRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F1",
          "Instruction": "FDIVRP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /7",
          "Instruction": "FIDIVR m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide m32int by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /7",
          "Instruction": "FIDIVR m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide m16int by ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FFREE",
      "Description": "Free Floating-Point Register",
      "Url": "https://www.felixcloutier.com/x86/FFREE.html",
      "Table": [
        {
          "Opcode": "DD C0+i",
          "Instruction": "FFREE ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Sets tag for ST(i) to empty."
        }
      ]
    },
    {
      "Mnemonic": "FIADD",
      "Description": "Add",
      "Url": "https://www.felixcloutier.com/x86/FADD:FADDP:FIADD.html",
      "Table": [
        {
          "Opcode": "D8 /0",
          "Instruction": "FADD m32fp",
          "CompatLegMode": "Valid",
          "Description": "Add m32fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /0",
          "Instruction": "FADD m64fp",
          "CompatLegMode": "Valid",
          "Description": "Add m64fp to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 C0+i",
          "Instruction": "FADD ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C0+i",
          "Instruction": "FADD ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(i) to ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C0+i",
          "Instruction": "FADDP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C1",
          "Instruction": "FADDP",
          "CompatLegMode": "Valid",
          "Description": "Add ST(0) to ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /0",
          "Instruction": "FIADD m32int",
          "CompatLegMode": "Valid",
          "Description": "Add m32int to ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /0",
          "Instruction": "FIADD m16int",
          "CompatLegMode": "Valid",
          "Description": "Add m16int to ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FICOM",
      "Description": "Compare Integer",
      "Url": "https://www.felixcloutier.com/x86/FICOM:FICOMP.html",
      "Table": [
        {
          "Opcode": "DE /2",
          "Instruction": "FICOM m16int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m16int."
        },
        {
          "Opcode": "DA /2",
          "Instruction": "FICOM m32int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32int."
        },
        {
          "Opcode": "DE /3",
          "Instruction": "FICOMP m16int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m16int and pop stack register."
        },
        {
          "Opcode": "DA /3",
          "Instruction": "FICOMP m32int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32int and pop stack register."
        }
      ]
    },
    {
      "Mnemonic": "FICOMP",
      "Description": "Compare Integer",
      "Url": "https://www.felixcloutier.com/x86/FICOM:FICOMP.html",
      "Table": [
        {
          "Opcode": "DE /2",
          "Instruction": "FICOM m16int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m16int."
        },
        {
          "Opcode": "DA /2",
          "Instruction": "FICOM m32int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32int."
        },
        {
          "Opcode": "DE /3",
          "Instruction": "FICOMP m16int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m16int and pop stack register."
        },
        {
          "Opcode": "DA /3",
          "Instruction": "FICOMP m32int",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with m32int and pop stack register."
        }
      ]
    },
    {
      "Mnemonic": "FIDIV",
      "Description": "Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIV:FDIVP:FIDIV.html",
      "Table": [
        {
          "Opcode": "D8 /6",
          "Instruction": "FDIV m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /6",
          "Instruction": "FDIV m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 F0+i",
          "Instruction": "FDIV ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC F8+i",
          "Instruction": "FDIV ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE F8+i",
          "Instruction": "FDIVP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F9",
          "Instruction": "FDIVP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /6",
          "Instruction": "FIDIV m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /6",
          "Instruction": "FIDIV m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FIDIVR",
      "Description": "Reverse Divide",
      "Url": "https://www.felixcloutier.com/x86/FDIVR:FDIVRP:FIDIVR.html",
      "Table": [
        {
          "Opcode": "D8 /7",
          "Instruction": "FDIVR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m32fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /7",
          "Instruction": "FDIVR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Divide m64fp by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 F8+i",
          "Instruction": "FDIVR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(i) by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC F0+i",
          "Instruction": "FDIVR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE F0+i",
          "Instruction": "FDIVRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(i), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE F1",
          "Instruction": "FDIVRP",
          "CompatLegMode": "Valid",
          "Description": "Divide ST(0) by ST(1), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /7",
          "Instruction": "FIDIVR m32int",
          "CompatLegMode": "Valid",
          "Description": "Divide m32int by ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /7",
          "Instruction": "FIDIVR m16int",
          "CompatLegMode": "Valid",
          "Description": "Divide m16int by ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FILD",
      "Description": "Load Integer",
      "Url": "https://www.felixcloutier.com/x86/FILD.html",
      "Table": [
        {
          "Opcode": "DF /0",
          "Instruction": "FILD m16int",
          "CompatLegMode": "Valid",
          "Description": "Push m16int onto the FPU register stack."
        },
        {
          "Opcode": "DB /0",
          "Instruction": "FILD m32int",
          "CompatLegMode": "Valid",
          "Description": "Push m32int onto the FPU register stack."
        },
        {
          "Opcode": "DF /5",
          "Instruction": "FILD m64int",
          "CompatLegMode": "Valid",
          "Description": "Push m64int onto the FPU register stack."
        }
      ]
    },
    {
      "Mnemonic": "FIMUL",
      "Description": "Multiply",
      "Url": "https://www.felixcloutier.com/x86/FMUL:FMULP:FIMUL.html",
      "Table": [
        {
          "Opcode": "D8 /1",
          "Instruction": "FMUL m32fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /1",
          "Instruction": "FMUL m64fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 C8+i",
          "Instruction": "FMUL ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C8+i",
          "Instruction": "FMUL ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C8+i",
          "Instruction": "FMULP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C9",
          "Instruction": "FMULP",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /1",
          "Instruction": "FIMUL m32int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /1",
          "Instruction": "FIMUL m16int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FINCSTP",
      "Description": "Increment Stack-Top Pointer",
      "Url": "https://www.felixcloutier.com/x86/FINCSTP.html",
      "Table": [
        {
          "Opcode": "D9 F7",
          "Instruction": "FINCSTP",
          "CompatLegMode": "Valid",
          "Description": "Increment the TOP field in the FPU status register."
        }
      ]
    },
    {
      "Mnemonic": "FINIT",
      "Description": "Initialize Floating-Point Unit",
      "Url": "https://www.felixcloutier.com/x86/FINIT:FNINIT.html",
      "Table": [
        {
          "Opcode": "9B DB E3",
          "Instruction": "FINIT",
          "CompatLegMode": "Valid",
          "Description": "Initialize FPU after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DB E3",
          "Instruction": "FNINIT*",
          "CompatLegMode": "Valid",
          "Description": "Initialize FPU without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FIST",
      "Description": "Store Integer",
      "Url": "https://www.felixcloutier.com/x86/FIST:FISTP.html",
      "Table": [
        {
          "Opcode": "DF /2",
          "Instruction": "FIST m16int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m16int."
        },
        {
          "Opcode": "DB /2",
          "Instruction": "FIST m32int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m32int."
        },
        {
          "Opcode": "DF /3",
          "Instruction": "FISTP m16int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m16int and pop register stack."
        },
        {
          "Opcode": "DB /3",
          "Instruction": "FISTP m32int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m32int and pop register stack."
        },
        {
          "Opcode": "DF /7",
          "Instruction": "FISTP m64int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m64int and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FISTP",
      "Description": "Store Integer",
      "Url": "https://www.felixcloutier.com/x86/FIST:FISTP.html",
      "Table": [
        {
          "Opcode": "DF /2",
          "Instruction": "FIST m16int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m16int."
        },
        {
          "Opcode": "DB /2",
          "Instruction": "FIST m32int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m32int."
        },
        {
          "Opcode": "DF /3",
          "Instruction": "FISTP m16int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m16int and pop register stack."
        },
        {
          "Opcode": "DB /3",
          "Instruction": "FISTP m32int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m32int and pop register stack."
        },
        {
          "Opcode": "DF /7",
          "Instruction": "FISTP m64int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m64int and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FISTTP",
      "Description": "Store Integer with Truncation",
      "Url": "https://www.felixcloutier.com/x86/FISTTP.html",
      "Table": [
        {
          "Opcode": "DF /1",
          "Instruction": "FISTTP m16int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m16int with truncation."
        },
        {
          "Opcode": "DB /1",
          "Instruction": "FISTTP m32int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m32int with truncation."
        },
        {
          "Opcode": "DD /1",
          "Instruction": "FISTTP m64int",
          "CompatLegMode": "Valid",
          "Description": "Store ST(0) in m64int with truncation."
        }
      ]
    },
    {
      "Mnemonic": "FISUB",
      "Description": "Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUB:FSUBP:FISUB.html",
      "Table": [
        {
          "Opcode": "D8 /4",
          "Instruction": "FSUB m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /4",
          "Instruction": "FSUB m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m64fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 E0+i",
          "Instruction": "FSUB ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC E8+i",
          "Instruction": "FSUB ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE E8+i",
          "Instruction": "FSUBP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E9",
          "Instruction": "FSUBP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(1), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /4",
          "Instruction": "FISUB m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32int from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /4",
          "Instruction": "FISUB m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m16int from ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FISUBR",
      "Description": "Reverse Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUBR:FSUBRP:FISUBR.html",
      "Table": [
        {
          "Opcode": "D8 /5",
          "Instruction": "FSUBR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /5",
          "Instruction": "FSUBR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 E8+i",
          "Instruction": "FSUBR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC E0+i",
          "Instruction": "FSUBR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE E0+i",
          "Instruction": "FSUBRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E1",
          "Instruction": "FSUBRP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(1) from ST(0), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /5",
          "Instruction": "FISUBR m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /5",
          "Instruction": "FISUBR m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FLD",
      "Description": "Load Floating Point Value",
      "Url": "https://www.felixcloutier.com/x86/FLD.html",
      "Table": [
        {
          "Opcode": "D9 /0",
          "Instruction": "FLD m32fp",
          "CompatLegMode": "Valid",
          "Description": "Push m32fp onto the FPU register stack."
        },
        {
          "Opcode": "DD /0",
          "Instruction": "FLD m64fp",
          "CompatLegMode": "Valid",
          "Description": "Push m64fp onto the FPU register stack."
        },
        {
          "Opcode": "DB /5",
          "Instruction": "FLD m80fp",
          "CompatLegMode": "Valid",
          "Description": "Push m80fp onto the FPU register stack."
        },
        {
          "Opcode": "D9 C0+i",
          "Instruction": "FLD ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Push ST(i) onto the FPU register stack."
        }
      ]
    },
    {
      "Mnemonic": "FLD1",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDCW",
      "Description": "Load x87 FPU Control Word",
      "Url": "https://www.felixcloutier.com/x86/FLDCW.html",
      "Table": [
        {
          "Opcode": "D9 /5",
          "Instruction": "FLDCW m2byte",
          "CompatLegMode": "Valid",
          "Description": "Load FPU control word from m2byte."
        }
      ]
    },
    {
      "Mnemonic": "FLDENV",
      "Description": "Load x87 FPU Environment",
      "Url": "https://www.felixcloutier.com/x86/FLDENV.html",
      "Table": [
        {
          "Opcode": "D9 /4",
          "Instruction": "FLDENV m14/28byte",
          "CompatLegMode": "Valid",
          "Description": "Load FPU environment from m14byte or m28byte."
        }
      ]
    },
    {
      "Mnemonic": "FLDL2E",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDL2T",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDLG2",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDLN2",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDPI",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FLDZ",
      "Description": "Load Constant",
      "Url": "https://www.felixcloutier.com/x86/FLD1:FLDL2T:FLDL2E:FLDPI:FLDLG2:FLDLN2:FLDZ.html"
    },
    {
      "Mnemonic": "FMUL",
      "Description": "Multiply",
      "Url": "https://www.felixcloutier.com/x86/FMUL:FMULP:FIMUL.html",
      "Table": [
        {
          "Opcode": "D8 /1",
          "Instruction": "FMUL m32fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /1",
          "Instruction": "FMUL m64fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 C8+i",
          "Instruction": "FMUL ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C8+i",
          "Instruction": "FMUL ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C8+i",
          "Instruction": "FMULP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C9",
          "Instruction": "FMULP",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /1",
          "Instruction": "FIMUL m32int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /1",
          "Instruction": "FIMUL m16int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FMULP",
      "Description": "Multiply",
      "Url": "https://www.felixcloutier.com/x86/FMUL:FMULP:FIMUL.html",
      "Table": [
        {
          "Opcode": "D8 /1",
          "Instruction": "FMUL m32fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /1",
          "Instruction": "FMUL m64fp",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 C8+i",
          "Instruction": "FMUL ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC C8+i",
          "Instruction": "FMUL ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE C8+i",
          "Instruction": "FMULP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(i) by ST(0), store result in ST(i), and pop the register stack."
        },
        {
          "Opcode": "DE C9",
          "Instruction": "FMULP",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(1) by ST(0), store result in ST(1), and pop the register stack."
        },
        {
          "Opcode": "DA /1",
          "Instruction": "FIMUL m32int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /1",
          "Instruction": "FIMUL m16int",
          "CompatLegMode": "Valid",
          "Description": "Multiply ST(0) by m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FNCLEX",
      "Description": "Clear Exceptions",
      "Url": "https://www.felixcloutier.com/x86/FCLEX:FNCLEX.html"
    },
    {
      "Mnemonic": "FNINIT",
      "Description": "Initialize Floating-Point Unit",
      "Url": "https://www.felixcloutier.com/x86/FINIT:FNINIT.html",
      "Table": [
        {
          "Opcode": "9B DB E3",
          "Instruction": "FINIT",
          "CompatLegMode": "Valid",
          "Description": "Initialize FPU after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DB E3",
          "Instruction": "FNINIT*",
          "CompatLegMode": "Valid",
          "Description": "Initialize FPU without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FNOP",
      "Description": "No Operation",
      "Url": "https://www.felixcloutier.com/x86/FNOP.html",
      "Table": [
        {
          "Opcode": "D9 D0",
          "Instruction": "FNOP",
          "CompatLegMode": "Valid",
          "Description": "No operation is performed."
        }
      ]
    },
    {
      "Mnemonic": "FNSAVE",
      "Description": "Store x87 FPU State",
      "Url": "https://www.felixcloutier.com/x86/FSAVE:FNSAVE.html",
      "Table": [
        {
          "Opcode": "9B DD /6",
          "Instruction": "FSAVE m94/108byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU state to m94byte or m108byte after checking for pending unmasked floating-point exceptions. Then re-initialize the FPU."
        },
        {
          "Opcode": "DD /6",
          "Instruction": "FNSAVE* m94/108byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m94byte or m108byte without checking for pending unmasked floating-point exceptions. Then re-initialize the FPU."
        }
      ]
    },
    {
      "Mnemonic": "FNSTCW",
      "Description": "Store x87 FPU Control Word",
      "Url": "https://www.felixcloutier.com/x86/FSTCW:FNSTCW.html",
      "Table": [
        {
          "Opcode": "9B D9 /7",
          "Instruction": "FSTCW m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU control word to m2byte after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "D9 /7",
          "Instruction": "FNSTCW* m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU control word to m2byte without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FNSTENV",
      "Description": "Store x87 FPU Environment",
      "Url": "https://www.felixcloutier.com/x86/FSTENV:FNSTENV.html",
      "Table": [
        {
          "Opcode": "9B D9 /6",
          "Instruction": "FSTENV m14/28byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m14byte or m28byte after checking for pending unmasked floating-point exceptions. Then mask all floating-point exceptions."
        },
        {
          "Opcode": "D9 /6",
          "Instruction": "FNSTENV* m14/28byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m14byte or m28byte without checking for pending unmasked floating-point exceptions. Then mask all floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FNSTSW",
      "Description": "Store x87 FPU Status Word",
      "Url": "https://www.felixcloutier.com/x86/FSTSW:FNSTSW.html",
      "Table": [
        {
          "Opcode": "9B DD /7",
          "Instruction": "FSTSW m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word at m2byte after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "9B DF E0",
          "Instruction": "FSTSW AX",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word in AX register after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DD /7",
          "Instruction": "FNSTSW* m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word at m2byte without checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DF E0",
          "Instruction": "FNSTSW* AX",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word in AX register without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FPATAN",
      "Description": "Partial Arctangent",
      "Url": "https://www.felixcloutier.com/x86/FPATAN.html"
    },
    {
      "Mnemonic": "FPREM",
      "Description": "Partial Remainder",
      "Url": "https://www.felixcloutier.com/x86/FPREM.html",
      "Table": [
        {
          "Opcode": "D9 F8",
          "Instruction": "FPREM",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with the remainder obtained from dividing ST(0) by ST(1)."
        }
      ]
    },
    {
      "Mnemonic": "FPREM1",
      "Description": "Partial Remainder",
      "Url": "https://www.felixcloutier.com/x86/FPREM1.html",
      "Table": [
        {
          "Opcode": "D9 F5",
          "Instruction": "FPREM1",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with the IEEE remainder obtained from dividing ST(0) by ST(1)."
        }
      ]
    },
    {
      "Mnemonic": "FPTAN",
      "Description": "Partial Tangent",
      "Url": "https://www.felixcloutier.com/x86/FPTAN.html",
      "Table": [
        {
          "Opcode": "D9 F2",
          "Instruction": "FPTAN",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with its approximate tangent and push 1 onto the FPU stack."
        }
      ]
    },
    {
      "Mnemonic": "FRNDINT",
      "Description": "Round to Integer",
      "Url": "https://www.felixcloutier.com/x86/FRNDINT.html",
      "Table": [
        {
          "Opcode": "D9 FC",
          "Instruction": "FRNDINT",
          "CompatLegMode": "Valid",
          "Description": "Round ST(0) to an integer."
        }
      ]
    },
    {
      "Mnemonic": "FRSTOR",
      "Description": "Restore x87 FPU State",
      "Url": "https://www.felixcloutier.com/x86/FRSTOR.html",
      "Table": [
        {
          "Opcode": "DD /4",
          "Instruction": "FRSTOR m94/108byte",
          "CompatLegMode": "Valid",
          "Description": "Load FPU state from m94byte or m108byte."
        }
      ]
    },
    {
      "Mnemonic": "FSAVE",
      "Description": "Store x87 FPU State",
      "Url": "https://www.felixcloutier.com/x86/FSAVE:FNSAVE.html",
      "Table": [
        {
          "Opcode": "9B DD /6",
          "Instruction": "FSAVE m94/108byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU state to m94byte or m108byte after checking for pending unmasked floating-point exceptions. Then re-initialize the FPU."
        },
        {
          "Opcode": "DD /6",
          "Instruction": "FNSAVE* m94/108byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m94byte or m108byte without checking for pending unmasked floating-point exceptions. Then re-initialize the FPU."
        }
      ]
    },
    {
      "Mnemonic": "FSCALE",
      "Description": "Scale",
      "Url": "https://www.felixcloutier.com/x86/FSCALE.html",
      "Table": [
        {
          "Opcode": "D9 FD",
          "Instruction": "FSCALE",
          "CompatLegMode": "Valid",
          "Description": "Scale ST(0) by ST(1)."
        }
      ]
    },
    {
      "Mnemonic": "FSIN",
      "Description": "Sine",
      "Url": "https://www.felixcloutier.com/x86/FSIN.html",
      "Table": [
        {
          "Opcode": "D9 FE",
          "Instruction": "FSIN",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(0) with the approximate of its sine."
        }
      ]
    },
    {
      "Mnemonic": "FSINCOS",
      "Description": "Sine and Cosine",
      "Url": "https://www.felixcloutier.com/x86/FSINCOS.html",
      "Table": [
        {
          "Opcode": "D9 FB",
          "Instruction": "FSINCOS",
          "CompatLegMode": "Valid",
          "Description": "Compute the sine and cosine of ST(0); replace ST(0) with the approximate sine, and push the approximate cosine onto the register stack."
        }
      ]
    },
    {
      "Mnemonic": "FSQRT",
      "Description": "Square Root",
      "Url": "https://www.felixcloutier.com/x86/FSQRT.html",
      "Table": [
        {
          "Opcode": "D9 FA",
          "Instruction": "FSQRT",
          "CompatLegMode": "Valid",
          "Description": "Computes square root of ST(0) and stores the result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FST",
      "Description": "Store Floating Point Value",
      "Url": "https://www.felixcloutier.com/x86/FST:FSTP.html",
      "Table": [
        {
          "Opcode": "D9 /2",
          "Instruction": "FST m32fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m32fp."
        },
        {
          "Opcode": "DD /2",
          "Instruction": "FST m64fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m64fp."
        },
        {
          "Opcode": "DD D0+i",
          "Instruction": "FST ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to ST(i)."
        },
        {
          "Opcode": "D9 /3",
          "Instruction": "FSTP m32fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m32fp and pop register stack."
        },
        {
          "Opcode": "DD /3",
          "Instruction": "FSTP m64fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m64fp and pop register stack."
        },
        {
          "Opcode": "DB /7",
          "Instruction": "FSTP m80fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m80fp and pop register stack."
        },
        {
          "Opcode": "DD D8+i",
          "Instruction": "FSTP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to ST(i) and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FSTCW",
      "Description": "Store x87 FPU Control Word",
      "Url": "https://www.felixcloutier.com/x86/FSTCW:FNSTCW.html",
      "Table": [
        {
          "Opcode": "9B D9 /7",
          "Instruction": "FSTCW m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU control word to m2byte after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "D9 /7",
          "Instruction": "FNSTCW* m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU control word to m2byte without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FSTENV",
      "Description": "Store x87 FPU Environment",
      "Url": "https://www.felixcloutier.com/x86/FSTENV:FNSTENV.html",
      "Table": [
        {
          "Opcode": "9B D9 /6",
          "Instruction": "FSTENV m14/28byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m14byte or m28byte after checking for pending unmasked floating-point exceptions. Then mask all floating-point exceptions."
        },
        {
          "Opcode": "D9 /6",
          "Instruction": "FNSTENV* m14/28byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU environment to m14byte or m28byte without checking for pending unmasked floating-point exceptions. Then mask all floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FSTP",
      "Description": "Store Floating Point Value",
      "Url": "https://www.felixcloutier.com/x86/FST:FSTP.html",
      "Table": [
        {
          "Opcode": "D9 /2",
          "Instruction": "FST m32fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m32fp."
        },
        {
          "Opcode": "DD /2",
          "Instruction": "FST m64fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m64fp."
        },
        {
          "Opcode": "DD D0+i",
          "Instruction": "FST ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to ST(i)."
        },
        {
          "Opcode": "D9 /3",
          "Instruction": "FSTP m32fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m32fp and pop register stack."
        },
        {
          "Opcode": "DD /3",
          "Instruction": "FSTP m64fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m64fp and pop register stack."
        },
        {
          "Opcode": "DB /7",
          "Instruction": "FSTP m80fp",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to m80fp and pop register stack."
        },
        {
          "Opcode": "DD D8+i",
          "Instruction": "FSTP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Copy ST(0) to ST(i) and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FSTSW",
      "Description": "Store x87 FPU Status Word",
      "Url": "https://www.felixcloutier.com/x86/FSTSW:FNSTSW.html",
      "Table": [
        {
          "Opcode": "9B DD /7",
          "Instruction": "FSTSW m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word at m2byte after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "9B DF E0",
          "Instruction": "FSTSW AX",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word in AX register after checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DD /7",
          "Instruction": "FNSTSW* m2byte",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word at m2byte without checking for pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "DF E0",
          "Instruction": "FNSTSW* AX",
          "CompatLegMode": "Valid",
          "Description": "Store FPU status word in AX register without checking for pending unmasked floating-point exceptions."
        }
      ]
    },
    {
      "Mnemonic": "FSUB",
      "Description": "Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUB:FSUBP:FISUB.html",
      "Table": [
        {
          "Opcode": "D8 /4",
          "Instruction": "FSUB m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /4",
          "Instruction": "FSUB m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m64fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 E0+i",
          "Instruction": "FSUB ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC E8+i",
          "Instruction": "FSUB ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE E8+i",
          "Instruction": "FSUBP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E9",
          "Instruction": "FSUBP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(1), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /4",
          "Instruction": "FISUB m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32int from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /4",
          "Instruction": "FISUB m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m16int from ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FSUBP",
      "Description": "Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUB:FSUBP:FISUB.html",
      "Table": [
        {
          "Opcode": "D8 /4",
          "Instruction": "FSUB m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC /4",
          "Instruction": "FSUB m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract m64fp from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "D8 E0+i",
          "Instruction": "FSUB ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DC E8+i",
          "Instruction": "FSUB ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(i)."
        },
        {
          "Opcode": "DE E8+i",
          "Instruction": "FSUBP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E9",
          "Instruction": "FSUBP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(1), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /4",
          "Instruction": "FISUB m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m32int from ST(0) and store result in ST(0)."
        },
        {
          "Opcode": "DE /4",
          "Instruction": "FISUB m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract m16int from ST(0) and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FSUBR",
      "Description": "Reverse Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUBR:FSUBRP:FISUBR.html",
      "Table": [
        {
          "Opcode": "D8 /5",
          "Instruction": "FSUBR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /5",
          "Instruction": "FSUBR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 E8+i",
          "Instruction": "FSUBR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC E0+i",
          "Instruction": "FSUBR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE E0+i",
          "Instruction": "FSUBRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E1",
          "Instruction": "FSUBRP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(1) from ST(0), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /5",
          "Instruction": "FISUBR m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /5",
          "Instruction": "FISUBR m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FSUBRP",
      "Description": "Reverse Subtract",
      "Url": "https://www.felixcloutier.com/x86/FSUBR:FSUBRP:FISUBR.html",
      "Table": [
        {
          "Opcode": "D8 /5",
          "Instruction": "FSUBR m32fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32fp and store result in ST(0)."
        },
        {
          "Opcode": "DC /5",
          "Instruction": "FSUBR m64fp",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m64fp and store result in ST(0)."
        },
        {
          "Opcode": "D8 E8+i",
          "Instruction": "FSUBR ST(0), ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from ST(i) and store result in ST(0)."
        },
        {
          "Opcode": "DC E0+i",
          "Instruction": "FSUBR ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0) and store result in ST(i)."
        },
        {
          "Opcode": "DE E0+i",
          "Instruction": "FSUBRP ST(i), ST(0)",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(i) from ST(0), store result in ST(i), and pop register stack."
        },
        {
          "Opcode": "DE E1",
          "Instruction": "FSUBRP",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(1) from ST(0), store result in ST(1), and pop register stack."
        },
        {
          "Opcode": "DA /5",
          "Instruction": "FISUBR m32int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m32int and store result in ST(0)."
        },
        {
          "Opcode": "DE /5",
          "Instruction": "FISUBR m16int",
          "CompatLegMode": "Valid",
          "Description": "Subtract ST(0) from m16int and store result in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FTST",
      "Description": "TEST",
      "Url": "https://www.felixcloutier.com/x86/FTST.html",
      "Table": [
        {
          "Opcode": "D9 E4",
          "Instruction": "FTST",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with 0.0."
        }
      ]
    },
    {
      "Mnemonic": "FUCOM",
      "Description": "Unordered Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FUCOM:FUCOMP:FUCOMPP.html",
      "Table": [
        {
          "Opcode": "DD E0+i",
          "Instruction": "FUCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "DD E1",
          "Instruction": "FUCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "DD E8+i",
          "Instruction": "FUCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "DD E9",
          "Instruction": "FUCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DA E9",
          "Instruction": "FUCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FUCOMI",
      "Description": "Compare Floating Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/FCOMI:FCOMIP:FUCOMI:FUCOMIP.html",
      "Table": [
        {
          "Opcode": "DB F0+i",
          "Instruction": "FCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and set status flags accordingly."
        },
        {
          "Opcode": "DF F0+i",
          "Instruction": "FCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), set status flags accordingly, and pop register stack."
        },
        {
          "Opcode": "DB E8+i",
          "Instruction": "FUCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly."
        },
        {
          "Opcode": "DF E8+i",
          "Instruction": "FUCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FUCOMIP",
      "Description": "Compare Floating Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/FCOMI:FCOMIP:FUCOMI:FUCOMIP.html",
      "Table": [
        {
          "Opcode": "DB F0+i",
          "Instruction": "FCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and set status flags accordingly."
        },
        {
          "Opcode": "DF F0+i",
          "Instruction": "FCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), set status flags accordingly, and pop register stack."
        },
        {
          "Opcode": "DB E8+i",
          "Instruction": "FUCOMI ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, and set status flags accordingly."
        },
        {
          "Opcode": "DF E8+i",
          "Instruction": "FUCOMIP ST, ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i), check for ordered values, set status flags accordingly, and pop register stack."
        }
      ]
    },
    {
      "Mnemonic": "FUCOMP",
      "Description": "Unordered Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FUCOM:FUCOMP:FUCOMPP.html",
      "Table": [
        {
          "Opcode": "DD E0+i",
          "Instruction": "FUCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "DD E1",
          "Instruction": "FUCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "DD E8+i",
          "Instruction": "FUCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "DD E9",
          "Instruction": "FUCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DA E9",
          "Instruction": "FUCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FUCOMPP",
      "Description": "Unordered Compare Floating Point Values",
      "Url": "https://www.felixcloutier.com/x86/FUCOM:FUCOMP:FUCOMPP.html",
      "Table": [
        {
          "Opcode": "DD E0+i",
          "Instruction": "FUCOM ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i)."
        },
        {
          "Opcode": "DD E1",
          "Instruction": "FUCOM",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1)."
        },
        {
          "Opcode": "DD E8+i",
          "Instruction": "FUCOMP ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(i) and pop register stack."
        },
        {
          "Opcode": "DD E9",
          "Instruction": "FUCOMP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack."
        },
        {
          "Opcode": "DA E9",
          "Instruction": "FUCOMPP",
          "CompatLegMode": "Valid",
          "Description": "Compare ST(0) with ST(1) and pop register stack twice."
        }
      ]
    },
    {
      "Mnemonic": "FWAIT",
      "Description": "Wait",
      "Url": "https://www.felixcloutier.com/x86/WAIT:FWAIT.html",
      "Table": [
        {
          "Opcode": "9B",
          "Instruction": "WAIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Check pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "9B",
          "Instruction": "FWAIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Check pending unmasked floating-point exceptions."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "FXAM",
      "Description": "Examine Floating-Point",
      "Url": "https://www.felixcloutier.com/x86/FXAM.html",
      "Table": [
        {
          "Opcode": "D9 E5",
          "Instruction": "FXAM",
          "CompatLegMode": "Valid",
          "Description": "Classify value or number in ST(0)."
        }
      ]
    },
    {
      "Mnemonic": "FXCH",
      "Description": "Exchange Register Contents",
      "Url": "https://www.felixcloutier.com/x86/FXCH.html",
      "Table": [
        {
          "Opcode": "D9 C8+i",
          "Instruction": "FXCH ST(i)",
          "CompatLegMode": "Valid",
          "Description": "Exchange the contents of ST(0) and ST(i)."
        },
        {
          "Opcode": "D9 C9",
          "Instruction": "FXCH",
          "CompatLegMode": "Valid",
          "Description": "Exchange the contents of ST(0) and ST(1)."
        }
      ]
    },
    {
      "Mnemonic": "FXRSTOR",
      "Description": "Restore x87 FPU, MMX, XMM, and MXCSR State",
      "Url": "https://www.felixcloutier.com/x86/FXRSTOR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "FXSAVE",
      "Description": "Save x87 FPU, MMX Technology, and SSE State",
      "Url": "https://www.felixcloutier.com/x86/FXSAVE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "FXTRACT",
      "Description": "Extract Exponent and Significand",
      "Url": "https://www.felixcloutier.com/x86/FXTRACT.html"
    },
    {
      "Mnemonic": "FYL2X",
      "Description": "Compute y ∗ log2x",
      "Url": "https://www.felixcloutier.com/x86/FYL2X.html",
      "Table": [
        {
          "Opcode": "D9 F1",
          "Instruction": "FYL2X",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(1) with (ST(1) ∗ log2ST(0)) and pop the register stack."
        }
      ]
    },
    {
      "Mnemonic": "FYL2XP1",
      "Description": "Compute y ∗ log2(x +1)",
      "Url": "https://www.felixcloutier.com/x86/FYL2XP1.html",
      "Table": [
        {
          "Opcode": "D9 F9",
          "Instruction": "FYL2XP1",
          "CompatLegMode": "Valid",
          "Description": "Replace ST(1) with ST(1) ∗ log2(ST(0) + 1.0) and pop the register stack."
        }
      ]
    },
    {
      "Mnemonic": "HADDPD",
      "Description": "Packed Double-FP Horizontal Add",
      "Url": "https://www.felixcloutier.com/x86/HADDPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "HADDPS",
      "Description": "Packed Single-FP Horizontal Add",
      "Url": "https://www.felixcloutier.com/x86/HADDPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "HLT",
      "Description": "Halt",
      "Url": "https://www.felixcloutier.com/x86/HLT.html",
      "Table": [
        {
          "Opcode": "F4",
          "Instruction": "HLT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Halt"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "HSUBPD",
      "Description": "Packed Double-FP Horizontal Subtract",
      "Url": "https://www.felixcloutier.com/x86/HSUBPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "HSUBPS",
      "Description": "Packed Single-FP Horizontal Subtract",
      "Url": "https://www.felixcloutier.com/x86/HSUBPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "IDIV",
      "Description": "Signed Divide",
      "Url": "https://www.felixcloutier.com/x86/IDIV.html",
      "Table": [
        {
          "Opcode": "F6 /7",
          "Instruction": "IDIV r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Signed divide AX by r/m8, with result stored in: AL ← Quotient, AH ← Remainder."
        },
        {
          "Opcode": "REX + F6 /7",
          "Instruction": "IDIV r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Signed divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder."
        },
        {
          "Opcode": "F7 /7",
          "Instruction": "IDIV r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Signed divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder."
        },
        {
          "Opcode": "F7 /7",
          "Instruction": "IDIV r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Signed divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder."
        },
        {
          "Opcode": "REX.W + F7 /7",
          "Instruction": "IDIV r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Signed divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "IMUL",
      "Description": "Signed Multiply",
      "Url": "https://www.felixcloutier.com/x86/IMUL.html",
      "Table": [
        {
          "Opcode": "F6 /5",
          "Instruction": "IMUL r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "AX← AL ∗ r/m byte."
        },
        {
          "Opcode": "F7 /5",
          "Instruction": "IMUL r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "DX:AX ← AX ∗ r/m word."
        },
        {
          "Opcode": "F7 /5",
          "Instruction": "IMUL r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "EDX:EAX ← EAX ∗ r/m32."
        },
        {
          "Opcode": "REX.W + F7 /5",
          "Instruction": "IMUL r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "RDX:RAX ← RAX ∗ r/m64."
        },
        {
          "Opcode": "0F AF /r",
          "Instruction": "IMUL r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "word register ← word register ∗ r/m16."
        },
        {
          "Opcode": "0F AF /r",
          "Instruction": "IMUL r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "doubleword register ← doubleword register ∗ r/m32."
        },
        {
          "Opcode": "REX.W + 0F AF /r",
          "Instruction": "IMUL r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Quadword register ← Quadword register ∗ r/m64."
        },
        {
          "Opcode": "6B /r ib",
          "Instruction": "IMUL r16, r/m16, imm8",
          "OperandEncoding": "RMI",
          "CompatLegMode": "Valid",
          "Description": "word register ← r/m16 ∗ sign-extended immediate byte."
        },
        {
          "Opcode": "6B /r ib",
          "Instruction": "IMUL r32, r/m32, imm8",
          "OperandEncoding": "RMI",
          "CompatLegMode": "Valid",
          "Description": "doubleword register ← r/m32 ∗ sign-extended immediate byte."
        },
        {
          "Opcode": "REX.W + 6B /r ib",
          "Instruction": "IMUL r64, r/m64, imm8",
          "OperandEncoding": "RMI",
          "CompatLegMode": "N.E.",
          "Description": "Quadword register ← r/m64 ∗ sign-extended immediate byte."
        },
        {
          "Opcode": "69 /r iw",
          "Instruction": "IMUL r16, r/m16, imm16",
          "OperandEncoding": "RMI",
          "CompatLegMode": "Valid",
          "Description": "word register ← r/m16 ∗ immediate word."
        },
        {
          "Opcode": "69 /r id",
          "Instruction": "IMUL r32, r/m32, imm32",
          "OperandEncoding": "RMI",
          "CompatLegMode": "Valid",
          "Description": "doubleword register ← r/m32 ∗ immediate doubleword."
        },
        {
          "Opcode": "REX.W + 69 /r id",
          "Instruction": "IMUL r64, r/m64, imm32",
          "OperandEncoding": "RMI",
          "CompatLegMode": "N.E.",
          "Description": "Quadword register ← r/m64 ∗ immediate doubleword."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8/16/32"
          ]
        }
      ]
    },
    {
      "Mnemonic": "IN",
      "UniqueName": "@in",
      "Description": "Input from Port",
      "Url": "https://www.felixcloutier.com/x86/IN.html",
      "Table": [
        {
          "Opcode": "E4 ib",
          "Instruction": "IN AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Input byte from imm8 I/O port address into AL."
        },
        {
          "Opcode": "E5 ib",
          "Instruction": "IN AX, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Input word from imm8 I/O port address into AX."
        },
        {
          "Opcode": "E5 ib",
          "Instruction": "IN EAX, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Input dword from imm8 I/O port address into EAX."
        },
        {
          "Opcode": "EC",
          "Instruction": "IN AL,DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port in DX into AL."
        },
        {
          "Opcode": "ED",
          "Instruction": "IN AX,DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port in DX into AX."
        },
        {
          "Opcode": "ED",
          "Instruction": "IN EAX,DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port in DX into EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        },
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INC",
      "Description": "Increment by 1",
      "Url": "https://www.felixcloutier.com/x86/INC.html",
      "Table": [
        {
          "Opcode": "FE /0",
          "Instruction": "INC r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Increment r/m byte by 1."
        },
        {
          "Opcode": "REX + FE /0",
          "Instruction": "INC r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Increment r/m byte by 1."
        },
        {
          "Opcode": "FF /0",
          "Instruction": "INC r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Increment r/m word by 1."
        },
        {
          "Opcode": "FF /0",
          "Instruction": "INC r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Increment r/m doubleword by 1."
        },
        {
          "Opcode": "REX.W + FF /0",
          "Instruction": "INC r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Increment r/m quadword by 1."
        },
        {
          "Opcode": "40+ rw**",
          "Instruction": "INC r16",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Increment word register by 1."
        },
        {
          "Opcode": "40+ rd",
          "Instruction": "INC r32",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Increment doubleword register by 1."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        },
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INS",
      "Description": "Input from Port to String",
      "Url": "https://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html",
      "Table": [
        {
          "Opcode": "6C",
          "Instruction": "INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6C",
          "Instruction": "INSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INSB",
      "Description": "Input from Port to String",
      "Url": "https://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html",
      "Table": [
        {
          "Opcode": "6C",
          "Instruction": "INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6C",
          "Instruction": "INSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INSD",
      "Description": "Input from Port to String",
      "Url": "https://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html",
      "Table": [
        {
          "Opcode": "6C",
          "Instruction": "INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6C",
          "Instruction": "INSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INSERTPS",
      "Description": "Insert Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/INSERTPS.html"
    },
    {
      "Mnemonic": "INSW",
      "Description": "Input from Port to String",
      "Url": "https://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html",
      "Table": [
        {
          "Opcode": "6C",
          "Instruction": "INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6C",
          "Instruction": "INSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        },
        {
          "Opcode": "6D",
          "Instruction": "INSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INT_n",
      "Description": "Call to Interrupt Procedure",
      "Url": "https://www.felixcloutier.com/x86/INTn:INTO:INT3:INT1.html",
      "Table": [
        {
          "Opcode": "CC",
          "Instruction": "INT3",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate breakpoint trap."
        },
        {
          "Opcode": "CD ib",
          "Instruction": "INT imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Generate software interrupt with vector specified by immediate byte."
        },
        {
          "Opcode": "CE",
          "Instruction": "INTO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate overflow trap if overflow flag is 1."
        },
        {
          "Opcode": "F1",
          "Instruction": "INT1",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate debug trap."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INT1",
      "Description": "Call to Interrupt Procedure",
      "Url": "https://www.felixcloutier.com/x86/INTn:INTO:INT3:INT1.html",
      "Table": [
        {
          "Opcode": "CC",
          "Instruction": "INT3",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate breakpoint trap."
        },
        {
          "Opcode": "CD ib",
          "Instruction": "INT imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Generate software interrupt with vector specified by immediate byte."
        },
        {
          "Opcode": "CE",
          "Instruction": "INTO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate overflow trap if overflow flag is 1."
        },
        {
          "Opcode": "F1",
          "Instruction": "INT1",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate debug trap."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INT3",
      "Description": "Call to Interrupt Procedure",
      "Url": "https://www.felixcloutier.com/x86/INTn:INTO:INT3:INT1.html",
      "Table": [
        {
          "Opcode": "CC",
          "Instruction": "INT3",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate breakpoint trap."
        },
        {
          "Opcode": "CD ib",
          "Instruction": "INT imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Generate software interrupt with vector specified by immediate byte."
        },
        {
          "Opcode": "CE",
          "Instruction": "INTO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate overflow trap if overflow flag is 1."
        },
        {
          "Opcode": "F1",
          "Instruction": "INT1",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate debug trap."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INTO",
      "Description": "Call to Interrupt Procedure",
      "Url": "https://www.felixcloutier.com/x86/INTn:INTO:INT3:INT1.html",
      "Table": [
        {
          "Opcode": "CC",
          "Instruction": "INT3",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate breakpoint trap."
        },
        {
          "Opcode": "CD ib",
          "Instruction": "INT imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Generate software interrupt with vector specified by immediate byte."
        },
        {
          "Opcode": "CE",
          "Instruction": "INTO",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate overflow trap if overflow flag is 1."
        },
        {
          "Opcode": "F1",
          "Instruction": "INT1",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Generate debug trap."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INVD",
      "Description": "Invalidate Internal Caches",
      "Url": "https://www.felixcloutier.com/x86/INVD.html",
      "Table": [
        {
          "Opcode": "0F 08",
          "Instruction": "INVD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Flush internal caches; initiate flushing of external caches."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "INVLPG",
      "Description": "Invalidate TLB Entries",
      "Url": "https://www.felixcloutier.com/x86/INVLPG.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "INVPCID",
      "Description": "Invalidate Process-Context Identifier",
      "Url": "https://www.felixcloutier.com/x86/INVPCID.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (R)",
            "ModRM:r/m (R)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "IRET",
      "Description": "Interrupt Return",
      "Url": "https://www.felixcloutier.com/x86/IRET:IRETD.html",
      "Table": [
        {
          "Opcode": "CF",
          "Instruction": "IRET",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Interrupt return (16-bit operand size)."
        },
        {
          "Opcode": "CF",
          "Instruction": "IRETD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Interrupt return (32-bit operand size)."
        },
        {
          "Opcode": "REX.W + CF",
          "Instruction": "IRETQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Interrupt return (64-bit operand size)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "IRETD",
      "Description": "Interrupt Return",
      "Url": "https://www.felixcloutier.com/x86/IRET:IRETD.html",
      "Table": [
        {
          "Opcode": "CF",
          "Instruction": "IRET",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Interrupt return (16-bit operand size)."
        },
        {
          "Opcode": "CF",
          "Instruction": "IRETD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Interrupt return (32-bit operand size)."
        },
        {
          "Opcode": "REX.W + CF",
          "Instruction": "IRETQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Interrupt return (64-bit operand size)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "JMP",
      "Description": "Jump",
      "Url": "https://www.felixcloutier.com/x86/JMP.html",
      "Table": [
        {
          "Opcode": "EB cb",
          "Instruction": "JMP rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bits"
        },
        {
          "Opcode": "E9 cw",
          "Instruction": "JMP rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near, relative, displacement relative to next instruction. Not supported in 64-bit mode."
        },
        {
          "Opcode": "E9 cd",
          "Instruction": "JMP rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near, relative, RIP = RIP + 32-bit displacement sign extended to 64-bits"
        },
        {
          "Opcode": "FF /4",
          "Instruction": "JMP r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Jump near, absolute indirect, address = zero-extended r/m16. Not supported in 64-bit mode."
        },
        {
          "Opcode": "FF /4",
          "Instruction": "JMP r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Jump near, absolute indirect, address given in r/m32. Not supported in 64-bit mode."
        },
        {
          "Opcode": "FF /4",
          "Instruction": "JMP r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Jump near, absolute indirect, RIP = 64-Bit offset from register or memory"
        },
        {
          "Opcode": "EA cd",
          "Instruction": "JMP ptr16:16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump far, absolute, address given in operand"
        },
        {
          "Opcode": "EA cp",
          "Instruction": "JMP ptr16:32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump far, absolute, address given in operand"
        },
        {
          "Opcode": "FF /5",
          "Instruction": "JMP m16:16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump far, absolute indirect, address given in m16:16"
        },
        {
          "Opcode": "FF /5",
          "Instruction": "JMP m16:32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump far, absolute indirect, address given in m16:32."
        },
        {
          "Opcode": "REX.W + FF /5",
          "Instruction": "JMP m16:64",
          "OperandEncoding": "D",
          "CompatLegMode": "N.E.",
          "Description": "Jump far, absolute indirect, address given in m16:64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "D",
          "Operands": [
            "Offset"
          ]
        },
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "Jcc",
      "Description": "Jump if Condition Is Met",
      "Url": "https://www.felixcloutier.com/x86/Jcc.html",
      "Table": [
        {
          "Opcode": "77 cb",
          "Instruction": "JA rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "73 cb",
          "Instruction": "JAE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if above or equal (CF=0)."
        },
        {
          "Opcode": "72 cb",
          "Instruction": "JB rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if below (CF=1)."
        },
        {
          "Opcode": "76 cb",
          "Instruction": "JBE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "72 cb",
          "Instruction": "JC rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if carry (CF=1)."
        },
        {
          "Opcode": "E3 cb",
          "Instruction": "JCXZ rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if CX register is 0."
        },
        {
          "Opcode": "E3 cb",
          "Instruction": "JECXZ rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if ECX register is 0."
        },
        {
          "Opcode": "E3 cb",
          "Instruction": "JRCXZ rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "N.E.",
          "Description": "Jump short if RCX register is 0."
        },
        {
          "Opcode": "74 cb",
          "Instruction": "JE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if equal (ZF=1)."
        },
        {
          "Opcode": "7F cb",
          "Instruction": "JG rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "7D cb",
          "Instruction": "JGE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if greater or equal (SF=OF)."
        },
        {
          "Opcode": "7C cb",
          "Instruction": "JL rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if less (SF≠ OF)."
        },
        {
          "Opcode": "7E cb",
          "Instruction": "JLE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "76 cb",
          "Instruction": "JNA rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "72 cb",
          "Instruction": "JNAE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not above or equal (CF=1)."
        },
        {
          "Opcode": "73 cb",
          "Instruction": "JNB rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not below (CF=0)."
        },
        {
          "Opcode": "77 cb",
          "Instruction": "JNBE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "73 cb",
          "Instruction": "JNC rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not carry (CF=0)."
        },
        {
          "Opcode": "75 cb",
          "Instruction": "JNE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not equal (ZF=0)."
        },
        {
          "Opcode": "7E cb",
          "Instruction": "JNG rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "7C cb",
          "Instruction": "JNGE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "7D cb",
          "Instruction": "JNL rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not less (SF=OF)."
        },
        {
          "Opcode": "7F cb",
          "Instruction": "JNLE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "71 cb",
          "Instruction": "JNO rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not overflow (OF=0)."
        },
        {
          "Opcode": "7B cb",
          "Instruction": "JNP rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not parity (PF=0)."
        },
        {
          "Opcode": "79 cb",
          "Instruction": "JNS rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not sign (SF=0)."
        },
        {
          "Opcode": "75 cb",
          "Instruction": "JNZ rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if not zero (ZF=0)."
        },
        {
          "Opcode": "70 cb",
          "Instruction": "JO rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if overflow (OF=1)."
        },
        {
          "Opcode": "7A cb",
          "Instruction": "JP rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if parity (PF=1)."
        },
        {
          "Opcode": "7A cb",
          "Instruction": "JPE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if parity even (PF=1)."
        },
        {
          "Opcode": "7B cb",
          "Instruction": "JPO rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if parity odd (PF=0)."
        },
        {
          "Opcode": "78 cb",
          "Instruction": "JS rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if sign (SF=1)."
        },
        {
          "Opcode": "74 cb",
          "Instruction": "JZ rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump short if zero (ZF = 1)."
        },
        {
          "Opcode": "0F 87 cw",
          "Instruction": "JA rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 87 cd",
          "Instruction": "JA rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 83 cw",
          "Instruction": "JAE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if above or equal (CF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 83 cd",
          "Instruction": "JAE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if above or equal (CF=0)."
        },
        {
          "Opcode": "0F 82 cw",
          "Instruction": "JB rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if below (CF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 82 cd",
          "Instruction": "JB rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if below (CF=1)."
        },
        {
          "Opcode": "0F 86 cw",
          "Instruction": "JBE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 86 cd",
          "Instruction": "JBE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 82 cw",
          "Instruction": "JC rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if carry (CF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 82 cd",
          "Instruction": "JC rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if carry (CF=1)."
        },
        {
          "Opcode": "0F 84 cw",
          "Instruction": "JE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if equal (ZF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 84 cd",
          "Instruction": "JE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if equal (ZF=1)."
        },
        {
          "Opcode": "0F 84 cw",
          "Instruction": "JZ rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if 0 (ZF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 84 cd",
          "Instruction": "JZ rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if 0 (ZF=1)."
        },
        {
          "Opcode": "0F 8F cw",
          "Instruction": "JG rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8F cd",
          "Instruction": "JG rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 8D cw",
          "Instruction": "JGE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if greater or equal (SF=OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8D cd",
          "Instruction": "JGE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if greater or equal (SF=OF)."
        },
        {
          "Opcode": "0F 8C cw",
          "Instruction": "JL rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if less (SF≠ OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8C cd",
          "Instruction": "JL rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if less (SF≠ OF)."
        },
        {
          "Opcode": "0F 8E cw",
          "Instruction": "JLE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8E cd",
          "Instruction": "JLE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 86 cw",
          "Instruction": "JNA rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 86 cd",
          "Instruction": "JNA rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 82 cw",
          "Instruction": "JNAE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not above or equal (CF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 82 cd",
          "Instruction": "JNAE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not above or equal (CF=1)."
        },
        {
          "Opcode": "0F 83 cw",
          "Instruction": "JNB rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not below (CF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 83 cd",
          "Instruction": "JNB rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not below (CF=0)."
        },
        {
          "Opcode": "0F 87 cw",
          "Instruction": "JNBE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 87 cd",
          "Instruction": "JNBE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 83 cw",
          "Instruction": "JNC rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not carry (CF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 83 cd",
          "Instruction": "JNC rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not carry (CF=0)."
        },
        {
          "Opcode": "0F 85 cw",
          "Instruction": "JNE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not equal (ZF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 85 cd",
          "Instruction": "JNE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not equal (ZF=0)."
        },
        {
          "Opcode": "0F 8E cw",
          "Instruction": "JNG rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not greater (ZF=1 or SF≠ OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8E cd",
          "Instruction": "JNG rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 8C cw",
          "Instruction": "JNGE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not greater or equal (SF≠ OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8C cd",
          "Instruction": "JNGE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "0F 8D cw",
          "Instruction": "JNL rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not less (SF=OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8D cd",
          "Instruction": "JNL rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not less (SF=OF)."
        },
        {
          "Opcode": "0F 8F cw",
          "Instruction": "JNLE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8F cd",
          "Instruction": "JNLE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 81 cw",
          "Instruction": "JNO rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not overflow (OF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 81 cd",
          "Instruction": "JNO rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not overflow (OF=0)."
        },
        {
          "Opcode": "0F 8B cw",
          "Instruction": "JNP rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not parity (PF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8B cd",
          "Instruction": "JNP rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not parity (PF=0)."
        },
        {
          "Opcode": "0F 89 cw",
          "Instruction": "JNS rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not sign (SF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 89 cd",
          "Instruction": "JNS rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not sign (SF=0)."
        },
        {
          "Opcode": "0F 85 cw",
          "Instruction": "JNZ rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not zero (ZF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 85 cd",
          "Instruction": "JNZ rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if not zero (ZF=0)."
        },
        {
          "Opcode": "0F 80 cw",
          "Instruction": "JO rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if overflow (OF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 80 cd",
          "Instruction": "JO rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if overflow (OF=1)."
        },
        {
          "Opcode": "0F 8A cw",
          "Instruction": "JP rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity (PF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8A cd",
          "Instruction": "JP rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity (PF=1)."
        },
        {
          "Opcode": "0F 8A cw",
          "Instruction": "JPE rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity even (PF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8A cd",
          "Instruction": "JPE rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity even (PF=1)."
        },
        {
          "Opcode": "0F 8B cw",
          "Instruction": "JPO rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity odd (PF=0). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 8B cd",
          "Instruction": "JPO rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if parity odd (PF=0)."
        },
        {
          "Opcode": "0F 88 cw",
          "Instruction": "JS rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if sign (SF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 88 cd",
          "Instruction": "JS rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if sign (SF=1)."
        },
        {
          "Opcode": "0F 84 cw",
          "Instruction": "JZ rel16",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if 0 (ZF=1). Not supported in 64-bit mode."
        },
        {
          "Opcode": "0F 84 cd",
          "Instruction": "JZ rel32",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Jump near if 0 (ZF=1)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "D",
          "Operands": [
            "Offset"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KADDB",
      "Description": "ADD Two Masks",
      "Url": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KADDD",
      "Description": "ADD Two Masks",
      "Url": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KADDQ",
      "Description": "ADD Two Masks",
      "Url": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KADDW",
      "Description": "ADD Two Masks",
      "Url": "https://www.felixcloutier.com/x86/KADDW:KADDB:KADDQ:KADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDB",
      "Description": "Bitwise Logical AND Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDD",
      "Description": "Bitwise Logical AND Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDNB",
      "Description": "Bitwise Logical AND NOT Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDND",
      "Description": "Bitwise Logical AND NOT Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDNQ",
      "Description": "Bitwise Logical AND NOT Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDNW",
      "Description": "Bitwise Logical AND NOT Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDNW:KANDNB:KANDNQ:KANDND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDQ",
      "Description": "Bitwise Logical AND Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KANDW",
      "Description": "Bitwise Logical AND Masks",
      "Url": "https://www.felixcloutier.com/x86/KANDW:KANDB:KANDQ:KANDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KMOVB",
      "Description": "Move from and to Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w, ModRM:[7:6] must not be 11b)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KMOVD",
      "Description": "Move from and to Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w, ModRM:[7:6] must not be 11b)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KMOVQ",
      "Description": "Move from and to Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w, ModRM:[7:6] must not be 11b)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KMOVW",
      "Description": "Move from and to Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KMOVW:KMOVB:KMOVQ:KMOVD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w, ModRM:[7:6] must not be 11b)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KNOTB",
      "Description": "NOT Mask Register",
      "Url": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KNOTD",
      "Description": "NOT Mask Register",
      "Url": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KNOTQ",
      "Description": "NOT Mask Register",
      "Url": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KNOTW",
      "Description": "NOT Mask Register",
      "Url": "https://www.felixcloutier.com/x86/KNOTW:KNOTB:KNOTQ:KNOTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORB",
      "Description": "Bitwise Logical OR Masks",
      "Url": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORD",
      "Description": "Bitwise Logical OR Masks",
      "Url": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORQ",
      "Description": "Bitwise Logical OR Masks",
      "Url": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORTESTB",
      "Description": "OR Masks And Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORTESTD",
      "Description": "OR Masks And Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORTESTQ",
      "Description": "OR Masks And Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORTESTW",
      "Description": "OR Masks And Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KORTESTW:KORTESTB:KORTESTQ:KORTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KORW",
      "Description": "Bitwise Logical OR Masks",
      "Url": "https://www.felixcloutier.com/x86/KORW:KORB:KORQ:KORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTLB",
      "Description": "Shift Left Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTLD",
      "Description": "Shift Left Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTLQ",
      "Description": "Shift Left Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTLW",
      "Description": "Shift Left Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTLW:KSHIFTLB:KSHIFTLQ:KSHIFTLD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTRB",
      "Description": "Shift Right Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTRD",
      "Description": "Shift Right Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTRQ",
      "Description": "Shift Right Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KSHIFTRW",
      "Description": "Shift Right Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KSHIFTRW:KSHIFTRB:KSHIFTRQ:KSHIFTRD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RRI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KTESTB",
      "Description": "Packed Bit Test Masks and Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KTESTD",
      "Description": "Packed Bit Test Masks and Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KTESTQ",
      "Description": "Packed Bit Test Masks and Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KTESTW",
      "Description": "Packed Bit Test Masks and Set Flags",
      "Url": "https://www.felixcloutier.com/x86/KTESTW:KTESTB:KTESTQ:KTESTD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RR",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KUNPCKBW",
      "Description": "Unpack for Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KUNPCKDQ",
      "Description": "Unpack for Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KUNPCKWD",
      "Description": "Unpack for Mask Registers",
      "Url": "https://www.felixcloutier.com/x86/KUNPCKBW:KUNPCKWD:KUNPCKDQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXNORB",
      "Description": "Bitwise Logical XNOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXNORD",
      "Description": "Bitwise Logical XNOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXNORQ",
      "Description": "Bitwise Logical XNOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXNORW",
      "Description": "Bitwise Logical XNOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXNORW:KXNORB:KXNORQ:KXNORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXORB",
      "Description": "Bitwise Logical XOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXORD",
      "Description": "Bitwise Logical XOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXORQ",
      "Description": "Bitwise Logical XOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "KXORW",
      "Description": "Bitwise Logical XOR Masks",
      "Url": "https://www.felixcloutier.com/x86/KXORW:KXORB:KXORQ:KXORD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.1vvv (r)",
            "ModRM:r/m (r, ModRM:[7:6] must be 11b)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LAHF",
      "Description": "Load Status Flags into AH Register",
      "Url": "https://www.felixcloutier.com/x86/LAHF.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LAR",
      "Description": "Load Access Rights Byte",
      "Url": "https://www.felixcloutier.com/x86/LAR.html",
      "Table": [
        {
          "Opcode": "0F 02 /r",
          "Instruction": "LAR r16, r16/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r16 ← access rights referenced by r16/m16"
        },
        {
          "Opcode": "0F 02 /r",
          "Instruction": "LAR reg, r32/m161",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "reg ← access rights referenced by r32/m16"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LDDQU",
      "Description": "Load Unaligned Integer 128 Bits",
      "Url": "https://www.felixcloutier.com/x86/LDDQU.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LDMXCSR",
      "Description": "Load MXCSR Register",
      "Url": "https://www.felixcloutier.com/x86/LDMXCSR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LDS",
      "Description": "Load Far Pointer",
      "Url": "https://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html",
      "Table": [
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r16 with far pointer from memory."
        },
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B2 /r",
          "Instruction": "LSS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load SS:r64 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r16 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B4 /r",
          "Instruction": "LFS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load FS:r64 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B5 /r",
          "Instruction": "LGS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load GS:r64 with far pointer from memory."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LEA",
      "Description": "Load Effective Address",
      "Url": "https://www.felixcloutier.com/x86/LEA.html",
      "Table": [
        {
          "Opcode": "8D /r",
          "Instruction": "LEA r16,m",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Store effective address for m in register r16."
        },
        {
          "Opcode": "8D /r",
          "Instruction": "LEA r32,m",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Store effective address for m in register r32."
        },
        {
          "Opcode": "REX.W + 8D /r",
          "Instruction": "LEA r64,m",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Store effective address for m in register r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LEAVE",
      "Description": "High Level Procedure Exit",
      "Url": "https://www.felixcloutier.com/x86/LEAVE.html",
      "Table": [
        {
          "Opcode": "C9",
          "Instruction": "LEAVE",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set SP to BP, then pop BP."
        },
        {
          "Opcode": "C9",
          "Instruction": "LEAVE",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set ESP to EBP, then pop EBP."
        },
        {
          "Opcode": "C9",
          "Instruction": "LEAVE",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Set RSP to RBP, then pop RBP."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LES",
      "Description": "Load Far Pointer",
      "Url": "https://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html",
      "Table": [
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r16 with far pointer from memory."
        },
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B2 /r",
          "Instruction": "LSS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load SS:r64 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r16 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B4 /r",
          "Instruction": "LFS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load FS:r64 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B5 /r",
          "Instruction": "LGS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load GS:r64 with far pointer from memory."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LFENCE",
      "Description": "Load Fence",
      "Url": "https://www.felixcloutier.com/x86/LFENCE.html",
      "Table": [
        {
          "Opcode": "NP 0F AE E8",
          "Instruction": "LFENCE",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Serializes load operations."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LFS",
      "Description": "Load Far Pointer",
      "Url": "https://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html",
      "Table": [
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r16 with far pointer from memory."
        },
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B2 /r",
          "Instruction": "LSS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load SS:r64 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r16 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B4 /r",
          "Instruction": "LFS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load FS:r64 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B5 /r",
          "Instruction": "LGS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load GS:r64 with far pointer from memory."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LGDT",
      "Description": "Load Global/Interrupt Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/LGDT:LIDT.html",
      "Table": [
        {
          "Opcode": "0F 01 /2",
          "Instruction": "LGDT m16&amp;32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load m into GDTR."
        },
        {
          "Opcode": "0F 01 /3",
          "Instruction": "LIDT m16&amp;32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load m into IDTR."
        },
        {
          "Opcode": "0F 01 /2",
          "Instruction": "LGDT m16&amp;64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Load m into GDTR."
        },
        {
          "Opcode": "0F 01 /3",
          "Instruction": "LIDT m16&amp;64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Load m into IDTR."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LGS",
      "Description": "Load Far Pointer",
      "Url": "https://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html",
      "Table": [
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r16 with far pointer from memory."
        },
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B2 /r",
          "Instruction": "LSS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load SS:r64 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r16 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B4 /r",
          "Instruction": "LFS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load FS:r64 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B5 /r",
          "Instruction": "LGS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load GS:r64 with far pointer from memory."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LIDT",
      "Description": "Load Global/Interrupt Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/LGDT:LIDT.html",
      "Table": [
        {
          "Opcode": "0F 01 /2",
          "Instruction": "LGDT m16&amp;32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load m into GDTR."
        },
        {
          "Opcode": "0F 01 /3",
          "Instruction": "LIDT m16&amp;32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load m into IDTR."
        },
        {
          "Opcode": "0F 01 /2",
          "Instruction": "LGDT m16&amp;64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Load m into GDTR."
        },
        {
          "Opcode": "0F 01 /3",
          "Instruction": "LIDT m16&amp;64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Load m into IDTR."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LLDT",
      "Description": "Load Local Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/LLDT.html",
      "Table": [
        {
          "Opcode": "0F 00 /2",
          "Instruction": "LLDT r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load segment selector r/m16 into LDTR."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LMSW",
      "Description": "Load Machine Status Word",
      "Url": "https://www.felixcloutier.com/x86/LMSW.html",
      "Table": [
        {
          "Opcode": "0F 01 /6",
          "Instruction": "LMSW r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Loads r/m16 in machine status word of CR0."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LOCK",
      "UniqueName": "@lock",
      "Description": "Assert LOCK# Signal Prefix",
      "Url": "https://www.felixcloutier.com/x86/LOCK.html",
      "Table": [
        {
          "Opcode": "F0",
          "Instruction": "LOCK",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Asserts LOCK# signal for duration of the accompanying instruction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LODS",
      "Description": "Load String",
      "Url": "https://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html",
      "Table": [
        {
          "Opcode": "AC",
          "Instruction": "LODS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        },
        {
          "Opcode": "AC",
          "Instruction": "LODSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LODSB",
      "Description": "Load String",
      "Url": "https://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html",
      "Table": [
        {
          "Opcode": "AC",
          "Instruction": "LODS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        },
        {
          "Opcode": "AC",
          "Instruction": "LODSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LODSD",
      "Description": "Load String",
      "Url": "https://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html",
      "Table": [
        {
          "Opcode": "AC",
          "Instruction": "LODS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        },
        {
          "Opcode": "AC",
          "Instruction": "LODSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LODSQ",
      "Description": "Load String",
      "Url": "https://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html",
      "Table": [
        {
          "Opcode": "AC",
          "Instruction": "LODS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        },
        {
          "Opcode": "AC",
          "Instruction": "LODSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LODSW",
      "Description": "Load String",
      "Url": "https://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html",
      "Table": [
        {
          "Opcode": "AC",
          "Instruction": "LODS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        },
        {
          "Opcode": "AC",
          "Instruction": "LODSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX."
        },
        {
          "Opcode": "AD",
          "Instruction": "LODSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX."
        },
        {
          "Opcode": "REX.W + AD",
          "Instruction": "LODSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load qword at address (R)SI into RAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "LOOP",
      "Description": "Loop According to ECX Counter",
      "Url": "https://www.felixcloutier.com/x86/LOOP:LOOPcc.html",
      "Table": [
        {
          "Opcode": "E2 cb",
          "Instruction": "LOOP rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0."
        },
        {
          "Opcode": "E1 cb",
          "Instruction": "LOOPE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0 and ZF = 1."
        },
        {
          "Opcode": "E0 cb",
          "Instruction": "LOOPNE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0 and ZF = 0."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "D",
          "Operands": [
            "Offset"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LOOPcc",
      "Description": "Loop According to ECX Counter",
      "Url": "https://www.felixcloutier.com/x86/LOOP:LOOPcc.html",
      "Table": [
        {
          "Opcode": "E2 cb",
          "Instruction": "LOOP rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0."
        },
        {
          "Opcode": "E1 cb",
          "Instruction": "LOOPE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0 and ZF = 1."
        },
        {
          "Opcode": "E0 cb",
          "Instruction": "LOOPNE rel8",
          "OperandEncoding": "D",
          "CompatLegMode": "Valid",
          "Description": "Decrement count; jump short if count ≠ 0 and ZF = 0."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "D",
          "Operands": [
            "Offset"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LSL",
      "Description": "Load Segment Limit",
      "Url": "https://www.felixcloutier.com/x86/LSL.html",
      "Table": [
        {
          "Opcode": "0F 03 /r",
          "Instruction": "LSL r16, r16/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load: r16 ← segment limit, selector r16/m16."
        },
        {
          "Opcode": "0F 03 /r",
          "Instruction": "LSL r32, r32/m16*",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load: r32 ← segment limit, selector r32/m16."
        },
        {
          "Opcode": "REX.W + 0F 03 /r",
          "Instruction": "LSL r64, r32/m16*",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load: r64 ← segment limit, selector r32/m16"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LSS",
      "Description": "Load Far Pointer",
      "Url": "https://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html",
      "Table": [
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r16 with far pointer from memory."
        },
        {
          "Opcode": "C5 /r",
          "Instruction": "LDS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load DS:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B2 /r",
          "Instruction": "LSS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load SS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B2 /r",
          "Instruction": "LSS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load SS:r64 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r16 with far pointer from memory."
        },
        {
          "Opcode": "C4 /r",
          "Instruction": "LES r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load ES:r32 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B4 /r",
          "Instruction": "LFS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load FS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B4 /r",
          "Instruction": "LFS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load FS:r64 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r16,m16:16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r16 with far pointer from memory."
        },
        {
          "Opcode": "0F B5 /r",
          "Instruction": "LGS r32,m16:32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Load GS:r32 with far pointer from memory."
        },
        {
          "Opcode": "REX + 0F B5 /r",
          "Instruction": "LGS r64,m16:64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Load GS:r64 with far pointer from memory."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LTR",
      "Description": "Load Task Register",
      "Url": "https://www.felixcloutier.com/x86/LTR.html",
      "Table": [
        {
          "Opcode": "0F 00 /3",
          "Instruction": "LTR r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Load r/m16 into task register."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "LZCNT",
      "Description": "Count the Number of Leading Zero Bits",
      "Url": "https://www.felixcloutier.com/x86/LZCNT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MASKMOVDQU",
      "Description": "Store Selected Bytes of Double Quadword",
      "Url": "https://www.felixcloutier.com/x86/MASKMOVDQU.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MASKMOVQ",
      "Description": "Store Selected Bytes of Quadword",
      "Url": "https://www.felixcloutier.com/x86/MASKMOVQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MAXPD",
      "Description": "Maximum of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MAXPD.html"
    },
    {
      "Mnemonic": "MAXPS",
      "Description": "Maximum of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MAXPS.html"
    },
    {
      "Mnemonic": "MAXSD",
      "Description": "Return Maximum Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MAXSD.html"
    },
    {
      "Mnemonic": "MAXSS",
      "Description": "Return Maximum Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MAXSS.html"
    },
    {
      "Mnemonic": "MFENCE",
      "Description": "Memory Fence",
      "Url": "https://www.felixcloutier.com/x86/MFENCE.html"
    },
    {
      "Mnemonic": "MINPD",
      "Description": "Minimum of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MINPD.html"
    },
    {
      "Mnemonic": "MINPS",
      "Description": "Minimum of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MINPS.html"
    },
    {
      "Mnemonic": "MINSD",
      "Description": "Return Minimum Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MINSD.html"
    },
    {
      "Mnemonic": "MINSS",
      "Description": "Return Minimum Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MINSS.html"
    },
    {
      "Mnemonic": "MONITOR",
      "Description": "Set Up Monitor Address",
      "Url": "https://www.felixcloutier.com/x86/MONITOR.html"
    },
    {
      "Mnemonic": "MOV",
      "Description": "Move",
      "Url": "https://www.felixcloutier.com/x86/MOV.html",
      "Table": [
        {
          "Opcode": "88 /r",
          "Instruction": "MOV r/m8,r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move r8 to r/m8."
        },
        {
          "Opcode": "REX + 88 /r",
          "Instruction": "MOV r/m8***,r8***",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Move r8 to r/m8."
        },
        {
          "Opcode": "89 /r",
          "Instruction": "MOV r/m16,r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move r16 to r/m16."
        },
        {
          "Opcode": "89 /r",
          "Instruction": "MOV r/m32,r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move r32 to r/m32."
        },
        {
          "Opcode": "REX.W + 89 /r",
          "Instruction": "MOV r/m64,r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Move r64 to r/m64."
        },
        {
          "Opcode": "8A /r",
          "Instruction": "MOV r8,r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move r/m8 to r8."
        },
        {
          "Opcode": "REX + 8A /r",
          "Instruction": "MOV r8***,r/m8***",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move r/m8 to r8."
        },
        {
          "Opcode": "8B /r",
          "Instruction": "MOV r16,r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move r/m16 to r16."
        },
        {
          "Opcode": "8B /r",
          "Instruction": "MOV r32,r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move r/m32 to r32."
        },
        {
          "Opcode": "REX.W + 8B /r",
          "Instruction": "MOV r64,r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move r/m64 to r64."
        },
        {
          "Opcode": "8C /r",
          "Instruction": "MOV r/m16,Sreg**",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move segment register to r/m16."
        },
        {
          "Opcode": "REX.W + 8C /r",
          "Instruction": "MOV r16/r32/m16, Sreg**",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move zero extended 16-bit segment register to r16/r32/r64/m16."
        },
        {
          "Opcode": "REX.W + 8C /r",
          "Instruction": "MOV r64/m16, Sreg**",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move zero extended 16-bit segment register to r64/m16."
        },
        {
          "Opcode": "8E /r",
          "Instruction": "MOV Sreg,r/m16**",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move r/m16 to segment register."
        },
        {
          "Opcode": "REX.W + 8E /r",
          "Instruction": "MOV Sreg,r/m64**",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move lower 16 bits of r/m64 to segment register."
        },
        {
          "Opcode": "A0",
          "Instruction": "MOV AL,moffs8*",
          "OperandEncoding": "FD",
          "CompatLegMode": "Valid",
          "Description": "Move byte at (seg:offset) to AL."
        },
        {
          "Opcode": "REX.W + A0",
          "Instruction": "MOV AL,moffs8*",
          "OperandEncoding": "FD",
          "CompatLegMode": "N.E.",
          "Description": "Move byte at (offset) to AL."
        },
        {
          "Opcode": "A1",
          "Instruction": "MOV AX,moffs16*",
          "OperandEncoding": "FD",
          "CompatLegMode": "Valid",
          "Description": "Move word at (seg:offset) to AX."
        },
        {
          "Opcode": "A1",
          "Instruction": "MOV EAX,moffs32*",
          "OperandEncoding": "FD",
          "CompatLegMode": "Valid",
          "Description": "Move doubleword at (seg:offset) to EAX."
        },
        {
          "Opcode": "REX.W + A1",
          "Instruction": "MOV RAX,moffs64*",
          "OperandEncoding": "FD",
          "CompatLegMode": "N.E.",
          "Description": "Move quadword at (offset) to RAX."
        },
        {
          "Opcode": "A2",
          "Instruction": "MOV moffs8,AL",
          "OperandEncoding": "TD",
          "CompatLegMode": "Valid",
          "Description": "Move AL to (seg:offset)."
        },
        {
          "Opcode": "REX.W + A2",
          "Instruction": "MOV moffs8***,AL",
          "OperandEncoding": "TD",
          "CompatLegMode": "N.E.",
          "Description": "Move AL to (offset)."
        },
        {
          "Opcode": "A3",
          "Instruction": "MOV moffs16*,AX",
          "OperandEncoding": "TD",
          "CompatLegMode": "Valid",
          "Description": "Move AX to (seg:offset)."
        },
        {
          "Opcode": "A3",
          "Instruction": "MOV moffs32*,EAX",
          "OperandEncoding": "TD",
          "CompatLegMode": "Valid",
          "Description": "Move EAX to (seg:offset)."
        },
        {
          "Opcode": "REX.W + A3",
          "Instruction": "MOV moffs64*,RAX",
          "OperandEncoding": "TD",
          "CompatLegMode": "N.E.",
          "Description": "Move RAX to (offset)."
        },
        {
          "Opcode": "B0+ rb ib",
          "Instruction": "MOV r8, imm8",
          "OperandEncoding": "OI",
          "CompatLegMode": "Valid",
          "Description": "Move imm8 to r8."
        },
        {
          "Opcode": "REX + B0+ rb ib",
          "Instruction": "MOV r8***, imm8",
          "OperandEncoding": "OI",
          "CompatLegMode": "N.E.",
          "Description": "Move imm8 to r8."
        },
        {
          "Opcode": "B8+ rw iw",
          "Instruction": "MOV r16, imm16",
          "OperandEncoding": "OI",
          "CompatLegMode": "Valid",
          "Description": "Move imm16 to r16."
        },
        {
          "Opcode": "B8+ rd id",
          "Instruction": "MOV r32, imm32",
          "OperandEncoding": "OI",
          "CompatLegMode": "Valid",
          "Description": "Move imm32 to r32."
        },
        {
          "Opcode": "REX.W + B8+ rd io",
          "Instruction": "MOV r64, imm64",
          "OperandEncoding": "OI",
          "CompatLegMode": "N.E.",
          "Description": "Move imm64 to r64."
        },
        {
          "Opcode": "C6 /0 ib",
          "Instruction": "MOV r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Move imm8 to r/m8."
        },
        {
          "Opcode": "REX + C6 /0 ib",
          "Instruction": "MOV r/m8***, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Move imm8 to r/m8."
        },
        {
          "Opcode": "C7 /0 iw",
          "Instruction": "MOV r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Move imm16 to r/m16."
        },
        {
          "Opcode": "C7 /0 id",
          "Instruction": "MOV r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Move imm32 to r/m32."
        },
        {
          "Opcode": "REX.W + C7 /0 id",
          "Instruction": "MOV r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Move imm32 sign extended to 64-bits to r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "FD",
          "Operands": [
            "AL/AX/EAX/RAX",
            "Moffs"
          ]
        },
        {
          "OperandEncoding": "TD",
          "Operands": [
            "Moffs (w)",
            "AL/AX/EAX/RAX"
          ]
        },
        {
          "OperandEncoding": "OI",
          "Operands": [
            "opcode + rd (w)",
            "imm8/16/32/64"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8/16/32/64"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOV",
      "UniqueName": "mov_cr",
      "Description": "Move to/from Control Registers",
      "Url": "https://www.felixcloutier.com/x86/MOV-1.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOV",
      "UniqueName": "mov_dr",
      "Description": "Move to/from Debug Registers",
      "Url": "https://www.felixcloutier.com/x86/MOV-2.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVAPD",
      "Description": "Move Aligned Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVAPD.html"
    },
    {
      "Mnemonic": "MOVAPS",
      "Description": "Move Aligned Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVAPS.html"
    },
    {
      "Mnemonic": "MOVBE",
      "Description": "Move Data After Swapping Bytes",
      "Url": "https://www.felixcloutier.com/x86/MOVBE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVD",
      "Description": "Move Doubleword/Move Quadword",
      "Url": "https://www.felixcloutier.com/x86/MOVD:MOVQ.html"
    },
    {
      "Mnemonic": "MOVDDUP",
      "Description": "Replicate Double FP Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDDUP.html"
    },
    {
      "Mnemonic": "MOVDQ2Q",
      "Description": "Move Quadword from XMM to MMX Technology Register",
      "Url": "https://www.felixcloutier.com/x86/MOVDQ2Q.html"
    },
    {
      "Mnemonic": "MOVDQA",
      "Description": "Move Aligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
    },
    {
      "Mnemonic": "MOVDQU",
      "Description": "Move Unaligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
    },
    {
      "Mnemonic": "MOVHLPS",
      "Description": "Move Packed Single-Precision Floating-Point Values High to Low",
      "Url": "https://www.felixcloutier.com/x86/MOVHLPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVHPD",
      "Description": "Move High Packed Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MOVHPD.html"
    },
    {
      "Mnemonic": "MOVHPS",
      "Description": "Move High Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVHPS.html"
    },
    {
      "Mnemonic": "MOVLHPS",
      "Description": "Move Packed Single-Precision Floating-Point Values Low to High",
      "Url": "https://www.felixcloutier.com/x86/MOVLHPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVLPD",
      "Description": "Move Low Packed Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MOVLPD.html"
    },
    {
      "Mnemonic": "MOVLPS",
      "Description": "Move Low Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVLPS.html"
    },
    {
      "Mnemonic": "MOVMSKPD",
      "Description": "Extract Packed Double-Precision Floating-Point Sign Mask",
      "Url": "https://www.felixcloutier.com/x86/MOVMSKPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVMSKPS",
      "Description": "Extract Packed Single-Precision Floating-Point Sign Mask",
      "Url": "https://www.felixcloutier.com/x86/MOVMSKPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVNTDQ",
      "Description": "Store Packed Integers Using Non-Temporal Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTDQ.html"
    },
    {
      "Mnemonic": "MOVNTDQA",
      "Description": "Load Double Quadword Non-Temporal Aligned Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTDQA.html"
    },
    {
      "Mnemonic": "MOVNTI",
      "Description": "Store Doubleword Using Non-Temporal Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTI.html",
      "Table": [
        {
          "Opcode": "NP 0F C3 /r",
          "Instruction": "MOVNTI m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move doubleword from r32 to m32 using non-temporal hint."
        },
        {
          "Opcode": "NP REX.W + 0F C3 /r",
          "Instruction": "MOVNTI m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Move quadword from r64 to m64 using non-temporal hint."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVNTPD",
      "Description": "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTPD.html"
    },
    {
      "Mnemonic": "MOVNTPS",
      "Description": "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTPS.html"
    },
    {
      "Mnemonic": "MOVNTQ",
      "Description": "Store of Quadword Using Non-Temporal Hint",
      "Url": "https://www.felixcloutier.com/x86/MOVNTQ.html",
      "Table": [
        {
          "Opcode": "NP 0F E7 /r",
          "Instruction": "MOVNTQ m64, mm",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Move quadword from mm to m64 using non-temporal hint."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVQ",
      "UniqueName": "movq_1",
      "Description": "Move Doubleword/Move Quadword",
      "Url": "https://www.felixcloutier.com/x86/MOVD:MOVQ.html"
    },
    {
      "Mnemonic": "MOVQ",
      "UniqueName": "movq_2",
      "Description": "Move Quadword",
      "Url": "https://www.felixcloutier.com/x86/MOVQ.html"
    },
    {
      "Mnemonic": "MOVQ2DQ",
      "Description": "Move Quadword from MMX Technology to XMM Register",
      "Url": "https://www.felixcloutier.com/x86/MOVQ2DQ.html",
      "Table": [
        {
          "Opcode": "F3 0F D6 /r",
          "Instruction": "MOVQ2DQ xmm, mm",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move quadword from mmx to low quadword of xmm."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVS",
      "Description": "Move Data from String to String",
      "Url": "https://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html",
      "Table": [
        {
          "Opcode": "A4",
          "Instruction": "MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A4",
          "Instruction": "MOVSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "MOVSB",
      "Description": "Move Data from String to String",
      "Url": "https://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html",
      "Table": [
        {
          "Opcode": "A4",
          "Instruction": "MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A4",
          "Instruction": "MOVSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "MOVSD",
      "Description": "Move Data from String to String",
      "Url": "https://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html",
      "Table": [
        {
          "Opcode": "A4",
          "Instruction": "MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A4",
          "Instruction": "MOVSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "MOVSD",
      "UniqueName": "movsd_fp",
      "Description": "Move or Merge Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MOVSD.html"
    },
    {
      "Mnemonic": "MOVSHDUP",
      "Description": "Replicate Single FP Values",
      "Url": "https://www.felixcloutier.com/x86/MOVSHDUP.html"
    },
    {
      "Mnemonic": "MOVSLDUP",
      "Description": "Replicate Single FP Values",
      "Url": "https://www.felixcloutier.com/x86/MOVSLDUP.html"
    },
    {
      "Mnemonic": "MOVSQ",
      "Description": "Move Data from String to String",
      "Url": "https://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html",
      "Table": [
        {
          "Opcode": "A4",
          "Instruction": "MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A4",
          "Instruction": "MOVSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "MOVSS",
      "Description": "Move or Merge Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MOVSS.html"
    },
    {
      "Mnemonic": "MOVSW",
      "Description": "Move Data from String to String",
      "Url": "https://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html",
      "Table": [
        {
          "Opcode": "A4",
          "Instruction": "MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A4",
          "Instruction": "MOVSB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "A5",
          "Instruction": "MOVSD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI."
        },
        {
          "Opcode": "REX.W + A5",
          "Instruction": "MOVSQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move qword from address (R|E)SI to (R|E)DI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "MOVSX",
      "Description": "Move with Sign-Extension",
      "Url": "https://www.felixcloutier.com/x86/MOVSX:MOVSXD.html",
      "Table": [
        {
          "Opcode": "0F BE /r",
          "Instruction": "MOVSX r16, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to word with sign-extension."
        },
        {
          "Opcode": "0F BE /r",
          "Instruction": "MOVSX r32, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to doubleword with sign-extension."
        },
        {
          "Opcode": "REX.W + 0F BE /r",
          "Instruction": "MOVSX r64, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move byte to quadword with sign-extension."
        },
        {
          "Opcode": "0F BF /r",
          "Instruction": "MOVSX r32, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move word to doubleword, with sign-extension."
        },
        {
          "Opcode": "REX.W + 0F BF /r",
          "Instruction": "MOVSX r64, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move word to quadword with sign-extension."
        },
        {
          "Opcode": "63 /r*",
          "Instruction": "MOVSXD r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move word to word with sign-extension."
        },
        {
          "Opcode": "63 /r*",
          "Instruction": "MOVSXD r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move doubleword to doubleword with sign-extension."
        },
        {
          "Opcode": "REX.W + 63 /r",
          "Instruction": "MOVSXD r64, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move doubleword to quadword with sign-extension."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVSXD",
      "Description": "Move with Sign-Extension",
      "Url": "https://www.felixcloutier.com/x86/MOVSX:MOVSXD.html",
      "Table": [
        {
          "Opcode": "0F BE /r",
          "Instruction": "MOVSX r16, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to word with sign-extension."
        },
        {
          "Opcode": "0F BE /r",
          "Instruction": "MOVSX r32, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to doubleword with sign-extension."
        },
        {
          "Opcode": "REX.W + 0F BE /r",
          "Instruction": "MOVSX r64, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move byte to quadword with sign-extension."
        },
        {
          "Opcode": "0F BF /r",
          "Instruction": "MOVSX r32, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move word to doubleword, with sign-extension."
        },
        {
          "Opcode": "REX.W + 0F BF /r",
          "Instruction": "MOVSX r64, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move word to quadword with sign-extension."
        },
        {
          "Opcode": "63 /r*",
          "Instruction": "MOVSXD r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move word to word with sign-extension."
        },
        {
          "Opcode": "63 /r*",
          "Instruction": "MOVSXD r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move doubleword to doubleword with sign-extension."
        },
        {
          "Opcode": "REX.W + 63 /r",
          "Instruction": "MOVSXD r64, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move doubleword to quadword with sign-extension."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MOVUPD",
      "Description": "Move Unaligned Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVUPD.html"
    },
    {
      "Mnemonic": "MOVUPS",
      "Description": "Move Unaligned Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MOVUPS.html"
    },
    {
      "Mnemonic": "MOVZX",
      "Description": "Move with Zero-Extend",
      "Url": "https://www.felixcloutier.com/x86/MOVZX.html",
      "Table": [
        {
          "Opcode": "0F B6 /r",
          "Instruction": "MOVZX r16, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to word with zero-extension."
        },
        {
          "Opcode": "0F B6 /r",
          "Instruction": "MOVZX r32, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move byte to doubleword, zero-extension."
        },
        {
          "Opcode": "REX.W + 0F B6 /r",
          "Instruction": "MOVZX r64, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move byte to quadword, zero-extension."
        },
        {
          "Opcode": "0F B7 /r",
          "Instruction": "MOVZX r32, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Move word to doubleword, zero-extension."
        },
        {
          "Opcode": "REX.W + 0F B7 /r",
          "Instruction": "MOVZX r64, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Move word to quadword, zero-extension."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MPSADBW",
      "Description": "Compute Multiple Packed Sums of Absolute Difference",
      "Url": "https://www.felixcloutier.com/x86/MPSADBW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MUL",
      "Description": "Unsigned Multiply",
      "Url": "https://www.felixcloutier.com/x86/MUL.html",
      "Table": [
        {
          "Opcode": "F6 /4",
          "Instruction": "MUL r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned multiply (AX ← AL ∗ r/m8)."
        },
        {
          "Opcode": "REX + F6 /4",
          "Instruction": "MUL r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned multiply (AX ← AL ∗ r/m8)."
        },
        {
          "Opcode": "F7 /4",
          "Instruction": "MUL r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned multiply (DX:AX ← AX ∗ r/m16)."
        },
        {
          "Opcode": "F7 /4",
          "Instruction": "MUL r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Unsigned multiply (EDX:EAX ← EAX ∗ r/m32)."
        },
        {
          "Opcode": "REX.W + F7 /4",
          "Instruction": "MUL r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned multiply (RDX:RAX ← RAX ∗ r/m64)."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MULPD",
      "Description": "Multiply Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MULPD.html"
    },
    {
      "Mnemonic": "MULPS",
      "Description": "Multiply Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MULPS.html"
    },
    {
      "Mnemonic": "MULSD",
      "Description": "Multiply Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/MULSD.html"
    },
    {
      "Mnemonic": "MULSS",
      "Description": "Multiply Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/MULSS.html"
    },
    {
      "Mnemonic": "MULX",
      "Description": "Unsigned Multiply Without Affecting Flags",
      "Url": "https://www.felixcloutier.com/x86/MULX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (w)",
            "ModRM:r/m (r)",
            "RDX/EDX is implied 64/32 bits source"
          ]
        }
      ]
    },
    {
      "Mnemonic": "MWAIT",
      "Description": "Monitor Wait",
      "Url": "https://www.felixcloutier.com/x86/MWAIT.html",
      "Table": [
        {
          "Opcode": "0F 01 C9",
          "Instruction": "MWAIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "A hint that allows the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "NEG",
      "Description": "Two's Complement Negation",
      "Url": "https://www.felixcloutier.com/x86/NEG.html",
      "Table": [
        {
          "Opcode": "F6 /3",
          "Instruction": "NEG r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Two's complement negate r/m8."
        },
        {
          "Opcode": "REX + F6 /3",
          "Instruction": "NEG r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Two's complement negate r/m8."
        },
        {
          "Opcode": "F7 /3",
          "Instruction": "NEG r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Two's complement negate r/m16."
        },
        {
          "Opcode": "F7 /3",
          "Instruction": "NEG r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Two's complement negate r/m32."
        },
        {
          "Opcode": "REX.W + F7 /3",
          "Instruction": "NEG r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Two's complement negate r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "NOP",
      "Description": "No Operation",
      "Url": "https://www.felixcloutier.com/x86/NOP.html",
      "Table": [
        {
          "Opcode": "NP 90",
          "Instruction": "NOP",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "One byte no-operation instruction."
        },
        {
          "Opcode": "NP 0F 1F /0",
          "Instruction": "NOP r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Multi-byte no-operation instruction."
        },
        {
          "Opcode": "NP 0F 1F /0",
          "Instruction": "NOP r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Multi-byte no-operation instruction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "NOT",
      "Description": "One's Complement Negation",
      "Url": "https://www.felixcloutier.com/x86/NOT.html",
      "Table": [
        {
          "Opcode": "F6 /2",
          "Instruction": "NOT r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Reverse each bit of r/m8."
        },
        {
          "Opcode": "REX + F6 /2",
          "Instruction": "NOT r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Reverse each bit of r/m8."
        },
        {
          "Opcode": "F7 /2",
          "Instruction": "NOT r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Reverse each bit of r/m16."
        },
        {
          "Opcode": "F7 /2",
          "Instruction": "NOT r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Reverse each bit of r/m32."
        },
        {
          "Opcode": "REX.W + F7 /2",
          "Instruction": "NOT r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Reverse each bit of r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "OR",
      "Description": "Logical Inclusive OR",
      "Url": "https://www.felixcloutier.com/x86/OR.html",
      "Table": [
        {
          "Opcode": "0C ib",
          "Instruction": "OR AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AL OR imm8."
        },
        {
          "Opcode": "0D iw",
          "Instruction": "OR AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AX OR imm16."
        },
        {
          "Opcode": "0D id",
          "Instruction": "OR EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "EAX OR imm32."
        },
        {
          "Opcode": "REX.W + 0D id",
          "Instruction": "OR RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "RAX OR imm32 (sign-extended)."
        },
        {
          "Opcode": "80 /1 ib",
          "Instruction": "OR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m8 OR imm8."
        },
        {
          "Opcode": "REX + 80 /1 ib",
          "Instruction": "OR r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m8 OR imm8."
        },
        {
          "Opcode": "81 /1 iw",
          "Instruction": "OR r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m16 OR imm16."
        },
        {
          "Opcode": "81 /1 id",
          "Instruction": "OR r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m32 OR imm32."
        },
        {
          "Opcode": "REX.W + 81 /1 id",
          "Instruction": "OR r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 OR imm32 (sign-extended)."
        },
        {
          "Opcode": "83 /1 ib",
          "Instruction": "OR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m16 OR imm8 (sign-extended)."
        },
        {
          "Opcode": "83 /1 ib",
          "Instruction": "OR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m32 OR imm8 (sign-extended)."
        },
        {
          "Opcode": "REX.W + 83 /1 ib",
          "Instruction": "OR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 OR imm8 (sign-extended)."
        },
        {
          "Opcode": "08 /r",
          "Instruction": "OR r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m8 OR r8."
        },
        {
          "Opcode": "REX + 08 /r",
          "Instruction": "OR r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "r/m8 OR r8."
        },
        {
          "Opcode": "09 /r",
          "Instruction": "OR r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m16 OR r16."
        },
        {
          "Opcode": "09 /r",
          "Instruction": "OR r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m32 OR r32."
        },
        {
          "Opcode": "REX.W + 09 /r",
          "Instruction": "OR r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 OR r64."
        },
        {
          "Opcode": "0A /r",
          "Instruction": "OR r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r8 OR r/m8."
        },
        {
          "Opcode": "REX + 0A /r",
          "Instruction": "OR r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "r8 OR r/m8."
        },
        {
          "Opcode": "0B /r",
          "Instruction": "OR r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r16 OR r/m16."
        },
        {
          "Opcode": "0B /r",
          "Instruction": "OR r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r32 OR r/m32."
        },
        {
          "Opcode": "REX.W + 0B /r",
          "Instruction": "OR r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "r64 OR r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ORPD",
      "Description": "Bitwise Logical OR of Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ORPD.html"
    },
    {
      "Mnemonic": "ORPS",
      "Description": "Bitwise Logical OR of Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ORPS.html"
    },
    {
      "Mnemonic": "OUT",
      "UniqueName": "@out",
      "Description": "Output to Port",
      "Url": "https://www.felixcloutier.com/x86/OUT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8"
          ]
        },
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "OUTS",
      "Description": "Output String to Port",
      "Url": "https://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "OUTSB",
      "Description": "Output String to Port",
      "Url": "https://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "OUTSD",
      "Description": "Output String to Port",
      "Url": "https://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "OUTSW",
      "Description": "Output String to Port",
      "Url": "https://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PABSB",
      "Description": "Packed Absolute Value",
      "Url": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
    },
    {
      "Mnemonic": "PABSD",
      "Description": "Packed Absolute Value",
      "Url": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
    },
    {
      "Mnemonic": "PABSQ",
      "Description": "Packed Absolute Value",
      "Url": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
    },
    {
      "Mnemonic": "PABSW",
      "Description": "Packed Absolute Value",
      "Url": "https://www.felixcloutier.com/x86/PABSB:PABSW:PABSD:PABSQ.html"
    },
    {
      "Mnemonic": "PACKSSDW",
      "Description": "Pack with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PACKSSWB:PACKSSDW.html"
    },
    {
      "Mnemonic": "PACKSSWB",
      "Description": "Pack with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PACKSSWB:PACKSSDW.html"
    },
    {
      "Mnemonic": "PACKUSDW",
      "Description": "Pack with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PACKUSDW.html"
    },
    {
      "Mnemonic": "PACKUSWB",
      "Description": "Pack with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PACKUSWB.html"
    },
    {
      "Mnemonic": "PADDB",
      "Description": "Add Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
    },
    {
      "Mnemonic": "PADDD",
      "Description": "Add Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
    },
    {
      "Mnemonic": "PADDQ",
      "Description": "Add Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
    },
    {
      "Mnemonic": "PADDSB",
      "Description": "Add Packed Signed Integers with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PADDSB:PADDSW.html"
    },
    {
      "Mnemonic": "PADDSW",
      "Description": "Add Packed Signed Integers with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PADDSB:PADDSW.html"
    },
    {
      "Mnemonic": "PADDUSB",
      "Description": "Add Packed Unsigned Integers with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PADDUSB:PADDUSW.html"
    },
    {
      "Mnemonic": "PADDUSW",
      "Description": "Add Packed Unsigned Integers with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PADDUSB:PADDUSW.html"
    },
    {
      "Mnemonic": "PADDW",
      "Description": "Add Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PADDB:PADDW:PADDD:PADDQ.html"
    },
    {
      "Mnemonic": "PALIGNR",
      "Description": "Packed Align Right",
      "Url": "https://www.felixcloutier.com/x86/PALIGNR.html"
    },
    {
      "Mnemonic": "PAND",
      "Description": "Logical AND",
      "Url": "https://www.felixcloutier.com/x86/PAND.html"
    },
    {
      "Mnemonic": "PANDN",
      "Description": "Logical AND NOT",
      "Url": "https://www.felixcloutier.com/x86/PANDN.html"
    },
    {
      "Mnemonic": "PAUSE",
      "Description": "Spin Loop Hint",
      "Url": "https://www.felixcloutier.com/x86/PAUSE.html",
      "Table": [
        {
          "Opcode": "F3 90",
          "Instruction": "PAUSE",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Gives hint to processor that improves performance of spin-wait loops."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PAVGB",
      "Description": "Average Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PAVGB:PAVGW.html"
    },
    {
      "Mnemonic": "PAVGW",
      "Description": "Average Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PAVGB:PAVGW.html"
    },
    {
      "Mnemonic": "PBLENDVB",
      "Description": "Variable Blend Packed Bytes",
      "Url": "https://www.felixcloutier.com/x86/PBLENDVB.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "&lt;XMM0&gt;"
          ]
        },
        {
          "OperandEncoding": "RVMR",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8[7:4]"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PBLENDW",
      "Description": "Blend Packed Words",
      "Url": "https://www.felixcloutier.com/x86/PBLENDW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PCLMULQDQ",
      "Description": "Carry-Less Multiplication Quadword",
      "Url": "https://www.felixcloutier.com/x86/PCLMULQDQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PCMPEQB",
      "Description": "Compare Packed Data for Equal",
      "Url": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
    },
    {
      "Mnemonic": "PCMPEQD",
      "Description": "Compare Packed Data for Equal",
      "Url": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
    },
    {
      "Mnemonic": "PCMPEQQ",
      "Description": "Compare Packed Qword Data for Equal",
      "Url": "https://www.felixcloutier.com/x86/PCMPEQQ.html"
    },
    {
      "Mnemonic": "PCMPEQW",
      "Description": "Compare Packed Data for Equal",
      "Url": "https://www.felixcloutier.com/x86/PCMPEQB:PCMPEQW:PCMPEQD.html"
    },
    {
      "Mnemonic": "PCMPESTRI",
      "Description": "Packed Compare Explicit Length Strings, Return Index",
      "Url": "https://www.felixcloutier.com/x86/PCMPESTRI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PCMPESTRM",
      "Description": "Packed Compare Explicit Length Strings, Return Mask",
      "Url": "https://www.felixcloutier.com/x86/PCMPESTRM.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PCMPGTB",
      "Description": "Compare Packed Signed Integers for Greater Than",
      "Url": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
    },
    {
      "Mnemonic": "PCMPGTD",
      "Description": "Compare Packed Signed Integers for Greater Than",
      "Url": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
    },
    {
      "Mnemonic": "PCMPGTQ",
      "Description": "Compare Packed Data for Greater Than",
      "Url": "https://www.felixcloutier.com/x86/PCMPGTQ.html"
    },
    {
      "Mnemonic": "PCMPGTW",
      "Description": "Compare Packed Signed Integers for Greater Than",
      "Url": "https://www.felixcloutier.com/x86/PCMPGTB:PCMPGTW:PCMPGTD.html"
    },
    {
      "Mnemonic": "PCMPISTRI",
      "Description": "Packed Compare Implicit Length Strings, Return Index",
      "Url": "https://www.felixcloutier.com/x86/PCMPISTRI.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PCMPISTRM",
      "Description": "Packed Compare Implicit Length Strings, Return Mask",
      "Url": "https://www.felixcloutier.com/x86/PCMPISTRM.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PDEP",
      "Description": "Parallel Bits Deposit",
      "Url": "https://www.felixcloutier.com/x86/PDEP.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PEXT",
      "Description": "Parallel Bits Extract",
      "Url": "https://www.felixcloutier.com/x86/PEXT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PEXTRB",
      "Description": "Extract Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
    },
    {
      "Mnemonic": "PEXTRD",
      "Description": "Extract Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
    },
    {
      "Mnemonic": "PEXTRQ",
      "Description": "Extract Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PEXTRB:PEXTRD:PEXTRQ.html"
    },
    {
      "Mnemonic": "PEXTRW",
      "Description": "Extract Word",
      "Url": "https://www.felixcloutier.com/x86/PEXTRW.html"
    },
    {
      "Mnemonic": "PHADDD",
      "Description": "Packed Horizontal Add",
      "Url": "https://www.felixcloutier.com/x86/PHADDW:PHADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHADDSW",
      "Description": "Packed Horizontal Add and Saturate",
      "Url": "https://www.felixcloutier.com/x86/PHADDSW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHADDW",
      "Description": "Packed Horizontal Add",
      "Url": "https://www.felixcloutier.com/x86/PHADDW:PHADDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHMINPOSUW",
      "Description": "Packed Horizontal Word Minimum",
      "Url": "https://www.felixcloutier.com/x86/PHMINPOSUW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHSUBD",
      "Description": "Packed Horizontal Subtract",
      "Url": "https://www.felixcloutier.com/x86/PHSUBW:PHSUBD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (r, w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHSUBSW",
      "Description": "Packed Horizontal Subtract and Saturate",
      "Url": "https://www.felixcloutier.com/x86/PHSUBSW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (r, w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PHSUBW",
      "Description": "Packed Horizontal Subtract",
      "Url": "https://www.felixcloutier.com/x86/PHSUBW:PHSUBD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (r, w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PINSRB",
      "Description": "Insert Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
    },
    {
      "Mnemonic": "PINSRD",
      "Description": "Insert Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
    },
    {
      "Mnemonic": "PINSRQ",
      "Description": "Insert Byte/Dword/Qword",
      "Url": "https://www.felixcloutier.com/x86/PINSRB:PINSRD:PINSRQ.html"
    },
    {
      "Mnemonic": "PINSRW",
      "Description": "Insert Word",
      "Url": "https://www.felixcloutier.com/x86/PINSRW.html"
    },
    {
      "Mnemonic": "PMADDUBSW",
      "Description": "Multiply and Add Packed Signed and Unsigned Bytes",
      "Url": "https://www.felixcloutier.com/x86/PMADDUBSW.html"
    },
    {
      "Mnemonic": "PMADDWD",
      "Description": "Multiply and Add Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMADDWD.html"
    },
    {
      "Mnemonic": "PMAXSB",
      "Description": "Maximum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
    },
    {
      "Mnemonic": "PMAXSD",
      "Description": "Maximum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
    },
    {
      "Mnemonic": "PMAXSQ",
      "Description": "Maximum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
    },
    {
      "Mnemonic": "PMAXSW",
      "Description": "Maximum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXSB:PMAXSW:PMAXSD:PMAXSQ.html"
    },
    {
      "Mnemonic": "PMAXUB",
      "Description": "Maximum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXUB:PMAXUW.html"
    },
    {
      "Mnemonic": "PMAXUD",
      "Description": "Maximum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXUD:PMAXUQ.html"
    },
    {
      "Mnemonic": "PMAXUQ",
      "Description": "Maximum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXUD:PMAXUQ.html"
    },
    {
      "Mnemonic": "PMAXUW",
      "Description": "Maximum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMAXUB:PMAXUW.html"
    },
    {
      "Mnemonic": "PMINSB",
      "Description": "Minimum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINSB:PMINSW.html"
    },
    {
      "Mnemonic": "PMINSD",
      "Description": "Minimum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINSD:PMINSQ.html"
    },
    {
      "Mnemonic": "PMINSQ",
      "Description": "Minimum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINSD:PMINSQ.html"
    },
    {
      "Mnemonic": "PMINSW",
      "Description": "Minimum of Packed Signed Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINSB:PMINSW.html"
    },
    {
      "Mnemonic": "PMINUB",
      "Description": "Minimum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINUB:PMINUW.html"
    },
    {
      "Mnemonic": "PMINUD",
      "Description": "Minimum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINUD:PMINUQ.html"
    },
    {
      "Mnemonic": "PMINUQ",
      "Description": "Minimum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINUD:PMINUQ.html"
    },
    {
      "Mnemonic": "PMINUW",
      "Description": "Minimum of Packed Unsigned Integers",
      "Url": "https://www.felixcloutier.com/x86/PMINUB:PMINUW.html"
    },
    {
      "Mnemonic": "PMOVMSKB",
      "Description": "Move Byte Mask",
      "Url": "https://www.felixcloutier.com/x86/PMOVMSKB.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PMOVSX",
      "Description": "Packed Move with Sign Extend",
      "Url": "https://www.felixcloutier.com/x86/PMOVSX.html"
    },
    {
      "Mnemonic": "PMOVZX",
      "Description": "Packed Move with Zero Extend",
      "Url": "https://www.felixcloutier.com/x86/PMOVZX.html"
    },
    {
      "Mnemonic": "PMULDQ",
      "Description": "Multiply Packed Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/PMULDQ.html"
    },
    {
      "Mnemonic": "PMULHRSW",
      "Description": "Packed Multiply High with Round and Scale",
      "Url": "https://www.felixcloutier.com/x86/PMULHRSW.html"
    },
    {
      "Mnemonic": "PMULHUW",
      "Description": "Multiply Packed Unsigned Integers and Store High Result",
      "Url": "https://www.felixcloutier.com/x86/PMULHUW.html"
    },
    {
      "Mnemonic": "PMULHW",
      "Description": "Multiply Packed Signed Integers and Store High Result",
      "Url": "https://www.felixcloutier.com/x86/PMULHW.html"
    },
    {
      "Mnemonic": "PMULLD",
      "Description": "Multiply Packed Integers and Store Low Result",
      "Url": "https://www.felixcloutier.com/x86/PMULLD:PMULLQ.html"
    },
    {
      "Mnemonic": "PMULLQ",
      "Description": "Multiply Packed Integers and Store Low Result",
      "Url": "https://www.felixcloutier.com/x86/PMULLD:PMULLQ.html"
    },
    {
      "Mnemonic": "PMULLW",
      "Description": "Multiply Packed Signed Integers and Store Low Result",
      "Url": "https://www.felixcloutier.com/x86/PMULLW.html"
    },
    {
      "Mnemonic": "PMULUDQ",
      "Description": "Multiply Packed Unsigned Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/PMULUDQ.html"
    },
    {
      "Mnemonic": "POP",
      "Description": "Pop a Value from the Stack",
      "Url": "https://www.felixcloutier.com/x86/POP.html",
      "Table": [
        {
          "Opcode": "8F /0",
          "Instruction": "POP r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into m16; increment stack pointer."
        },
        {
          "Opcode": "8F /0",
          "Instruction": "POP r/m32",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into m32; increment stack pointer."
        },
        {
          "Opcode": "8F /0",
          "Instruction": "POP r/m64",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack into m64; increment stack pointer. Cannot encode 32-bit operand size."
        },
        {
          "Opcode": "58+ rw",
          "Instruction": "POP r16",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into r16; increment stack pointer."
        },
        {
          "Opcode": "58+ rd",
          "Instruction": "POP r32",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into r32; increment stack pointer."
        },
        {
          "Opcode": "58+ rd",
          "Instruction": "POP r64",
          "OperandEncoding": "O",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack into r64; increment stack pointer. Cannot encode 32-bit operand size."
        },
        {
          "Opcode": "1F",
          "Instruction": "POP DS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into DS; increment stack pointer."
        },
        {
          "Opcode": "07",
          "Instruction": "POP ES",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into ES; increment stack pointer."
        },
        {
          "Opcode": "17",
          "Instruction": "POP SS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into SS; increment stack pointer."
        },
        {
          "Opcode": "0F A1",
          "Instruction": "POP FS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into FS; increment stack pointer by 16 bits."
        },
        {
          "Opcode": "0F A1",
          "Instruction": "POP FS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into FS; increment stack pointer by 32 bits."
        },
        {
          "Opcode": "0F A1",
          "Instruction": "POP FS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack into FS; increment stack pointer by 64 bits."
        },
        {
          "Opcode": "0F A9",
          "Instruction": "POP GS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into GS; increment stack pointer by 16 bits."
        },
        {
          "Opcode": "0F A9",
          "Instruction": "POP GS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into GS; increment stack pointer by 32 bits."
        },
        {
          "Opcode": "0F A9",
          "Instruction": "POP GS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack into GS; increment stack pointer by 64 bits."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        },
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (w)"
          ]
        },
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POPA",
      "Description": "Pop All General-Purpose Registers",
      "Url": "https://www.felixcloutier.com/x86/POPA:POPAD.html",
      "Table": [
        {
          "Opcode": "61",
          "Instruction": "POPA",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop DI, SI, BP, BX, DX, CX, and AX."
        },
        {
          "Opcode": "61",
          "Instruction": "POPAD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POPAD",
      "Description": "Pop All General-Purpose Registers",
      "Url": "https://www.felixcloutier.com/x86/POPA:POPAD.html",
      "Table": [
        {
          "Opcode": "61",
          "Instruction": "POPA",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop DI, SI, BP, BX, DX, CX, and AX."
        },
        {
          "Opcode": "61",
          "Instruction": "POPAD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POPCNT",
      "Description": "Return the Count of Number of Bits Set to 1",
      "Url": "https://www.felixcloutier.com/x86/POPCNT.html",
      "Table": [
        {
          "Opcode": "F3 0F B8 /r",
          "Instruction": "POPCNT r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "POPCNT on r/m16"
        },
        {
          "Opcode": "F3 0F B8 /r",
          "Instruction": "POPCNT r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "POPCNT on r/m32"
        },
        {
          "Opcode": "F3 REX.W 0F B8 /r",
          "Instruction": "POPCNT r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "POPCNT on r/m64"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "POPF",
      "Description": "Pop Stack into EFLAGS Register",
      "Url": "https://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html",
      "Table": [
        {
          "Opcode": "9D",
          "Instruction": "POPF",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into lower 16 bits of EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack and zero-extend into RFLAGS."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POPFD",
      "Description": "Pop Stack into EFLAGS Register",
      "Url": "https://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html",
      "Table": [
        {
          "Opcode": "9D",
          "Instruction": "POPF",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into lower 16 bits of EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack and zero-extend into RFLAGS."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POPFQ",
      "Description": "Pop Stack into EFLAGS Register",
      "Url": "https://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html",
      "Table": [
        {
          "Opcode": "9D",
          "Instruction": "POPF",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into lower 16 bits of EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Pop top of stack into EFLAGS."
        },
        {
          "Opcode": "9D",
          "Instruction": "POPFQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Pop top of stack and zero-extend into RFLAGS."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "POR",
      "Description": "Bitwise Logical OR",
      "Url": "https://www.felixcloutier.com/x86/POR.html"
    },
    {
      "Mnemonic": "PREFETCHW",
      "Description": "Prefetch Data into Caches in Anticipation of a Write",
      "Url": "https://www.felixcloutier.com/x86/PREFETCHW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PREFETCHh",
      "Description": "Prefetch Data Into Caches",
      "Url": "https://www.felixcloutier.com/x86/PREFETCHh.html",
      "Table": [
        {
          "Opcode": "0F 18 /1",
          "Instruction": "PREFETCHT0 m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Move data from m8 closer to the processor using T0 hint."
        },
        {
          "Opcode": "0F 18 /2",
          "Instruction": "PREFETCHT1 m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Move data from m8 closer to the processor using T1 hint."
        },
        {
          "Opcode": "0F 18 /3",
          "Instruction": "PREFETCHT2 m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Move data from m8 closer to the processor using T2 hint."
        },
        {
          "Opcode": "0F 18 /0",
          "Instruction": "PREFETCHNTA m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Move data from m8 closer to the processor using NTA hint."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PSADBW",
      "Description": "Compute Sum of Absolute Differences",
      "Url": "https://www.felixcloutier.com/x86/PSADBW.html"
    },
    {
      "Mnemonic": "PSHUFB",
      "Description": "Packed Shuffle Bytes",
      "Url": "https://www.felixcloutier.com/x86/PSHUFB.html"
    },
    {
      "Mnemonic": "PSHUFD",
      "Description": "Shuffle Packed Doublewords",
      "Url": "https://www.felixcloutier.com/x86/PSHUFD.html"
    },
    {
      "Mnemonic": "PSHUFHW",
      "Description": "Shuffle Packed High Words",
      "Url": "https://www.felixcloutier.com/x86/PSHUFHW.html"
    },
    {
      "Mnemonic": "PSHUFLW",
      "Description": "Shuffle Packed Low Words",
      "Url": "https://www.felixcloutier.com/x86/PSHUFLW.html"
    },
    {
      "Mnemonic": "PSHUFW",
      "Description": "Shuffle Packed Words",
      "Url": "https://www.felixcloutier.com/x86/PSHUFW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PSIGNB",
      "Description": "Packed SIGN",
      "Url": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PSIGND",
      "Description": "Packed SIGN",
      "Url": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PSIGNW",
      "Description": "Packed SIGN",
      "Url": "https://www.felixcloutier.com/x86/PSIGNB:PSIGNW:PSIGND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PSLLD",
      "Description": "Shift Packed Data Left Logical",
      "Url": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
    },
    {
      "Mnemonic": "PSLLDQ",
      "Description": "Shift Double Quadword Left Logical",
      "Url": "https://www.felixcloutier.com/x86/PSLLDQ.html"
    },
    {
      "Mnemonic": "PSLLQ",
      "Description": "Shift Packed Data Left Logical",
      "Url": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
    },
    {
      "Mnemonic": "PSLLW",
      "Description": "Shift Packed Data Left Logical",
      "Url": "https://www.felixcloutier.com/x86/PSLLW:PSLLD:PSLLQ.html"
    },
    {
      "Mnemonic": "PSRAD",
      "Description": "Shift Packed Data Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
    },
    {
      "Mnemonic": "PSRAQ",
      "Description": "Shift Packed Data Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
    },
    {
      "Mnemonic": "PSRAW",
      "Description": "Shift Packed Data Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/PSRAW:PSRAD:PSRAQ.html"
    },
    {
      "Mnemonic": "PSRLD",
      "Description": "Shift Packed Data Right Logical",
      "Url": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
    },
    {
      "Mnemonic": "PSRLDQ",
      "Description": "Shift Double Quadword Right Logical",
      "Url": "https://www.felixcloutier.com/x86/PSRLDQ.html"
    },
    {
      "Mnemonic": "PSRLQ",
      "Description": "Shift Packed Data Right Logical",
      "Url": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
    },
    {
      "Mnemonic": "PSRLW",
      "Description": "Shift Packed Data Right Logical",
      "Url": "https://www.felixcloutier.com/x86/PSRLW:PSRLD:PSRLQ.html"
    },
    {
      "Mnemonic": "PSUBB",
      "Description": "Subtract Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
    },
    {
      "Mnemonic": "PSUBD",
      "Description": "Subtract Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
    },
    {
      "Mnemonic": "PSUBQ",
      "Description": "Subtract Packed Quadword Integers",
      "Url": "https://www.felixcloutier.com/x86/PSUBQ.html"
    },
    {
      "Mnemonic": "PSUBSB",
      "Description": "Subtract Packed Signed Integers with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PSUBSB:PSUBSW.html"
    },
    {
      "Mnemonic": "PSUBSW",
      "Description": "Subtract Packed Signed Integers with Signed Saturation",
      "Url": "https://www.felixcloutier.com/x86/PSUBSB:PSUBSW.html"
    },
    {
      "Mnemonic": "PSUBUSB",
      "Description": "Subtract Packed Unsigned Integers with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PSUBUSB:PSUBUSW.html"
    },
    {
      "Mnemonic": "PSUBUSW",
      "Description": "Subtract Packed Unsigned Integers with Unsigned Saturation",
      "Url": "https://www.felixcloutier.com/x86/PSUBUSB:PSUBUSW.html"
    },
    {
      "Mnemonic": "PSUBW",
      "Description": "Subtract Packed Integers",
      "Url": "https://www.felixcloutier.com/x86/PSUBB:PSUBW:PSUBD.html"
    },
    {
      "Mnemonic": "PTEST",
      "Description": "Logical Compare",
      "Url": "https://www.felixcloutier.com/x86/PTEST.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PTWRITE",
      "Description": "Write Data to a Processor Trace Packet",
      "Url": "https://www.felixcloutier.com/x86/PTWRITE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:rm (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "PUNPCKHBW",
      "Description": "Unpack High Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKHDQ",
      "Description": "Unpack High Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKHQDQ",
      "Description": "Unpack High Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKHWD",
      "Description": "Unpack High Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKHBW:PUNPCKHWD:PUNPCKHDQ:PUNPCKHQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKLBW",
      "Description": "Unpack Low Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKLDQ",
      "Description": "Unpack Low Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKLQDQ",
      "Description": "Unpack Low Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
    },
    {
      "Mnemonic": "PUNPCKLWD",
      "Description": "Unpack Low Data",
      "Url": "https://www.felixcloutier.com/x86/PUNPCKLBW:PUNPCKLWD:PUNPCKLDQ:PUNPCKLQDQ.html"
    },
    {
      "Mnemonic": "PUSH",
      "Description": "Push Word, Doubleword or Quadword Onto the Stack",
      "Url": "https://www.felixcloutier.com/x86/PUSH.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (r)"
          ]
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PUSHA",
      "Description": "Push All General-Purpose Registers",
      "Url": "https://www.felixcloutier.com/x86/PUSHA:PUSHAD.html",
      "Table": [
        {
          "Opcode": "60",
          "Instruction": "PUSHA",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Push AX, CX, DX, BX, original SP, BP, SI, and DI."
        },
        {
          "Opcode": "60",
          "Instruction": "PUSHAD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PUSHAD",
      "Description": "Push All General-Purpose Registers",
      "Url": "https://www.felixcloutier.com/x86/PUSHA:PUSHAD.html",
      "Table": [
        {
          "Opcode": "60",
          "Instruction": "PUSHA",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Push AX, CX, DX, BX, original SP, BP, SI, and DI."
        },
        {
          "Opcode": "60",
          "Instruction": "PUSHAD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PUSHF",
      "Description": "Push EFLAGS Register onto the Stack",
      "Url": "https://www.felixcloutier.com/x86/PUSHF:PUSHFD:PUSHFQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PUSHFD",
      "Description": "Push EFLAGS Register onto the Stack",
      "Url": "https://www.felixcloutier.com/x86/PUSHF:PUSHFD:PUSHFQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PUSHFQ",
      "Description": "Push EFLAGS Register onto the Stack",
      "Url": "https://www.felixcloutier.com/x86/PUSHF:PUSHFD:PUSHFQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "PXOR",
      "Description": "Logical Exclusive OR",
      "Url": "https://www.felixcloutier.com/x86/PXOR.html"
    },
    {
      "Mnemonic": "RCL",
      "Description": "Rotate",
      "Url": "https://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RCPPS",
      "Description": "Compute Reciprocals of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/RCPPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RCPSS",
      "Description": "Compute Reciprocal of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/RCPSS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RCR",
      "Description": "Rotate",
      "Url": "https://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDFSBASE",
      "Description": "Read FS/GS Segment Base",
      "Url": "https://www.felixcloutier.com/x86/RDFSBASE:RDGSBASE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDGSBASE",
      "Description": "Read FS/GS Segment Base",
      "Url": "https://www.felixcloutier.com/x86/RDFSBASE:RDGSBASE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDMSR",
      "Description": "Read from Model Specific Register",
      "Url": "https://www.felixcloutier.com/x86/RDMSR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RDPID",
      "Description": "Read Processor ID",
      "Url": "https://www.felixcloutier.com/x86/RDPID.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "R",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDPKRU",
      "Description": "Read Protection Key Rights for User Pages",
      "Url": "https://www.felixcloutier.com/x86/RDPKRU.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RDPMC",
      "Description": "Read Performance-Monitoring Counters",
      "Url": "https://www.felixcloutier.com/x86/RDPMC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RDRAND",
      "Description": "Read Random Number",
      "Url": "https://www.felixcloutier.com/x86/RDRAND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDSEED",
      "Description": "Read Random SEED",
      "Url": "https://www.felixcloutier.com/x86/RDSEED.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RDTSC",
      "Description": "Read Time-Stamp Counter",
      "Url": "https://www.felixcloutier.com/x86/RDTSC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RDTSCP",
      "Description": "Read Time-Stamp Counter and Processor ID",
      "Url": "https://www.felixcloutier.com/x86/RDTSCP.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "REP",
      "Description": "Repeat String Operation Prefix",
      "Url": "https://www.felixcloutier.com/x86/REP:REPE:REPZ:REPNE:REPNZ.html",
      "Table": [
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX bytes from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX bytes from port DX into [RDI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX words from port DX into ES:[(E)DI.]"
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX doublewords from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS r/m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX default size from port DX into [RDI]."
        },
        {
          "Opcode": "F3 A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX bytes from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A5",
          "Instruction": "REP MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX quadwords from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 6E",
          "Instruction": "REP OUTS DX, r/m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX bytes from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6E",
          "Instruction": "REP OUTS DX, r/m8*",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX bytes from [RSI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX words from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX doublewords from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX default size from [RSI] to port DX."
        },
        {
          "Opcode": "F3 AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX bytes from DS:[(E)SI] to AL."
        },
        {
          "Opcode": "F3 REX.W AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX bytes from [RSI] to AL."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS AX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX words from DS:[(E)SI] to AX."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS EAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX doublewords from DS:[(E)SI] to EAX."
        },
        {
          "Opcode": "F3 REX.W AD",
          "Instruction": "REP LODS RAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX quadwords from [RSI] to RAX."
        },
        {
          "Opcode": "F3 AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX bytes at ES:[(E)DI] with AL."
        },
        {
          "Opcode": "F3 REX.W AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX bytes at [RDI] with AL."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX words at ES:[(E)DI] with AX."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX."
        },
        {
          "Opcode": "F3 REX.W AB",
          "Instruction": "REP STOS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX quadwords at [RDI] with RAX."
        },
        {
          "Opcode": "F3 A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A7",
          "Instruction": "REPE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching quadwords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AL byte starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-AL byte starting at [RDI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AX word starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-EAX doubleword starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AF",
          "Instruction": "REPE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-RAX quadword starting at [RDI]."
        },
        {
          "Opcode": "F2 A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A7",
          "Instruction": "REPNE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching doublewords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AL, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find AL, starting at [RDI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find EAX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AF",
          "Instruction": "REPNE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find RAX, starting at [RDI]."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "REPE",
      "Description": "Repeat String Operation Prefix",
      "Url": "https://www.felixcloutier.com/x86/REP:REPE:REPZ:REPNE:REPNZ.html",
      "Table": [
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX bytes from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX bytes from port DX into [RDI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX words from port DX into ES:[(E)DI.]"
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX doublewords from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS r/m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX default size from port DX into [RDI]."
        },
        {
          "Opcode": "F3 A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX bytes from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A5",
          "Instruction": "REP MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX quadwords from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 6E",
          "Instruction": "REP OUTS DX, r/m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX bytes from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6E",
          "Instruction": "REP OUTS DX, r/m8*",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX bytes from [RSI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX words from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX doublewords from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX default size from [RSI] to port DX."
        },
        {
          "Opcode": "F3 AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX bytes from DS:[(E)SI] to AL."
        },
        {
          "Opcode": "F3 REX.W AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX bytes from [RSI] to AL."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS AX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX words from DS:[(E)SI] to AX."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS EAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX doublewords from DS:[(E)SI] to EAX."
        },
        {
          "Opcode": "F3 REX.W AD",
          "Instruction": "REP LODS RAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX quadwords from [RSI] to RAX."
        },
        {
          "Opcode": "F3 AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX bytes at ES:[(E)DI] with AL."
        },
        {
          "Opcode": "F3 REX.W AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX bytes at [RDI] with AL."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX words at ES:[(E)DI] with AX."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX."
        },
        {
          "Opcode": "F3 REX.W AB",
          "Instruction": "REP STOS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX quadwords at [RDI] with RAX."
        },
        {
          "Opcode": "F3 A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A7",
          "Instruction": "REPE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching quadwords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AL byte starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-AL byte starting at [RDI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AX word starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-EAX doubleword starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AF",
          "Instruction": "REPE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-RAX quadword starting at [RDI]."
        },
        {
          "Opcode": "F2 A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A7",
          "Instruction": "REPNE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching doublewords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AL, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find AL, starting at [RDI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find EAX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AF",
          "Instruction": "REPNE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find RAX, starting at [RDI]."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "REPNE",
      "Description": "Repeat String Operation Prefix",
      "Url": "https://www.felixcloutier.com/x86/REP:REPE:REPZ:REPNE:REPNZ.html",
      "Table": [
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX bytes from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX bytes from port DX into [RDI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX words from port DX into ES:[(E)DI.]"
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX doublewords from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS r/m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX default size from port DX into [RDI]."
        },
        {
          "Opcode": "F3 A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX bytes from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A5",
          "Instruction": "REP MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX quadwords from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 6E",
          "Instruction": "REP OUTS DX, r/m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX bytes from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6E",
          "Instruction": "REP OUTS DX, r/m8*",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX bytes from [RSI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX words from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX doublewords from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX default size from [RSI] to port DX."
        },
        {
          "Opcode": "F3 AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX bytes from DS:[(E)SI] to AL."
        },
        {
          "Opcode": "F3 REX.W AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX bytes from [RSI] to AL."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS AX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX words from DS:[(E)SI] to AX."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS EAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX doublewords from DS:[(E)SI] to EAX."
        },
        {
          "Opcode": "F3 REX.W AD",
          "Instruction": "REP LODS RAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX quadwords from [RSI] to RAX."
        },
        {
          "Opcode": "F3 AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX bytes at ES:[(E)DI] with AL."
        },
        {
          "Opcode": "F3 REX.W AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX bytes at [RDI] with AL."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX words at ES:[(E)DI] with AX."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX."
        },
        {
          "Opcode": "F3 REX.W AB",
          "Instruction": "REP STOS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX quadwords at [RDI] with RAX."
        },
        {
          "Opcode": "F3 A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A7",
          "Instruction": "REPE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching quadwords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AL byte starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-AL byte starting at [RDI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AX word starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-EAX doubleword starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AF",
          "Instruction": "REPE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-RAX quadword starting at [RDI]."
        },
        {
          "Opcode": "F2 A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A7",
          "Instruction": "REPNE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching doublewords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AL, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find AL, starting at [RDI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find EAX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AF",
          "Instruction": "REPNE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find RAX, starting at [RDI]."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "REPNZ",
      "Description": "Repeat String Operation Prefix",
      "Url": "https://www.felixcloutier.com/x86/REP:REPE:REPZ:REPNE:REPNZ.html",
      "Table": [
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX bytes from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX bytes from port DX into [RDI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX words from port DX into ES:[(E)DI.]"
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX doublewords from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS r/m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX default size from port DX into [RDI]."
        },
        {
          "Opcode": "F3 A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX bytes from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A5",
          "Instruction": "REP MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX quadwords from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 6E",
          "Instruction": "REP OUTS DX, r/m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX bytes from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6E",
          "Instruction": "REP OUTS DX, r/m8*",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX bytes from [RSI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX words from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX doublewords from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX default size from [RSI] to port DX."
        },
        {
          "Opcode": "F3 AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX bytes from DS:[(E)SI] to AL."
        },
        {
          "Opcode": "F3 REX.W AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX bytes from [RSI] to AL."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS AX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX words from DS:[(E)SI] to AX."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS EAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX doublewords from DS:[(E)SI] to EAX."
        },
        {
          "Opcode": "F3 REX.W AD",
          "Instruction": "REP LODS RAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX quadwords from [RSI] to RAX."
        },
        {
          "Opcode": "F3 AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX bytes at ES:[(E)DI] with AL."
        },
        {
          "Opcode": "F3 REX.W AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX bytes at [RDI] with AL."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX words at ES:[(E)DI] with AX."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX."
        },
        {
          "Opcode": "F3 REX.W AB",
          "Instruction": "REP STOS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX quadwords at [RDI] with RAX."
        },
        {
          "Opcode": "F3 A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A7",
          "Instruction": "REPE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching quadwords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AL byte starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-AL byte starting at [RDI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AX word starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-EAX doubleword starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AF",
          "Instruction": "REPE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-RAX quadword starting at [RDI]."
        },
        {
          "Opcode": "F2 A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A7",
          "Instruction": "REPNE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching doublewords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AL, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find AL, starting at [RDI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find EAX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AF",
          "Instruction": "REPNE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find RAX, starting at [RDI]."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "REPZ",
      "Description": "Repeat String Operation Prefix",
      "Url": "https://www.felixcloutier.com/x86/REP:REPE:REPZ:REPNE:REPNZ.html",
      "Table": [
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX bytes from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6C",
          "Instruction": "REP INS m8, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX bytes from port DX into [RDI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m16, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX words from port DX into ES:[(E)DI.]"
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Input (E)CX doublewords from port DX into ES:[(E)DI]."
        },
        {
          "Opcode": "F3 6D",
          "Instruction": "REP INS r/m32, DX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Input RCX default size from port DX into [RDI]."
        },
        {
          "Opcode": "F3 A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A4",
          "Instruction": "REP MOVS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX bytes from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 A5",
          "Instruction": "REP MOVS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W A5",
          "Instruction": "REP MOVS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Move RCX quadwords from [RSI] to [RDI]."
        },
        {
          "Opcode": "F3 6E",
          "Instruction": "REP OUTS DX, r/m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX bytes from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6E",
          "Instruction": "REP OUTS DX, r/m8*",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX bytes from [RSI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX words from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Output (E)CX doublewords from DS:[(E)SI] to port DX."
        },
        {
          "Opcode": "F3 REX.W 6F",
          "Instruction": "REP OUTS DX, r/m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Output RCX default size from [RSI] to port DX."
        },
        {
          "Opcode": "F3 AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX bytes from DS:[(E)SI] to AL."
        },
        {
          "Opcode": "F3 REX.W AC",
          "Instruction": "REP LODS AL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX bytes from [RSI] to AL."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS AX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX words from DS:[(E)SI] to AX."
        },
        {
          "Opcode": "F3 AD",
          "Instruction": "REP LODS EAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Load (E)CX doublewords from DS:[(E)SI] to EAX."
        },
        {
          "Opcode": "F3 REX.W AD",
          "Instruction": "REP LODS RAX",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Load RCX quadwords from [RSI] to RAX."
        },
        {
          "Opcode": "F3 AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX bytes at ES:[(E)DI] with AL."
        },
        {
          "Opcode": "F3 REX.W AA",
          "Instruction": "REP STOS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX bytes at [RDI] with AL."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX words at ES:[(E)DI] with AX."
        },
        {
          "Opcode": "F3 AB",
          "Instruction": "REP STOS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX."
        },
        {
          "Opcode": "F3 REX.W AB",
          "Instruction": "REP STOS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Fill RCX quadwords at [RDI] with RAX."
        },
        {
          "Opcode": "F3 A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A6",
          "Instruction": "REPE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 A7",
          "Instruction": "REPE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F3 REX.W A7",
          "Instruction": "REPE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-matching quadwords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F3 AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AL byte starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AE",
          "Instruction": "REPE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-AL byte starting at [RDI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-AX word starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 AF",
          "Instruction": "REPE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find non-EAX doubleword starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F3 REX.W AF",
          "Instruction": "REPE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find non-RAX quadword starting at [RDI]."
        },
        {
          "Opcode": "F2 A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching bytes in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A6",
          "Instruction": "REPNE CMPS m8, m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching bytes in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m16, m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching words in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 A7",
          "Instruction": "REPNE CMPS m32, m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find matching doublewords in ES:[(E)DI] and DS:[(E)SI]."
        },
        {
          "Opcode": "F2 REX.W A7",
          "Instruction": "REPNE CMPS m64, m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find matching doublewords in [RDI] and [RSI]."
        },
        {
          "Opcode": "F2 AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AL, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AE",
          "Instruction": "REPNE SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find AL, starting at [RDI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find AX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 AF",
          "Instruction": "REPNE SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Find EAX, starting at ES:[(E)DI]."
        },
        {
          "Opcode": "F2 REX.W AF",
          "Instruction": "REPNE SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Find RAX, starting at [RDI]."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RET",
      "Description": "Return from Procedure",
      "Url": "https://www.felixcloutier.com/x86/RET.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "I",
          "Operands": [
            "imm16"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROL",
      "Description": "Rotate",
      "Url": "https://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROR",
      "Description": "Rotate",
      "Url": "https://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RORX",
      "Description": "Rotate Right Logical Without Affecting Flags",
      "Url": "https://www.felixcloutier.com/x86/RORX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROUNDPD",
      "Description": "Round Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ROUNDPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROUNDPS",
      "Description": "Round Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ROUNDPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROUNDSD",
      "Description": "Round Scalar Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ROUNDSD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "ROUNDSS",
      "Description": "Round Scalar Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/ROUNDSS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RSM",
      "Description": "Resume from System Management Mode",
      "Url": "https://www.felixcloutier.com/x86/RSM.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "RSQRTPS",
      "Description": "Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/RSQRTPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "RSQRTSS",
      "Description": "Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/RSQRTSS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SAHF",
      "Description": "Store AH into Flags",
      "Url": "https://www.felixcloutier.com/x86/SAHF.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SAL",
      "Description": "Shift",
      "Url": "https://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html",
      "Table": [
        {
          "Opcode": "REX.W + D1 /4",
          "Instruction": "SHL r/m64,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /4",
          "Instruction": "SHL r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /4",
          "Instruction": "SHL r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /4 ib",
          "Instruction": "SHL r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /4 ib",
          "Instruction": "SHL r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, imm8 times."
        },
        {
          "Opcode": "D0 /5",
          "Instruction": "SHR r/m8,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "REX + D0 /5",
          "Instruction": "SHR r/m8**, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "D2 /5",
          "Instruction": "SHR r/m8, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "REX + D2 /5",
          "Instruction": "SHR r/m8**, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "C0 /5 ib",
          "Instruction": "SHR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "REX + C0 /5 ib",
          "Instruction": "SHR r/m8**, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m16, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m16, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, CL times"
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m32, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, once."
        },
        {
          "Opcode": "REX.W + D1 /5",
          "Instruction": "SHR r/m64, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /5",
          "Instruction": "SHR r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /5 ib",
          "Instruction": "SHR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, imm8 times."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (r, w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (r, w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SAR",
      "Description": "Shift",
      "Url": "https://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html",
      "Table": [
        {
          "Opcode": "REX.W + D1 /4",
          "Instruction": "SHL r/m64,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /4",
          "Instruction": "SHL r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /4",
          "Instruction": "SHL r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /4 ib",
          "Instruction": "SHL r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /4 ib",
          "Instruction": "SHL r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, imm8 times."
        },
        {
          "Opcode": "D0 /5",
          "Instruction": "SHR r/m8,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "REX + D0 /5",
          "Instruction": "SHR r/m8**, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "D2 /5",
          "Instruction": "SHR r/m8, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "REX + D2 /5",
          "Instruction": "SHR r/m8**, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "C0 /5 ib",
          "Instruction": "SHR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "REX + C0 /5 ib",
          "Instruction": "SHR r/m8**, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m16, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m16, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, CL times"
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m32, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, once."
        },
        {
          "Opcode": "REX.W + D1 /5",
          "Instruction": "SHR r/m64, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /5",
          "Instruction": "SHR r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /5 ib",
          "Instruction": "SHR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, imm8 times."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (r, w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (r, w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SARX",
      "Description": "Shift Without Affecting Flags",
      "Url": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "VEX.vvvv (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SBB",
      "Description": "Integer Subtraction with Borrow",
      "Url": "https://www.felixcloutier.com/x86/SBB.html",
      "Table": [
        {
          "Opcode": "1C ib",
          "Instruction": "SBB AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm8 from AL."
        },
        {
          "Opcode": "1D iw",
          "Instruction": "SBB AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm16 from AX."
        },
        {
          "Opcode": "1D id",
          "Instruction": "SBB EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm32 from EAX."
        },
        {
          "Opcode": "REX.W + 1D id",
          "Instruction": "SBB RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow sign-extended imm.32 to 64-bits from RAX."
        },
        {
          "Opcode": "80 /3 ib",
          "Instruction": "SBB r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm8 from r/m8."
        },
        {
          "Opcode": "REX + 80 /3 ib",
          "Instruction": "SBB r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow imm8 from r/m8."
        },
        {
          "Opcode": "81 /3 iw",
          "Instruction": "SBB r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm16 from r/m16."
        },
        {
          "Opcode": "81 /3 id",
          "Instruction": "SBB r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow imm32 from r/m32."
        },
        {
          "Opcode": "REX.W + 81 /3 id",
          "Instruction": "SBB r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow sign-extended imm32 to 64-bits from r/m64."
        },
        {
          "Opcode": "83 /3 ib",
          "Instruction": "SBB r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow sign-extended imm8 from r/m16."
        },
        {
          "Opcode": "83 /3 ib",
          "Instruction": "SBB r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow sign-extended imm8 from r/m32."
        },
        {
          "Opcode": "REX.W + 83 /3 ib",
          "Instruction": "SBB r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow sign-extended imm8 from r/m64."
        },
        {
          "Opcode": "18 /r",
          "Instruction": "SBB r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r8 from r/m8."
        },
        {
          "Opcode": "REX + 18 /r",
          "Instruction": "SBB r/m8*, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow r8 from r/m8."
        },
        {
          "Opcode": "19 /r",
          "Instruction": "SBB r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r16 from r/m16."
        },
        {
          "Opcode": "19 /r",
          "Instruction": "SBB r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r32 from r/m32."
        },
        {
          "Opcode": "REX.W + 19 /r",
          "Instruction": "SBB r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow r64 from r/m64."
        },
        {
          "Opcode": "1A /r",
          "Instruction": "SBB r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r/m8 from r8."
        },
        {
          "Opcode": "REX + 1A /r",
          "Instruction": "SBB r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow r/m8 from r8."
        },
        {
          "Opcode": "1B /r",
          "Instruction": "SBB r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r/m16 from r16."
        },
        {
          "Opcode": "1B /r",
          "Instruction": "SBB r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract with borrow r/m32 from r32."
        },
        {
          "Opcode": "REX.W + 1B /r",
          "Instruction": "SBB r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Subtract with borrow r/m64 from r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SCAS",
      "Description": "Scan String",
      "Url": "https://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html",
      "Table": [
        {
          "Opcode": "AE",
          "Instruction": "SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        },
        {
          "Opcode": "AE",
          "Instruction": "SCASB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCASQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SCASB",
      "Description": "Scan String",
      "Url": "https://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html",
      "Table": [
        {
          "Opcode": "AE",
          "Instruction": "SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        },
        {
          "Opcode": "AE",
          "Instruction": "SCASB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCASQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SCASD",
      "Description": "Scan String",
      "Url": "https://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html",
      "Table": [
        {
          "Opcode": "AE",
          "Instruction": "SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        },
        {
          "Opcode": "AE",
          "Instruction": "SCASB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCASQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SCASW",
      "Description": "Scan String",
      "Url": "https://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html",
      "Table": [
        {
          "Opcode": "AE",
          "Instruction": "SCAS m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m16",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCAS m32",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCAS m64",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        },
        {
          "Opcode": "AE",
          "Instruction": "SCASB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASW",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "AF",
          "Instruction": "SCASD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*"
        },
        {
          "Opcode": "REX.W + AF",
          "Instruction": "SCASQ",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Compare RAX with quadword at RDI or EDI then set status flags."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SETcc",
      "Description": "Set Byte on Condition",
      "Url": "https://www.felixcloutier.com/x86/SETcc.html",
      "Table": [
        {
          "Opcode": "0F 97",
          "Instruction": "SETA r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "REX + 0F 97",
          "Instruction": "SETA r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if above (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 93",
          "Instruction": "SETAE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if above or equal (CF=0)."
        },
        {
          "Opcode": "REX + 0F 93",
          "Instruction": "SETAE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if above or equal (CF=0)."
        },
        {
          "Opcode": "0F 92",
          "Instruction": "SETB r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if below (CF=1)."
        },
        {
          "Opcode": "REX + 0F 92",
          "Instruction": "SETB r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if below (CF=1)."
        },
        {
          "Opcode": "0F 96",
          "Instruction": "SETBE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "REX + 0F 96",
          "Instruction": "SETBE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if below or equal (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 92",
          "Instruction": "SETC r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if carry (CF=1)."
        },
        {
          "Opcode": "REX + 0F 92",
          "Instruction": "SETC r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if carry (CF=1)."
        },
        {
          "Opcode": "0F 94",
          "Instruction": "SETE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if equal (ZF=1)."
        },
        {
          "Opcode": "REX + 0F 94",
          "Instruction": "SETE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if equal (ZF=1)."
        },
        {
          "Opcode": "0F 9F",
          "Instruction": "SETG r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "REX + 0F 9F",
          "Instruction": "SETG r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if greater (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 9D",
          "Instruction": "SETGE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if greater or equal (SF=OF)."
        },
        {
          "Opcode": "REX + 0F 9D",
          "Instruction": "SETGE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if greater or equal (SF=OF)."
        },
        {
          "Opcode": "0F 9C",
          "Instruction": "SETL r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if less (SF≠ OF)."
        },
        {
          "Opcode": "REX + 0F 9C",
          "Instruction": "SETL r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if less (SF≠ OF)."
        },
        {
          "Opcode": "0F 9E",
          "Instruction": "SETLE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "REX + 0F 9E",
          "Instruction": "SETLE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if less or equal (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 96",
          "Instruction": "SETNA r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "REX + 0F 96",
          "Instruction": "SETNA r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not above (CF=1 or ZF=1)."
        },
        {
          "Opcode": "0F 92",
          "Instruction": "SETNAE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not above or equal (CF=1)."
        },
        {
          "Opcode": "REX + 0F 92",
          "Instruction": "SETNAE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not above or equal (CF=1)."
        },
        {
          "Opcode": "0F 93",
          "Instruction": "SETNB r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not below (CF=0)."
        },
        {
          "Opcode": "REX + 0F 93",
          "Instruction": "SETNB r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not below (CF=0)."
        },
        {
          "Opcode": "0F 97",
          "Instruction": "SETNBE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "REX + 0F 97",
          "Instruction": "SETNBE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not below or equal (CF=0 and ZF=0)."
        },
        {
          "Opcode": "0F 93",
          "Instruction": "SETNC r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not carry (CF=0)."
        },
        {
          "Opcode": "REX + 0F 93",
          "Instruction": "SETNC r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not carry (CF=0)."
        },
        {
          "Opcode": "0F 95",
          "Instruction": "SETNE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not equal (ZF=0)."
        },
        {
          "Opcode": "REX + 0F 95",
          "Instruction": "SETNE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not equal (ZF=0)."
        },
        {
          "Opcode": "0F 9E",
          "Instruction": "SETNG r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not greater (ZF=1 or SF≠ OF)"
        },
        {
          "Opcode": "REX + 0F 9E",
          "Instruction": "SETNG r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not greater (ZF=1 or SF≠ OF)."
        },
        {
          "Opcode": "0F 9C",
          "Instruction": "SETNGE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "REX + 0F 9C",
          "Instruction": "SETNGE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not greater or equal (SF≠ OF)."
        },
        {
          "Opcode": "0F 9D",
          "Instruction": "SETNL r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not less (SF=OF)."
        },
        {
          "Opcode": "REX + 0F 9D",
          "Instruction": "SETNL r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not less (SF=OF)."
        },
        {
          "Opcode": "0F 9F",
          "Instruction": "SETNLE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "REX + 0F 9F",
          "Instruction": "SETNLE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not less or equal (ZF=0 and SF=OF)."
        },
        {
          "Opcode": "0F 91",
          "Instruction": "SETNO r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not overflow (OF=0)."
        },
        {
          "Opcode": "REX + 0F 91",
          "Instruction": "SETNO r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not overflow (OF=0)."
        },
        {
          "Opcode": "0F 9B",
          "Instruction": "SETNP r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not parity (PF=0)."
        },
        {
          "Opcode": "REX + 0F 9B",
          "Instruction": "SETNP r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not parity (PF=0)."
        },
        {
          "Opcode": "0F 99",
          "Instruction": "SETNS r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not sign (SF=0)."
        },
        {
          "Opcode": "REX + 0F 99",
          "Instruction": "SETNS r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not sign (SF=0)."
        },
        {
          "Opcode": "0F 95",
          "Instruction": "SETNZ r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if not zero (ZF=0)."
        },
        {
          "Opcode": "REX + 0F 95",
          "Instruction": "SETNZ r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if not zero (ZF=0)."
        },
        {
          "Opcode": "0F 90",
          "Instruction": "SETO r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if overflow (OF=1)"
        },
        {
          "Opcode": "REX + 0F 90",
          "Instruction": "SETO r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if overflow (OF=1)."
        },
        {
          "Opcode": "0F 9A",
          "Instruction": "SETP r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if parity (PF=1)."
        },
        {
          "Opcode": "REX + 0F 9A",
          "Instruction": "SETP r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if parity (PF=1)."
        },
        {
          "Opcode": "0F 9A",
          "Instruction": "SETPE r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if parity even (PF=1)."
        },
        {
          "Opcode": "REX + 0F 9A",
          "Instruction": "SETPE r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if parity even (PF=1)."
        },
        {
          "Opcode": "0F 9B",
          "Instruction": "SETPO r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if parity odd (PF=0)."
        },
        {
          "Opcode": "REX + 0F 9B",
          "Instruction": "SETPO r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if parity odd (PF=0)."
        },
        {
          "Opcode": "0F 98",
          "Instruction": "SETS r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if sign (SF=1)."
        },
        {
          "Opcode": "REX + 0F 98",
          "Instruction": "SETS r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if sign (SF=1)."
        },
        {
          "Opcode": "0F 94",
          "Instruction": "SETZ r/m8",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set byte if zero (ZF=1)."
        },
        {
          "Opcode": "REX + 0F 94",
          "Instruction": "SETZ r/m8*",
          "OperandEncoding": "M",
          "CompatLegMode": "N.E.",
          "Description": "Set byte if zero (ZF=1)."
        },
        {}
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SFENCE",
      "Description": "Store Fence",
      "Url": "https://www.felixcloutier.com/x86/SFENCE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SGDT",
      "Description": "Store Global Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/SGDT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA1MSG1",
      "Description": "Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords",
      "Url": "https://www.felixcloutier.com/x86/SHA1MSG1.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA1MSG2",
      "Description": "Perform a Final Calculation for the Next Four SHA1 Message Dwords",
      "Url": "https://www.felixcloutier.com/x86/SHA1MSG2.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA1NEXTE",
      "Description": "Calculate SHA1 State Variable E after Four Rounds",
      "Url": "https://www.felixcloutier.com/x86/SHA1NEXTE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA1RNDS4",
      "Description": "Perform Four Rounds of SHA1 Operation",
      "Url": "https://www.felixcloutier.com/x86/SHA1RNDS4.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA256MSG1",
      "Description": "Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords",
      "Url": "https://www.felixcloutier.com/x86/SHA256MSG1.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA256MSG2",
      "Description": "Perform a Final Calculation for the Next Four SHA256 Message Dwords",
      "Url": "https://www.felixcloutier.com/x86/SHA256MSG2.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHA256RNDS2",
      "Description": "Perform Two Rounds of SHA256 Operation",
      "Url": "https://www.felixcloutier.com/x86/SHA256RNDS2.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMI",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)",
            "Implicit XMM0 (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHL",
      "Description": "Shift",
      "Url": "https://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html",
      "Table": [
        {
          "Opcode": "REX.W + D1 /4",
          "Instruction": "SHL r/m64,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /4",
          "Instruction": "SHL r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /4",
          "Instruction": "SHL r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /4 ib",
          "Instruction": "SHL r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /4 ib",
          "Instruction": "SHL r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, imm8 times."
        },
        {
          "Opcode": "D0 /5",
          "Instruction": "SHR r/m8,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "REX + D0 /5",
          "Instruction": "SHR r/m8**, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "D2 /5",
          "Instruction": "SHR r/m8, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "REX + D2 /5",
          "Instruction": "SHR r/m8**, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "C0 /5 ib",
          "Instruction": "SHR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "REX + C0 /5 ib",
          "Instruction": "SHR r/m8**, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m16, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m16, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, CL times"
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m32, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, once."
        },
        {
          "Opcode": "REX.W + D1 /5",
          "Instruction": "SHR r/m64, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /5",
          "Instruction": "SHR r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /5 ib",
          "Instruction": "SHR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, imm8 times."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (r, w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (r, w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHLD",
      "Description": "Double Precision Shift Left",
      "Url": "https://www.felixcloutier.com/x86/SHLD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MRI",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "MRC",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)",
            "CL"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHLX",
      "Description": "Shift Without Affecting Flags",
      "Url": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "VEX.vvvv (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHR",
      "Description": "Shift",
      "Url": "https://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html",
      "Table": [
        {
          "Opcode": "REX.W + D1 /4",
          "Instruction": "SHL r/m64,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /4",
          "Instruction": "SHL r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /4",
          "Instruction": "SHL r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /4 ib",
          "Instruction": "SHL r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Multiply r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /4 ib",
          "Instruction": "SHL r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Multiply r/m64 by 2, imm8 times."
        },
        {
          "Opcode": "D0 /5",
          "Instruction": "SHR r/m8,1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "REX + D0 /5",
          "Instruction": "SHR r/m8**, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, once."
        },
        {
          "Opcode": "D2 /5",
          "Instruction": "SHR r/m8, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "REX + D2 /5",
          "Instruction": "SHR r/m8**, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, CL times."
        },
        {
          "Opcode": "C0 /5 ib",
          "Instruction": "SHR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "REX + C0 /5 ib",
          "Instruction": "SHR r/m8**, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m8 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m16, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m16, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, CL times"
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m16 by 2, imm8 times."
        },
        {
          "Opcode": "D1 /5",
          "Instruction": "SHR r/m32, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, once."
        },
        {
          "Opcode": "REX.W + D1 /5",
          "Instruction": "SHR r/m64, 1",
          "OperandEncoding": "M1",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, once."
        },
        {
          "Opcode": "D3 /5",
          "Instruction": "SHR r/m32, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, CL times."
        },
        {
          "Opcode": "REX.W + D3 /5",
          "Instruction": "SHR r/m64, CL",
          "OperandEncoding": "MC",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, CL times."
        },
        {
          "Opcode": "C1 /5 ib",
          "Instruction": "SHR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Unsigned divide r/m32 by 2, imm8 times."
        },
        {
          "Opcode": "REX.W + C1 /5 ib",
          "Instruction": "SHR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Unsigned divide r/m64 by 2, imm8 times."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M1",
          "Operands": [
            "ModRM:r/m (r, w)",
            "1"
          ]
        },
        {
          "OperandEncoding": "MC",
          "Operands": [
            "ModRM:r/m (r, w)",
            "CL"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHRD",
      "Description": "Double Precision Shift Right",
      "Url": "https://www.felixcloutier.com/x86/SHRD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "MRI",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)",
            "imm8"
          ]
        },
        {
          "OperandEncoding": "MRC",
          "Operands": [
            "ModRM:r/m (w)",
            "ModRM:reg (r)",
            "CL"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHRX",
      "Description": "Shift Without Affecting Flags",
      "Url": "https://www.felixcloutier.com/x86/SARX:SHLX:SHRX.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)",
            "VEX.vvvv (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SHUFPD",
      "Description": "Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SHUFPD.html"
    },
    {
      "Mnemonic": "SHUFPS",
      "Description": "Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SHUFPS.html"
    },
    {
      "Mnemonic": "SIDT",
      "Description": "Store Interrupt Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/SIDT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SLDT",
      "Description": "Store Local Descriptor Table Register",
      "Url": "https://www.felixcloutier.com/x86/SLDT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SMSW",
      "Description": "Store Machine Status Word",
      "Url": "https://www.felixcloutier.com/x86/SMSW.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SQRTPD",
      "Description": "Square Root of Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SQRTPD.html"
    },
    {
      "Mnemonic": "SQRTPS",
      "Description": "Square Root of Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SQRTPS.html"
    },
    {
      "Mnemonic": "SQRTSD",
      "Description": "Compute Square Root of Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/SQRTSD.html"
    },
    {
      "Mnemonic": "SQRTSS",
      "Description": "Compute Square Root of Scalar Single-Precision Value",
      "Url": "https://www.felixcloutier.com/x86/SQRTSS.html"
    },
    {
      "Mnemonic": "STAC",
      "Description": "Set AC Flag in EFLAGS Register",
      "Url": "https://www.felixcloutier.com/x86/STAC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STC",
      "Description": "Set Carry Flag",
      "Url": "https://www.felixcloutier.com/x86/STC.html",
      "Table": [
        {
          "Opcode": "F9",
          "Instruction": "STC",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set CF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STD",
      "Description": "Set Direction Flag",
      "Url": "https://www.felixcloutier.com/x86/STD.html",
      "Table": [
        {
          "Opcode": "FD",
          "Instruction": "STD",
          "OperandEncoding": "ZO",
          "Bit64Mode": "Valid",
          "CompatLegMode": "Valid",
          "Description": "Set DF flag."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STI",
      "Description": "Set Interrupt Flag",
      "Url": "https://www.felixcloutier.com/x86/STI.html",
      "Table": [
        {
          "Opcode": "FB",
          "Instruction": "STI",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STMXCSR",
      "Description": "Store MXCSR Register State",
      "Url": "https://www.felixcloutier.com/x86/STMXCSR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "STOS",
      "Description": "Store String",
      "Url": "https://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html",
      "Table": [
        {
          "Opcode": "AA",
          "Instruction": "STOS m8",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m16",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m32",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOS m64",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        },
        {
          "Opcode": "AA",
          "Instruction": "STOSB",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSW",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSD",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOSQ",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "NA",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STOSB",
      "Description": "Store String",
      "Url": "https://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html",
      "Table": [
        {
          "Opcode": "AA",
          "Instruction": "STOS m8",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m16",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m32",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOS m64",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        },
        {
          "Opcode": "AA",
          "Instruction": "STOSB",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSW",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSD",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOSQ",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "NA",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STOSD",
      "Description": "Store String",
      "Url": "https://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html",
      "Table": [
        {
          "Opcode": "AA",
          "Instruction": "STOS m8",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m16",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m32",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOS m64",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        },
        {
          "Opcode": "AA",
          "Instruction": "STOSB",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSW",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSD",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOSQ",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "NA",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STOSQ",
      "Description": "Store String",
      "Url": "https://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html",
      "Table": [
        {
          "Opcode": "AA",
          "Instruction": "STOS m8",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m16",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m32",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOS m64",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        },
        {
          "Opcode": "AA",
          "Instruction": "STOSB",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSW",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSD",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOSQ",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "NA",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STOSW",
      "Description": "Store String",
      "Url": "https://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html",
      "Table": [
        {
          "Opcode": "AA",
          "Instruction": "STOS m8",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m16",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOS m32",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOS m64",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        },
        {
          "Opcode": "AA",
          "Instruction": "STOSB",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSW",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI."
        },
        {
          "Opcode": "AB",
          "Instruction": "STOSD",
          "OperandEncoding": "NA",
          "CompatLegMode": "Valid",
          "Description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI."
        },
        {
          "Opcode": "REX.W + AB",
          "Instruction": "STOSQ",
          "OperandEncoding": "NA",
          "CompatLegMode": "N.E.",
          "Description": "Store RAX at address RDI or EDI."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "NA",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "STR",
      "Description": "Store Task Register",
      "Url": "https://www.felixcloutier.com/x86/STR.html",
      "Table": [
        {
          "Opcode": "0F 00 /1",
          "Instruction": "STR r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Stores segment selector from TR in r/m16."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SUB",
      "Description": "Subtract",
      "Url": "https://www.felixcloutier.com/x86/SUB.html",
      "Table": [
        {
          "Opcode": "2C ib",
          "Instruction": "SUB AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm8 from AL."
        },
        {
          "Opcode": "2D iw",
          "Instruction": "SUB AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm16 from AX."
        },
        {
          "Opcode": "2D id",
          "Instruction": "SUB EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm32 from EAX."
        },
        {
          "Opcode": "REX.W + 2D id",
          "Instruction": "SUB RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "Subtract imm32 sign-extended to 64-bits from RAX."
        },
        {
          "Opcode": "80 /5 ib",
          "Instruction": "SUB r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm8 from r/m8."
        },
        {
          "Opcode": "REX + 80 /5 ib",
          "Instruction": "SUB r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract imm8 from r/m8."
        },
        {
          "Opcode": "81 /5 iw",
          "Instruction": "SUB r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm16 from r/m16."
        },
        {
          "Opcode": "81 /5 id",
          "Instruction": "SUB r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract imm32 from r/m32."
        },
        {
          "Opcode": "REX.W + 81 /5 id",
          "Instruction": "SUB r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract imm32 sign-extended to 64-bits from r/m64."
        },
        {
          "Opcode": "83 /5 ib",
          "Instruction": "SUB r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract sign-extended imm8 from r/m16."
        },
        {
          "Opcode": "83 /5 ib",
          "Instruction": "SUB r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "Subtract sign-extended imm8 from r/m32."
        },
        {
          "Opcode": "REX.W + 83 /5 ib",
          "Instruction": "SUB r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "Subtract sign-extended imm8 from r/m64."
        },
        {
          "Opcode": "28 /r",
          "Instruction": "SUB r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract r8 from r/m8."
        },
        {
          "Opcode": "REX + 28 /r",
          "Instruction": "SUB r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Subtract r8 from r/m8."
        },
        {
          "Opcode": "29 /r",
          "Instruction": "SUB r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract r16 from r/m16."
        },
        {
          "Opcode": "29 /r",
          "Instruction": "SUB r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Subtract r32 from r/m32."
        },
        {
          "Opcode": "REX.W + 29 /r",
          "Instruction": "SUB r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Subtract r64 from r/m64."
        },
        {
          "Opcode": "2A /r",
          "Instruction": "SUB r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract r/m8 from r8."
        },
        {
          "Opcode": "REX + 2A /r",
          "Instruction": "SUB r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Subtract r/m8 from r8."
        },
        {
          "Opcode": "2B /r",
          "Instruction": "SUB r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract r/m16 from r16."
        },
        {
          "Opcode": "2B /r",
          "Instruction": "SUB r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Subtract r/m32 from r32."
        },
        {
          "Opcode": "REX.W + 2B /r",
          "Instruction": "SUB r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Subtract r/m64 from r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "SUBPD",
      "Description": "Subtract Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SUBPD.html"
    },
    {
      "Mnemonic": "SUBPS",
      "Description": "Subtract Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/SUBPS.html"
    },
    {
      "Mnemonic": "SUBSD",
      "Description": "Subtract Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/SUBSD.html"
    },
    {
      "Mnemonic": "SUBSS",
      "Description": "Subtract Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/SUBSS.html"
    },
    {
      "Mnemonic": "SWAPGS",
      "Description": "Swap GS Base Register",
      "Url": "https://www.felixcloutier.com/x86/SWAPGS.html",
      "Table": [
        {
          "Opcode": "0F 01 F8",
          "Instruction": "SWAPGS",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Invalid",
          "Description": "Exchanges the current GS base register value with the value contained in MSR address C0000102H."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SYSCALL",
      "Description": "Fast System Call",
      "Url": "https://www.felixcloutier.com/x86/SYSCALL.html",
      "Table": [
        {
          "Opcode": "0F 05",
          "Instruction": "SYSCALL",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Invalid",
          "Description": "Fast call to privilege level 0 system procedures."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SYSENTER",
      "Description": "Fast System Call",
      "Url": "https://www.felixcloutier.com/x86/SYSENTER.html",
      "Table": [
        {
          "Opcode": "0F 34",
          "Instruction": "SYSENTER",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fast call to privilege level 0 system procedures."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SYSEXIT",
      "Description": "Fast Return from Fast System Call",
      "Url": "https://www.felixcloutier.com/x86/SYSEXIT.html",
      "Table": [
        {
          "Opcode": "0F 35",
          "Instruction": "SYSEXIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fast return to privilege level 3 user code."
        },
        {
          "Opcode": "REX.W + 0F 35",
          "Instruction": "SYSEXIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Fast return to 64-bit mode privilege level 3 user code."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "SYSRET",
      "Description": "Return From Fast System Call",
      "Url": "https://www.felixcloutier.com/x86/SYSRET.html",
      "Table": [
        {
          "Opcode": "0F 07",
          "Instruction": "SYSRET",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Invalid",
          "Description": "Return to compatibility mode from fast system call"
        },
        {
          "Opcode": "REX.W + 0F 07",
          "Instruction": "SYSRET",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Invalid",
          "Description": "Return to 64-bit mode from fast system call"
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "TEST",
      "Description": "Logical Compare",
      "Url": "https://www.felixcloutier.com/x86/TEST.html",
      "Table": [
        {
          "Opcode": "A8 ib",
          "Instruction": "TEST AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AND imm8 with AL; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "A9 iw",
          "Instruction": "TEST AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AND imm16 with AX; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "A9 id",
          "Instruction": "TEST EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AND imm32 with EAX; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "REX.W + A9 id",
          "Instruction": "TEST RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "F6 /0 ib",
          "Instruction": "TEST r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "AND imm8 with r/m8; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "REX + F6 /0 ib",
          "Instruction": "TEST r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "AND imm8 with r/m8; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "F7 /0 iw",
          "Instruction": "TEST r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "AND imm16 with r/m16; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "F7 /0 id",
          "Instruction": "TEST r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "AND imm32 with r/m32; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "REX.W + F7 /0 id",
          "Instruction": "TEST r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "84 /r",
          "Instruction": "TEST r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "AND r8 with r/m8; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "REX + 84 /r",
          "Instruction": "TEST r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "AND r8 with r/m8; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "85 /r",
          "Instruction": "TEST r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "AND r16 with r/m16; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "85 /r",
          "Instruction": "TEST r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "AND r32 with r/m32; set SF, ZF, PF according to result."
        },
        {
          "Opcode": "REX.W + 85 /r",
          "Instruction": "TEST r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "AND r64 with r/m64; set SF, ZF, PF according to result."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "TZCNT",
      "Description": "Count the Number of Trailing Zero Bits",
      "Url": "https://www.felixcloutier.com/x86/TZCNT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "UCOMISD",
      "Description": "Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/UCOMISD.html"
    },
    {
      "Mnemonic": "UCOMISS",
      "Description": "Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS",
      "Url": "https://www.felixcloutier.com/x86/UCOMISS.html"
    },
    {
      "Mnemonic": "UD",
      "Description": "Undefined Instruction",
      "Url": "https://www.felixcloutier.com/x86/UD.html",
      "Table": [
        {
          "Opcode": "0F FF /r",
          "Instruction": "UD01 r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Raise invalid opcode exception."
        },
        {
          "Opcode": "0F B9 /r",
          "Instruction": "UD1 r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Raise invalid opcode exception."
        },
        {
          "Opcode": "0F 0B",
          "Instruction": "UD2",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Raise invalid opcode exception."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "UNPCKHPD",
      "Description": "Unpack and Interleave High Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/UNPCKHPD.html"
    },
    {
      "Mnemonic": "UNPCKHPS",
      "Description": "Unpack and Interleave High Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/UNPCKHPS.html"
    },
    {
      "Mnemonic": "UNPCKLPD",
      "Description": "Unpack and Interleave Low Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/UNPCKLPD.html"
    },
    {
      "Mnemonic": "UNPCKLPS",
      "Description": "Unpack and Interleave Low Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/UNPCKLPS.html"
    },
    {
      "Mnemonic": "VALIGND",
      "Description": "Align Doubleword/Quadword Vectors",
      "Url": "https://www.felixcloutier.com/x86/VALIGND:VALIGNQ.html"
    },
    {
      "Mnemonic": "VALIGNQ",
      "Description": "Align Doubleword/Quadword Vectors",
      "Url": "https://www.felixcloutier.com/x86/VALIGND:VALIGNQ.html"
    },
    {
      "Mnemonic": "VBLENDMPD",
      "Description": "Blend Float64/Float32 Vectors Using an OpMask Control",
      "Url": "https://www.felixcloutier.com/x86/VBLENDMPD:VBLENDMPS.html"
    },
    {
      "Mnemonic": "VBLENDMPS",
      "Description": "Blend Float64/Float32 Vectors Using an OpMask Control",
      "Url": "https://www.felixcloutier.com/x86/VBLENDMPD:VBLENDMPS.html"
    },
    {
      "Mnemonic": "VBROADCAST",
      "Description": "Load with Broadcast Floating-Point Data",
      "Url": "https://www.felixcloutier.com/x86/VBROADCAST.html"
    },
    {
      "Mnemonic": "VCOMPRESSPD",
      "Description": "Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory",
      "Url": "https://www.felixcloutier.com/x86/VCOMPRESSPD.html"
    },
    {
      "Mnemonic": "VCOMPRESSPS",
      "Description": "Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory",
      "Url": "https://www.felixcloutier.com/x86/VCOMPRESSPS.html"
    },
    {
      "Mnemonic": "VCVTPD2QQ",
      "Description": "Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTPD2QQ.html"
    },
    {
      "Mnemonic": "VCVTPD2UDQ",
      "Description": "Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTPD2UDQ.html"
    },
    {
      "Mnemonic": "VCVTPD2UQQ",
      "Description": "Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTPD2UQQ.html"
    },
    {
      "Mnemonic": "VCVTPH2PS",
      "Description": "Convert 16-bit FP values to Single-Precision FP values",
      "Url": "https://www.felixcloutier.com/x86/VCVTPH2PS.html"
    },
    {
      "Mnemonic": "VCVTPS2PH",
      "Description": "Convert Single-Precision FP value to 16-bit FP value",
      "Url": "https://www.felixcloutier.com/x86/VCVTPS2PH.html"
    },
    {
      "Mnemonic": "VCVTPS2QQ",
      "Description": "Convert Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTPS2QQ.html"
    },
    {
      "Mnemonic": "VCVTPS2UDQ",
      "Description": "Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTPS2UDQ.html"
    },
    {
      "Mnemonic": "VCVTPS2UQQ",
      "Description": "Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTPS2UQQ.html"
    },
    {
      "Mnemonic": "VCVTQQ2PD",
      "Description": "Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTQQ2PD.html"
    },
    {
      "Mnemonic": "VCVTQQ2PS",
      "Description": "Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTQQ2PS.html"
    },
    {
      "Mnemonic": "VCVTSD2USI",
      "Description": "Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer",
      "Url": "https://www.felixcloutier.com/x86/VCVTSD2USI.html"
    },
    {
      "Mnemonic": "VCVTSS2USI",
      "Description": "Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer",
      "Url": "https://www.felixcloutier.com/x86/VCVTSS2USI.html"
    },
    {
      "Mnemonic": "VCVTTPD2QQ",
      "Description": "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPD2QQ.html"
    },
    {
      "Mnemonic": "VCVTTPD2UDQ",
      "Description": "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPD2UDQ.html"
    },
    {
      "Mnemonic": "VCVTTPD2UQQ",
      "Description": "Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPD2UQQ.html"
    },
    {
      "Mnemonic": "VCVTTPS2QQ",
      "Description": "Convert with Truncation Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPS2QQ.html"
    },
    {
      "Mnemonic": "VCVTTPS2UDQ",
      "Description": "Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPS2UDQ.html"
    },
    {
      "Mnemonic": "VCVTTPS2UQQ",
      "Description": "Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTTPS2UQQ.html"
    },
    {
      "Mnemonic": "VCVTTSD2USI",
      "Description": "Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer",
      "Url": "https://www.felixcloutier.com/x86/VCVTTSD2USI.html"
    },
    {
      "Mnemonic": "VCVTTSS2USI",
      "Description": "Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer",
      "Url": "https://www.felixcloutier.com/x86/VCVTTSS2USI.html"
    },
    {
      "Mnemonic": "VCVTUDQ2PD",
      "Description": "Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTUDQ2PD.html"
    },
    {
      "Mnemonic": "VCVTUDQ2PS",
      "Description": "Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTUDQ2PS.html"
    },
    {
      "Mnemonic": "VCVTUQQ2PD",
      "Description": "Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTUQQ2PD.html"
    },
    {
      "Mnemonic": "VCVTUQQ2PS",
      "Description": "Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VCVTUQQ2PS.html"
    },
    {
      "Mnemonic": "VCVTUSI2SD",
      "Description": "Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/VCVTUSI2SD.html"
    },
    {
      "Mnemonic": "VCVTUSI2SS",
      "Description": "Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value",
      "Url": "https://www.felixcloutier.com/x86/VCVTUSI2SS.html"
    },
    {
      "Mnemonic": "VDBPSADBW",
      "Description": "Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes",
      "Url": "https://www.felixcloutier.com/x86/VDBPSADBW.html"
    },
    {
      "Mnemonic": "VERR",
      "Description": "Verify a Segment for Reading or Writing",
      "Url": "https://www.felixcloutier.com/x86/VERR:VERW.html",
      "Table": [
        {
          "Opcode": "0F 00 /4",
          "Instruction": "VERR r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set ZF=1 if segment specified with r/m16 can be read."
        },
        {
          "Opcode": "0F 00 /5",
          "Instruction": "VERW r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set ZF=1 if segment specified with r/m16 can be written."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VERW",
      "Description": "Verify a Segment for Reading or Writing",
      "Url": "https://www.felixcloutier.com/x86/VERR:VERW.html",
      "Table": [
        {
          "Opcode": "0F 00 /4",
          "Instruction": "VERR r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set ZF=1 if segment specified with r/m16 can be read."
        },
        {
          "Opcode": "0F 00 /5",
          "Instruction": "VERW r/m16",
          "OperandEncoding": "M",
          "CompatLegMode": "Valid",
          "Description": "Set ZF=1 if segment specified with r/m16 can be written."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VEXPANDPD",
      "Description": "Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory",
      "Url": "https://www.felixcloutier.com/x86/VEXPANDPD.html"
    },
    {
      "Mnemonic": "VEXPANDPS",
      "Description": "Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory",
      "Url": "https://www.felixcloutier.com/x86/VEXPANDPS.html"
    },
    {
      "Mnemonic": "VEXTRACTF128",
      "Description": "Extra ct Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTF32x4",
      "Description": "Extra ct Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTF32x8",
      "Description": "Extra ct Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTF64x2",
      "Description": "Extra ct Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTF64x4",
      "Description": "Extra ct Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTI128",
      "Description": "Extract packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTI32x4",
      "Description": "Extract packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTI32x8",
      "Description": "Extract packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTI64x2",
      "Description": "Extract packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
    },
    {
      "Mnemonic": "VEXTRACTI64x4",
      "Description": "Extract packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html"
    },
    {
      "Mnemonic": "VFIXUPIMMPD",
      "Description": "Fix Up Special Packed Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VFIXUPIMMPD.html"
    },
    {
      "Mnemonic": "VFIXUPIMMPS",
      "Description": "Fix Up Special Packed Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VFIXUPIMMPS.html"
    },
    {
      "Mnemonic": "VFIXUPIMMSD",
      "Description": "Fix Up Special Scalar Float64 Value",
      "Url": "https://www.felixcloutier.com/x86/VFIXUPIMMSD.html"
    },
    {
      "Mnemonic": "VFIXUPIMMSS",
      "Description": "Fix Up Special Scalar Float32 Value",
      "Url": "https://www.felixcloutier.com/x86/VFIXUPIMMSS.html"
    },
    {
      "Mnemonic": "VFMADD132PD",
      "Description": "Fused Multiply-Add of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
    },
    {
      "Mnemonic": "VFMADD132PS",
      "Description": "Fused Multiply-Add of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
    },
    {
      "Mnemonic": "VFMADD132SD",
      "Description": "Fused Multiply-Add of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
    },
    {
      "Mnemonic": "VFMADD132SS",
      "Description": "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
    },
    {
      "Mnemonic": "VFMADD213PD",
      "Description": "Fused Multiply-Add of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
    },
    {
      "Mnemonic": "VFMADD213PS",
      "Description": "Fused Multiply-Add of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
    },
    {
      "Mnemonic": "VFMADD213SD",
      "Description": "Fused Multiply-Add of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
    },
    {
      "Mnemonic": "VFMADD213SS",
      "Description": "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
    },
    {
      "Mnemonic": "VFMADD231PD",
      "Description": "Fused Multiply-Add of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PD:VFMADD213PD:VFMADD231PD.html"
    },
    {
      "Mnemonic": "VFMADD231PS",
      "Description": "Fused Multiply-Add of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132PS:VFMADD213PS:VFMADD231PS.html"
    },
    {
      "Mnemonic": "VFMADD231SD",
      "Description": "Fused Multiply-Add of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SD:VFMADD213SD:VFMADD231SD.html"
    },
    {
      "Mnemonic": "VFMADD231SS",
      "Description": "Fused Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADD132SS:VFMADD213SS:VFMADD231SS.html"
    },
    {
      "Mnemonic": "VFMADDSUB132PD",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
    },
    {
      "Mnemonic": "VFMADDSUB132PS",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
    },
    {
      "Mnemonic": "VFMADDSUB213PD",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
    },
    {
      "Mnemonic": "VFMADDSUB213PS",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
    },
    {
      "Mnemonic": "VFMADDSUB231PD",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PD:VFMADDSUB213PD:VFMADDSUB231PD.html"
    },
    {
      "Mnemonic": "VFMADDSUB231PS",
      "Description": "Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMADDSUB132PS:VFMADDSUB213PS:VFMADDSUB231PS.html"
    },
    {
      "Mnemonic": "VFMSUB132PD",
      "Description": "Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
    },
    {
      "Mnemonic": "VFMSUB132PS",
      "Description": "Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
    },
    {
      "Mnemonic": "VFMSUB132SD",
      "Description": "Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
    },
    {
      "Mnemonic": "VFMSUB132SS",
      "Description": "Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
    },
    {
      "Mnemonic": "VFMSUB213PD",
      "Description": "Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
    },
    {
      "Mnemonic": "VFMSUB213PS",
      "Description": "Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
    },
    {
      "Mnemonic": "VFMSUB213SD",
      "Description": "Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
    },
    {
      "Mnemonic": "VFMSUB213SS",
      "Description": "Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
    },
    {
      "Mnemonic": "VFMSUB231PD",
      "Description": "Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PD:VFMSUB213PD:VFMSUB231PD.html"
    },
    {
      "Mnemonic": "VFMSUB231PS",
      "Description": "Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132PS:VFMSUB213PS:VFMSUB231PS.html"
    },
    {
      "Mnemonic": "VFMSUB231SD",
      "Description": "Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SD:VFMSUB213SD:VFMSUB231SD.html"
    },
    {
      "Mnemonic": "VFMSUB231SS",
      "Description": "Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUB132SS:VFMSUB213SS:VFMSUB231SS.html"
    },
    {
      "Mnemonic": "VFMSUBADD132PD",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
    },
    {
      "Mnemonic": "VFMSUBADD132PS",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
    },
    {
      "Mnemonic": "VFMSUBADD213PD",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
    },
    {
      "Mnemonic": "VFMSUBADD213PS",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
    },
    {
      "Mnemonic": "VFMSUBADD231PD",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PD:VFMSUBADD213PD:VFMSUBADD231PD.html"
    },
    {
      "Mnemonic": "VFMSUBADD231PS",
      "Description": "Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFMSUBADD132PS:VFMSUBADD213PS:VFMSUBADD231PS.html"
    },
    {
      "Mnemonic": "VFNMADD132PD",
      "Description": "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
    },
    {
      "Mnemonic": "VFNMADD132PS",
      "Description": "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
    },
    {
      "Mnemonic": "VFNMADD132SD",
      "Description": "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
    },
    {
      "Mnemonic": "VFNMADD132SS",
      "Description": "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
    },
    {
      "Mnemonic": "VFNMADD213PD",
      "Description": "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
    },
    {
      "Mnemonic": "VFNMADD213PS",
      "Description": "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
    },
    {
      "Mnemonic": "VFNMADD213SD",
      "Description": "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
    },
    {
      "Mnemonic": "VFNMADD213SS",
      "Description": "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
    },
    {
      "Mnemonic": "VFNMADD231PD",
      "Description": "Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PD:VFNMADD213PD:VFNMADD231PD.html"
    },
    {
      "Mnemonic": "VFNMADD231PS",
      "Description": "Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132PS:VFNMADD213PS:VFNMADD231PS.html"
    },
    {
      "Mnemonic": "VFNMADD231SD",
      "Description": "Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SD:VFNMADD213SD:VFNMADD231SD.html"
    },
    {
      "Mnemonic": "VFNMADD231SS",
      "Description": "Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMADD132SS:VFNMADD213SS:VFNMADD231SS.html"
    },
    {
      "Mnemonic": "VFNMSUB132PD",
      "Description": "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
    },
    {
      "Mnemonic": "VFNMSUB132PS",
      "Description": "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
    },
    {
      "Mnemonic": "VFNMSUB132SD",
      "Description": "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
    },
    {
      "Mnemonic": "VFNMSUB132SS",
      "Description": "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
    },
    {
      "Mnemonic": "VFNMSUB213PD",
      "Description": "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
    },
    {
      "Mnemonic": "VFNMSUB213PS",
      "Description": "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
    },
    {
      "Mnemonic": "VFNMSUB213SD",
      "Description": "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
    },
    {
      "Mnemonic": "VFNMSUB213SS",
      "Description": "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
    },
    {
      "Mnemonic": "VFNMSUB231PD",
      "Description": "Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PD:VFNMSUB213PD:VFNMSUB231PD.html"
    },
    {
      "Mnemonic": "VFNMSUB231PS",
      "Description": "Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132PS:VFNMSUB213PS:VFNMSUB231PS.html"
    },
    {
      "Mnemonic": "VFNMSUB231SD",
      "Description": "Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SD:VFNMSUB213SD:VFNMSUB231SD.html"
    },
    {
      "Mnemonic": "VFNMSUB231SS",
      "Description": "Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VFNMSUB132SS:VFNMSUB213SS:VFNMSUB231SS.html"
    },
    {
      "Mnemonic": "VFPCLASSPD",
      "Description": "Tests Types Of a Packed Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VFPCLASSPD.html"
    },
    {
      "Mnemonic": "VFPCLASSPS",
      "Description": "Tests Types Of a Packed Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VFPCLASSPS.html"
    },
    {
      "Mnemonic": "VFPCLASSSD",
      "Description": "Tests Types Of a Scalar Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VFPCLASSSD.html"
    },
    {
      "Mnemonic": "VFPCLASSSS",
      "Description": "Tests Types Of a Scalar Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VFPCLASSSS.html"
    },
    {
      "Mnemonic": "VGATHERDPD",
      "Description": "Gather Packed DP FP Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VGATHERDPD",
      "UniqueName": "vgatherdpd_s",
      "Description": "Gather Packed Single, Packed Double with Signed Dword",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERDPD.html"
    },
    {
      "Mnemonic": "VGATHERDPS",
      "Description": "Gather Packed SP FP values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VGATHERDPS",
      "UniqueName": "vgatherdps_s",
      "Description": "Gather Packed Single, Packed Double with Signed Dword",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERDPD.html"
    },
    {
      "Mnemonic": "VGATHERQPD",
      "Description": "Gather Packed DP FP Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VGATHERQPD",
      "UniqueName": "vgatherqpd_s",
      "Description": "Gather Packed Single, Packed Double with Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERQPS:VGATHERQPD.html"
    },
    {
      "Mnemonic": "VGATHERQPS",
      "Description": "Gather Packed SP FP values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VGATHERQPS",
      "UniqueName": "vgatherqps_s",
      "Description": "Gather Packed Single, Packed Double with Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VGATHERQPS:VGATHERQPD.html"
    },
    {
      "Mnemonic": "VGETEXPPD",
      "Description": "Convert Exponents of Packed DP FP Values to DP FP Values",
      "Url": "https://www.felixcloutier.com/x86/VGETEXPPD.html"
    },
    {
      "Mnemonic": "VGETEXPPS",
      "Description": "Convert Exponents of Packed SP FP Values to SP FP Values",
      "Url": "https://www.felixcloutier.com/x86/VGETEXPPS.html"
    },
    {
      "Mnemonic": "VGETEXPSD",
      "Description": "Convert Exponents of Scalar DP FP Values to DP FP Value",
      "Url": "https://www.felixcloutier.com/x86/VGETEXPSD.html"
    },
    {
      "Mnemonic": "VGETEXPSS",
      "Description": "Convert Exponents of Scalar SP FP Values to SP FP Value",
      "Url": "https://www.felixcloutier.com/x86/VGETEXPSS.html"
    },
    {
      "Mnemonic": "VGETMANTPD",
      "Description": "Extract Float64 Vector of Normalized Mantissas from Float64 Vector",
      "Url": "https://www.felixcloutier.com/x86/VGETMANTPD.html"
    },
    {
      "Mnemonic": "VGETMANTPS",
      "Description": "Extract Float32 Vector of Normalized Mantissas from Float32 Vector",
      "Url": "https://www.felixcloutier.com/x86/VGETMANTPS.html"
    },
    {
      "Mnemonic": "VGETMANTSD",
      "Description": "Extract Float64 of Normalized Mantissas from Float64 Scalar",
      "Url": "https://www.felixcloutier.com/x86/VGETMANTSD.html"
    },
    {
      "Mnemonic": "VGETMANTSS",
      "Description": "Extract Float32 Vector of Normalized Mantissa from Float32 Vector",
      "Url": "https://www.felixcloutier.com/x86/VGETMANTSS.html"
    },
    {
      "Mnemonic": "VINSERTF128",
      "Description": "Insert Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
    },
    {
      "Mnemonic": "VINSERTF32x4",
      "Description": "Insert Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
    },
    {
      "Mnemonic": "VINSERTF32x8",
      "Description": "Insert Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
    },
    {
      "Mnemonic": "VINSERTF64x2",
      "Description": "Insert Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
    },
    {
      "Mnemonic": "VINSERTF64x4",
      "Description": "Insert Packed Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html"
    },
    {
      "Mnemonic": "VINSERTI128",
      "Description": "Insert Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
    },
    {
      "Mnemonic": "VINSERTI32x4",
      "Description": "Insert Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
    },
    {
      "Mnemonic": "VINSERTI32x8",
      "Description": "Insert Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
    },
    {
      "Mnemonic": "VINSERTI64x2",
      "Description": "Insert Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
    },
    {
      "Mnemonic": "VINSERTI64x4",
      "Description": "Insert Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html"
    },
    {
      "Mnemonic": "VMASKMOV",
      "Description": "Conditional SIMD Packed Loads and Stores",
      "Url": "https://www.felixcloutier.com/x86/VMASKMOV.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MVR",
          "Operands": [
            "ModRM:r/m (w)",
            "VEX.vvvv (r)",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VMOVDQA32",
      "Description": "Move Aligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
    },
    {
      "Mnemonic": "VMOVDQA64",
      "Description": "Move Aligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQA:VMOVDQA32:VMOVDQA64.html"
    },
    {
      "Mnemonic": "VMOVDQU16",
      "Description": "Move Unaligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
    },
    {
      "Mnemonic": "VMOVDQU32",
      "Description": "Move Unaligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
    },
    {
      "Mnemonic": "VMOVDQU64",
      "Description": "Move Unaligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
    },
    {
      "Mnemonic": "VMOVDQU8",
      "Description": "Move Unaligned Packed Integer Values",
      "Url": "https://www.felixcloutier.com/x86/MOVDQU:VMOVDQU8:VMOVDQU16:VMOVDQU32:VMOVDQU64.html"
    },
    {
      "Mnemonic": "VPBLENDD",
      "Description": "Blend Packed Dwords",
      "Url": "https://www.felixcloutier.com/x86/VPBLENDD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv",
            "ModRM:r/m (r)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPBLENDMB",
      "Description": "Blend Byte/Word Vectors Using an Opmask Control",
      "Url": "https://www.felixcloutier.com/x86/VPBLENDMB:VPBLENDMW.html"
    },
    {
      "Mnemonic": "VPBLENDMD",
      "Description": "Blend Int32/Int64 Vectors Using an OpMask Control",
      "Url": "https://www.felixcloutier.com/x86/VPBLENDMD:VPBLENDMQ.html"
    },
    {
      "Mnemonic": "VPBLENDMQ",
      "Description": "Blend Int32/Int64 Vectors Using an OpMask Control",
      "Url": "https://www.felixcloutier.com/x86/VPBLENDMD:VPBLENDMQ.html"
    },
    {
      "Mnemonic": "VPBLENDMW",
      "Description": "Blend Byte/Word Vectors Using an Opmask Control",
      "Url": "https://www.felixcloutier.com/x86/VPBLENDMB:VPBLENDMW.html"
    },
    {
      "Mnemonic": "VPBROADCAST",
      "Description": "Load Integer and Broadcast",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCAST.html"
    },
    {
      "Mnemonic": "VPBROADCASTB",
      "Description": "Load with Broadcast Integer Data from General Purpose Register",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
    },
    {
      "Mnemonic": "VPBROADCASTD",
      "Description": "Load with Broadcast Integer Data from General Purpose Register",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
    },
    {
      "Mnemonic": "VPBROADCASTM",
      "Description": "Broadcast Mask to Vector Register",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCASTM.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPBROADCASTQ",
      "Description": "Load with Broadcast Integer Data from General Purpose Register",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
    },
    {
      "Mnemonic": "VPBROADCASTW",
      "Description": "Load with Broadcast Integer Data from General Purpose Register",
      "Url": "https://www.felixcloutier.com/x86/VPBROADCASTB:VPBROADCASTW:VPBROADCASTD:VPBROADCASTQ.html"
    },
    {
      "Mnemonic": "VPCMPB",
      "Description": "Compare Packed Byte Values Into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPB:VPCMPUB.html"
    },
    {
      "Mnemonic": "VPCMPD",
      "Description": "Compare Packed Integer Values into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPD:VPCMPUD.html"
    },
    {
      "Mnemonic": "VPCMPQ",
      "Description": "Compare Packed Integer Values into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPQ:VPCMPUQ.html"
    },
    {
      "Mnemonic": "VPCMPUB",
      "Description": "Compare Packed Byte Values Into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPB:VPCMPUB.html"
    },
    {
      "Mnemonic": "VPCMPUD",
      "Description": "Compare Packed Integer Values into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPD:VPCMPUD.html"
    },
    {
      "Mnemonic": "VPCMPUQ",
      "Description": "Compare Packed Integer Values into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPQ:VPCMPUQ.html"
    },
    {
      "Mnemonic": "VPCMPUW",
      "Description": "Compare Packed Word Values Into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPW:VPCMPUW.html"
    },
    {
      "Mnemonic": "VPCMPW",
      "Description": "Compare Packed Word Values Into Mask",
      "Url": "https://www.felixcloutier.com/x86/VPCMPW:VPCMPUW.html"
    },
    {
      "Mnemonic": "VPCOMPRESSD",
      "Description": "Store Sparse Packed Doubleword Integer Values into Dense Memory/Register",
      "Url": "https://www.felixcloutier.com/x86/VPCOMPRESSD.html"
    },
    {
      "Mnemonic": "VPCOMPRESSQ",
      "Description": "Store Sparse Packed Quadword Integer Values into Dense Memory/Register",
      "Url": "https://www.felixcloutier.com/x86/VPCOMPRESSQ.html"
    },
    {
      "Mnemonic": "VPCONFLICTD",
      "Description": "Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register",
      "Url": "https://www.felixcloutier.com/x86/VPCONFLICTD:VPCONFLICTQ.html"
    },
    {
      "Mnemonic": "VPCONFLICTQ",
      "Description": "Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register",
      "Url": "https://www.felixcloutier.com/x86/VPCONFLICTD:VPCONFLICTQ.html"
    },
    {
      "Mnemonic": "VPERM2F128",
      "Description": "Permute Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VPERM2F128.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv (r)",
            "ModRM:r/m (r)",
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPERM2I128",
      "Description": "Permute Integer Values",
      "Url": "https://www.felixcloutier.com/x86/VPERM2I128.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVMI",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv",
            "ModRM:r/m (r)",
            "Imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPERMB",
      "Description": "Permute Packed Bytes Elements",
      "Url": "https://www.felixcloutier.com/x86/VPERMB.html"
    },
    {
      "Mnemonic": "VPERMD",
      "Description": "Permute Packed Doublewords/Words Elements",
      "Url": "https://www.felixcloutier.com/x86/VPERMD:VPERMW.html"
    },
    {
      "Mnemonic": "VPERMI2B",
      "Description": "Full Permute of Bytes from Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2B.html"
    },
    {
      "Mnemonic": "VPERMI2D",
      "Description": "Full Permute From Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
    },
    {
      "Mnemonic": "VPERMI2PD",
      "Description": "Full Permute From Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
    },
    {
      "Mnemonic": "VPERMI2PS",
      "Description": "Full Permute From Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
    },
    {
      "Mnemonic": "VPERMI2Q",
      "Description": "Full Permute From Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
    },
    {
      "Mnemonic": "VPERMI2W",
      "Description": "Full Permute From Two Tables Overwriting the Index",
      "Url": "https://www.felixcloutier.com/x86/VPERMI2W:VPERMI2D:VPERMI2Q:VPERMI2PS:VPERMI2PD.html"
    },
    {
      "Mnemonic": "VPERMILPD",
      "Description": "Permute In-Lane of Pairs of Double-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VPERMILPD.html"
    },
    {
      "Mnemonic": "VPERMILPS",
      "Description": "Permute In-Lane of Quadruples of Single-Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/VPERMILPS.html"
    },
    {
      "Mnemonic": "VPERMPD",
      "Description": "Permute Double-Precision Floating-Point Elements",
      "Url": "https://www.felixcloutier.com/x86/VPERMPD.html"
    },
    {
      "Mnemonic": "VPERMPS",
      "Description": "Permute Single-Precision Floating-Point Elements",
      "Url": "https://www.felixcloutier.com/x86/VPERMPS.html"
    },
    {
      "Mnemonic": "VPERMQ",
      "Description": "Qwords Element Permutation",
      "Url": "https://www.felixcloutier.com/x86/VPERMQ.html"
    },
    {
      "Mnemonic": "VPERMT2B",
      "Description": "Full Permute of Bytes from Two Tables Overwriting a Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2B.html"
    },
    {
      "Mnemonic": "VPERMT2D",
      "Description": "Full Permute from Two Tables Overwriting one Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
    },
    {
      "Mnemonic": "VPERMT2PD",
      "Description": "Full Permute from Two Tables Overwriting one Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
    },
    {
      "Mnemonic": "VPERMT2PS",
      "Description": "Full Permute from Two Tables Overwriting one Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
    },
    {
      "Mnemonic": "VPERMT2Q",
      "Description": "Full Permute from Two Tables Overwriting one Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
    },
    {
      "Mnemonic": "VPERMT2W",
      "Description": "Full Permute from Two Tables Overwriting one Table",
      "Url": "https://www.felixcloutier.com/x86/VPERMT2W:VPERMT2D:VPERMT2Q:VPERMT2PS:VPERMT2PD.html"
    },
    {
      "Mnemonic": "VPERMW",
      "Description": "Permute Packed Doublewords/Words Elements",
      "Url": "https://www.felixcloutier.com/x86/VPERMD:VPERMW.html"
    },
    {
      "Mnemonic": "VPEXPANDD",
      "Description": "Load Sparse Packed Doubleword Integer Values from Dense Memory / Register",
      "Url": "https://www.felixcloutier.com/x86/VPEXPANDD.html"
    },
    {
      "Mnemonic": "VPEXPANDQ",
      "Description": "Load Sparse Packed Quadword Integer Values from Dense Memory / Register",
      "Url": "https://www.felixcloutier.com/x86/VPEXPANDQ.html"
    },
    {
      "Mnemonic": "VPGATHERDD",
      "Description": "Gather Packed Dword Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPGATHERDD",
      "UniqueName": "vpgatherdd_s",
      "Description": "Gather Packed Dword, Packed Qword with Signed Dword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERDQ.html"
    },
    {
      "Mnemonic": "VPGATHERDQ",
      "UniqueName": "vpgatherdq_s",
      "Description": "Gather Packed Dword, Packed Qword with Signed Dword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERDQ.html"
    },
    {
      "Mnemonic": "VPGATHERDQ",
      "Description": "Gather Packed Qword Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPGATHERQD",
      "Description": "Gather Packed Dword Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RMV",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPGATHERQD",
      "UniqueName": "vpgatherqd_s",
      "Description": "Gather Packed Dword, Packed Qword with Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERQD:VPGATHERQQ.html"
    },
    {
      "Mnemonic": "VPGATHERQQ",
      "Description": "Gather Packed Qword Values Using Signed Dword/Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "ModRM:reg (r,w)",
            "BaseReg (R): VSIB:base, VectorReg(R): VSIB:index",
            "VEX.vvvv (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPGATHERQQ",
      "UniqueName": "vpgatherqq_s",
      "Description": "Gather Packed Dword, Packed Qword with Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPGATHERQD:VPGATHERQQ.html"
    },
    {
      "Mnemonic": "VPLZCNTD",
      "Description": "Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values",
      "Url": "https://www.felixcloutier.com/x86/VPLZCNTD:VPLZCNTQ.html"
    },
    {
      "Mnemonic": "VPLZCNTQ",
      "Description": "Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values",
      "Url": "https://www.felixcloutier.com/x86/VPLZCNTD:VPLZCNTQ.html"
    },
    {
      "Mnemonic": "VPMADD52HUQ",
      "Description": "Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators",
      "Url": "https://www.felixcloutier.com/x86/VPMADD52HUQ.html"
    },
    {
      "Mnemonic": "VPMADD52LUQ",
      "Description": "Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators",
      "Url": "https://www.felixcloutier.com/x86/VPMADD52LUQ.html"
    },
    {
      "Mnemonic": "VPMASKMOV",
      "Description": "Conditional SIMD Integer Packed Loads and Stores",
      "Url": "https://www.felixcloutier.com/x86/VPMASKMOV.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RVM",
          "Operands": [
            "ModRM:reg (w)",
            "VEX.vvvv",
            "ModRM:r/m (r)"
          ]
        },
        {
          "OperandEncoding": "MVR",
          "Operands": [
            "ModRM:r/m (w)",
            "VEX.vvvv",
            "ModRM:reg (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVB2M",
      "Description": "Convert a Vector Register to a Mask",
      "Url": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVD2M",
      "Description": "Convert a Vector Register to a Mask",
      "Url": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVDB",
      "Description": "Down Convert DWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
    },
    {
      "Mnemonic": "VPMOVDW",
      "Description": "Down Convert DWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
    },
    {
      "Mnemonic": "VPMOVM2B",
      "Description": "Convert a Mask Register to a Vector Register",
      "Url": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVM2D",
      "Description": "Convert a Mask Register to a Vector Register",
      "Url": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVM2Q",
      "Description": "Convert a Mask Register to a Vector Register",
      "Url": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVM2W",
      "Description": "Convert a Mask Register to a Vector Register",
      "Url": "https://www.felixcloutier.com/x86/VPMOVM2B:VPMOVM2W:VPMOVM2D:VPMOVM2Q.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVQ2M",
      "Description": "Convert a Vector Register to a Mask",
      "Url": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVQB",
      "Description": "Down Convert QWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
    },
    {
      "Mnemonic": "VPMOVQD",
      "Description": "Down Convert QWord to DWord",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
    },
    {
      "Mnemonic": "VPMOVQW",
      "Description": "Down Convert QWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
    },
    {
      "Mnemonic": "VPMOVSDB",
      "Description": "Down Convert DWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
    },
    {
      "Mnemonic": "VPMOVSDW",
      "Description": "Down Convert DWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
    },
    {
      "Mnemonic": "VPMOVSQB",
      "Description": "Down Convert QWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
    },
    {
      "Mnemonic": "VPMOVSQD",
      "Description": "Down Convert QWord to DWord",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
    },
    {
      "Mnemonic": "VPMOVSQW",
      "Description": "Down Convert QWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
    },
    {
      "Mnemonic": "VPMOVSWB",
      "Description": "Down Convert Word to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
    },
    {
      "Mnemonic": "VPMOVUSDB",
      "Description": "Down Convert DWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDB:VPMOVSDB:VPMOVUSDB.html"
    },
    {
      "Mnemonic": "VPMOVUSDW",
      "Description": "Down Convert DWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVDW:VPMOVSDW:VPMOVUSDW.html"
    },
    {
      "Mnemonic": "VPMOVUSQB",
      "Description": "Down Convert QWord to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQB:VPMOVSQB:VPMOVUSQB.html"
    },
    {
      "Mnemonic": "VPMOVUSQD",
      "Description": "Down Convert QWord to DWord",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQD:VPMOVSQD:VPMOVUSQD.html"
    },
    {
      "Mnemonic": "VPMOVUSQW",
      "Description": "Down Convert QWord to Word",
      "Url": "https://www.felixcloutier.com/x86/VPMOVQW:VPMOVSQW:VPMOVUSQW.html"
    },
    {
      "Mnemonic": "VPMOVUSWB",
      "Description": "Down Convert Word to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
    },
    {
      "Mnemonic": "VPMOVW2M",
      "Description": "Convert a Vector Register to a Mask",
      "Url": "https://www.felixcloutier.com/x86/VPMOVB2M:VPMOVW2M:VPMOVD2M:VPMOVQ2M.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VPMOVWB",
      "Description": "Down Convert Word to Byte",
      "Url": "https://www.felixcloutier.com/x86/VPMOVWB:VPMOVSWB:VPMOVUSWB.html"
    },
    {
      "Mnemonic": "VPMULTISHIFTQB",
      "Description": "Select Packed Unaligned Bytes from Quadword Sources",
      "Url": "https://www.felixcloutier.com/x86/VPMULTISHIFTQB.html"
    },
    {
      "Mnemonic": "VPROLD",
      "Description": "Bit Rotate Left",
      "Url": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
    },
    {
      "Mnemonic": "VPROLQ",
      "Description": "Bit Rotate Left",
      "Url": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
    },
    {
      "Mnemonic": "VPROLVD",
      "Description": "Bit Rotate Left",
      "Url": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
    },
    {
      "Mnemonic": "VPROLVQ",
      "Description": "Bit Rotate Left",
      "Url": "https://www.felixcloutier.com/x86/VPROLD:VPROLVD:VPROLQ:VPROLVQ.html"
    },
    {
      "Mnemonic": "VPRORD",
      "Description": "Bit Rotate Right",
      "Url": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
    },
    {
      "Mnemonic": "VPRORQ",
      "Description": "Bit Rotate Right",
      "Url": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
    },
    {
      "Mnemonic": "VPRORVD",
      "Description": "Bit Rotate Right",
      "Url": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
    },
    {
      "Mnemonic": "VPRORVQ",
      "Description": "Bit Rotate Right",
      "Url": "https://www.felixcloutier.com/x86/VPRORD:VPRORVD:VPRORQ:VPRORVQ.html"
    },
    {
      "Mnemonic": "VPSCATTERDD",
      "Description": "Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
    },
    {
      "Mnemonic": "VPSCATTERDQ",
      "Description": "Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
    },
    {
      "Mnemonic": "VPSCATTERQD",
      "Description": "Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
    },
    {
      "Mnemonic": "VPSCATTERQQ",
      "Description": "Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VPSCATTERDD:VPSCATTERDQ:VPSCATTERQD:VPSCATTERQQ.html"
    },
    {
      "Mnemonic": "VPSLLVD",
      "Description": "Variable Bit Shift Left Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
    },
    {
      "Mnemonic": "VPSLLVQ",
      "Description": "Variable Bit Shift Left Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
    },
    {
      "Mnemonic": "VPSLLVW",
      "Description": "Variable Bit Shift Left Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html"
    },
    {
      "Mnemonic": "VPSRAVD",
      "Description": "Variable Bit Shift Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
    },
    {
      "Mnemonic": "VPSRAVQ",
      "Description": "Variable Bit Shift Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
    },
    {
      "Mnemonic": "VPSRAVW",
      "Description": "Variable Bit Shift Right Arithmetic",
      "Url": "https://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html"
    },
    {
      "Mnemonic": "VPSRLVD",
      "Description": "Variable Bit Shift Right Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
    },
    {
      "Mnemonic": "VPSRLVQ",
      "Description": "Variable Bit Shift Right Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
    },
    {
      "Mnemonic": "VPSRLVW",
      "Description": "Variable Bit Shift Right Logical",
      "Url": "https://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html"
    },
    {
      "Mnemonic": "VPTERNLOGD",
      "Description": "Bitwise Ternary Logic",
      "Url": "https://www.felixcloutier.com/x86/VPTERNLOGD:VPTERNLOGQ.html"
    },
    {
      "Mnemonic": "VPTERNLOGQ",
      "Description": "Bitwise Ternary Logic",
      "Url": "https://www.felixcloutier.com/x86/VPTERNLOGD:VPTERNLOGQ.html"
    },
    {
      "Mnemonic": "VPTESTMB",
      "Description": "Logical AND and Set Mask",
      "Url": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
    },
    {
      "Mnemonic": "VPTESTMD",
      "Description": "Logical AND and Set Mask",
      "Url": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
    },
    {
      "Mnemonic": "VPTESTMQ",
      "Description": "Logical AND and Set Mask",
      "Url": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
    },
    {
      "Mnemonic": "VPTESTMW",
      "Description": "Logical AND and Set Mask",
      "Url": "https://www.felixcloutier.com/x86/VPTESTMB:VPTESTMW:VPTESTMD:VPTESTMQ.html"
    },
    {
      "Mnemonic": "VPTESTNMB",
      "Description": "Logical NAND and Set",
      "Url": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
    },
    {
      "Mnemonic": "VPTESTNMD",
      "Description": "Logical NAND and Set",
      "Url": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
    },
    {
      "Mnemonic": "VPTESTNMQ",
      "Description": "Logical NAND and Set",
      "Url": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
    },
    {
      "Mnemonic": "VPTESTNMW",
      "Description": "Logical NAND and Set",
      "Url": "https://www.felixcloutier.com/x86/VPTESTNMB:VPTESTNMW:VPTESTNMD:VPTESTNMQ.html"
    },
    {
      "Mnemonic": "VRANGEPD",
      "Description": "Range Restriction Calculation For Packed Pairs of Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VRANGEPD.html"
    },
    {
      "Mnemonic": "VRANGEPS",
      "Description": "Range Restriction Calculation For Packed Pairs of Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VRANGEPS.html"
    },
    {
      "Mnemonic": "VRANGESD",
      "Description": "Range Restriction Calculation From a pair of Scalar Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VRANGESD.html"
    },
    {
      "Mnemonic": "VRANGESS",
      "Description": "Range Restriction Calculation From a Pair of Scalar Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VRANGESS.html"
    },
    {
      "Mnemonic": "VRCP14PD",
      "Description": "Compute Approximate Reciprocals of Packed Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VRCP14PD.html"
    },
    {
      "Mnemonic": "VRCP14PS",
      "Description": "Compute Approximate Reciprocals of Packed Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VRCP14PS.html"
    },
    {
      "Mnemonic": "VRCP14SD",
      "Description": "Compute Approximate Reciprocal of Scalar Float64 Value",
      "Url": "https://www.felixcloutier.com/x86/VRCP14SD.html"
    },
    {
      "Mnemonic": "VRCP14SS",
      "Description": "Compute Approximate Reciprocal of Scalar Float32 Value",
      "Url": "https://www.felixcloutier.com/x86/VRCP14SS.html"
    },
    {
      "Mnemonic": "VREDUCEPD",
      "Description": "Perform Reduction Transformation on Packed Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VREDUCEPD.html"
    },
    {
      "Mnemonic": "VREDUCEPS",
      "Description": "Perform Reduction Transformation on Packed Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VREDUCEPS.html"
    },
    {
      "Mnemonic": "VREDUCESD",
      "Description": "Perform a Reduction Transformation on a Scalar Float64 Value",
      "Url": "https://www.felixcloutier.com/x86/VREDUCESD.html"
    },
    {
      "Mnemonic": "VREDUCESS",
      "Description": "Perform a Reduction Transformation on a Scalar Float32 Value",
      "Url": "https://www.felixcloutier.com/x86/VREDUCESS.html"
    },
    {
      "Mnemonic": "VRNDSCALEPD",
      "Description": "Round Packed Float64 Values To Include A Given Number Of Fraction Bits",
      "Url": "https://www.felixcloutier.com/x86/VRNDSCALEPD.html"
    },
    {
      "Mnemonic": "VRNDSCALEPS",
      "Description": "Round Packed Float32 Values To Include A Given Number Of Fraction Bits",
      "Url": "https://www.felixcloutier.com/x86/VRNDSCALEPS.html"
    },
    {
      "Mnemonic": "VRNDSCALESD",
      "Description": "Round Scalar Float64 Value To Include A Given Number Of Fraction Bits",
      "Url": "https://www.felixcloutier.com/x86/VRNDSCALESD.html"
    },
    {
      "Mnemonic": "VRNDSCALESS",
      "Description": "Round Scalar Float32 Value To Include A Given Number Of Fraction Bits",
      "Url": "https://www.felixcloutier.com/x86/VRNDSCALESS.html"
    },
    {
      "Mnemonic": "VRSQRT14PD",
      "Description": "Compute Approximate Reciprocals of Square Roots of Packed Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VRSQRT14PD.html"
    },
    {
      "Mnemonic": "VRSQRT14PS",
      "Description": "Compute Approximate Reciprocals of Square Roots of Packed Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VRSQRT14PS.html"
    },
    {
      "Mnemonic": "VRSQRT14SD",
      "Description": "Compute Approximate Reciprocal of Square Root of Scalar Float64 Value",
      "Url": "https://www.felixcloutier.com/x86/VRSQRT14SD.html"
    },
    {
      "Mnemonic": "VRSQRT14SS",
      "Description": "Compute Approximate Reciprocal of Square Root of Scalar Float32 Value",
      "Url": "https://www.felixcloutier.com/x86/VRSQRT14SS.html"
    },
    {
      "Mnemonic": "VSCALEFPD",
      "Description": "Scale Packed Float64 Values With Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VSCALEFPD.html"
    },
    {
      "Mnemonic": "VSCALEFPS",
      "Description": "Scale Packed Float32 Values With Float32 Values",
      "Url": "https://www.felixcloutier.com/x86/VSCALEFPS.html"
    },
    {
      "Mnemonic": "VSCALEFSD",
      "Description": "Scale Scalar Float64 Values With Float64 Values",
      "Url": "https://www.felixcloutier.com/x86/VSCALEFSD.html"
    },
    {
      "Mnemonic": "VSCALEFSS",
      "Description": "Scale Scalar Float32 Value With Float32 Value",
      "Url": "https://www.felixcloutier.com/x86/VSCALEFSS.html"
    },
    {
      "Mnemonic": "VSCATTERDPD",
      "Description": "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
    },
    {
      "Mnemonic": "VSCATTERDPS",
      "Description": "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
    },
    {
      "Mnemonic": "VSCATTERQPD",
      "Description": "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
    },
    {
      "Mnemonic": "VSCATTERQPS",
      "Description": "Scatter Packed Single, Packed Double with Signed Dword and Qword Indices",
      "Url": "https://www.felixcloutier.com/x86/VSCATTERDPS:VSCATTERDPD:VSCATTERQPS:VSCATTERQPD.html"
    },
    {
      "Mnemonic": "VSHUFF32x4",
      "Description": "Shuffle Packed Values at 128-bit Granularity",
      "Url": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
    },
    {
      "Mnemonic": "VSHUFF64x2",
      "Description": "Shuffle Packed Values at 128-bit Granularity",
      "Url": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
    },
    {
      "Mnemonic": "VSHUFI32x4",
      "Description": "Shuffle Packed Values at 128-bit Granularity",
      "Url": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
    },
    {
      "Mnemonic": "VSHUFI64x2",
      "Description": "Shuffle Packed Values at 128-bit Granularity",
      "Url": "https://www.felixcloutier.com/x86/VSHUFF32x4:VSHUFF64x2:VSHUFI32x4:VSHUFI64x2.html"
    },
    {
      "Mnemonic": "VTESTPD",
      "Description": "Packed Bit Test",
      "Url": "https://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VTESTPS",
      "Description": "Packed Bit Test",
      "Url": "https://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "VZEROALL",
      "Description": "Zero All YMM Registers",
      "Url": "https://www.felixcloutier.com/x86/VZEROALL.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "VZEROUPPER",
      "Description": "Zero Upper Bits of YMM Registers",
      "Url": "https://www.felixcloutier.com/x86/VZEROUPPER.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "WAIT",
      "Description": "Wait",
      "Url": "https://www.felixcloutier.com/x86/WAIT:FWAIT.html",
      "Table": [
        {
          "Opcode": "9B",
          "Instruction": "WAIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Check pending unmasked floating-point exceptions."
        },
        {
          "Opcode": "9B",
          "Instruction": "FWAIT",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Check pending unmasked floating-point exceptions."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "WBINVD",
      "Description": "Write Back and Invalidate Cache",
      "Url": "https://www.felixcloutier.com/x86/WBINVD.html",
      "Table": [
        {
          "Opcode": "0F 09",
          "Instruction": "WBINVD",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Write back and flush Internal caches; initiate writing-back and flushing of external caches."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "WRFSBASE",
      "Description": "Write FS/GS Segment Base",
      "Url": "https://www.felixcloutier.com/x86/WRFSBASE:WRGSBASE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "WRGSBASE",
      "Description": "Write FS/GS Segment Base",
      "Url": "https://www.felixcloutier.com/x86/WRFSBASE:WRGSBASE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "WRMSR",
      "Description": "Write to Model Specific Register",
      "Url": "https://www.felixcloutier.com/x86/WRMSR.html",
      "Table": [
        {
          "Opcode": "0F 30",
          "Instruction": "WRMSR",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Write the value in EDX:EAX to MSR specified by ECX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "WRPKRU",
      "Description": "Write Data to User Page Key Register",
      "Url": "https://www.felixcloutier.com/x86/WRPKRU.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XABORT",
      "Description": "Transactional Abort",
      "Url": "https://www.felixcloutier.com/x86/XABORT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "imm8"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XACQUIRE",
      "Description": "Hardware Lock Elision Prefix Hints",
      "Url": "https://www.felixcloutier.com/x86/XACQUIRE:XRELEASE.html"
    },
    {
      "Mnemonic": "XADD",
      "Description": "Exchange and Add",
      "Url": "https://www.felixcloutier.com/x86/XADD.html",
      "Table": [
        {
          "Opcode": "0F C0 /r",
          "Instruction": "XADD r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r8 and r/m8; load sum into r/m8."
        },
        {
          "Opcode": "REX + 0F C0 /r",
          "Instruction": "XADD r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Exchange r8 and r/m8; load sum into r/m8."
        },
        {
          "Opcode": "0F C1 /r",
          "Instruction": "XADD r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r16 and r/m16; load sum into r/m16."
        },
        {
          "Opcode": "0F C1 /r",
          "Instruction": "XADD r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r32 and r/m32; load sum into r/m32."
        },
        {
          "Opcode": "REX.W + 0F C1 /r",
          "Instruction": "XADD r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Exchange r64 and r/m64; load sum into r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r, w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XBEGIN",
      "Description": "Transactional Begin",
      "Url": "https://www.felixcloutier.com/x86/XBEGIN.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": [
            "Offset"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XCHG",
      "Description": "Exchange Register/Memory with Register",
      "Url": "https://www.felixcloutier.com/x86/XCHG.html",
      "Table": [
        {
          "Opcode": "90+rw",
          "Instruction": "XCHG AX, r16",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Exchange r16 with AX."
        },
        {
          "Opcode": "90+rw",
          "Instruction": "XCHG r16, AX",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Exchange AX with r16."
        },
        {
          "Opcode": "90+rd",
          "Instruction": "XCHG EAX, r32",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Exchange r32 with EAX."
        },
        {
          "Opcode": "REX.W + 90+rd",
          "Instruction": "XCHG RAX, r64",
          "OperandEncoding": "O",
          "CompatLegMode": "N.E.",
          "Description": "Exchange r64 with RAX."
        },
        {
          "Opcode": "90+rd",
          "Instruction": "XCHG r32, EAX",
          "OperandEncoding": "O",
          "CompatLegMode": "Valid",
          "Description": "Exchange EAX with r32."
        },
        {
          "Opcode": "REX.W + 90+rd",
          "Instruction": "XCHG r64, RAX",
          "OperandEncoding": "O",
          "CompatLegMode": "N.E.",
          "Description": "Exchange RAX with r64."
        },
        {
          "Opcode": "86 /r",
          "Instruction": "XCHG r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r8 (byte register) with byte from r/m8."
        },
        {
          "Opcode": "REX + 86 /r",
          "Instruction": "XCHG r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Exchange r8 (byte register) with byte from r/m8."
        },
        {
          "Opcode": "86 /r",
          "Instruction": "XCHG r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Exchange byte from r/m8 with r8 (byte register)."
        },
        {
          "Opcode": "REX + 86 /r",
          "Instruction": "XCHG r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Exchange byte from r/m8 with r8 (byte register)."
        },
        {
          "Opcode": "87 /r",
          "Instruction": "XCHG r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r16 with word from r/m16."
        },
        {
          "Opcode": "87 /r",
          "Instruction": "XCHG r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Exchange word from r/m16 with r16."
        },
        {
          "Opcode": "87 /r",
          "Instruction": "XCHG r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "Exchange r32 with doubleword from r/m32."
        },
        {
          "Opcode": "REX.W + 87 /r",
          "Instruction": "XCHG r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "Exchange r64 with quadword from r/m64."
        },
        {
          "Opcode": "87 /r",
          "Instruction": "XCHG r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "Exchange doubleword from r/m32 with r32."
        },
        {
          "Opcode": "REX.W + 87 /r",
          "Instruction": "XCHG r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "Exchange quadword from r/m64 with r64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "O",
          "Operands": [
            "AX/EAX/RAX (r, w)",
            "opcode + rd (r, w)"
          ]
        },
        {
          "OperandEncoding": "O",
          "Operands": [
            "opcode + rd (r, w)",
            "AX/EAX/RAX (r, w)"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XEND",
      "Description": "Transactional End",
      "Url": "https://www.felixcloutier.com/x86/XEND.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XGETBV",
      "Description": "Get Value of Extended Control Register",
      "Url": "https://www.felixcloutier.com/x86/XGETBV.html",
      "Table": [
        {
          "Opcode": "NP 0F 01 D0",
          "Instruction": "XGETBV",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Reads an XCR specified by ECX into EDX:EAX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XLAT",
      "Description": "Table Look-up Translation",
      "Url": "https://www.felixcloutier.com/x86/XLAT:XLATB.html",
      "Table": [
        {
          "Opcode": "D7",
          "Instruction": "XLAT m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set AL to memory byte DS:[(E)BX + unsigned AL]."
        },
        {
          "Opcode": "D7",
          "Instruction": "XLATB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set AL to memory byte DS:[(E)BX + unsigned AL]."
        },
        {
          "Opcode": "REX.W + D7",
          "Instruction": "XLATB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Set AL to memory byte [RBX + unsigned AL]."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XLATB",
      "Description": "Table Look-up Translation",
      "Url": "https://www.felixcloutier.com/x86/XLAT:XLATB.html",
      "Table": [
        {
          "Opcode": "D7",
          "Instruction": "XLAT m8",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set AL to memory byte DS:[(E)BX + unsigned AL]."
        },
        {
          "Opcode": "D7",
          "Instruction": "XLATB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Set AL to memory byte DS:[(E)BX + unsigned AL]."
        },
        {
          "Opcode": "REX.W + D7",
          "Instruction": "XLATB",
          "OperandEncoding": "ZO",
          "CompatLegMode": "N.E.",
          "Description": "Set AL to memory byte [RBX + unsigned AL]."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XOR",
      "Description": "Logical Exclusive OR",
      "Url": "https://www.felixcloutier.com/x86/XOR.html",
      "Table": [
        {
          "Opcode": "34 ib",
          "Instruction": "XOR AL, imm8",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AL XOR imm8."
        },
        {
          "Opcode": "35 iw",
          "Instruction": "XOR AX, imm16",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "AX XOR imm16."
        },
        {
          "Opcode": "35 id",
          "Instruction": "XOR EAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "Valid",
          "Description": "EAX XOR imm32."
        },
        {
          "Opcode": "REX.W + 35 id",
          "Instruction": "XOR RAX, imm32",
          "OperandEncoding": "I",
          "CompatLegMode": "N.E.",
          "Description": "RAX XOR imm32 (sign-extended)."
        },
        {
          "Opcode": "80 /6 ib",
          "Instruction": "XOR r/m8, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m8 XOR imm8."
        },
        {
          "Opcode": "REX + 80 /6 ib",
          "Instruction": "XOR r/m8*, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m8 XOR imm8."
        },
        {
          "Opcode": "81 /6 iw",
          "Instruction": "XOR r/m16, imm16",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m16 XOR imm16."
        },
        {
          "Opcode": "81 /6 id",
          "Instruction": "XOR r/m32, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m32 XOR imm32."
        },
        {
          "Opcode": "REX.W + 81 /6 id",
          "Instruction": "XOR r/m64, imm32",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 XOR imm32 (sign-extended)."
        },
        {
          "Opcode": "83 /6 ib",
          "Instruction": "XOR r/m16, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m16 XOR imm8 (sign-extended)."
        },
        {
          "Opcode": "83 /6 ib",
          "Instruction": "XOR r/m32, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "Valid",
          "Description": "r/m32 XOR imm8 (sign-extended)."
        },
        {
          "Opcode": "REX.W + 83 /6 ib",
          "Instruction": "XOR r/m64, imm8",
          "OperandEncoding": "MI",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 XOR imm8 (sign-extended)."
        },
        {
          "Opcode": "30 /r",
          "Instruction": "XOR r/m8, r8",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m8 XOR r8."
        },
        {
          "Opcode": "REX + 30 /r",
          "Instruction": "XOR r/m8*, r8*",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "r/m8 XOR r8."
        },
        {
          "Opcode": "31 /r",
          "Instruction": "XOR r/m16, r16",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m16 XOR r16."
        },
        {
          "Opcode": "31 /r",
          "Instruction": "XOR r/m32, r32",
          "OperandEncoding": "MR",
          "CompatLegMode": "Valid",
          "Description": "r/m32 XOR r32."
        },
        {
          "Opcode": "REX.W + 31 /r",
          "Instruction": "XOR r/m64, r64",
          "OperandEncoding": "MR",
          "CompatLegMode": "N.E.",
          "Description": "r/m64 XOR r64."
        },
        {
          "Opcode": "32 /r",
          "Instruction": "XOR r8, r/m8",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r8 XOR r/m8."
        },
        {
          "Opcode": "REX + 32 /r",
          "Instruction": "XOR r8*, r/m8*",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "r8 XOR r/m8."
        },
        {
          "Opcode": "33 /r",
          "Instruction": "XOR r16, r/m16",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r16 XOR r/m16."
        },
        {
          "Opcode": "33 /r",
          "Instruction": "XOR r32, r/m32",
          "OperandEncoding": "RM",
          "CompatLegMode": "Valid",
          "Description": "r32 XOR r/m32."
        },
        {
          "Opcode": "REX.W + 33 /r",
          "Instruction": "XOR r64, r/m64",
          "OperandEncoding": "RM",
          "CompatLegMode": "N.E.",
          "Description": "r64 XOR r/m64."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "I",
          "Operands": [
            "AL/AX/EAX/RAX",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MI",
          "Operands": [
            "ModRM:r/m (r, w)",
            "imm8/16/32"
          ]
        },
        {
          "OperandEncoding": "MR",
          "Operands": [
            "ModRM:r/m (r, w)",
            "ModRM:reg (r)"
          ]
        },
        {
          "OperandEncoding": "RM",
          "Operands": [
            "ModRM:reg (r, w)",
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XORPD",
      "Description": "Bitwise Logical XOR of Packed Double Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/XORPD.html"
    },
    {
      "Mnemonic": "XORPS",
      "Description": "Bitwise Logical XOR of Packed Single Precision Floating-Point Values",
      "Url": "https://www.felixcloutier.com/x86/XORPS.html"
    },
    {
      "Mnemonic": "XRELEASE",
      "Description": "Hardware Lock Elision Prefix Hints",
      "Url": "https://www.felixcloutier.com/x86/XACQUIRE:XRELEASE.html"
    },
    {
      "Mnemonic": "XRSTOR",
      "Description": "Restore Processor Extended States",
      "Url": "https://www.felixcloutier.com/x86/XRSTOR.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XRSTORS",
      "Description": "Restore Processor Extended States Supervisor",
      "Url": "https://www.felixcloutier.com/x86/XRSTORS.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (r)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XSAVE",
      "Description": "Save Processor Extended States",
      "Url": "https://www.felixcloutier.com/x86/XSAVE.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XSAVEC",
      "Description": "Save Processor Extended States with Compaction",
      "Url": "https://www.felixcloutier.com/x86/XSAVEC.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XSAVEOPT",
      "Description": "Save Processor Extended States Optimized",
      "Url": "https://www.felixcloutier.com/x86/XSAVEOPT.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XSAVES",
      "Description": "Save Processor Extended States Supervisor",
      "Url": "https://www.felixcloutier.com/x86/XSAVES.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "M",
          "Operands": [
            "ModRM:r/m (w)"
          ]
        }
      ]
    },
    {
      "Mnemonic": "XSETBV",
      "Description": "Set Extended Control Register",
      "Url": "https://www.felixcloutier.com/x86/XSETBV.html",
      "Table": [
        {
          "Opcode": "NP 0F 01 D1",
          "Instruction": "XSETBV",
          "OperandEncoding": "ZO",
          "CompatLegMode": "Valid",
          "Description": "Write the value in EDX:EAX to the XCR specified by ECX."
        }
      ],
      "OperandEncoding": [
        {
          "OperandEncoding": "ZO",
          "Operands": []
        }
      ]
    },
    {
      "Mnemonic": "XTEST",
      "Description": "Test If In Transactional Execution",
      "Url": "https://www.felixcloutier.com/x86/XTEST.html",
      "OperandEncoding": [
        {
          "OperandEncoding": "A",
          "Operands": []
        }
      ]
    }
  ],
  "Tables": {
    "ModRM16Bit": "r8(/r)\r\nr16(/r)\r\nr32(/r)\r\nmm(/r)\r\nxmm(/r)\r\n(In decimal) /digit (Opcode)\r\n(In binary) REG =\r\nAL\r\nAX\r\nEAX\r\nMM0\r\nXMM0\r\n0\r\n000\r\nCL\r\nCX\r\nECX\r\nMM1\r\nXMM1\r\n1\r\n001\r\nDL\r\nDX\r\nEDX\r\nMM2\r\nXMM2\r\n2\r\n010\r\nBL\r\nBX\r\nEBX\r\nMM3\r\nXMM3\r\n3\r\n011\r\nAH\r\nSP\r\nESP\r\nMM4\r\nXMM4\r\n4\r\n100\r\nCH\r\nBP1\r\nEBP\r\nMM5\r\nXMM5\r\n5\r\n101\r\nDH\r\nSI\r\nESI\r\nMM6\r\nXMM6\r\n6\r\n110\r\nBH\r\nDI\r\nEDI\r\nMM7\r\nXMM7\r\n7\r\n111\r\nEffective Address Mod R/M Value of ModR/M Byte (in Hexadecimal)\r\n[BX+SI]\r\n[BX+DI]\r\n[BP+SI]\r\n[BP+DI]\r\n[SI]\r\n[DI]\r\ndisp162\r\n[BX]\r\n00 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n00\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n0A\r\n0B\r\n0C\r\n0D\r\n0E\r\n0F\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n1A\r\n1B\r\n1C\r\n1D\r\n1E\r\n1F\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n2A\r\n2B\r\n2C\r\n2D\r\n2E\r\n2F\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n3A\r\n3B\r\n3C\r\n3D\r\n3E\r\n3F\r\n[BX+SI]+disp83\r\n[BX+DI]+disp8\r\n[BP+SI]+disp8\r\n[BP+DI]+disp8\r\n[SI]+disp8\r\n[DI]+disp8\r\n[BP]+disp8\r\n[BX]+disp8\r\n01 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n4A\r\n4B\r\n4C\r\n4D\r\n4E\r\n4F\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n5A\r\n5B\r\n5C\r\n5D\r\n5E\r\n5F\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n6A\r\n6B\r\n6C\r\n6D\r\n6E\r\n6F\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n7A\r\n7B\r\n7C\r\n7D\r\n7E\r\n7F\r\n[BX+SI]+disp16\r\n[BX+DI]+disp16\r\n[BP+SI]+disp16\r\n[BP+DI]+disp16\r\n[SI]+disp16\r\n[DI]+disp16\r\n[BP]+disp16\r\n[BX]+disp16\r\n10 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n8A\r\n8B\r\n8C\r\n8D\r\n8E\r\n8F\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n9A\r\n9B\r\n9C\r\n9D\r\n9E\r\n9F\r\nA0\r\nA1\r\nA2\r\nA3\r\nA4\r\nA5\r\nA6\r\nA7\r\nA8\r\nA9\r\nAA\r\nAB\r\nAC\r\nAD\r\nAE\r\nAF\r\nB0\r\nB1\r\nB2\r\nB3\r\nB4\r\nB5\r\nB6\r\nB7\r\nB8\r\nB9\r\nBA\r\nBB\r\nBC\r\nBD\r\nBE\r\nBF\r\nEAX/AX/AL/MM0/XMM0\r\nECX/CX/CL/MM1/XMM1\r\nEDX/DX/DL/MM2/XMM2\r\nEBX/BX/BL/MM3/XMM3\r\nESP/SP/AHMM4/XMM4\r\nEBP/BP/CH/MM5/XMM5\r\nESI/SI/DH/MM6/XMM6\r\nEDI/DI/BH/MM7/XMM7\r\n11 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\nC0\r\nC1\r\nC2\r\nC3\r\nC4\r\nC5\r\nC6\r\nC7\r\nC8\r\nC9\r\nCA\r\nCB\r\nCC\r\nCD\r\nCE\r\nCF\r\nD0\r\nD1\r\nD2\r\nD3\r\nD4\r\nD5\r\nD6\r\nD7\r\nD8\r\nD9\r\nDA\r\nDB\r\nDC\r\nDD\r\nDE\r\nDF\r\nE0\r\nE1\r\nE2\r\nE3\r\nE4\r\nE5\r\nE6\r\nE7\r\nE8\r\nE9\r\nEA\r\nEB\r\nEC\r\nED\r\nEE\r\nEF\r\nF0\r\nF1\r\nF2\r\nF3\r\nF4\r\nF5\r\nF6\r\nF7\r\nF8\r\nF9\r\nFA\r\nFB\r\nFC\r\nFD\r\nFE\r\nFF",
    "ModRM32Bit": "r8(/r)\r\nr16(/r)\r\nr32(/r)\r\nmm(/r)\r\nxmm(/r)\r\n(In decimal) /digit (Opcode)\r\n(In binary) REG =\r\nAL\r\nAX\r\nEAX\r\nMM0\r\nXMM0\r\n0\r\n000\r\nCL\r\nCX\r\nECX\r\nMM1\r\nXMM1\r\n1\r\n001\r\nDL\r\nDX\r\nEDX\r\nMM2\r\nXMM2\r\n2\r\n010\r\nBL\r\nBX\r\nEBX\r\nMM3\r\nXMM3\r\n3\r\n011\r\nAH\r\nSP\r\nESP\r\nMM4\r\nXMM4\r\n4\r\n100\r\nCH\r\nBP\r\nEBP\r\nMM5\r\nXMM5\r\n5\r\n101\r\nDH\r\nSI\r\nESI\r\nMM6\r\nXMM6\r\n6\r\n110\r\nBH\r\nDI\r\nEDI\r\nMM7\r\nXMM7\r\n7\r\n111\r\nEffective Address Mod R/M Value of ModR/M Byte (in Hexadecimal)\r\n[EAX]\r\n[ECX]\r\n[EDX]\r\n[EBX]\r\n[--][--]1\r\ndisp322\r\n[ESI]\r\n[EDI]\r\n00 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n00\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n0A\r\n0B\r\n0C\r\n0D\r\n0E\r\n0F\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n1A\r\n1B\r\n1C\r\n1D\r\n1E\r\n1F\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n2A\r\n2B\r\n2C\r\n2D\r\n2E\r\n2F\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n3A\r\n3B\r\n3C\r\n3D\r\n3E\r\n3F\r\n[EAX]+disp83\r\n[ECX]+disp8\r\n[EDX]+disp8\r\n[EBX]+disp8\r\n[--][--]+disp8\r\n[EBP]+disp8\r\n[ESI]+disp8\r\n[EDI]+disp8\r\n01 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n4A\r\n4B\r\n4C\r\n4D\r\n4E\r\n4F\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n5A\r\n5B\r\n5C\r\n5D\r\n5E\r\n5F\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n6A\r\n6B\r\n6C\r\n6D\r\n6E\r\n6F\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n7A\r\n7B\r\n7C\r\n7D\r\n7E\r\n7F\r\n[EAX]+disp32\r\n[ECX]+disp32\r\n[EDX]+disp32\r\n[EBX]+disp32\r\n[--][--]+disp32\r\n[EBP]+disp32\r\n[ESI]+disp32\r\n[EDI]+disp32\r\n10 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n8A\r\n8B\r\n8C\r\n8D\r\n8E\r\n8F\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n9A\r\n9B\r\n9C\r\n9D\r\n9E\r\n9F\r\nA0\r\nA1\r\nA2\r\nA3\r\nA4\r\nA5\r\nA6\r\nA7\r\nA8\r\nA9\r\nAA\r\nAB\r\nAC\r\nAD\r\nAE\r\nAF\r\nB0\r\nB1\r\nB2\r\nB3\r\nB4\r\nB5\r\nB6\r\nB7\r\nB8\r\nB9\r\nBA\r\nBB\r\nBC\r\nBD\r\nBE\r\nBF\r\nEAX/AX/AL/MM0/XMM0\r\nECX/CX/CL/MM/XMM1\r\nEDX/DX/DL/MM2/XMM2\r\nEBX/BX/BL/MM3/XMM3\r\nESP/SP/AH/MM4/XMM4\r\nEBP/BP/CH/MM5/XMM5\r\nESI/SI/DH/MM6/XMM6\r\nEDI/DI/BH/MM7/XMM7\r\n11 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\nC0\r\nC1\r\nC2\r\nC3\r\nC4\r\nC5\r\nC6\r\nC7\r\nC8\r\nC9\r\nCA\r\nCB\r\nCC\r\nCD\r\nCE\r\nCF\r\nD0\r\nD1\r\nD2\r\nD3\r\nD4\r\nD5\r\nD6\r\nD7\r\nD8\r\nD9\r\nDA\r\nDB\r\nDC\r\nDD\r\nDE\r\nDF\r\nE0\r\nE1\r\nE2\r\nE3\r\nE4\r\nE5\r\nE6\r\nE7\r\nE8\r\nE9\r\nEA\r\nEB\r\nEC\r\nED\r\nEE\r\nEF\r\nF0\r\nF1\r\nF2\r\nF3\r\nF4\r\nF5\r\nF6\r\nF7\r\nF8\r\nF9\r\nFA\r\nFB\r\nFC\r\nFD\r\nFE\r\nFF",
    "SIB32Bit": "r32\r\n(In decimal) Base =\r\n(In binary) Base =\r\nEAX\r\n0\r\n000\r\nECX\r\n1\r\n001\r\nEDX\r\n2\r\n010\r\nEBX\r\n3\r\n011\r\nESP\r\n4\r\n100\r\n[*]\r\n5\r\n101\r\nESI\r\n6\r\n110\r\nEDI\r\n7\r\n111\r\nScaled Index SS Index Value of SIB Byte (in Hexadecimal)\r\n[EAX]\r\n[ECX]\r\n[EDX]\r\n[EBX]\r\nnone\r\n[EBP]\r\n[ESI]\r\n[EDI]\r\n00 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n00\r\n08\r\n10\r\n18\r\n20\r\n28\r\n30\r\n38\r\n01\r\n09\r\n11\r\n19\r\n21\r\n29\r\n31\r\n39\r\n02\r\n0A\r\n12\r\n1A\r\n22\r\n2A\r\n32\r\n3A\r\n03\r\n0B\r\n13\r\n1B\r\n23\r\n2B\r\n33\r\n3B\r\n04\r\n0C\r\n14\r\n1C\r\n24\r\n2C\r\n34\r\n3C\r\n05\r\n0D\r\n15\r\n1D\r\n25\r\n2D\r\n35\r\n3D\r\n06\r\n0E\r\n16\r\n1E\r\n26\r\n2E\r\n36\r\n3E\r\n07\r\n0F\r\n17\r\n1F\r\n27\r\n2F\r\n37\r\n3F\r\n[EAX*2]\r\n[ECX*2]\r\n[EDX*2]\r\n[EBX*2]\r\nnone\r\n[EBP*2]\r\n[ESI*2]\r\n[EDI*2]\r\n01 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n40\r\n48\r\n50\r\n58\r\n60\r\n68\r\n70\r\n78\r\n41\r\n49\r\n51\r\n59\r\n61\r\n69\r\n71\r\n79\r\n42\r\n4A\r\n52\r\n5A\r\n62\r\n6A\r\n72\r\n7A\r\n43\r\n4B\r\n53\r\n5B\r\n63\r\n6B\r\n73\r\n7B\r\n44\r\n4C\r\n54\r\n5C\r\n64\r\n6C\r\n74\r\n7C\r\n45\r\n4D\r\n55\r\n5D\r\n65\r\n6D\r\n75\r\n7D\r\n46\r\n4E\r\n56\r\n5E\r\n66\r\n6E\r\n76\r\n7E\r\n47\r\n4F\r\n57\r\n5F\r\n67\r\n6F\r\n77\r\n7F\r\n[EAX*4]\r\n[ECX*4]\r\n[EDX*4]\r\n[EBX*4]\r\nnone\r\n[EBP*4]\r\n[ESI*4]\r\n[EDI*4]\r\n10 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n80\r\n88\r\n90\r\n98\r\nA0\r\nA8\r\nB0\r\nB8\r\n81\r\n89\r\n91\r\n99\r\nA1\r\nA9\r\nB1\r\nB9\r\n82\r\n8A\r\n92\r\n9A\r\nA2\r\nAA\r\nB2\r\nBA\r\n83\r\n8B\r\n93\r\n9B\r\nA3\r\nAB\r\nB3\r\nBB\r\n84\r\n8C\r\n94\r\n9C\r\nA4\r\nAC\r\nB4\r\nBC\r\n85\r\n8D\r\n95\r\n9D\r\nA5\r\nAD\r\nB5\r\nBD\r\n86\r\n8E\r\n96\r\n9E\r\nA6\r\nAE\r\nB6\r\nBE\r\n87\r\n8F\r\n97\r\n9F\r\nA7\r\nAF\r\nB7\r\nBF\r\n[EAX*8]\r\n[ECX*8]\r\n[EDX*8]\r\n[EBX*8]\r\nnone\r\n[EBP*8]\r\n[ESI*8]\r\n[EDI*8]\r\n11 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\nC0\r\nC8\r\nD0\r\nD8\r\nE0\r\nE8\r\nF0\r\nF8\r\nC1\r\nC9\r\nD1\r\nD9\r\nE1\r\nE9\r\nF1\r\nF9\r\nC2\r\nCA\r\nD2\r\nDA\r\nE2\r\nEA\r\nF2\r\nFA\r\nC3\r\nCB\r\nD3\r\nDB\r\nE3\r\nEB\r\nF3\r\nFB\r\nC4\r\nCC\r\nD4\r\nDC\r\nE4\r\nEC\r\nF4\r\nFC\r\nC5\r\nCD\r\nD5\r\nDD\r\nE5\r\nED\r\nF5\r\nFD\r\nC6\r\nCE\r\nD6\r\nDE\r\nE6\r\nEE\r\nF6\r\nFE\r\nC7\r\nCF\r\nD7\r\nDF\r\nE7\r\nEF\r\nF7\r\nFF",
    "EflagsCrossReference": "Table A-2.  EFLAGS Cross-Reference\r\nInstruction\tOF\tSF\tZF\tAF\tPF\tCF\tTF\tIF\tDF\tNT\tRF\r\nAAA\t—\t—\t—\tTM\t—\tM\t\t\t\t\t\r\nAAD\t—\tM\tM\t—\tM\t—\t\t\t\t\t\r\nAAM\t—\tM\tM\t—\tM\t—\t\t\t\t\t\r\nAAS\t—\t—\t—\tTM\t—\tM\t\t\t\t\t\r\nADC\tM\tM\tM\tM\tM\tTM\t\t\t\t\t\r\nADD\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nAND\t0\tM\tM\t—\tM\t0\t\t\t\t\t\r\nARPL\t\t\tM\t\t\t\t\t\t\t\t\r\nBOUND\t\t\t\t\t\t\t\t\t\t\t\r\nBSF/BSR\t—\t—\tM\t—\t—\t—\t\t\t\t\t\r\nBSWAP\t\t\t\t\t\t\t\t\t\t\t\r\nBT/BTS/BTR/BTC\t—\t—\t\t—\t—\tM\t\t\t\t\t\r\nCALL\t\t\t\t\t\t\t\t\t\t\t\r\nCBW\t\t\t\t\t\t\t\t\t\t\t\r\nCLC\t\t\t\t\t\t0\t\t\t\t\t\r\nCLD\t\t\t\t\t\t\t\t\t0\t\t\r\nCLI\t\t\t\t\t\t\t\t0\t\t\t\r\nCLTS\t\t\t\t\t\t\t\t\t\t\t\r\nCMC\t\t\t\t\t\tM\t\t\t\t\t\r\nCMOVcc\tT\tT\tT\t\tT\tT\t\t\t\t\t\r\nCMP\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nCMPS\tM\tM\tM\tM\tM\tM\t\t\tT\t\t\r\nCMPXCHG\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nCMPXCHG8B\t\t\tM\t\t\t\t\t\t\t\t\r\nCOMISD\t0\t0\tM\t0\tM\tM\t\t\t\t\t\r\nCOMISS\t0\t0\tM\t0\tM\tM\t\t\t\t\t\r\nCPUID\t\t\t\t\t\t\t\t\t\t\t\r\nCWD\t\t\t\t\t\t\t\t\t\t\t\r\nDAA\t—\tM\tM\tTM\tM\tTM\t\t\t\t\t\r\nDAS\t—\tM\tM\tTM\tM\tTM\t\t\t\t\t\r\nDEC\tM\tM\tM\tM\tM\t\t\t\t\t\t\r\nDIV\t—\t—\t—\t—\t—\t—\t\t\t\t\t\r\nENTER\t\t\t\t\t\t\t\t\t\t\t\r\nESC\t\t\t\t\t\t\t\t\t\t\t\r\nFCMOVcc\t\t\tT\t\tT\tT\t\t\t\t\t\r\nFCOMI, FCOMIP, FUCOMI, FUCOMIP\t0\t0\tM\t0\tM\tM\t\t\t\t\t\r\nHLT\t\t\t\t\t\t\t\t\t\t\t\r\nIDIV\t—\t—\t—\t—\t—\t—\t\t\t\t\t\r\nIMUL\tM\t—\t—\t—\t—\tM\t\t\t\t\t\r\nIN\t\t\t\t\t\t\t\t\t\t\t\r\nINC\tM\tM\tM\tM\tM\t\t\t\t\t\t\r\nINS\t\t\t\t\t\t\t\t\tT\t\t\r\nINT\t\t\t\t\t\t\t0\t\t\t0\t\r\nINTO\tT\t\t\t\t\t\t0\t\t\t0\t\r\nINVD\t\t\t\t\t\t\t\t\t\t\t\r\nINVLPG\t\t\t\t\t\t\t\t\t\t\t\r\nUCOMISD\t0\t0\tM\t0\tM\tM\t\t\t\t\t\r\nUCOMISS\t0\t0\tM\t0\tM\tM\t\t\t\t\t\r\nIRET\tR\tR\tR\tR\tR\tR\tR\tR\tR\tT\t\r\nJcc\tT\tT\tT\t\tT\tT\t\t\t\t\t\r\nJCXZ\t\t\t\t\t\t\t\t\t\t\t\r\nJMP\t\t\t\t\t\t\t\t\t\t\t\r\nLAHF\t\t\t\t\t\t\t\t\t\t\t\r\nLAR\t\t\tM\t\t\t\t\t\t\t\t\r\nLDS/LES/LSS/LFS/LGS\t\t\t\t\t\t\t\t\t\t\t\r\nLEA\t\t\t\t\t\t\t\t\t\t\t\r\nLEAVE\t\t\t\t\t\t\t\t\t\t\t\r\nLGDT/LIDT/LLDT/LMSW\t\t\t\t\t\t\t\t\t\t\t\r\nLOCK\t\t\t\t\t\t\t\t\t\t\t\r\nLODS\t\t\t\t\t\t\t\t\tT\t\t\r\nLOOP\t\t\t\t\t\t\t\t\t\t\t\r\nLOOPE/LOOPNE\t\t\tT\t\t\t\t\t\t\t\t\r\nLSL\t\t\tM\t\t\t\t\t\t\t\t\r\nLTR\t\t\t\t\t\t\t\t\t\t\t\r\nMONITOR\t\t\t\t\t\t\t\t\t\t\t\r\nMWAIT\t\t\t\t\t\t\t\t\t\t\t\r\nMOV\t\t\t\t\t\t\t\t\t\t\t\r\nMOV control, debug, test\t—\t—\t—\t—\t—\t—\t\t\t\t\t\r\nMOVS\t\t\t\t\t\t\t\t\tT\t\t\r\nMOVSX/MOVZX\t\t\t\t\t\t\t\t\t\t\t\r\nMUL\tM\t—\t—\t—\t—\tM\t\t\t\t\t\r\nNEG\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nNOP\t\t\t\t\t\t\t\t\t\t\t\r\nNOT\t\t\t\t\t\t\t\t\t\t\t\r\nOR\t0\tM\tM\t—\tM\t0\t\t\t\t\t\r\nOUT\t\t\t\t\t\t\t\t\t\t\t\r\nOUTS\t\t\t\t\t\t\t\t\tT\t\t\r\nPOP/POPA\t\t\t\t\t\t\t\t\t\t\t\r\nPOPF\tR\tR\tR\tR\tR\tR\tR\tR\tR\tR\t\r\nPUSH/PUSHA/PUSHF\t\t\t\t\t\t\t\t\t\t\t\r\nRCL/RCR 1\tM\t\t\t\t\tTM\t\t\t\t\t\r\nRCL/RCR count\t—\t\t\t\t\tTM\t\t\t\t\t\r\nRDMSR\t\t\t\t\t\t\t\t\t\t\t\r\nRDPMC\t\t\t\t\t\t\t\t\t\t\t\r\nRDTSC\t\t\t\t\t\t\t\t\t\t\t\r\nREP/REPE/REPNE\t\t\t\t\t\t\t\t\t\t\t\r\nRET\t\t\t\t\t\t\t\t\t\t\t\r\nROL/ROR 1\tM\t\t\t\t\tM\t\t\t\t\t\r\nROL/ROR count\t—\t\t\t\t\tM\t\t\t\t\t\r\nRSM\tM\tM\tM\tM\tM\tM\tM\tM\tM\tM\tM\r\nSAHF\t\tR\tR\tR\tR\tR\t\t\t\t\t\r\nSAL/SAR/SHL/SHR 1\tM\tM\tM\t—\tM\tM\t\t\t\t\t\r\nSAL/SAR/SHL/SHR count\t—\tM\tM\t—\tM\tM\t\t\t\t\t\r\nSBB\tM\tM\tM\tM\tM\tTM\t\t\t\t\t\r\nSCAS\tM\tM\tM\tM\tM\tM\t\t\tT\t\t\r\nSETcc\tT\tT\tT\t\tT\tT\t\t\t\t\t\r\nSGDT/SIDT/SLDT/SMSW\t\t\t\t\t\t\t\t\t\t\t\r\nSHLD/SHRD\t—\tM\tM\t—\tM\tM\t\t\t\t\t\r\nSTC\t\t\t\t\t\t1\t\t\t\t\t\r\nSTD\t\t\t\t\t\t\t\t\t1\t\t\r\nSTI\t\t\t\t\t\t\t\t1\t\t\t\r\nSTOS\t\t\t\t\t\t\t\t\tT\t\t\r\nSTR\t\t\t\t\t\t\t\t\t\t\t\r\nSUB\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nTEST\t0\tM\tM\t—\tM\t0\t\t\t\t\t\r\nUD\t\t\t\t\t\t\t\t\t\t\t\r\nVERR/VERRW\t\t\tM\t\t\t\t\t\t\t\t\r\nWAIT\t\t\t\t\t\t\t\t\t\t\t\r\nWBINVD\t\t\t\t\t\t\t\t\t\t\t\r\nWRMSR\t\t\t\t\t\t\t\t\t\t\t\r\nXADD\tM\tM\tM\tM\tM\tM\t\t\t\t\t\r\nXCHG\t\t\t\t\t\t\t\t\t\t\t\r\nXLAT \t\t\t\t\t\t\t\t\t\t\t\r\nXOR\t0\tM\tM\t—\tM\t0\t\t\t\t\t",
    "VexRegisterNameMapping": "VEX.vvvv Dest Register Valid in Legacy/Compatibility 32-bit modes?\r\n    1111B XMM0/YMM0 Valid\r\n    1110B XMM1/YMM1 Valid\r\n    1101B XMM2/YMM2 Valid\r\n    1100B XMM3/YMM3 Valid\r\n    1011B XMM4/YMM4 Valid\r\n    1010B XMM5/YMM5 Valid\r\n    1001B XMM6/YMM6 Valid\r\n    1000B XMM7/YMM7 Valid\r\n    0111B XMM8/YMM8 Invalid\r\n    0110B XMM9/YMM9 Invalid\r\n    0101B XMM10/YMM10 Invalid\r\n    0100B XMM11/YMM11 Invalid\r\n    0011B XMM12/YMM12 Invalid\r\n    0010B XMM13/YMM13 Invalid\r\n    0001B XMM14/YMM14 Invalid\r\n    0000B XMM15/YMM15 Invalid",
    "Vsib32Bit": "r32\r\n(In decimal) Base =\r\n(In binary) Base =\r\nEAX/\r\nR8L\r\n0\r\n000\r\nECX/\r\nR9L\r\n1\r\n001\r\nEDX/\r\nR10L\r\n2\r\n010\r\nEBX/\r\nR11L\r\n3\r\n011\r\nESP/\r\nR12L\r\n4\r\n100\r\nEBP/\r\nR13L1\r\n5\r\n101\r\nESI/\r\nR14L\r\n6\r\n110\r\nEDI/\r\nR15L\r\n7\r\n111\r\nScaled Index SS Index Value of SIB Byte (in Hexadecimal)\r\nVR0/VR8\r\nVR1/VR9\r\nVR2/VR10\r\nVR3/VR11\r\nVR4/VR12\r\nVR5/VR13\r\nVR6/VR14\r\nVR7/VR15\r\n*1 00 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n00\r\n08\r\n10\r\n18\r\n20\r\n28\r\n30\r\n38\r\n01\r\n09\r\n11\r\n19\r\n21\r\n29\r\n31\r\n39\r\n02\r\n0A\r\n12\r\n1A\r\n22\r\n2A\r\n32\r\n3A\r\n03\r\n0B\r\n13\r\n1B\r\n23\r\n2B\r\n33\r\n3B\r\n04\r\n0C\r\n14\r\n1C\r\n24\r\n2C\r\n34\r\n3C\r\n05\r\n0D\r\n15\r\n1D\r\n25\r\n2D\r\n35\r\n3D\r\n06\r\n0E\r\n16\r\n1E\r\n26\r\n2E\r\n36\r\n3E\r\n07\r\n0F\r\n17\r\n1F\r\n27\r\n2F\r\n37\r\n3F\r\nVR0/VR8\r\nVR1/VR9\r\nVR2/VR10\r\nVR3/VR11\r\nVR4/VR12\r\nVR5/VR13\r\nVR6/VR14\r\nVR7/VR15\r\n*2 01 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n40\r\n48\r\n50\r\n58\r\n60\r\n68\r\n70\r\n78\r\n41\r\n49\r\n51\r\n59\r\n61\r\n69\r\n71\r\n79\r\n42\r\n4A\r\n52\r\n5A\r\n62\r\n6A\r\n72\r\n7A\r\n43\r\n4B\r\n53\r\n5B\r\n63\r\n6B\r\n73\r\n7B\r\n44\r\n4C\r\n54\r\n5C\r\n64\r\n6C\r\n74\r\n7C\r\n45\r\n4D\r\n55\r\n5D\r\n65\r\n6D\r\n75\r\n7D\r\n46\r\n4E\r\n56\r\n5E\r\n66\r\n6E\r\n76\r\n7E\r\n47\r\n4F\r\n57\r\n5F\r\n67\r\n6F\r\n77\r\n7F\r\nVR0/VR8\r\nVR1/VR9\r\nVR2/VR10\r\nVR3/VR11\r\nVR4/VR12\r\nVR5/VR13\r\nVR6/VR14\r\nVR7/VR15\r\n*4 10 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\n80\r\n88\r\n90\r\n98\r\nA0\r\nA8\r\nB0\r\nB8\r\n81\r\n89\r\n91\r\n89\r\nA1\r\nA9\r\nB1\r\nB9\r\n82\r\n8A\r\n92\r\n9A\r\nA2\r\nAA\r\nB2\r\nBA\r\n83\r\n8B\r\n93\r\n9B\r\nA3\r\nAB\r\nB3\r\nBB\r\n84\r\n8C\r\n94\r\n9C\r\nA4\r\nAC\r\nB4\r\nBC\r\n85\r\n8D\r\n95\r\n9D\r\nA5\r\nAD\r\nB5\r\nBD\r\n86\r\n8E\r\n96\r\n9E\r\nA6\r\nAE\r\nB6\r\nBE\r\n87\r\n8F\r\n97\r\n9F\r\nA7\r\nAF\r\nB7\r\nBF\r\nVR0/VR8\r\nVR1/VR9\r\nVR2/VR10\r\nVR3/VR11\r\nVR4/VR12\r\nVR5/VR13\r\nVR6/VR14\r\nVR7/VR15\r\n*8 11 000\r\n001\r\n010\r\n011\r\n100\r\n101\r\n110\r\n111\r\nC0\r\nC8\r\nD0\r\nD8\r\nE0\r\nE8\r\nF0\r\nF8\r\nC1\r\nC9\r\nD1\r\nD9\r\nE1\r\nE9\r\nF1\r\nF9\r\nC2\r\nCA\r\nD2\r\nDA\r\nE2\r\nEA\r\nF2\r\nFA\r\nC3\r\nCB\r\nD3\r\nDB\r\nE3\r\nEB\r\nF3\r\nFB\r\nC4\r\nCC\r\nD4\r\nDC\r\nE4\r\nEC\r\nF4\r\nFC\r\nC5\r\nCD\r\nD5\r\nDD\r\nE5\r\nED\r\nF5\r\nFD\r\nC6\r\nCE\r\nD6\r\nDE\r\nE6\r\nEE\r\nF6\r\nFE\r\nC7\r\nCF\r\nD7\r\nDF\r\nE7\r\nEF\r\nF7\r\nFF"
  }
}